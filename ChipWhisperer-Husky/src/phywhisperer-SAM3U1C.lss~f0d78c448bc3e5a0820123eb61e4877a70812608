
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de34  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008de34  0008de34  0001de34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000de8  20000000  0008de3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a7c  20000de8  0008ec24  00020de8  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020de8  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e11  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028d35  00000000  00000000  00020e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000552a  00000000  00000000  00049b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000989e  00000000  00000000  0004f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001258  00000000  00000000  0005895a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001048  00000000  00000000  00059bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001b1ac  00000000  00000000  0005abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00019a4a  00000000  00000000  00075da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005a253  00000000  00000000  0008f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005e00  00000000  00000000  000e9a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 ad 44 08 00 99 54 08 00 99 54 08 00     .@. .D...T...T..
   80010:	99 54 08 00 99 54 08 00 99 54 08 00 00 00 00 00     .T...T...T......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 99 54 08 00     .............T..
   80030:	99 54 08 00 00 00 00 00 99 54 08 00 99 54 08 00     .T.......T...T..
   80040:	99 54 08 00 99 54 08 00 99 54 08 00 99 54 08 00     .T...T...T...T..
   80050:	99 54 08 00 99 54 08 00 99 54 08 00 99 54 08 00     .T...T...T...T..
   80060:	99 54 08 00 99 54 08 00 d9 26 08 00 f1 26 08 00     .T...T...&...&..
   80070:	99 54 08 00 7d 1d 08 00 a1 1d 08 00 c5 1d 08 00     .T..}...........
   80080:	99 54 08 00 99 54 08 00 99 54 08 00 99 54 08 00     .T...T...T...T..
   80090:	99 54 08 00 99 54 08 00 99 54 08 00 99 54 08 00     .T...T...T...T..
   800a0:	99 54 08 00 99 54 08 00 99 54 08 00 99 54 08 00     .T...T...T...T..
   800b0:	99 54 08 00 e5 28 08 00 99 54 08 00                 .T...(...T..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000de8 	.word	0x20000de8
   800d8:	00000000 	.word	0x00000000
   800dc:	0008de3c 	.word	0x0008de3c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000dec 	.word	0x20000dec
   800f8:	0008de3c 	.word	0x0008de3c

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00084a29 	.word	0x00084a29
   80174:	00084a95 	.word	0x00084a95
   80178:	00084b09 	.word	0x00084b09
   8017c:	00084b59 	.word	0x00084b59

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00084a61 	.word	0x00084a61
   801fc:	00084af1 	.word	0x00084af1
   80200:	00084ba5 	.word	0x00084ba5

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00084c15 	.word	0x00084c15
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00084c2d 	.word	0x00084c2d
   80378:	00084c61 	.word	0x00084c61

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00084bd5 	.word	0x00084bd5
   80450:	00084bbd 	.word	0x00084bbd
   80454:	000802a5 	.word	0x000802a5
   80458:	00084b8d 	.word	0x00084b8d
   8045c:	00080311 	.word	0x00080311

00080460 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	2201      	movs	r2, #1
   8046c:	601a      	str	r2, [r3, #0]
}
   8046e:	bf00      	nop
   80470:	370c      	adds	r7, #12
   80472:	46bd      	mov	sp, r7
   80474:	bc80      	pop	{r7}
   80476:	4770      	bx	lr

00080478 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80478:	b480      	push	{r7}
   8047a:	b083      	sub	sp, #12
   8047c:	af00      	add	r7, sp, #0
   8047e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80480:	687b      	ldr	r3, [r7, #4]
   80482:	685b      	ldr	r3, [r3, #4]
   80484:	f043 0201 	orr.w	r2, r3, #1
   80488:	687b      	ldr	r3, [r7, #4]
   8048a:	605a      	str	r2, [r3, #4]
}
   8048c:	bf00      	nop
   8048e:	370c      	adds	r7, #12
   80490:	46bd      	mov	sp, r7
   80492:	bc80      	pop	{r7}
   80494:	4770      	bx	lr
   80496:	0000      	movs	r0, r0

00080498 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80498:	b580      	push	{r7, lr}
   8049a:	b082      	sub	sp, #8
   8049c:	af00      	add	r7, sp, #0
   8049e:	4603      	mov	r3, r0
   804a0:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   804a2:	b672      	cpsid	i
}
   804a4:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804a6:	f3bf 8f5f 	dmb	sy
}
   804aa:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   804ac:	4b05      	ldr	r3, [pc, #20]	; (804c4 <sleepmgr_sleep+0x2c>)
   804ae:	2200      	movs	r2, #0
   804b0:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   804b2:	79fb      	ldrb	r3, [r7, #7]
   804b4:	4618      	mov	r0, r3
   804b6:	4b04      	ldr	r3, [pc, #16]	; (804c8 <sleepmgr_sleep+0x30>)
   804b8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   804ba:	bf00      	nop
   804bc:	3708      	adds	r7, #8
   804be:	46bd      	mov	sp, r7
   804c0:	bd80      	pop	{r7, pc}
   804c2:	bf00      	nop
   804c4:	200003aa 	.word	0x200003aa
   804c8:	00086299 	.word	0x00086299

000804cc <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   804cc:	b480      	push	{r7}
   804ce:	b083      	sub	sp, #12
   804d0:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804d2:	2300      	movs	r3, #0
   804d4:	71fb      	strb	r3, [r7, #7]
   804d6:	e006      	b.n	804e6 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804d8:	79fb      	ldrb	r3, [r7, #7]
   804da:	4a08      	ldr	r2, [pc, #32]	; (804fc <sleepmgr_init+0x30>)
   804dc:	2100      	movs	r1, #0
   804de:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804e0:	79fb      	ldrb	r3, [r7, #7]
   804e2:	3301      	adds	r3, #1
   804e4:	71fb      	strb	r3, [r7, #7]
   804e6:	79fb      	ldrb	r3, [r7, #7]
   804e8:	2b04      	cmp	r3, #4
   804ea:	d9f5      	bls.n	804d8 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804ec:	4b03      	ldr	r3, [pc, #12]	; (804fc <sleepmgr_init+0x30>)
   804ee:	2201      	movs	r2, #1
   804f0:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804f2:	bf00      	nop
   804f4:	370c      	adds	r7, #12
   804f6:	46bd      	mov	sp, r7
   804f8:	bc80      	pop	{r7}
   804fa:	4770      	bx	lr
   804fc:	20001834 	.word	0x20001834

00080500 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80500:	b480      	push	{r7}
   80502:	b083      	sub	sp, #12
   80504:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   80506:	2300      	movs	r3, #0
   80508:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   8050a:	4b09      	ldr	r3, [pc, #36]	; (80530 <sleepmgr_get_sleep_mode+0x30>)
   8050c:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   8050e:	e005      	b.n	8051c <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   80510:	683b      	ldr	r3, [r7, #0]
   80512:	3301      	adds	r3, #1
   80514:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   80516:	79fb      	ldrb	r3, [r7, #7]
   80518:	3301      	adds	r3, #1
   8051a:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   8051c:	683b      	ldr	r3, [r7, #0]
   8051e:	781b      	ldrb	r3, [r3, #0]
   80520:	2b00      	cmp	r3, #0
   80522:	d0f5      	beq.n	80510 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   80524:	79fb      	ldrb	r3, [r7, #7]
}
   80526:	4618      	mov	r0, r3
   80528:	370c      	adds	r7, #12
   8052a:	46bd      	mov	sp, r7
   8052c:	bc80      	pop	{r7}
   8052e:	4770      	bx	lr
   80530:	20001834 	.word	0x20001834

00080534 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   8053a:	4b0b      	ldr	r3, [pc, #44]	; (80568 <sleepmgr_enter_sleep+0x34>)
   8053c:	4798      	blx	r3
   8053e:	4603      	mov	r3, r0
   80540:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   80542:	79fb      	ldrb	r3, [r7, #7]
   80544:	2b00      	cmp	r3, #0
   80546:	d108      	bne.n	8055a <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80548:	4b08      	ldr	r3, [pc, #32]	; (8056c <sleepmgr_enter_sleep+0x38>)
   8054a:	2201      	movs	r2, #1
   8054c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8054e:	f3bf 8f5f 	dmb	sy
}
   80552:	bf00      	nop
  __ASM volatile ("cpsie i");
   80554:	b662      	cpsie	i
}
   80556:	bf00      	nop
		return;
   80558:	e003      	b.n	80562 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   8055a:	79fb      	ldrb	r3, [r7, #7]
   8055c:	4618      	mov	r0, r3
   8055e:	4b04      	ldr	r3, [pc, #16]	; (80570 <sleepmgr_enter_sleep+0x3c>)
   80560:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80562:	3708      	adds	r7, #8
   80564:	46bd      	mov	sp, r7
   80566:	bd80      	pop	{r7, pc}
   80568:	00080501 	.word	0x00080501
   8056c:	200003aa 	.word	0x200003aa
   80570:	00080499 	.word	0x00080499

00080574 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80574:	b480      	push	{r7}
   80576:	b083      	sub	sp, #12
   80578:	af00      	add	r7, sp, #0
   8057a:	6078      	str	r0, [r7, #4]
   8057c:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8057e:	687b      	ldr	r3, [r7, #4]
   80580:	2200      	movs	r2, #0
   80582:	601a      	str	r2, [r3, #0]
}
   80584:	bf00      	nop
   80586:	370c      	adds	r7, #12
   80588:	46bd      	mov	sp, r7
   8058a:	bc80      	pop	{r7}
   8058c:	4770      	bx	lr
   8058e:	0000      	movs	r0, r0

00080590 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80590:	b480      	push	{r7}
   80592:	b083      	sub	sp, #12
   80594:	af00      	add	r7, sp, #0
   80596:	6078      	str	r0, [r7, #4]
   80598:	460b      	mov	r3, r1
   8059a:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	681b      	ldr	r3, [r3, #0]
   805a0:	f023 0207 	bic.w	r2, r3, #7
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   805a8:	78fb      	ldrb	r3, [r7, #3]
   805aa:	2b0a      	cmp	r3, #10
   805ac:	d839      	bhi.n	80622 <genclk_config_set_source+0x92>
   805ae:	a201      	add	r2, pc, #4	; (adr r2, 805b4 <genclk_config_set_source+0x24>)
   805b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   805b4:	000805e1 	.word	0x000805e1
   805b8:	000805e1 	.word	0x000805e1
   805bc:	000805e1 	.word	0x000805e1
   805c0:	000805eb 	.word	0x000805eb
   805c4:	000805eb 	.word	0x000805eb
   805c8:	000805eb 	.word	0x000805eb
   805cc:	000805eb 	.word	0x000805eb
   805d0:	000805eb 	.word	0x000805eb
   805d4:	000805f9 	.word	0x000805f9
   805d8:	00080607 	.word	0x00080607
   805dc:	00080615 	.word	0x00080615
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	681a      	ldr	r2, [r3, #0]
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	e01b      	b.n	80622 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805ea:	687b      	ldr	r3, [r7, #4]
   805ec:	681b      	ldr	r3, [r3, #0]
   805ee:	f043 0201 	orr.w	r2, r3, #1
   805f2:	687b      	ldr	r3, [r7, #4]
   805f4:	601a      	str	r2, [r3, #0]
		break;
   805f6:	e014      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805f8:	687b      	ldr	r3, [r7, #4]
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	f043 0202 	orr.w	r2, r3, #2
   80600:	687b      	ldr	r3, [r7, #4]
   80602:	601a      	str	r2, [r3, #0]
		break;
   80604:	e00d      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	681b      	ldr	r3, [r3, #0]
   8060a:	f043 0203 	orr.w	r2, r3, #3
   8060e:	687b      	ldr	r3, [r7, #4]
   80610:	601a      	str	r2, [r3, #0]
		break;
   80612:	e006      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   80614:	687b      	ldr	r3, [r7, #4]
   80616:	681b      	ldr	r3, [r3, #0]
   80618:	f043 0204 	orr.w	r2, r3, #4
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	601a      	str	r2, [r3, #0]
		break;
   80620:	bf00      	nop
	}
}
   80622:	bf00      	nop
   80624:	370c      	adds	r7, #12
   80626:	46bd      	mov	sp, r7
   80628:	bc80      	pop	{r7}
   8062a:	4770      	bx	lr

0008062c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   8062c:	b480      	push	{r7}
   8062e:	b083      	sub	sp, #12
   80630:	af00      	add	r7, sp, #0
   80632:	6078      	str	r0, [r7, #4]
   80634:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	681b      	ldr	r3, [r3, #0]
   8063a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   80642:	687b      	ldr	r3, [r7, #4]
   80644:	681a      	ldr	r2, [r3, #0]
   80646:	683b      	ldr	r3, [r7, #0]
   80648:	431a      	orrs	r2, r3
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	601a      	str	r2, [r3, #0]
}
   8064e:	bf00      	nop
   80650:	370c      	adds	r7, #12
   80652:	46bd      	mov	sp, r7
   80654:	bc80      	pop	{r7}
   80656:	4770      	bx	lr

00080658 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80658:	b580      	push	{r7, lr}
   8065a:	b082      	sub	sp, #8
   8065c:	af00      	add	r7, sp, #0
   8065e:	6078      	str	r0, [r7, #4]
   80660:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80662:	4907      	ldr	r1, [pc, #28]	; (80680 <genclk_enable+0x28>)
   80664:	687b      	ldr	r3, [r7, #4]
   80666:	681a      	ldr	r2, [r3, #0]
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	3310      	adds	r3, #16
   8066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80670:	6838      	ldr	r0, [r7, #0]
   80672:	4b04      	ldr	r3, [pc, #16]	; (80684 <genclk_enable+0x2c>)
   80674:	4798      	blx	r3
}
   80676:	bf00      	nop
   80678:	3708      	adds	r7, #8
   8067a:	46bd      	mov	sp, r7
   8067c:	bd80      	pop	{r7, pc}
   8067e:	bf00      	nop
   80680:	400e0400 	.word	0x400e0400
   80684:	00084d11 	.word	0x00084d11

00080688 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80688:	b580      	push	{r7, lr}
   8068a:	b082      	sub	sp, #8
   8068c:	af00      	add	r7, sp, #0
   8068e:	4603      	mov	r3, r0
   80690:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80692:	79fb      	ldrb	r3, [r7, #7]
   80694:	2b0a      	cmp	r3, #10
   80696:	f200 80a2 	bhi.w	807de <genclk_enable_source+0x156>
   8069a:	a201      	add	r2, pc, #4	; (adr r2, 806a0 <genclk_enable_source+0x18>)
   8069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   806a0:	000806cd 	.word	0x000806cd
   806a4:	000806ef 	.word	0x000806ef
   806a8:	0008070f 	.word	0x0008070f
   806ac:	0008072f 	.word	0x0008072f
   806b0:	0008074f 	.word	0x0008074f
   806b4:	0008076f 	.word	0x0008076f
   806b8:	0008078f 	.word	0x0008078f
   806bc:	000807af 	.word	0x000807af
   806c0:	000807cf 	.word	0x000807cf
   806c4:	000807d7 	.word	0x000807d7
   806c8:	000807df 	.word	0x000807df
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   806cc:	2000      	movs	r0, #0
   806ce:	4b4e      	ldr	r3, [pc, #312]	; (80808 <genclk_enable_source+0x180>)
   806d0:	4798      	blx	r3
   806d2:	4603      	mov	r3, r0
   806d4:	f083 0301 	eor.w	r3, r3, #1
   806d8:	b2db      	uxtb	r3, r3
   806da:	2b00      	cmp	r3, #0
   806dc:	f000 8081 	beq.w	807e2 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806e0:	2000      	movs	r0, #0
   806e2:	4b4a      	ldr	r3, [pc, #296]	; (8080c <genclk_enable_source+0x184>)
   806e4:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806e6:	2000      	movs	r0, #0
   806e8:	4b49      	ldr	r3, [pc, #292]	; (80810 <genclk_enable_source+0x188>)
   806ea:	4798      	blx	r3
		}
		break;
   806ec:	e079      	b.n	807e2 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806ee:	2001      	movs	r0, #1
   806f0:	4b45      	ldr	r3, [pc, #276]	; (80808 <genclk_enable_source+0x180>)
   806f2:	4798      	blx	r3
   806f4:	4603      	mov	r3, r0
   806f6:	f083 0301 	eor.w	r3, r3, #1
   806fa:	b2db      	uxtb	r3, r3
   806fc:	2b00      	cmp	r3, #0
   806fe:	d072      	beq.n	807e6 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80700:	2001      	movs	r0, #1
   80702:	4b42      	ldr	r3, [pc, #264]	; (8080c <genclk_enable_source+0x184>)
   80704:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   80706:	2001      	movs	r0, #1
   80708:	4b41      	ldr	r3, [pc, #260]	; (80810 <genclk_enable_source+0x188>)
   8070a:	4798      	blx	r3
		}
		break;
   8070c:	e06b      	b.n	807e6 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   8070e:	2002      	movs	r0, #2
   80710:	4b3d      	ldr	r3, [pc, #244]	; (80808 <genclk_enable_source+0x180>)
   80712:	4798      	blx	r3
   80714:	4603      	mov	r3, r0
   80716:	f083 0301 	eor.w	r3, r3, #1
   8071a:	b2db      	uxtb	r3, r3
   8071c:	2b00      	cmp	r3, #0
   8071e:	d064      	beq.n	807ea <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   80720:	2002      	movs	r0, #2
   80722:	4b3a      	ldr	r3, [pc, #232]	; (8080c <genclk_enable_source+0x184>)
   80724:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   80726:	2002      	movs	r0, #2
   80728:	4b39      	ldr	r3, [pc, #228]	; (80810 <genclk_enable_source+0x188>)
   8072a:	4798      	blx	r3
		}
		break;
   8072c:	e05d      	b.n	807ea <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   8072e:	2003      	movs	r0, #3
   80730:	4b35      	ldr	r3, [pc, #212]	; (80808 <genclk_enable_source+0x180>)
   80732:	4798      	blx	r3
   80734:	4603      	mov	r3, r0
   80736:	f083 0301 	eor.w	r3, r3, #1
   8073a:	b2db      	uxtb	r3, r3
   8073c:	2b00      	cmp	r3, #0
   8073e:	d056      	beq.n	807ee <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80740:	2003      	movs	r0, #3
   80742:	4b32      	ldr	r3, [pc, #200]	; (8080c <genclk_enable_source+0x184>)
   80744:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   80746:	2003      	movs	r0, #3
   80748:	4b31      	ldr	r3, [pc, #196]	; (80810 <genclk_enable_source+0x188>)
   8074a:	4798      	blx	r3
		}
		break;
   8074c:	e04f      	b.n	807ee <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   8074e:	2004      	movs	r0, #4
   80750:	4b2d      	ldr	r3, [pc, #180]	; (80808 <genclk_enable_source+0x180>)
   80752:	4798      	blx	r3
   80754:	4603      	mov	r3, r0
   80756:	f083 0301 	eor.w	r3, r3, #1
   8075a:	b2db      	uxtb	r3, r3
   8075c:	2b00      	cmp	r3, #0
   8075e:	d048      	beq.n	807f2 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80760:	2004      	movs	r0, #4
   80762:	4b2a      	ldr	r3, [pc, #168]	; (8080c <genclk_enable_source+0x184>)
   80764:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80766:	2004      	movs	r0, #4
   80768:	4b29      	ldr	r3, [pc, #164]	; (80810 <genclk_enable_source+0x188>)
   8076a:	4798      	blx	r3
		}
		break;
   8076c:	e041      	b.n	807f2 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8076e:	2005      	movs	r0, #5
   80770:	4b25      	ldr	r3, [pc, #148]	; (80808 <genclk_enable_source+0x180>)
   80772:	4798      	blx	r3
   80774:	4603      	mov	r3, r0
   80776:	f083 0301 	eor.w	r3, r3, #1
   8077a:	b2db      	uxtb	r3, r3
   8077c:	2b00      	cmp	r3, #0
   8077e:	d03a      	beq.n	807f6 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80780:	2005      	movs	r0, #5
   80782:	4b22      	ldr	r3, [pc, #136]	; (8080c <genclk_enable_source+0x184>)
   80784:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80786:	2005      	movs	r0, #5
   80788:	4b21      	ldr	r3, [pc, #132]	; (80810 <genclk_enable_source+0x188>)
   8078a:	4798      	blx	r3
		}
		break;
   8078c:	e033      	b.n	807f6 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8078e:	2006      	movs	r0, #6
   80790:	4b1d      	ldr	r3, [pc, #116]	; (80808 <genclk_enable_source+0x180>)
   80792:	4798      	blx	r3
   80794:	4603      	mov	r3, r0
   80796:	f083 0301 	eor.w	r3, r3, #1
   8079a:	b2db      	uxtb	r3, r3
   8079c:	2b00      	cmp	r3, #0
   8079e:	d02c      	beq.n	807fa <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   807a0:	2006      	movs	r0, #6
   807a2:	4b1a      	ldr	r3, [pc, #104]	; (8080c <genclk_enable_source+0x184>)
   807a4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   807a6:	2006      	movs	r0, #6
   807a8:	4b19      	ldr	r3, [pc, #100]	; (80810 <genclk_enable_source+0x188>)
   807aa:	4798      	blx	r3
		}
		break;
   807ac:	e025      	b.n	807fa <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   807ae:	2007      	movs	r0, #7
   807b0:	4b15      	ldr	r3, [pc, #84]	; (80808 <genclk_enable_source+0x180>)
   807b2:	4798      	blx	r3
   807b4:	4603      	mov	r3, r0
   807b6:	f083 0301 	eor.w	r3, r3, #1
   807ba:	b2db      	uxtb	r3, r3
   807bc:	2b00      	cmp	r3, #0
   807be:	d01e      	beq.n	807fe <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   807c0:	2007      	movs	r0, #7
   807c2:	4b12      	ldr	r3, [pc, #72]	; (8080c <genclk_enable_source+0x184>)
   807c4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   807c6:	2007      	movs	r0, #7
   807c8:	4b11      	ldr	r3, [pc, #68]	; (80810 <genclk_enable_source+0x188>)
   807ca:	4798      	blx	r3
		}
		break;
   807cc:	e017      	b.n	807fe <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   807ce:	2000      	movs	r0, #0
   807d0:	4b10      	ldr	r3, [pc, #64]	; (80814 <genclk_enable_source+0x18c>)
   807d2:	4798      	blx	r3
		break;
   807d4:	e014      	b.n	80800 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   807d6:	2001      	movs	r0, #1
   807d8:	4b0e      	ldr	r3, [pc, #56]	; (80814 <genclk_enable_source+0x18c>)
   807da:	4798      	blx	r3
		break;
   807dc:	e010      	b.n	80800 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807de:	bf00      	nop
   807e0:	e00e      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e2:	bf00      	nop
   807e4:	e00c      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e6:	bf00      	nop
   807e8:	e00a      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ea:	bf00      	nop
   807ec:	e008      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ee:	bf00      	nop
   807f0:	e006      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f2:	bf00      	nop
   807f4:	e004      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f6:	bf00      	nop
   807f8:	e002      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fa:	bf00      	nop
   807fc:	e000      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fe:	bf00      	nop
	}
}
   80800:	bf00      	nop
   80802:	3708      	adds	r7, #8
   80804:	46bd      	mov	sp, r7
   80806:	bd80      	pop	{r7, pc}
   80808:	00080181 	.word	0x00080181
   8080c:	000800fd 	.word	0x000800fd
   80810:	00080275 	.word	0x00080275
   80814:	000803b5 	.word	0x000803b5

00080818 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   80818:	b580      	push	{r7, lr}
   8081a:	af00      	add	r7, sp, #0
    board_init();
   8081c:	4b2f      	ldr	r3, [pc, #188]	; (808dc <phywhisperer_setup_pins+0xc4>)
   8081e:	4798      	blx	r3

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   80820:	4b2f      	ldr	r3, [pc, #188]	; (808e0 <phywhisperer_setup_pins+0xc8>)
   80822:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   80824:	2009      	movs	r0, #9
   80826:	4b2f      	ldr	r3, [pc, #188]	; (808e4 <phywhisperer_setup_pins+0xcc>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	492f      	ldr	r1, [pc, #188]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8082c:	2029      	movs	r0, #41	; 0x29
   8082e:	4b2f      	ldr	r3, [pc, #188]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80832:	492d      	ldr	r1, [pc, #180]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   80834:	202a      	movs	r0, #42	; 0x2a
   80836:	4b2d      	ldr	r3, [pc, #180]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8083a:	492b      	ldr	r1, [pc, #172]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8083c:	202b      	movs	r0, #43	; 0x2b
   8083e:	4b2b      	ldr	r3, [pc, #172]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80842:	4929      	ldr	r1, [pc, #164]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   80844:	202c      	movs	r0, #44	; 0x2c
   80846:	4b29      	ldr	r3, [pc, #164]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80848:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8084a:	4927      	ldr	r1, [pc, #156]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8084c:	202d      	movs	r0, #45	; 0x2d
   8084e:	4b27      	ldr	r3, [pc, #156]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80850:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80852:	4925      	ldr	r1, [pc, #148]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   80854:	202e      	movs	r0, #46	; 0x2e
   80856:	4b25      	ldr	r3, [pc, #148]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80858:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8085a:	4923      	ldr	r1, [pc, #140]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8085c:	202f      	movs	r0, #47	; 0x2f
   8085e:	4b23      	ldr	r3, [pc, #140]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80860:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80862:	4921      	ldr	r1, [pc, #132]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   80864:	2030      	movs	r0, #48	; 0x30
   80866:	4b21      	ldr	r3, [pc, #132]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80868:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8086a:	491f      	ldr	r1, [pc, #124]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8086c:	2033      	movs	r0, #51	; 0x33
   8086e:	4b1f      	ldr	r3, [pc, #124]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80870:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80872:	491d      	ldr	r1, [pc, #116]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   80874:	2037      	movs	r0, #55	; 0x37
   80876:	4b1d      	ldr	r3, [pc, #116]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80878:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8087a:	491b      	ldr	r1, [pc, #108]	; (808e8 <phywhisperer_setup_pins+0xd0>)
   8087c:	2034      	movs	r0, #52	; 0x34
   8087e:	4b1b      	ldr	r3, [pc, #108]	; (808ec <phywhisperer_setup_pins+0xd4>)
   80880:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80882:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80886:	f240 11bf 	movw	r1, #447	; 0x1bf
   8088a:	4819      	ldr	r0, [pc, #100]	; (808f0 <phywhisperer_setup_pins+0xd8>)
   8088c:	4b19      	ldr	r3, [pc, #100]	; (808f4 <phywhisperer_setup_pins+0xdc>)
   8088e:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80890:	f240 11bf 	movw	r1, #447	; 0x1bf
   80894:	4816      	ldr	r0, [pc, #88]	; (808f0 <phywhisperer_setup_pins+0xd8>)
   80896:	4b18      	ldr	r3, [pc, #96]	; (808f8 <phywhisperer_setup_pins+0xe0>)
   80898:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
*/
    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   8089a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8089e:	2026      	movs	r0, #38	; 0x26
   808a0:	4b12      	ldr	r3, [pc, #72]	; (808ec <phywhisperer_setup_pins+0xd4>)
   808a2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   808a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808a8:	2031      	movs	r0, #49	; 0x31
   808aa:	4b10      	ldr	r3, [pc, #64]	; (808ec <phywhisperer_setup_pins+0xd4>)
   808ac:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   808ae:	4a13      	ldr	r2, [pc, #76]	; (808fc <phywhisperer_setup_pins+0xe4>)
   808b0:	2100      	movs	r1, #0
   808b2:	4813      	ldr	r0, [pc, #76]	; (80900 <phywhisperer_setup_pins+0xe8>)
   808b4:	4b13      	ldr	r3, [pc, #76]	; (80904 <phywhisperer_setup_pins+0xec>)
   808b6:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   808b8:	4a13      	ldr	r2, [pc, #76]	; (80908 <phywhisperer_setup_pins+0xf0>)
   808ba:	2100      	movs	r1, #0
   808bc:	4810      	ldr	r0, [pc, #64]	; (80900 <phywhisperer_setup_pins+0xe8>)
   808be:	4b13      	ldr	r3, [pc, #76]	; (8090c <phywhisperer_setup_pins+0xf4>)
   808c0:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   808c2:	4a13      	ldr	r2, [pc, #76]	; (80910 <phywhisperer_setup_pins+0xf8>)
   808c4:	2100      	movs	r1, #0
   808c6:	480e      	ldr	r0, [pc, #56]	; (80900 <phywhisperer_setup_pins+0xe8>)
   808c8:	4b12      	ldr	r3, [pc, #72]	; (80914 <phywhisperer_setup_pins+0xfc>)
   808ca:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   808cc:	2203      	movs	r2, #3
   808ce:	2100      	movs	r1, #0
   808d0:	480b      	ldr	r0, [pc, #44]	; (80900 <phywhisperer_setup_pins+0xe8>)
   808d2:	4b11      	ldr	r3, [pc, #68]	; (80918 <phywhisperer_setup_pins+0x100>)
   808d4:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   808d6:	bf00      	nop
   808d8:	bd80      	pop	{r7, pc}
   808da:	bf00      	nop
   808dc:	0008686d 	.word	0x0008686d
   808e0:	000815ad 	.word	0x000815ad
   808e4:	00084c79 	.word	0x00084c79
   808e8:	08000001 	.word	0x08000001
   808ec:	00085269 	.word	0x00085269
   808f0:	400e0e00 	.word	0x400e0e00
   808f4:	00085399 	.word	0x00085399
   808f8:	00085175 	.word	0x00085175
   808fc:	01010100 	.word	0x01010100
   80900:	400e0000 	.word	0x400e0000
   80904:	0008257d 	.word	0x0008257d
   80908:	01030101 	.word	0x01030101
   8090c:	000825a7 	.word	0x000825a7
   80910:	00040002 	.word	0x00040002
   80914:	000825d1 	.word	0x000825d1
   80918:	000825fb 	.word	0x000825fb

0008091c <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   8091c:	b580      	push	{r7, lr}
   8091e:	b086      	sub	sp, #24
   80920:	af00      	add	r7, sp, #0
   80922:	60f8      	str	r0, [r7, #12]
   80924:	460b      	mov	r3, r1
   80926:	607a      	str	r2, [r7, #4]
   80928:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   8092a:	f107 0314 	add.w	r3, r7, #20
   8092e:	68f9      	ldr	r1, [r7, #12]
   80930:	4618      	mov	r0, r3
   80932:	4b0e      	ldr	r3, [pc, #56]	; (8096c <genclk_enable_config+0x50>)
   80934:	4798      	blx	r3
    genclk_enable_source(src);
   80936:	7afb      	ldrb	r3, [r7, #11]
   80938:	4618      	mov	r0, r3
   8093a:	4b0d      	ldr	r3, [pc, #52]	; (80970 <genclk_enable_config+0x54>)
   8093c:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   8093e:	7afa      	ldrb	r2, [r7, #11]
   80940:	f107 0314 	add.w	r3, r7, #20
   80944:	4611      	mov	r1, r2
   80946:	4618      	mov	r0, r3
   80948:	4b0a      	ldr	r3, [pc, #40]	; (80974 <genclk_enable_config+0x58>)
   8094a:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   8094c:	f107 0314 	add.w	r3, r7, #20
   80950:	6879      	ldr	r1, [r7, #4]
   80952:	4618      	mov	r0, r3
   80954:	4b08      	ldr	r3, [pc, #32]	; (80978 <genclk_enable_config+0x5c>)
   80956:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80958:	f107 0314 	add.w	r3, r7, #20
   8095c:	68f9      	ldr	r1, [r7, #12]
   8095e:	4618      	mov	r0, r3
   80960:	4b06      	ldr	r3, [pc, #24]	; (8097c <genclk_enable_config+0x60>)
   80962:	4798      	blx	r3
}
   80964:	bf00      	nop
   80966:	3718      	adds	r7, #24
   80968:	46bd      	mov	sp, r7
   8096a:	bd80      	pop	{r7, pc}
   8096c:	00080575 	.word	0x00080575
   80970:	00080689 	.word	0x00080689
   80974:	00080591 	.word	0x00080591
   80978:	0008062d 	.word	0x0008062d
   8097c:	00080659 	.word	0x00080659

00080980 <enable_spi>:

#define ADC_SPI_CS PIO_PA3_IDX
#define ADC_RESET PIO_PA4_IDX

void enable_spi(void)
{
   80980:	b580      	push	{r7, lr}
   80982:	b084      	sub	sp, #16
   80984:	af00      	add	r7, sp, #0
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   80986:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8098a:	200d      	movs	r0, #13
   8098c:	4b2d      	ldr	r3, [pc, #180]	; (80a44 <enable_spi+0xc4>)
   8098e:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80990:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80994:	200e      	movs	r0, #14
   80996:	4b2b      	ldr	r3, [pc, #172]	; (80a44 <enable_spi+0xc4>)
   80998:	4798      	blx	r3
    gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8099a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8099e:	200f      	movs	r0, #15
   809a0:	4b28      	ldr	r3, [pc, #160]	; (80a44 <enable_spi+0xc4>)
   809a2:	4798      	blx	r3
    gpio_configure_pin(ADC_SPI_CS, SPI_CS_FLAGS);
   809a4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809a8:	2003      	movs	r0, #3
   809aa:	4b26      	ldr	r3, [pc, #152]	; (80a44 <enable_spi+0xc4>)
   809ac:	4798      	blx	r3
    gpio_set_pin_high(ADC_SPI_CS);
   809ae:	2003      	movs	r0, #3
   809b0:	4b25      	ldr	r3, [pc, #148]	; (80a48 <enable_spi+0xc8>)
   809b2:	4798      	blx	r3
    gpio_configure_pin(ADC_RESET, SPI_CS_FLAGS);
   809b4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809b8:	2004      	movs	r0, #4
   809ba:	4b22      	ldr	r3, [pc, #136]	; (80a44 <enable_spi+0xc4>)
   809bc:	4798      	blx	r3
    // gpio_set_pin_low(ADC_RESET);
    gpio_set_pin_high(ADC_RESET);
   809be:	2004      	movs	r0, #4
   809c0:	4b21      	ldr	r3, [pc, #132]	; (80a48 <enable_spi+0xc8>)
   809c2:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   809c4:	2300      	movs	r3, #0
   809c6:	60bb      	str	r3, [r7, #8]
   809c8:	e002      	b.n	809d0 <enable_spi+0x50>
   809ca:	68bb      	ldr	r3, [r7, #8]
   809cc:	3301      	adds	r3, #1
   809ce:	60bb      	str	r3, [r7, #8]
   809d0:	68bb      	ldr	r3, [r7, #8]
   809d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   809d6:	d3f8      	bcc.n	809ca <enable_spi+0x4a>
    gpio_set_pin_low(ADC_RESET);
   809d8:	2004      	movs	r0, #4
   809da:	4b1c      	ldr	r3, [pc, #112]	; (80a4c <enable_spi+0xcc>)
   809dc:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   809de:	2300      	movs	r3, #0
   809e0:	607b      	str	r3, [r7, #4]
   809e2:	e002      	b.n	809ea <enable_spi+0x6a>
   809e4:	687b      	ldr	r3, [r7, #4]
   809e6:	3301      	adds	r3, #1
   809e8:	607b      	str	r3, [r7, #4]
   809ea:	687b      	ldr	r3, [r7, #4]
   809ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   809f0:	d3f8      	bcc.n	809e4 <enable_spi+0x64>

    uint32_t baud;
    spi_enable_clock(SPI);
   809f2:	4817      	ldr	r0, [pc, #92]	; (80a50 <enable_spi+0xd0>)
   809f4:	4b17      	ldr	r3, [pc, #92]	; (80a54 <enable_spi+0xd4>)
   809f6:	4798      	blx	r3
    int16_t div = spi_calc_baudrate_div(960E3, 96E6); //960kHz
   809f8:	4917      	ldr	r1, [pc, #92]	; (80a58 <enable_spi+0xd8>)
   809fa:	4818      	ldr	r0, [pc, #96]	; (80a5c <enable_spi+0xdc>)
   809fc:	4b18      	ldr	r3, [pc, #96]	; (80a60 <enable_spi+0xe0>)
   809fe:	4798      	blx	r3
   80a00:	4603      	mov	r3, r0
   80a02:	81fb      	strh	r3, [r7, #14]
    spi_set_baudrate_div(SPI, 0, div);
   80a04:	89fb      	ldrh	r3, [r7, #14]
   80a06:	b2db      	uxtb	r3, r3
   80a08:	461a      	mov	r2, r3
   80a0a:	2100      	movs	r1, #0
   80a0c:	4810      	ldr	r0, [pc, #64]	; (80a50 <enable_spi+0xd0>)
   80a0e:	4b15      	ldr	r3, [pc, #84]	; (80a64 <enable_spi+0xe4>)
   80a10:	4798      	blx	r3

    spi_set_master_mode(SPI);
   80a12:	480f      	ldr	r0, [pc, #60]	; (80a50 <enable_spi+0xd0>)
   80a14:	4b14      	ldr	r3, [pc, #80]	; (80a68 <enable_spi+0xe8>)
   80a16:	4798      	blx	r3
    spi_set_clock_polarity(SPI, 0, 0);
   80a18:	2200      	movs	r2, #0
   80a1a:	2100      	movs	r1, #0
   80a1c:	480c      	ldr	r0, [pc, #48]	; (80a50 <enable_spi+0xd0>)
   80a1e:	4b13      	ldr	r3, [pc, #76]	; (80a6c <enable_spi+0xec>)
   80a20:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI, 0, 8);
   80a22:	2208      	movs	r2, #8
   80a24:	2100      	movs	r1, #0
   80a26:	480a      	ldr	r0, [pc, #40]	; (80a50 <enable_spi+0xd0>)
   80a28:	4b11      	ldr	r3, [pc, #68]	; (80a70 <enable_spi+0xf0>)
   80a2a:	4798      	blx	r3
    spi_set_clock_phase(SPI, 0, 1);
   80a2c:	2201      	movs	r2, #1
   80a2e:	2100      	movs	r1, #0
   80a30:	4807      	ldr	r0, [pc, #28]	; (80a50 <enable_spi+0xd0>)
   80a32:	4b10      	ldr	r3, [pc, #64]	; (80a74 <enable_spi+0xf4>)
   80a34:	4798      	blx	r3

    spi_enable(SPI);
   80a36:	4806      	ldr	r0, [pc, #24]	; (80a50 <enable_spi+0xd0>)
   80a38:	4b0f      	ldr	r3, [pc, #60]	; (80a78 <enable_spi+0xf8>)
   80a3a:	4798      	blx	r3
}
   80a3c:	bf00      	nop
   80a3e:	3710      	adds	r7, #16
   80a40:	46bd      	mov	sp, r7
   80a42:	bd80      	pop	{r7, pc}
   80a44:	00085269 	.word	0x00085269
   80a48:	00085209 	.word	0x00085209
   80a4c:	00085239 	.word	0x00085239
   80a50:	40008000 	.word	0x40008000
   80a54:	000823f5 	.word	0x000823f5
   80a58:	05b8d800 	.word	0x05b8d800
   80a5c:	000ea600 	.word	0x000ea600
   80a60:	000824f5 	.word	0x000824f5
   80a64:	0008252f 	.word	0x0008252f
   80a68:	00080479 	.word	0x00080479
   80a6c:	00082411 	.word	0x00082411
   80a70:	000824ad 	.word	0x000824ad
   80a74:	0008245f 	.word	0x0008245f
   80a78:	00080461 	.word	0x00080461

00080a7c <main>:


int main(void)
{
   80a7c:	b580      	push	{r7, lr}
   80a7e:	b086      	sub	sp, #24
   80a80:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80a82:	1d3b      	adds	r3, r7, #4
   80a84:	2110      	movs	r1, #16
   80a86:	4618      	mov	r0, r3
   80a88:	4b1c      	ldr	r3, [pc, #112]	; (80afc <main+0x80>)
   80a8a:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80a8c:	4b1c      	ldr	r3, [pc, #112]	; (80b00 <main+0x84>)
   80a8e:	2201      	movs	r2, #1
   80a90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80a92:	f3bf 8f5f 	dmb	sy
}
   80a96:	bf00      	nop
  __ASM volatile ("cpsie i");
   80a98:	b662      	cpsie	i
}
   80a9a:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80a9c:	4b19      	ldr	r3, [pc, #100]	; (80b04 <main+0x88>)
   80a9e:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80aa0:	4b19      	ldr	r3, [pc, #100]	; (80b08 <main+0x8c>)
   80aa2:	4798      	blx	r3
    phywhisperer_setup_pins();
   80aa4:	4b19      	ldr	r3, [pc, #100]	; (80b0c <main+0x90>)
   80aa6:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80aa8:	2300      	movs	r3, #0
   80aaa:	617b      	str	r3, [r7, #20]
   80aac:	e011      	b.n	80ad2 <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80aae:	697b      	ldr	r3, [r7, #20]
   80ab0:	00db      	lsls	r3, r3, #3
   80ab2:	4a17      	ldr	r2, [pc, #92]	; (80b10 <main+0x94>)
   80ab4:	1898      	adds	r0, r3, r2
   80ab6:	697b      	ldr	r3, [r7, #20]
   80ab8:	009b      	lsls	r3, r3, #2
   80aba:	f107 0218 	add.w	r2, r7, #24
   80abe:	4413      	add	r3, r2
   80ac0:	f853 3c14 	ldr.w	r3, [r3, #-20]
   80ac4:	461a      	mov	r2, r3
   80ac6:	4913      	ldr	r1, [pc, #76]	; (80b14 <main+0x98>)
   80ac8:	4b13      	ldr	r3, [pc, #76]	; (80b18 <main+0x9c>)
   80aca:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80acc:	697b      	ldr	r3, [r7, #20]
   80ace:	3301      	adds	r3, #1
   80ad0:	617b      	str	r3, [r7, #20]
   80ad2:	697b      	ldr	r3, [r7, #20]
   80ad4:	2b03      	cmp	r3, #3
   80ad6:	d9ea      	bls.n	80aae <main+0x32>
	}
	usb_serial_number[32] = 0;
   80ad8:	4b0d      	ldr	r3, [pc, #52]	; (80b10 <main+0x94>)
   80ada:	2200      	movs	r2, #0
   80adc:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80ae0:	2200      	movs	r2, #0
   80ae2:	210a      	movs	r1, #10
   80ae4:	2001      	movs	r0, #1
   80ae6:	4b0d      	ldr	r3, [pc, #52]	; (80b1c <main+0xa0>)
   80ae8:	4798      	blx	r3
    enable_spi();
   80aea:	4b0d      	ldr	r3, [pc, #52]	; (80b20 <main+0xa4>)
   80aec:	4798      	blx	r3
    udc_start();
   80aee:	4b0d      	ldr	r3, [pc, #52]	; (80b24 <main+0xa8>)
   80af0:	4798      	blx	r3

    ui_init();
   80af2:	4b0d      	ldr	r3, [pc, #52]	; (80b28 <main+0xac>)
   80af4:	4798      	blx	r3
    while(1) {
        sleepmgr_enter_sleep();
   80af6:	4b0d      	ldr	r3, [pc, #52]	; (80b2c <main+0xb0>)
   80af8:	4798      	blx	r3
   80afa:	e7fc      	b.n	80af6 <main+0x7a>
   80afc:	00081f39 	.word	0x00081f39
   80b00:	200003aa 	.word	0x200003aa
   80b04:	000804cd 	.word	0x000804cd
   80b08:	0008489d 	.word	0x0008489d
   80b0c:	00080819 	.word	0x00080819
   80b10:	2000025c 	.word	0x2000025c
   80b14:	0008d988 	.word	0x0008d988
   80b18:	000871d9 	.word	0x000871d9
   80b1c:	0008091d 	.word	0x0008091d
   80b20:	00080981 	.word	0x00080981
   80b24:	0008571d 	.word	0x0008571d
   80b28:	00086c2d 	.word	0x00086c2d
   80b2c:	00080535 	.word	0x00080535

00080b30 <osc_enable>:
{
   80b30:	b580      	push	{r7, lr}
   80b32:	b082      	sub	sp, #8
   80b34:	af00      	add	r7, sp, #0
   80b36:	6078      	str	r0, [r7, #4]
   80b38:	687b      	ldr	r3, [r7, #4]
   80b3a:	2b07      	cmp	r3, #7
   80b3c:	d82e      	bhi.n	80b9c <osc_enable+0x6c>
   80b3e:	a201      	add	r2, pc, #4	; (adr r2, 80b44 <osc_enable+0x14>)
   80b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b44:	00080b9b 	.word	0x00080b9b
   80b48:	00080b65 	.word	0x00080b65
   80b4c:	00080b6d 	.word	0x00080b6d
   80b50:	00080b75 	.word	0x00080b75
   80b54:	00080b7d 	.word	0x00080b7d
   80b58:	00080b85 	.word	0x00080b85
   80b5c:	00080b8d 	.word	0x00080b8d
   80b60:	00080b95 	.word	0x00080b95
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80b64:	2000      	movs	r0, #0
   80b66:	4b0f      	ldr	r3, [pc, #60]	; (80ba4 <osc_enable+0x74>)
   80b68:	4798      	blx	r3
		break;
   80b6a:	e017      	b.n	80b9c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80b6c:	2001      	movs	r0, #1
   80b6e:	4b0d      	ldr	r3, [pc, #52]	; (80ba4 <osc_enable+0x74>)
   80b70:	4798      	blx	r3
		break;
   80b72:	e013      	b.n	80b9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80b74:	2000      	movs	r0, #0
   80b76:	4b0c      	ldr	r3, [pc, #48]	; (80ba8 <osc_enable+0x78>)
   80b78:	4798      	blx	r3
		break;
   80b7a:	e00f      	b.n	80b9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80b7c:	2010      	movs	r0, #16
   80b7e:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <osc_enable+0x78>)
   80b80:	4798      	blx	r3
		break;
   80b82:	e00b      	b.n	80b9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80b84:	2020      	movs	r0, #32
   80b86:	4b08      	ldr	r3, [pc, #32]	; (80ba8 <osc_enable+0x78>)
   80b88:	4798      	blx	r3
		break;
   80b8a:	e007      	b.n	80b9c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80b8c:	203e      	movs	r0, #62	; 0x3e
   80b8e:	4b07      	ldr	r3, [pc, #28]	; (80bac <osc_enable+0x7c>)
   80b90:	4798      	blx	r3
		break;
   80b92:	e003      	b.n	80b9c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80b94:	4b06      	ldr	r3, [pc, #24]	; (80bb0 <osc_enable+0x80>)
   80b96:	4798      	blx	r3
		break;
   80b98:	e000      	b.n	80b9c <osc_enable+0x6c>
		break;
   80b9a:	bf00      	nop
}
   80b9c:	bf00      	nop
   80b9e:	3708      	adds	r7, #8
   80ba0:	46bd      	mov	sp, r7
   80ba2:	bd80      	pop	{r7, pc}
   80ba4:	00084a29 	.word	0x00084a29
   80ba8:	00084a95 	.word	0x00084a95
   80bac:	00084b09 	.word	0x00084b09
   80bb0:	00084b59 	.word	0x00084b59

00080bb4 <osc_is_ready>:
{
   80bb4:	b580      	push	{r7, lr}
   80bb6:	b082      	sub	sp, #8
   80bb8:	af00      	add	r7, sp, #0
   80bba:	6078      	str	r0, [r7, #4]
   80bbc:	687b      	ldr	r3, [r7, #4]
   80bbe:	2b07      	cmp	r3, #7
   80bc0:	d82f      	bhi.n	80c22 <osc_is_ready+0x6e>
   80bc2:	a201      	add	r2, pc, #4	; (adr r2, 80bc8 <osc_is_ready+0x14>)
   80bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80bc8:	00080be9 	.word	0x00080be9
   80bcc:	00080bed 	.word	0x00080bed
   80bd0:	00080bed 	.word	0x00080bed
   80bd4:	00080bff 	.word	0x00080bff
   80bd8:	00080bff 	.word	0x00080bff
   80bdc:	00080bff 	.word	0x00080bff
   80be0:	00080c11 	.word	0x00080c11
   80be4:	00080c11 	.word	0x00080c11
		return 1;
   80be8:	2301      	movs	r3, #1
   80bea:	e01b      	b.n	80c24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80bec:	4b0f      	ldr	r3, [pc, #60]	; (80c2c <osc_is_ready+0x78>)
   80bee:	4798      	blx	r3
   80bf0:	4603      	mov	r3, r0
   80bf2:	2b00      	cmp	r3, #0
   80bf4:	bf14      	ite	ne
   80bf6:	2301      	movne	r3, #1
   80bf8:	2300      	moveq	r3, #0
   80bfa:	b2db      	uxtb	r3, r3
   80bfc:	e012      	b.n	80c24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80bfe:	4b0c      	ldr	r3, [pc, #48]	; (80c30 <osc_is_ready+0x7c>)
   80c00:	4798      	blx	r3
   80c02:	4603      	mov	r3, r0
   80c04:	2b00      	cmp	r3, #0
   80c06:	bf14      	ite	ne
   80c08:	2301      	movne	r3, #1
   80c0a:	2300      	moveq	r3, #0
   80c0c:	b2db      	uxtb	r3, r3
   80c0e:	e009      	b.n	80c24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80c10:	4b08      	ldr	r3, [pc, #32]	; (80c34 <osc_is_ready+0x80>)
   80c12:	4798      	blx	r3
   80c14:	4603      	mov	r3, r0
   80c16:	2b00      	cmp	r3, #0
   80c18:	bf14      	ite	ne
   80c1a:	2301      	movne	r3, #1
   80c1c:	2300      	moveq	r3, #0
   80c1e:	b2db      	uxtb	r3, r3
   80c20:	e000      	b.n	80c24 <osc_is_ready+0x70>
	return 0;
   80c22:	2300      	movs	r3, #0
}
   80c24:	4618      	mov	r0, r3
   80c26:	3708      	adds	r7, #8
   80c28:	46bd      	mov	sp, r7
   80c2a:	bd80      	pop	{r7, pc}
   80c2c:	00084a61 	.word	0x00084a61
   80c30:	00084af1 	.word	0x00084af1
   80c34:	00084ba5 	.word	0x00084ba5

00080c38 <osc_wait_ready>:
{
   80c38:	b580      	push	{r7, lr}
   80c3a:	b082      	sub	sp, #8
   80c3c:	af00      	add	r7, sp, #0
   80c3e:	4603      	mov	r3, r0
   80c40:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80c42:	bf00      	nop
   80c44:	79fb      	ldrb	r3, [r7, #7]
   80c46:	4618      	mov	r0, r3
   80c48:	4b06      	ldr	r3, [pc, #24]	; (80c64 <osc_wait_ready+0x2c>)
   80c4a:	4798      	blx	r3
   80c4c:	4603      	mov	r3, r0
   80c4e:	f083 0301 	eor.w	r3, r3, #1
   80c52:	b2db      	uxtb	r3, r3
   80c54:	2b00      	cmp	r3, #0
   80c56:	d1f5      	bne.n	80c44 <osc_wait_ready+0xc>
}
   80c58:	bf00      	nop
   80c5a:	bf00      	nop
   80c5c:	3708      	adds	r7, #8
   80c5e:	46bd      	mov	sp, r7
   80c60:	bd80      	pop	{r7, pc}
   80c62:	bf00      	nop
   80c64:	00080bb5 	.word	0x00080bb5

00080c68 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80c68:	b580      	push	{r7, lr}
   80c6a:	af00      	add	r7, sp, #0
	udd_detach();
   80c6c:	4b01      	ldr	r3, [pc, #4]	; (80c74 <udc_detach+0xc>)
   80c6e:	4798      	blx	r3
}
   80c70:	bf00      	nop
   80c72:	bd80      	pop	{r7, pc}
   80c74:	00082bfd 	.word	0x00082bfd

00080c78 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80c78:	b580      	push	{r7, lr}
   80c7a:	af00      	add	r7, sp, #0
	active = false;
   80c7c:	4b03      	ldr	r3, [pc, #12]	; (80c8c <main_suspend_action+0x14>)
   80c7e:	2200      	movs	r2, #0
   80c80:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80c82:	4b03      	ldr	r3, [pc, #12]	; (80c90 <main_suspend_action+0x18>)
   80c84:	4798      	blx	r3
}
   80c86:	bf00      	nop
   80c88:	bd80      	pop	{r7, pc}
   80c8a:	bf00      	nop
   80c8c:	20000e04 	.word	0x20000e04
   80c90:	00086c45 	.word	0x00086c45

00080c94 <main_resume_action>:

void main_resume_action(void)
{
   80c94:	b580      	push	{r7, lr}
   80c96:	af00      	add	r7, sp, #0
    ui_wakeup();
   80c98:	4b01      	ldr	r3, [pc, #4]	; (80ca0 <main_resume_action+0xc>)
   80c9a:	4798      	blx	r3
}
   80c9c:	bf00      	nop
   80c9e:	bd80      	pop	{r7, pc}
   80ca0:	00086c5d 	.word	0x00086c5d

00080ca4 <main_sof_action>:

void main_sof_action(void)
{
   80ca4:	b580      	push	{r7, lr}
   80ca6:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80ca8:	4b08      	ldr	r3, [pc, #32]	; (80ccc <main_sof_action+0x28>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	b2db      	uxtb	r3, r3
   80cae:	f083 0301 	eor.w	r3, r3, #1
   80cb2:	b2db      	uxtb	r3, r3
   80cb4:	2b00      	cmp	r3, #0
   80cb6:	d106      	bne.n	80cc6 <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80cb8:	4b05      	ldr	r3, [pc, #20]	; (80cd0 <main_sof_action+0x2c>)
   80cba:	4798      	blx	r3
   80cbc:	4603      	mov	r3, r0
   80cbe:	4618      	mov	r0, r3
   80cc0:	4b04      	ldr	r3, [pc, #16]	; (80cd4 <main_sof_action+0x30>)
   80cc2:	4798      	blx	r3
   80cc4:	e000      	b.n	80cc8 <main_sof_action+0x24>
        return;
   80cc6:	bf00      	nop
}
   80cc8:	bd80      	pop	{r7, pc}
   80cca:	bf00      	nop
   80ccc:	2000027d 	.word	0x2000027d
   80cd0:	00082cc5 	.word	0x00082cc5
   80cd4:	00086c71 	.word	0x00086c71

00080cd8 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80cd8:	b580      	push	{r7, lr}
   80cda:	af00      	add	r7, sp, #0
    active = true;
   80cdc:	4b07      	ldr	r3, [pc, #28]	; (80cfc <main_vendor_enable+0x24>)
   80cde:	2201      	movs	r2, #1
   80ce0:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80ce2:	4b07      	ldr	r3, [pc, #28]	; (80d00 <main_vendor_enable+0x28>)
   80ce4:	2201      	movs	r2, #1
   80ce6:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80ce8:	4a06      	ldr	r2, [pc, #24]	; (80d04 <main_vendor_enable+0x2c>)
   80cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80cee:	4806      	ldr	r0, [pc, #24]	; (80d08 <main_vendor_enable+0x30>)
   80cf0:	4b06      	ldr	r3, [pc, #24]	; (80d0c <main_vendor_enable+0x34>)
   80cf2:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80cf4:	2301      	movs	r3, #1
}
   80cf6:	4618      	mov	r0, r3
   80cf8:	bd80      	pop	{r7, pc}
   80cfa:	bf00      	nop
   80cfc:	20000e04 	.word	0x20000e04
   80d00:	2000027d 	.word	0x2000027d
   80d04:	0008137d 	.word	0x0008137d
   80d08:	20000e08 	.word	0x20000e08
   80d0c:	00084ead 	.word	0x00084ead

00080d10 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80d10:	b480      	push	{r7}
   80d12:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80d14:	4b03      	ldr	r3, [pc, #12]	; (80d24 <main_vendor_disable+0x14>)
   80d16:	2200      	movs	r2, #0
   80d18:	701a      	strb	r2, [r3, #0]
}
   80d1a:	bf00      	nop
   80d1c:	46bd      	mov	sp, r7
   80d1e:	bc80      	pop	{r7}
   80d20:	4770      	bx	lr
   80d22:	bf00      	nop
   80d24:	2000027d 	.word	0x2000027d

00080d28 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80d28:	b580      	push	{r7, lr}
   80d2a:	b082      	sub	sp, #8
   80d2c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d2e:	4b0f      	ldr	r3, [pc, #60]	; (80d6c <ctrl_readmem_bulk+0x44>)
   80d30:	681b      	ldr	r3, [r3, #0]
   80d32:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d34:	4b0d      	ldr	r3, [pc, #52]	; (80d6c <ctrl_readmem_bulk+0x44>)
   80d36:	685b      	ldr	r3, [r3, #4]
   80d38:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80d3a:	4b0d      	ldr	r3, [pc, #52]	; (80d70 <ctrl_readmem_bulk+0x48>)
   80d3c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80d3e:	bf00      	nop
   80d40:	2002      	movs	r0, #2
   80d42:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <ctrl_readmem_bulk+0x4c>)
   80d44:	4798      	blx	r3
   80d46:	4603      	mov	r3, r0
   80d48:	2b00      	cmp	r3, #0
   80d4a:	d0f9      	beq.n	80d40 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80d4c:	6838      	ldr	r0, [r7, #0]
   80d4e:	4b0a      	ldr	r3, [pc, #40]	; (80d78 <ctrl_readmem_bulk+0x50>)
   80d50:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80d52:	4a0a      	ldr	r2, [pc, #40]	; (80d7c <ctrl_readmem_bulk+0x54>)
   80d54:	6879      	ldr	r1, [r7, #4]
   80d56:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80d5a:	4b09      	ldr	r3, [pc, #36]	; (80d80 <ctrl_readmem_bulk+0x58>)
   80d5c:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80d5e:	4b04      	ldr	r3, [pc, #16]	; (80d70 <ctrl_readmem_bulk+0x48>)
   80d60:	4798      	blx	r3
}
   80d62:	bf00      	nop
   80d64:	3708      	adds	r7, #8
   80d66:	46bd      	mov	sp, r7
   80d68:	bd80      	pop	{r7, pc}
   80d6a:	bf00      	nop
   80d6c:	20001208 	.word	0x20001208
   80d70:	0008147d 	.word	0x0008147d
   80d74:	0008143d 	.word	0x0008143d
   80d78:	000814ad 	.word	0x000814ad
   80d7c:	00081345 	.word	0x00081345
   80d80:	00084e81 	.word	0x00084e81

00080d84 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80d84:	b580      	push	{r7, lr}
   80d86:	b082      	sub	sp, #8
   80d88:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d8a:	4b0f      	ldr	r3, [pc, #60]	; (80dc8 <ctrl_readmem_ctrl+0x44>)
   80d8c:	681b      	ldr	r3, [r3, #0]
   80d8e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d90:	4b0d      	ldr	r3, [pc, #52]	; (80dc8 <ctrl_readmem_ctrl+0x44>)
   80d92:	685b      	ldr	r3, [r3, #4]
   80d94:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80d96:	4b0d      	ldr	r3, [pc, #52]	; (80dcc <ctrl_readmem_ctrl+0x48>)
   80d98:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80d9a:	bf00      	nop
   80d9c:	2005      	movs	r0, #5
   80d9e:	4b0c      	ldr	r3, [pc, #48]	; (80dd0 <ctrl_readmem_ctrl+0x4c>)
   80da0:	4798      	blx	r3
   80da2:	4603      	mov	r3, r0
   80da4:	2b00      	cmp	r3, #0
   80da6:	d0f9      	beq.n	80d9c <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80da8:	6838      	ldr	r0, [r7, #0]
   80daa:	4b0a      	ldr	r3, [pc, #40]	; (80dd4 <ctrl_readmem_ctrl+0x50>)
   80dac:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80dae:	4b0a      	ldr	r3, [pc, #40]	; (80dd8 <ctrl_readmem_ctrl+0x54>)
   80db0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80db4:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80db6:	4a09      	ldr	r2, [pc, #36]	; (80ddc <ctrl_readmem_ctrl+0x58>)
   80db8:	687b      	ldr	r3, [r7, #4]
   80dba:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80dbc:	4b03      	ldr	r3, [pc, #12]	; (80dcc <ctrl_readmem_ctrl+0x48>)
   80dbe:	4798      	blx	r3
}
   80dc0:	bf00      	nop
   80dc2:	3708      	adds	r7, #8
   80dc4:	46bd      	mov	sp, r7
   80dc6:	bd80      	pop	{r7, pc}
   80dc8:	20001208 	.word	0x20001208
   80dcc:	0008147d 	.word	0x0008147d
   80dd0:	0008143d 	.word	0x0008143d
   80dd4:	000814ad 	.word	0x000814ad
   80dd8:	2000124c 	.word	0x2000124c
   80ddc:	20001250 	.word	0x20001250

00080de0 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80de0:	b580      	push	{r7, lr}
   80de2:	b084      	sub	sp, #16
   80de4:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80de6:	4b16      	ldr	r3, [pc, #88]	; (80e40 <ctrl_writemem_ctrl+0x60>)
   80de8:	681b      	ldr	r3, [r3, #0]
   80dea:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80dec:	4b14      	ldr	r3, [pc, #80]	; (80e40 <ctrl_writemem_ctrl+0x60>)
   80dee:	685b      	ldr	r3, [r3, #4]
   80df0:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80df2:	4b14      	ldr	r3, [pc, #80]	; (80e44 <ctrl_writemem_ctrl+0x64>)
   80df4:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80df6:	4b14      	ldr	r3, [pc, #80]	; (80e48 <ctrl_writemem_ctrl+0x68>)
   80df8:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80dfa:	bf00      	nop
   80dfc:	2001      	movs	r0, #1
   80dfe:	4b13      	ldr	r3, [pc, #76]	; (80e4c <ctrl_writemem_ctrl+0x6c>)
   80e00:	4798      	blx	r3
   80e02:	4603      	mov	r3, r0
   80e04:	2b00      	cmp	r3, #0
   80e06:	d0f9      	beq.n	80dfc <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80e08:	6878      	ldr	r0, [r7, #4]
   80e0a:	4b11      	ldr	r3, [pc, #68]	; (80e50 <ctrl_writemem_ctrl+0x70>)
   80e0c:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80e0e:	2300      	movs	r3, #0
   80e10:	60fb      	str	r3, [r7, #12]
   80e12:	e00b      	b.n	80e2c <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80e14:	683a      	ldr	r2, [r7, #0]
   80e16:	68fb      	ldr	r3, [r7, #12]
   80e18:	441a      	add	r2, r3
   80e1a:	4b0e      	ldr	r3, [pc, #56]	; (80e54 <ctrl_writemem_ctrl+0x74>)
   80e1c:	6819      	ldr	r1, [r3, #0]
   80e1e:	68fb      	ldr	r3, [r7, #12]
   80e20:	440b      	add	r3, r1
   80e22:	7812      	ldrb	r2, [r2, #0]
   80e24:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80e26:	68fb      	ldr	r3, [r7, #12]
   80e28:	3301      	adds	r3, #1
   80e2a:	60fb      	str	r3, [r7, #12]
   80e2c:	68fa      	ldr	r2, [r7, #12]
   80e2e:	68bb      	ldr	r3, [r7, #8]
   80e30:	429a      	cmp	r2, r3
   80e32:	d3ef      	bcc.n	80e14 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80e34:	4b04      	ldr	r3, [pc, #16]	; (80e48 <ctrl_writemem_ctrl+0x68>)
   80e36:	4798      	blx	r3
}
   80e38:	bf00      	nop
   80e3a:	3710      	adds	r7, #16
   80e3c:	46bd      	mov	sp, r7
   80e3e:	bd80      	pop	{r7, pc}
   80e40:	20001208 	.word	0x20001208
   80e44:	20001210 	.word	0x20001210
   80e48:	0008147d 	.word	0x0008147d
   80e4c:	0008143d 	.word	0x0008143d
   80e50:	000814ad 	.word	0x000814ad
   80e54:	20000280 	.word	0x20000280

00080e58 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80e58:	b580      	push	{r7, lr}
   80e5a:	b082      	sub	sp, #8
   80e5c:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e5e:	4b0a      	ldr	r3, [pc, #40]	; (80e88 <ctrl_writemem_bulk+0x30>)
   80e60:	685b      	ldr	r3, [r3, #4]
   80e62:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80e64:	4b09      	ldr	r3, [pc, #36]	; (80e8c <ctrl_writemem_bulk+0x34>)
   80e66:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80e68:	bf00      	nop
   80e6a:	2004      	movs	r0, #4
   80e6c:	4b08      	ldr	r3, [pc, #32]	; (80e90 <ctrl_writemem_bulk+0x38>)
   80e6e:	4798      	blx	r3
   80e70:	4603      	mov	r3, r0
   80e72:	2b00      	cmp	r3, #0
   80e74:	d0f9      	beq.n	80e6a <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80e76:	6878      	ldr	r0, [r7, #4]
   80e78:	4b06      	ldr	r3, [pc, #24]	; (80e94 <ctrl_writemem_bulk+0x3c>)
   80e7a:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80e7c:	4b03      	ldr	r3, [pc, #12]	; (80e8c <ctrl_writemem_bulk+0x34>)
   80e7e:	4798      	blx	r3
}
   80e80:	bf00      	nop
   80e82:	3708      	adds	r7, #8
   80e84:	46bd      	mov	sp, r7
   80e86:	bd80      	pop	{r7, pc}
   80e88:	20001208 	.word	0x20001208
   80e8c:	0008147d 	.word	0x0008147d
   80e90:	0008143d 	.word	0x0008143d
   80e94:	000814ad 	.word	0x000814ad

00080e98 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80e98:	b580      	push	{r7, lr}
   80e9a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80e9c:	4b19      	ldr	r3, [pc, #100]	; (80f04 <ctrl_sam3ucfg_cb+0x6c>)
   80e9e:	885b      	ldrh	r3, [r3, #2]
   80ea0:	b2db      	uxtb	r3, r3
   80ea2:	2b03      	cmp	r3, #3
   80ea4:	d014      	beq.n	80ed0 <ctrl_sam3ucfg_cb+0x38>
   80ea6:	2b03      	cmp	r3, #3
   80ea8:	dc29      	bgt.n	80efe <ctrl_sam3ucfg_cb+0x66>
   80eaa:	2b01      	cmp	r3, #1
   80eac:	d002      	beq.n	80eb4 <ctrl_sam3ucfg_cb+0x1c>
   80eae:	2b02      	cmp	r3, #2
   80eb0:	d00a      	beq.n	80ec8 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80eb2:	e024      	b.n	80efe <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80eb4:	2006      	movs	r0, #6
   80eb6:	4b14      	ldr	r3, [pc, #80]	; (80f08 <ctrl_sam3ucfg_cb+0x70>)
   80eb8:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80eba:	2006      	movs	r0, #6
   80ebc:	4b13      	ldr	r3, [pc, #76]	; (80f0c <ctrl_sam3ucfg_cb+0x74>)
   80ebe:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80ec0:	2010      	movs	r0, #16
   80ec2:	4b13      	ldr	r3, [pc, #76]	; (80f10 <ctrl_sam3ucfg_cb+0x78>)
   80ec4:	4798      	blx	r3
        break;
   80ec6:	e01b      	b.n	80f00 <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80ec8:	2010      	movs	r0, #16
   80eca:	4b12      	ldr	r3, [pc, #72]	; (80f14 <ctrl_sam3ucfg_cb+0x7c>)
   80ecc:	4798      	blx	r3
        break;
   80ece:	e017      	b.n	80f00 <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80ed0:	2201      	movs	r2, #1
   80ed2:	210c      	movs	r1, #12
   80ed4:	4810      	ldr	r0, [pc, #64]	; (80f18 <ctrl_sam3ucfg_cb+0x80>)
   80ed6:	4b11      	ldr	r3, [pc, #68]	; (80f1c <ctrl_sam3ucfg_cb+0x84>)
   80ed8:	4798      	blx	r3
        udc_detach();
   80eda:	4b11      	ldr	r3, [pc, #68]	; (80f20 <ctrl_sam3ucfg_cb+0x88>)
   80edc:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80ede:	bf00      	nop
   80ee0:	4b10      	ldr	r3, [pc, #64]	; (80f24 <ctrl_sam3ucfg_cb+0x8c>)
   80ee2:	685b      	ldr	r3, [r3, #4]
   80ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80ee8:	2b00      	cmp	r3, #0
   80eea:	d1f9      	bne.n	80ee0 <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80eec:	4b0d      	ldr	r3, [pc, #52]	; (80f24 <ctrl_sam3ucfg_cb+0x8c>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	4a0c      	ldr	r2, [pc, #48]	; (80f24 <ctrl_sam3ucfg_cb+0x8c>)
   80ef2:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80ef6:	f043 0305 	orr.w	r3, r3, #5
   80efa:	6013      	str	r3, [r2, #0]
        while(1);
   80efc:	e7fe      	b.n	80efc <ctrl_sam3ucfg_cb+0x64>
        break;
   80efe:	bf00      	nop
    }
}
   80f00:	bf00      	nop
   80f02:	bd80      	pop	{r7, pc}
   80f04:	20001810 	.word	0x20001810
   80f08:	00080b31 	.word	0x00080b31
   80f0c:	00080c39 	.word	0x00080c39
   80f10:	00084929 	.word	0x00084929
   80f14:	000849a9 	.word	0x000849a9
   80f18:	400e0800 	.word	0x400e0800
   80f1c:	00084f69 	.word	0x00084f69
   80f20:	00080c69 	.word	0x00080c69
   80f24:	400e1200 	.word	0x400e1200

00080f28 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80f28:	b580      	push	{r7, lr}
   80f2a:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80f2c:	4b0d      	ldr	r3, [pc, #52]	; (80f64 <ctrl_progfpga_bulk+0x3c>)
   80f2e:	885b      	ldrh	r3, [r3, #2]
   80f30:	2ba2      	cmp	r3, #162	; 0xa2
   80f32:	d00f      	beq.n	80f54 <ctrl_progfpga_bulk+0x2c>
   80f34:	2ba2      	cmp	r3, #162	; 0xa2
   80f36:	dc11      	bgt.n	80f5c <ctrl_progfpga_bulk+0x34>
   80f38:	2ba0      	cmp	r3, #160	; 0xa0
   80f3a:	d002      	beq.n	80f42 <ctrl_progfpga_bulk+0x1a>
   80f3c:	2ba1      	cmp	r3, #161	; 0xa1
   80f3e:	d003      	beq.n	80f48 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80f40:	e00c      	b.n	80f5c <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80f42:	4b09      	ldr	r3, [pc, #36]	; (80f68 <ctrl_progfpga_bulk+0x40>)
   80f44:	4798      	blx	r3
        break;
   80f46:	e00a      	b.n	80f5e <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80f48:	4b08      	ldr	r3, [pc, #32]	; (80f6c <ctrl_progfpga_bulk+0x44>)
   80f4a:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80f4c:	4b08      	ldr	r3, [pc, #32]	; (80f70 <ctrl_progfpga_bulk+0x48>)
   80f4e:	220a      	movs	r2, #10
   80f50:	701a      	strb	r2, [r3, #0]
        break;
   80f52:	e004      	b.n	80f5e <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80f54:	4b06      	ldr	r3, [pc, #24]	; (80f70 <ctrl_progfpga_bulk+0x48>)
   80f56:	2200      	movs	r2, #0
   80f58:	701a      	strb	r2, [r3, #0]
        break;
   80f5a:	e000      	b.n	80f5e <ctrl_progfpga_bulk+0x36>
        break;
   80f5c:	bf00      	nop
    }
}
   80f5e:	bf00      	nop
   80f60:	bd80      	pop	{r7, pc}
   80f62:	bf00      	nop
   80f64:	20001810 	.word	0x20001810
   80f68:	000815cd 	.word	0x000815cd
   80f6c:	0008164d 	.word	0x0008164d
   80f70:	20001248 	.word	0x20001248

00080f74 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80f74:	b580      	push	{r7, lr}
   80f76:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80f78:	2026      	movs	r0, #38	; 0x26
   80f7a:	4b03      	ldr	r3, [pc, #12]	; (80f88 <ctrl_fpga_reset+0x14>)
   80f7c:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80f7e:	2026      	movs	r0, #38	; 0x26
   80f80:	4b02      	ldr	r3, [pc, #8]	; (80f8c <ctrl_fpga_reset+0x18>)
   80f82:	4798      	blx	r3
}
   80f84:	bf00      	nop
   80f86:	bd80      	pop	{r7, pc}
   80f88:	00085209 	.word	0x00085209
   80f8c:	00085239 	.word	0x00085239

00080f90 <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80f90:	b580      	push	{r7, lr}
   80f92:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80f94:	2100      	movs	r1, #0
   80f96:	4802      	ldr	r0, [pc, #8]	; (80fa0 <ctrl_usart_cb+0x10>)
   80f98:	4b02      	ldr	r3, [pc, #8]	; (80fa4 <ctrl_usart_cb+0x14>)
   80f9a:	4798      	blx	r3
}
   80f9c:	bf00      	nop
   80f9e:	bd80      	pop	{r7, pc}
   80fa0:	40090000 	.word	0x40090000
   80fa4:	00081815 	.word	0x00081815

00080fa8 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80fa8:	b580      	push	{r7, lr}
   80faa:	b082      	sub	sp, #8
   80fac:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80fae:	4b10      	ldr	r3, [pc, #64]	; (80ff0 <ctrl_usart_cb_data+0x48>)
   80fb0:	88da      	ldrh	r2, [r3, #6]
   80fb2:	4b0f      	ldr	r3, [pc, #60]	; (80ff0 <ctrl_usart_cb_data+0x48>)
   80fb4:	899b      	ldrh	r3, [r3, #12]
   80fb6:	429a      	cmp	r2, r3
   80fb8:	d816      	bhi.n	80fe8 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80fba:	2300      	movs	r3, #0
   80fbc:	607b      	str	r3, [r7, #4]
   80fbe:	e00c      	b.n	80fda <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80fc0:	4b0b      	ldr	r3, [pc, #44]	; (80ff0 <ctrl_usart_cb_data+0x48>)
   80fc2:	689a      	ldr	r2, [r3, #8]
   80fc4:	687b      	ldr	r3, [r7, #4]
   80fc6:	4413      	add	r3, r2
   80fc8:	781b      	ldrb	r3, [r3, #0]
   80fca:	461a      	mov	r2, r3
   80fcc:	2100      	movs	r1, #0
   80fce:	4809      	ldr	r0, [pc, #36]	; (80ff4 <ctrl_usart_cb_data+0x4c>)
   80fd0:	4b09      	ldr	r3, [pc, #36]	; (80ff8 <ctrl_usart_cb_data+0x50>)
   80fd2:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80fd4:	687b      	ldr	r3, [r7, #4]
   80fd6:	3301      	adds	r3, #1
   80fd8:	607b      	str	r3, [r7, #4]
   80fda:	4b05      	ldr	r3, [pc, #20]	; (80ff0 <ctrl_usart_cb_data+0x48>)
   80fdc:	88db      	ldrh	r3, [r3, #6]
   80fde:	461a      	mov	r2, r3
   80fe0:	687b      	ldr	r3, [r7, #4]
   80fe2:	4293      	cmp	r3, r2
   80fe4:	dbec      	blt.n	80fc0 <ctrl_usart_cb_data+0x18>
   80fe6:	e000      	b.n	80fea <ctrl_usart_cb_data+0x42>
		return;
   80fe8:	bf00      	nop
	}
}
   80fea:	3708      	adds	r7, #8
   80fec:	46bd      	mov	sp, r7
   80fee:	bd80      	pop	{r7, pc}
   80ff0:	20001810 	.word	0x20001810
   80ff4:	40090000 	.word	0x40090000
   80ff8:	00081be1 	.word	0x00081be1

00080ffc <spi_adc_cb>:

static void spi_adc_cb(void)
{
   80ffc:	b580      	push	{r7, lr}
   80ffe:	af00      	add	r7, sp, #0
	//Just do single byte writes for now
	if (udd_g_ctrlreq.req.wLength > 2){
   81000:	4b09      	ldr	r3, [pc, #36]	; (81028 <spi_adc_cb+0x2c>)
   81002:	88db      	ldrh	r3, [r3, #6]
   81004:	2b02      	cmp	r3, #2
   81006:	d80c      	bhi.n	81022 <spi_adc_cb+0x26>
		return;
	}
    write_spi_adc(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
   81008:	4b07      	ldr	r3, [pc, #28]	; (81028 <spi_adc_cb+0x2c>)
   8100a:	689b      	ldr	r3, [r3, #8]
   8100c:	781b      	ldrb	r3, [r3, #0]
   8100e:	461a      	mov	r2, r3
   81010:	4b05      	ldr	r3, [pc, #20]	; (81028 <spi_adc_cb+0x2c>)
   81012:	689b      	ldr	r3, [r3, #8]
   81014:	3301      	adds	r3, #1
   81016:	781b      	ldrb	r3, [r3, #0]
   81018:	4619      	mov	r1, r3
   8101a:	4610      	mov	r0, r2
   8101c:	4b03      	ldr	r3, [pc, #12]	; (8102c <spi_adc_cb+0x30>)
   8101e:	4798      	blx	r3
   81020:	e000      	b.n	81024 <spi_adc_cb+0x28>
		return;
   81022:	bf00      	nop
}
   81024:	bd80      	pop	{r7, pc}
   81026:	bf00      	nop
   81028:	20001810 	.word	0x20001810
   8102c:	00081e41 	.word	0x00081e41

00081030 <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   81030:	b580      	push	{r7, lr}
   81032:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81034:	4b4c      	ldr	r3, [pc, #304]	; (81168 <main_setup_out_received+0x138>)
   81036:	4a4d      	ldr	r2, [pc, #308]	; (8116c <main_setup_out_received+0x13c>)
   81038:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8103a:	4b4b      	ldr	r3, [pc, #300]	; (81168 <main_setup_out_received+0x138>)
   8103c:	88db      	ldrh	r3, [r3, #6]
   8103e:	2b40      	cmp	r3, #64	; 0x40
   81040:	bf28      	it	cs
   81042:	2340      	movcs	r3, #64	; 0x40
   81044:	b29a      	uxth	r2, r3
   81046:	4b48      	ldr	r3, [pc, #288]	; (81168 <main_setup_out_received+0x138>)
   81048:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   8104a:	4b49      	ldr	r3, [pc, #292]	; (81170 <main_setup_out_received+0x140>)
   8104c:	2200      	movs	r2, #0
   8104e:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   81050:	4b45      	ldr	r3, [pc, #276]	; (81168 <main_setup_out_received+0x138>)
   81052:	785b      	ldrb	r3, [r3, #1]
   81054:	3b10      	subs	r3, #16
   81056:	2b16      	cmp	r3, #22
   81058:	d87a      	bhi.n	81150 <main_setup_out_received+0x120>
   8105a:	a201      	add	r2, pc, #4	; (adr r2, 81060 <main_setup_out_received+0x30>)
   8105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81060:	000810bd 	.word	0x000810bd
   81064:	000810e9 	.word	0x000810e9
   81068:	000810d3 	.word	0x000810d3
   8106c:	000810ff 	.word	0x000810ff
   81070:	00081151 	.word	0x00081151
   81074:	00081151 	.word	0x00081151
   81078:	00081129 	.word	0x00081129
   8107c:	00081151 	.word	0x00081151
   81080:	00081151 	.word	0x00081151
   81084:	00081151 	.word	0x00081151
   81088:	0008111f 	.word	0x0008111f
   8108c:	00081115 	.word	0x00081115
   81090:	00081151 	.word	0x00081151
   81094:	00081151 	.word	0x00081151
   81098:	00081151 	.word	0x00081151
   8109c:	00081151 	.word	0x00081151
   810a0:	00081151 	.word	0x00081151
   810a4:	00081151 	.word	0x00081151
   810a8:	00081133 	.word	0x00081133
   810ac:	00081151 	.word	0x00081151
   810b0:	00081151 	.word	0x00081151
   810b4:	0008113d 	.word	0x0008113d
   810b8:	00081147 	.word	0x00081147
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   810bc:	2006      	movs	r0, #6
   810be:	4b2d      	ldr	r3, [pc, #180]	; (81174 <main_setup_out_received+0x144>)
   810c0:	4798      	blx	r3
   810c2:	4603      	mov	r3, r0
   810c4:	2b00      	cmp	r3, #0
   810c6:	d045      	beq.n	81154 <main_setup_out_received+0x124>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   810c8:	4b27      	ldr	r3, [pc, #156]	; (81168 <main_setup_out_received+0x138>)
   810ca:	4a2b      	ldr	r2, [pc, #172]	; (81178 <main_setup_out_received+0x148>)
   810cc:	611a      	str	r2, [r3, #16]
            return true;
   810ce:	2301      	movs	r3, #1
   810d0:	e048      	b.n	81164 <main_setup_out_received+0x134>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   810d2:	2006      	movs	r0, #6
   810d4:	4b27      	ldr	r3, [pc, #156]	; (81174 <main_setup_out_received+0x144>)
   810d6:	4798      	blx	r3
   810d8:	4603      	mov	r3, r0
   810da:	2b00      	cmp	r3, #0
   810dc:	d03c      	beq.n	81158 <main_setup_out_received+0x128>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   810de:	4b22      	ldr	r3, [pc, #136]	; (81168 <main_setup_out_received+0x138>)
   810e0:	4a26      	ldr	r2, [pc, #152]	; (8117c <main_setup_out_received+0x14c>)
   810e2:	611a      	str	r2, [r3, #16]
            return true;
   810e4:	2301      	movs	r3, #1
   810e6:	e03d      	b.n	81164 <main_setup_out_received+0x134>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   810e8:	2006      	movs	r0, #6
   810ea:	4b22      	ldr	r3, [pc, #136]	; (81174 <main_setup_out_received+0x144>)
   810ec:	4798      	blx	r3
   810ee:	4603      	mov	r3, r0
   810f0:	2b00      	cmp	r3, #0
   810f2:	d033      	beq.n	8115c <main_setup_out_received+0x12c>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   810f4:	4b1c      	ldr	r3, [pc, #112]	; (81168 <main_setup_out_received+0x138>)
   810f6:	4a22      	ldr	r2, [pc, #136]	; (81180 <main_setup_out_received+0x150>)
   810f8:	611a      	str	r2, [r3, #16]
            return true;
   810fa:	2301      	movs	r3, #1
   810fc:	e032      	b.n	81164 <main_setup_out_received+0x134>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   810fe:	2006      	movs	r0, #6
   81100:	4b1c      	ldr	r3, [pc, #112]	; (81174 <main_setup_out_received+0x144>)
   81102:	4798      	blx	r3
   81104:	4603      	mov	r3, r0
   81106:	2b00      	cmp	r3, #0
   81108:	d02a      	beq.n	81160 <main_setup_out_received+0x130>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8110a:	4b17      	ldr	r3, [pc, #92]	; (81168 <main_setup_out_received+0x138>)
   8110c:	4a1d      	ldr	r2, [pc, #116]	; (81184 <main_setup_out_received+0x154>)
   8110e:	611a      	str	r2, [r3, #16]
            return true;
   81110:	2301      	movs	r3, #1
   81112:	e027      	b.n	81164 <main_setup_out_received+0x134>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81114:	4b14      	ldr	r3, [pc, #80]	; (81168 <main_setup_out_received+0x138>)
   81116:	4a1c      	ldr	r2, [pc, #112]	; (81188 <main_setup_out_received+0x158>)
   81118:	611a      	str	r2, [r3, #16]
        return true;
   8111a:	2301      	movs	r3, #1
   8111c:	e022      	b.n	81164 <main_setup_out_received+0x134>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8111e:	4b12      	ldr	r3, [pc, #72]	; (81168 <main_setup_out_received+0x138>)
   81120:	4a1a      	ldr	r2, [pc, #104]	; (8118c <main_setup_out_received+0x15c>)
   81122:	611a      	str	r2, [r3, #16]
        return true;
   81124:	2301      	movs	r3, #1
   81126:	e01d      	b.n	81164 <main_setup_out_received+0x134>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81128:	4b0f      	ldr	r3, [pc, #60]	; (81168 <main_setup_out_received+0x138>)
   8112a:	4a19      	ldr	r2, [pc, #100]	; (81190 <main_setup_out_received+0x160>)
   8112c:	611a      	str	r2, [r3, #16]
        return true;
   8112e:	2301      	movs	r3, #1
   81130:	e018      	b.n	81164 <main_setup_out_received+0x134>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81132:	4b0d      	ldr	r3, [pc, #52]	; (81168 <main_setup_out_received+0x138>)
   81134:	4a17      	ldr	r2, [pc, #92]	; (81194 <main_setup_out_received+0x164>)
   81136:	611a      	str	r2, [r3, #16]
        return true;
   81138:	2301      	movs	r3, #1
   8113a:	e013      	b.n	81164 <main_setup_out_received+0x134>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   8113c:	4b0a      	ldr	r3, [pc, #40]	; (81168 <main_setup_out_received+0x138>)
   8113e:	4a16      	ldr	r2, [pc, #88]	; (81198 <main_setup_out_received+0x168>)
   81140:	611a      	str	r2, [r3, #16]
        return true;
   81142:	2301      	movs	r3, #1
   81144:	e00e      	b.n	81164 <main_setup_out_received+0x134>
    case REQ_SPI_ADC:
        udd_g_ctrlreq.callback = spi_adc_cb;
   81146:	4b08      	ldr	r3, [pc, #32]	; (81168 <main_setup_out_received+0x138>)
   81148:	4a14      	ldr	r2, [pc, #80]	; (8119c <main_setup_out_received+0x16c>)
   8114a:	611a      	str	r2, [r3, #16]
        return true;
   8114c:	2301      	movs	r3, #1
   8114e:	e009      	b.n	81164 <main_setup_out_received+0x134>
    default:
        return false;
   81150:	2300      	movs	r3, #0
   81152:	e007      	b.n	81164 <main_setup_out_received+0x134>
        break;
   81154:	bf00      	nop
   81156:	e004      	b.n	81162 <main_setup_out_received+0x132>
        break;
   81158:	bf00      	nop
   8115a:	e002      	b.n	81162 <main_setup_out_received+0x132>
        break;
   8115c:	bf00      	nop
   8115e:	e000      	b.n	81162 <main_setup_out_received+0x132>
        break;
   81160:	bf00      	nop
    }

    return false;
   81162:	2300      	movs	r3, #0
}
   81164:	4618      	mov	r0, r3
   81166:	bd80      	pop	{r7, pc}
   81168:	20001810 	.word	0x20001810
   8116c:	20001208 	.word	0x20001208
   81170:	20001248 	.word	0x20001248
   81174:	0008143d 	.word	0x0008143d
   81178:	00080d29 	.word	0x00080d29
   8117c:	00080d85 	.word	0x00080d85
   81180:	00080e59 	.word	0x00080e59
   81184:	00080de1 	.word	0x00080de1
   81188:	00080f91 	.word	0x00080f91
   8118c:	00080fa9 	.word	0x00080fa9
   81190:	00080f29 	.word	0x00080f29
   81194:	00080e99 	.word	0x00080e99
   81198:	00080f75 	.word	0x00080f75
   8119c:	00080ffd 	.word	0x00080ffd

000811a0 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   811a0:	b580      	push	{r7, lr}
   811a2:	b082      	sub	sp, #8
   811a4:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   811a6:	4b5c      	ldr	r3, [pc, #368]	; (81318 <main_setup_in_received+0x178>)
   811a8:	785b      	ldrb	r3, [r3, #1]
   811aa:	3b12      	subs	r3, #18
   811ac:	2b14      	cmp	r3, #20
   811ae:	f200 80ad 	bhi.w	8130c <main_setup_in_received+0x16c>
   811b2:	a201      	add	r2, pc, #4	; (adr r2, 811b8 <main_setup_in_received+0x18>)
   811b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   811b8:	0008120d 	.word	0x0008120d
   811bc:	0008130d 	.word	0x0008130d
   811c0:	0008130d 	.word	0x0008130d
   811c4:	000812af 	.word	0x000812af
   811c8:	0008130d 	.word	0x0008130d
   811cc:	0008128d 	.word	0x0008128d
   811d0:	0008130d 	.word	0x0008130d
   811d4:	0008130d 	.word	0x0008130d
   811d8:	0008124f 	.word	0x0008124f
   811dc:	00081239 	.word	0x00081239
   811e0:	0008130d 	.word	0x0008130d
   811e4:	0008130d 	.word	0x0008130d
   811e8:	0008130d 	.word	0x0008130d
   811ec:	0008130d 	.word	0x0008130d
   811f0:	0008130d 	.word	0x0008130d
   811f4:	0008130d 	.word	0x0008130d
   811f8:	0008130d 	.word	0x0008130d
   811fc:	0008130d 	.word	0x0008130d
   81200:	0008130d 	.word	0x0008130d
   81204:	0008130d 	.word	0x0008130d
   81208:	000812e9 	.word	0x000812e9
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   8120c:	4b43      	ldr	r3, [pc, #268]	; (8131c <main_setup_in_received+0x17c>)
   8120e:	681b      	ldr	r3, [r3, #0]
   81210:	4a41      	ldr	r2, [pc, #260]	; (81318 <main_setup_in_received+0x178>)
   81212:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81214:	4b42      	ldr	r3, [pc, #264]	; (81320 <main_setup_in_received+0x180>)
   81216:	681b      	ldr	r3, [r3, #0]
   81218:	b29a      	uxth	r2, r3
   8121a:	4b3f      	ldr	r3, [pc, #252]	; (81318 <main_setup_in_received+0x178>)
   8121c:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   8121e:	4b40      	ldr	r3, [pc, #256]	; (81320 <main_setup_in_received+0x180>)
   81220:	2200      	movs	r2, #0
   81222:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81224:	4b3f      	ldr	r3, [pc, #252]	; (81324 <main_setup_in_received+0x184>)
   81226:	4798      	blx	r3
   81228:	4603      	mov	r3, r0
   8122a:	2b05      	cmp	r3, #5
   8122c:	d102      	bne.n	81234 <main_setup_in_received+0x94>
            FPGA_setlock(fpga_unlocked);
   8122e:	2000      	movs	r0, #0
   81230:	4b3d      	ldr	r3, [pc, #244]	; (81328 <main_setup_in_received+0x188>)
   81232:	4798      	blx	r3
        }

        return true;
   81234:	2301      	movs	r3, #1
   81236:	e06a      	b.n	8130e <main_setup_in_received+0x16e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   81238:	2101      	movs	r1, #1
   8123a:	483c      	ldr	r0, [pc, #240]	; (8132c <main_setup_in_received+0x18c>)
   8123c:	4b3c      	ldr	r3, [pc, #240]	; (81330 <main_setup_in_received+0x190>)
   8123e:	4798      	blx	r3
   81240:	4603      	mov	r3, r0
   81242:	2b00      	cmp	r3, #0
   81244:	bf14      	ite	ne
   81246:	2301      	movne	r3, #1
   81248:	2300      	moveq	r3, #0
   8124a:	b2db      	uxtb	r3, r3
   8124c:	e05f      	b.n	8130e <main_setup_in_received+0x16e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8124e:	2300      	movs	r3, #0
   81250:	607b      	str	r3, [r7, #4]
   81252:	e00c      	b.n	8126e <main_setup_in_received+0xce>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81254:	4835      	ldr	r0, [pc, #212]	; (8132c <main_setup_in_received+0x18c>)
   81256:	4b37      	ldr	r3, [pc, #220]	; (81334 <main_setup_in_received+0x194>)
   81258:	4798      	blx	r3
   8125a:	4603      	mov	r3, r0
   8125c:	b2d9      	uxtb	r1, r3
   8125e:	4a36      	ldr	r2, [pc, #216]	; (81338 <main_setup_in_received+0x198>)
   81260:	687b      	ldr	r3, [r7, #4]
   81262:	4413      	add	r3, r2
   81264:	460a      	mov	r2, r1
   81266:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81268:	687b      	ldr	r3, [r7, #4]
   8126a:	3301      	adds	r3, #1
   8126c:	607b      	str	r3, [r7, #4]
   8126e:	4b2a      	ldr	r3, [pc, #168]	; (81318 <main_setup_in_received+0x178>)
   81270:	88db      	ldrh	r3, [r3, #6]
   81272:	461a      	mov	r2, r3
   81274:	687b      	ldr	r3, [r7, #4]
   81276:	4293      	cmp	r3, r2
   81278:	d3ec      	bcc.n	81254 <main_setup_in_received+0xb4>
        }
        udd_g_ctrlreq.payload = respbuf;
   8127a:	4b27      	ldr	r3, [pc, #156]	; (81318 <main_setup_in_received+0x178>)
   8127c:	4a2e      	ldr	r2, [pc, #184]	; (81338 <main_setup_in_received+0x198>)
   8127e:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81280:	687b      	ldr	r3, [r7, #4]
   81282:	b29a      	uxth	r2, r3
   81284:	4b24      	ldr	r3, [pc, #144]	; (81318 <main_setup_in_received+0x178>)
   81286:	819a      	strh	r2, [r3, #12]
        return true;
   81288:	2301      	movs	r3, #1
   8128a:	e040      	b.n	8130e <main_setup_in_received+0x16e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   8128c:	4b2a      	ldr	r3, [pc, #168]	; (81338 <main_setup_in_received+0x198>)
   8128e:	2201      	movs	r2, #1
   81290:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   81292:	4b29      	ldr	r3, [pc, #164]	; (81338 <main_setup_in_received+0x198>)
   81294:	2201      	movs	r2, #1
   81296:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   81298:	4b27      	ldr	r3, [pc, #156]	; (81338 <main_setup_in_received+0x198>)
   8129a:	2200      	movs	r2, #0
   8129c:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   8129e:	4b1e      	ldr	r3, [pc, #120]	; (81318 <main_setup_in_received+0x178>)
   812a0:	4a25      	ldr	r2, [pc, #148]	; (81338 <main_setup_in_received+0x198>)
   812a2:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   812a4:	4b1c      	ldr	r3, [pc, #112]	; (81318 <main_setup_in_received+0x178>)
   812a6:	2203      	movs	r2, #3
   812a8:	819a      	strh	r2, [r3, #12]
        return true;
   812aa:	2301      	movs	r3, #1
   812ac:	e02f      	b.n	8130e <main_setup_in_received+0x16e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   812ae:	2007      	movs	r0, #7
   812b0:	4b22      	ldr	r3, [pc, #136]	; (8133c <main_setup_in_received+0x19c>)
   812b2:	4798      	blx	r3
   812b4:	4603      	mov	r3, r0
   812b6:	2b00      	cmp	r3, #0
   812b8:	bf14      	ite	ne
   812ba:	2301      	movne	r3, #1
   812bc:	2300      	moveq	r3, #0
   812be:	b2db      	uxtb	r3, r3
   812c0:	461a      	mov	r2, r3
   812c2:	4b1d      	ldr	r3, [pc, #116]	; (81338 <main_setup_in_received+0x198>)
   812c4:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   812c6:	4b1c      	ldr	r3, [pc, #112]	; (81338 <main_setup_in_received+0x198>)
   812c8:	2200      	movs	r2, #0
   812ca:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   812cc:	4b1a      	ldr	r3, [pc, #104]	; (81338 <main_setup_in_received+0x198>)
   812ce:	2200      	movs	r2, #0
   812d0:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   812d2:	4b19      	ldr	r3, [pc, #100]	; (81338 <main_setup_in_received+0x198>)
   812d4:	2200      	movs	r2, #0
   812d6:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   812d8:	4b0f      	ldr	r3, [pc, #60]	; (81318 <main_setup_in_received+0x178>)
   812da:	4a17      	ldr	r2, [pc, #92]	; (81338 <main_setup_in_received+0x198>)
   812dc:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   812de:	4b0e      	ldr	r3, [pc, #56]	; (81318 <main_setup_in_received+0x178>)
   812e0:	2204      	movs	r2, #4
   812e2:	819a      	strh	r2, [r3, #12]
        return true;
   812e4:	2301      	movs	r3, #1
   812e6:	e012      	b.n	8130e <main_setup_in_received+0x16e>
        break;
    case REQ_SPI_ADC:
        respbuf[0] = read_spi_adc(udd_g_ctrlreq.req.wValue & 0xFF);
   812e8:	4b0b      	ldr	r3, [pc, #44]	; (81318 <main_setup_in_received+0x178>)
   812ea:	885b      	ldrh	r3, [r3, #2]
   812ec:	b2db      	uxtb	r3, r3
   812ee:	4618      	mov	r0, r3
   812f0:	4b13      	ldr	r3, [pc, #76]	; (81340 <main_setup_in_received+0x1a0>)
   812f2:	4798      	blx	r3
   812f4:	4603      	mov	r3, r0
   812f6:	b2da      	uxtb	r2, r3
   812f8:	4b0f      	ldr	r3, [pc, #60]	; (81338 <main_setup_in_received+0x198>)
   812fa:	701a      	strb	r2, [r3, #0]
        udd_g_ctrlreq.payload = respbuf;
   812fc:	4b06      	ldr	r3, [pc, #24]	; (81318 <main_setup_in_received+0x178>)
   812fe:	4a0e      	ldr	r2, [pc, #56]	; (81338 <main_setup_in_received+0x198>)
   81300:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 1;
   81302:	4b05      	ldr	r3, [pc, #20]	; (81318 <main_setup_in_received+0x178>)
   81304:	2201      	movs	r2, #1
   81306:	819a      	strh	r2, [r3, #12]
        return true;
   81308:	2301      	movs	r3, #1
   8130a:	e000      	b.n	8130e <main_setup_in_received+0x16e>
        break;
    default:
        return false;
   8130c:	2300      	movs	r3, #0
    }
    return false;
}
   8130e:	4618      	mov	r0, r3
   81310:	3708      	adds	r7, #8
   81312:	46bd      	mov	sp, r7
   81314:	bd80      	pop	{r7, pc}
   81316:	bf00      	nop
   81318:	20001810 	.word	0x20001810
   8131c:	2000124c 	.word	0x2000124c
   81320:	20001250 	.word	0x20001250
   81324:	00081495 	.word	0x00081495
   81328:	0008143d 	.word	0x0008143d
   8132c:	40090000 	.word	0x40090000
   81330:	00081815 	.word	0x00081815
   81334:	00081c89 	.word	0x00081c89
   81338:	20001254 	.word	0x20001254
   8133c:	000851d9 	.word	0x000851d9
   81340:	00081eb1 	.word	0x00081eb1

00081344 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81344:	b580      	push	{r7, lr}
   81346:	b082      	sub	sp, #8
   81348:	af00      	add	r7, sp, #0
   8134a:	4603      	mov	r3, r0
   8134c:	6039      	str	r1, [r7, #0]
   8134e:	71fb      	strb	r3, [r7, #7]
   81350:	4613      	mov	r3, r2
   81352:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81354:	79fb      	ldrb	r3, [r7, #7]
   81356:	2b00      	cmp	r3, #0
   81358:	d108      	bne.n	8136c <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   8135a:	4b06      	ldr	r3, [pc, #24]	; (81374 <main_vendor_bulk_in_received+0x30>)
   8135c:	4798      	blx	r3
   8135e:	4603      	mov	r3, r0
   81360:	2b02      	cmp	r3, #2
   81362:	d104      	bne.n	8136e <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81364:	2000      	movs	r0, #0
   81366:	4b04      	ldr	r3, [pc, #16]	; (81378 <main_vendor_bulk_in_received+0x34>)
   81368:	4798      	blx	r3
   8136a:	e000      	b.n	8136e <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   8136c:	bf00      	nop
    }
}
   8136e:	3708      	adds	r7, #8
   81370:	46bd      	mov	sp, r7
   81372:	bd80      	pop	{r7, pc}
   81374:	00081495 	.word	0x00081495
   81378:	0008143d 	.word	0x0008143d

0008137c <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8137c:	b580      	push	{r7, lr}
   8137e:	b084      	sub	sp, #16
   81380:	af00      	add	r7, sp, #0
   81382:	4603      	mov	r3, r0
   81384:	6039      	str	r1, [r7, #0]
   81386:	71fb      	strb	r3, [r7, #7]
   81388:	4613      	mov	r3, r2
   8138a:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8138c:	79fb      	ldrb	r3, [r7, #7]
   8138e:	2b00      	cmp	r3, #0
   81390:	d006      	beq.n	813a0 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   81392:	4a22      	ldr	r2, [pc, #136]	; (8141c <main_vendor_bulk_out_received+0xa0>)
   81394:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81398:	4821      	ldr	r0, [pc, #132]	; (81420 <main_vendor_bulk_out_received+0xa4>)
   8139a:	4b22      	ldr	r3, [pc, #136]	; (81424 <main_vendor_bulk_out_received+0xa8>)
   8139c:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8139e:	e039      	b.n	81414 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   813a0:	4b21      	ldr	r3, [pc, #132]	; (81428 <main_vendor_bulk_out_received+0xac>)
   813a2:	781b      	ldrb	r3, [r3, #0]
   813a4:	2b00      	cmp	r3, #0
   813a6:	d11a      	bne.n	813de <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   813a8:	2300      	movs	r3, #0
   813aa:	60fb      	str	r3, [r7, #12]
   813ac:	e00b      	b.n	813c6 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   813ae:	4b1f      	ldr	r3, [pc, #124]	; (8142c <main_vendor_bulk_out_received+0xb0>)
   813b0:	681a      	ldr	r2, [r3, #0]
   813b2:	68fb      	ldr	r3, [r7, #12]
   813b4:	4413      	add	r3, r2
   813b6:	491a      	ldr	r1, [pc, #104]	; (81420 <main_vendor_bulk_out_received+0xa4>)
   813b8:	68fa      	ldr	r2, [r7, #12]
   813ba:	440a      	add	r2, r1
   813bc:	7812      	ldrb	r2, [r2, #0]
   813be:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   813c0:	68fb      	ldr	r3, [r7, #12]
   813c2:	3301      	adds	r3, #1
   813c4:	60fb      	str	r3, [r7, #12]
   813c6:	68fa      	ldr	r2, [r7, #12]
   813c8:	683b      	ldr	r3, [r7, #0]
   813ca:	429a      	cmp	r2, r3
   813cc:	d3ef      	bcc.n	813ae <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   813ce:	4b18      	ldr	r3, [pc, #96]	; (81430 <main_vendor_bulk_out_received+0xb4>)
   813d0:	4798      	blx	r3
   813d2:	4603      	mov	r3, r0
   813d4:	2b04      	cmp	r3, #4
   813d6:	d117      	bne.n	81408 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   813d8:	4b16      	ldr	r3, [pc, #88]	; (81434 <main_vendor_bulk_out_received+0xb8>)
   813da:	4798      	blx	r3
   813dc:	e014      	b.n	81408 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   813de:	4b12      	ldr	r3, [pc, #72]	; (81428 <main_vendor_bulk_out_received+0xac>)
   813e0:	781b      	ldrb	r3, [r3, #0]
   813e2:	2b0a      	cmp	r3, #10
   813e4:	d110      	bne.n	81408 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   813e6:	2300      	movs	r3, #0
   813e8:	60bb      	str	r3, [r7, #8]
   813ea:	e009      	b.n	81400 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   813ec:	4a0c      	ldr	r2, [pc, #48]	; (81420 <main_vendor_bulk_out_received+0xa4>)
   813ee:	68bb      	ldr	r3, [r7, #8]
   813f0:	4413      	add	r3, r2
   813f2:	781b      	ldrb	r3, [r3, #0]
   813f4:	4618      	mov	r0, r3
   813f6:	4b10      	ldr	r3, [pc, #64]	; (81438 <main_vendor_bulk_out_received+0xbc>)
   813f8:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   813fa:	68bb      	ldr	r3, [r7, #8]
   813fc:	3301      	adds	r3, #1
   813fe:	60bb      	str	r3, [r7, #8]
   81400:	68ba      	ldr	r2, [r7, #8]
   81402:	683b      	ldr	r3, [r7, #0]
   81404:	429a      	cmp	r2, r3
   81406:	d3f1      	bcc.n	813ec <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81408:	4a04      	ldr	r2, [pc, #16]	; (8141c <main_vendor_bulk_out_received+0xa0>)
   8140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8140e:	4804      	ldr	r0, [pc, #16]	; (81420 <main_vendor_bulk_out_received+0xa4>)
   81410:	4b04      	ldr	r3, [pc, #16]	; (81424 <main_vendor_bulk_out_received+0xa8>)
   81412:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   81414:	3710      	adds	r7, #16
   81416:	46bd      	mov	sp, r7
   81418:	bd80      	pop	{r7, pc}
   8141a:	bf00      	nop
   8141c:	0008137d 	.word	0x0008137d
   81420:	20000e08 	.word	0x20000e08
   81424:	00084ead 	.word	0x00084ead
   81428:	20001248 	.word	0x20001248
   8142c:	20000280 	.word	0x20000280
   81430:	00081495 	.word	0x00081495
   81434:	0008147d 	.word	0x0008147d
   81438:	00081661 	.word	0x00081661

0008143c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   8143c:	b580      	push	{r7, lr}
   8143e:	b084      	sub	sp, #16
   81440:	af00      	add	r7, sp, #0
   81442:	4603      	mov	r3, r0
   81444:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81446:	2300      	movs	r3, #0
   81448:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8144a:	4b09      	ldr	r3, [pc, #36]	; (81470 <FPGA_setlock+0x34>)
   8144c:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8144e:	4b09      	ldr	r3, [pc, #36]	; (81474 <FPGA_setlock+0x38>)
   81450:	781b      	ldrb	r3, [r3, #0]
   81452:	b2db      	uxtb	r3, r3
   81454:	2b00      	cmp	r3, #0
   81456:	d104      	bne.n	81462 <FPGA_setlock+0x26>
  {
    ret = 1;
   81458:	2301      	movs	r3, #1
   8145a:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   8145c:	4a05      	ldr	r2, [pc, #20]	; (81474 <FPGA_setlock+0x38>)
   8145e:	79fb      	ldrb	r3, [r7, #7]
   81460:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   81462:	4b05      	ldr	r3, [pc, #20]	; (81478 <FPGA_setlock+0x3c>)
   81464:	4798      	blx	r3
  return ret;
   81466:	68fb      	ldr	r3, [r7, #12]
}
   81468:	4618      	mov	r0, r3
   8146a:	3710      	adds	r7, #16
   8146c:	46bd      	mov	sp, r7
   8146e:	bd80      	pop	{r7, pc}
   81470:	000869b9 	.word	0x000869b9
   81474:	20001294 	.word	0x20001294
   81478:	00086a11 	.word	0x00086a11

0008147c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   8147c:	b480      	push	{r7}
   8147e:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   81480:	4b03      	ldr	r3, [pc, #12]	; (81490 <FPGA_releaselock+0x14>)
   81482:	2200      	movs	r2, #0
   81484:	701a      	strb	r2, [r3, #0]
}
   81486:	bf00      	nop
   81488:	46bd      	mov	sp, r7
   8148a:	bc80      	pop	{r7}
   8148c:	4770      	bx	lr
   8148e:	bf00      	nop
   81490:	20001294 	.word	0x20001294

00081494 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81494:	b480      	push	{r7}
   81496:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81498:	4b03      	ldr	r3, [pc, #12]	; (814a8 <FPGA_lockstatus+0x14>)
   8149a:	781b      	ldrb	r3, [r3, #0]
   8149c:	b2db      	uxtb	r3, r3
}
   8149e:	4618      	mov	r0, r3
   814a0:	46bd      	mov	sp, r7
   814a2:	bc80      	pop	{r7}
   814a4:	4770      	bx	lr
   814a6:	bf00      	nop
   814a8:	20001294 	.word	0x20001294

000814ac <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   814ac:	b580      	push	{r7, lr}
   814ae:	b082      	sub	sp, #8
   814b0:	af00      	add	r7, sp, #0
   814b2:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   814b4:	4b0c      	ldr	r3, [pc, #48]	; (814e8 <FPGA_setaddr+0x3c>)
   814b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   814b8:	f003 0240 	and.w	r2, r3, #64	; 0x40
   814bc:	687b      	ldr	r3, [r7, #4]
   814be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   814c2:	431a      	orrs	r2, r3
   814c4:	687b      	ldr	r3, [r7, #4]
   814c6:	005b      	lsls	r3, r3, #1
   814c8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   814cc:	4906      	ldr	r1, [pc, #24]	; (814e8 <FPGA_setaddr+0x3c>)
   814ce:	4313      	orrs	r3, r2
   814d0:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   814d2:	2031      	movs	r0, #49	; 0x31
   814d4:	4b05      	ldr	r3, [pc, #20]	; (814ec <FPGA_setaddr+0x40>)
   814d6:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   814d8:	2031      	movs	r0, #49	; 0x31
   814da:	4b05      	ldr	r3, [pc, #20]	; (814f0 <FPGA_setaddr+0x44>)
   814dc:	4798      	blx	r3
}
   814de:	bf00      	nop
   814e0:	3708      	adds	r7, #8
   814e2:	46bd      	mov	sp, r7
   814e4:	bd80      	pop	{r7, pc}
   814e6:	bf00      	nop
   814e8:	400e0e00 	.word	0x400e0e00
   814ec:	00085239 	.word	0x00085239
   814f0:	00085209 	.word	0x00085209

000814f4 <osc_get_rate>:
{
   814f4:	b480      	push	{r7}
   814f6:	b083      	sub	sp, #12
   814f8:	af00      	add	r7, sp, #0
   814fa:	6078      	str	r0, [r7, #4]
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	2b07      	cmp	r3, #7
   81500:	d823      	bhi.n	8154a <osc_get_rate+0x56>
   81502:	a201      	add	r2, pc, #4	; (adr r2, 81508 <osc_get_rate+0x14>)
   81504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81508:	00081529 	.word	0x00081529
   8150c:	0008152f 	.word	0x0008152f
   81510:	00081533 	.word	0x00081533
   81514:	00081537 	.word	0x00081537
   81518:	0008153b 	.word	0x0008153b
   8151c:	0008153f 	.word	0x0008153f
   81520:	00081543 	.word	0x00081543
   81524:	00081547 	.word	0x00081547
		return OSC_SLCK_32K_RC_HZ;
   81528:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8152c:	e00e      	b.n	8154c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8152e:	2300      	movs	r3, #0
   81530:	e00c      	b.n	8154c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81532:	2300      	movs	r3, #0
   81534:	e00a      	b.n	8154c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81536:	4b08      	ldr	r3, [pc, #32]	; (81558 <osc_get_rate+0x64>)
   81538:	e008      	b.n	8154c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8153a:	4b08      	ldr	r3, [pc, #32]	; (8155c <osc_get_rate+0x68>)
   8153c:	e006      	b.n	8154c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8153e:	4b08      	ldr	r3, [pc, #32]	; (81560 <osc_get_rate+0x6c>)
   81540:	e004      	b.n	8154c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81542:	4b07      	ldr	r3, [pc, #28]	; (81560 <osc_get_rate+0x6c>)
   81544:	e002      	b.n	8154c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81546:	4b06      	ldr	r3, [pc, #24]	; (81560 <osc_get_rate+0x6c>)
   81548:	e000      	b.n	8154c <osc_get_rate+0x58>
	return 0;
   8154a:	2300      	movs	r3, #0
}
   8154c:	4618      	mov	r0, r3
   8154e:	370c      	adds	r7, #12
   81550:	46bd      	mov	sp, r7
   81552:	bc80      	pop	{r7}
   81554:	4770      	bx	lr
   81556:	bf00      	nop
   81558:	003d0900 	.word	0x003d0900
   8155c:	007a1200 	.word	0x007a1200
   81560:	00b71b00 	.word	0x00b71b00

00081564 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81564:	b580      	push	{r7, lr}
   81566:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81568:	2006      	movs	r0, #6
   8156a:	4b03      	ldr	r3, [pc, #12]	; (81578 <sysclk_get_main_hz+0x14>)
   8156c:	4798      	blx	r3
   8156e:	4603      	mov	r3, r0
   81570:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81572:	4618      	mov	r0, r3
   81574:	bd80      	pop	{r7, pc}
   81576:	bf00      	nop
   81578:	000814f5 	.word	0x000814f5

0008157c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8157c:	b580      	push	{r7, lr}
   8157e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81580:	4b02      	ldr	r3, [pc, #8]	; (8158c <sysclk_get_cpu_hz+0x10>)
   81582:	4798      	blx	r3
   81584:	4603      	mov	r3, r0
   81586:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81588:	4618      	mov	r0, r3
   8158a:	bd80      	pop	{r7, pc}
   8158c:	00081565 	.word	0x00081565

00081590 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81590:	b580      	push	{r7, lr}
   81592:	b082      	sub	sp, #8
   81594:	af00      	add	r7, sp, #0
   81596:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81598:	6878      	ldr	r0, [r7, #4]
   8159a:	4b03      	ldr	r3, [pc, #12]	; (815a8 <sysclk_enable_peripheral_clock+0x18>)
   8159c:	4798      	blx	r3
}
   8159e:	bf00      	nop
   815a0:	3708      	adds	r7, #8
   815a2:	46bd      	mov	sp, r7
   815a4:	bd80      	pop	{r7, pc}
   815a6:	bf00      	nop
   815a8:	00084c79 	.word	0x00084c79

000815ac <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   815ac:	b580      	push	{r7, lr}
   815ae:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   815b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815b4:	2019      	movs	r0, #25
   815b6:	4b03      	ldr	r3, [pc, #12]	; (815c4 <fpga_program_init+0x18>)
   815b8:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   815ba:	2019      	movs	r0, #25
   815bc:	4b02      	ldr	r3, [pc, #8]	; (815c8 <fpga_program_init+0x1c>)
   815be:	4798      	blx	r3
}
   815c0:	bf00      	nop
   815c2:	bd80      	pop	{r7, pc}
   815c4:	00085269 	.word	0x00085269
   815c8:	00085209 	.word	0x00085209

000815cc <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   815cc:	b580      	push	{r7, lr}
   815ce:	b084      	sub	sp, #16
   815d0:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   815d2:	2019      	movs	r0, #25
   815d4:	4b14      	ldr	r3, [pc, #80]	; (81628 <fpga_program_setup1+0x5c>)
   815d6:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   815d8:	4b14      	ldr	r3, [pc, #80]	; (8162c <fpga_program_setup1+0x60>)
   815da:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   815dc:	23c0      	movs	r3, #192	; 0xc0
   815de:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   815e0:	2300      	movs	r3, #0
   815e2:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   815e4:	2300      	movs	r3, #0
   815e6:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   815e8:	200d      	movs	r0, #13
   815ea:	4b11      	ldr	r3, [pc, #68]	; (81630 <fpga_program_setup1+0x64>)
   815ec:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   815ee:	4b11      	ldr	r3, [pc, #68]	; (81634 <fpga_program_setup1+0x68>)
   815f0:	4798      	blx	r3
   815f2:	4602      	mov	r2, r0
   815f4:	463b      	mov	r3, r7
   815f6:	4619      	mov	r1, r3
   815f8:	480f      	ldr	r0, [pc, #60]	; (81638 <fpga_program_setup1+0x6c>)
   815fa:	4b10      	ldr	r3, [pc, #64]	; (8163c <fpga_program_setup1+0x70>)
   815fc:	4798      	blx	r3
    FPGA_DO_SETUP();
   815fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81602:	2012      	movs	r0, #18
   81604:	4b0e      	ldr	r3, [pc, #56]	; (81640 <fpga_program_setup1+0x74>)
   81606:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81608:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8160c:	2011      	movs	r0, #17
   8160e:	4b0c      	ldr	r3, [pc, #48]	; (81640 <fpga_program_setup1+0x74>)
   81610:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81612:	4b0c      	ldr	r3, [pc, #48]	; (81644 <fpga_program_setup1+0x78>)
   81614:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81618:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   8161a:	4807      	ldr	r0, [pc, #28]	; (81638 <fpga_program_setup1+0x6c>)
   8161c:	4b0a      	ldr	r3, [pc, #40]	; (81648 <fpga_program_setup1+0x7c>)
   8161e:	4798      	blx	r3
}
   81620:	bf00      	nop
   81622:	3710      	adds	r7, #16
   81624:	46bd      	mov	sp, r7
   81626:	bd80      	pop	{r7, pc}
   81628:	00085239 	.word	0x00085239
   8162c:	00989680 	.word	0x00989680
   81630:	00081591 	.word	0x00081591
   81634:	0008157d 	.word	0x0008157d
   81638:	40090000 	.word	0x40090000
   8163c:	00082155 	.word	0x00082155
   81640:	00085269 	.word	0x00085269
   81644:	400e0c00 	.word	0x400e0c00
   81648:	00082265 	.word	0x00082265

0008164c <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   8164c:	b580      	push	{r7, lr}
   8164e:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81650:	2019      	movs	r0, #25
   81652:	4b02      	ldr	r3, [pc, #8]	; (8165c <fpga_program_setup2+0x10>)
   81654:	4798      	blx	r3
}
   81656:	bf00      	nop
   81658:	bd80      	pop	{r7, pc}
   8165a:	bf00      	nop
   8165c:	00085209 	.word	0x00085209

00081660 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81660:	b580      	push	{r7, lr}
   81662:	b082      	sub	sp, #8
   81664:	af00      	add	r7, sp, #0
   81666:	4603      	mov	r3, r0
   81668:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8166a:	79fb      	ldrb	r3, [r7, #7]
   8166c:	4619      	mov	r1, r3
   8166e:	4803      	ldr	r0, [pc, #12]	; (8167c <fpga_program_sendbyte+0x1c>)
   81670:	4b03      	ldr	r3, [pc, #12]	; (81680 <fpga_program_sendbyte+0x20>)
   81672:	4798      	blx	r3
}
   81674:	bf00      	nop
   81676:	3708      	adds	r7, #8
   81678:	46bd      	mov	sp, r7
   8167a:	bd80      	pop	{r7, pc}
   8167c:	40090000 	.word	0x40090000
   81680:	0008238b 	.word	0x0008238b

00081684 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81684:	b480      	push	{r7}
   81686:	b083      	sub	sp, #12
   81688:	af00      	add	r7, sp, #0
   8168a:	4603      	mov	r3, r0
   8168c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8168e:	79fb      	ldrb	r3, [r7, #7]
   81690:	f003 031f 	and.w	r3, r3, #31
   81694:	2201      	movs	r2, #1
   81696:	fa02 f103 	lsl.w	r1, r2, r3
   8169a:	4a05      	ldr	r2, [pc, #20]	; (816b0 <NVIC_EnableIRQ+0x2c>)
   8169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   816a0:	095b      	lsrs	r3, r3, #5
   816a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   816a6:	bf00      	nop
   816a8:	370c      	adds	r7, #12
   816aa:	46bd      	mov	sp, r7
   816ac:	bc80      	pop	{r7}
   816ae:	4770      	bx	lr
   816b0:	e000e100 	.word	0xe000e100

000816b4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   816b4:	b480      	push	{r7}
   816b6:	b083      	sub	sp, #12
   816b8:	af00      	add	r7, sp, #0
   816ba:	4603      	mov	r3, r0
   816bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   816be:	79fb      	ldrb	r3, [r7, #7]
   816c0:	f003 031f 	and.w	r3, r3, #31
   816c4:	2201      	movs	r2, #1
   816c6:	fa02 f103 	lsl.w	r1, r2, r3
   816ca:	4a06      	ldr	r2, [pc, #24]	; (816e4 <NVIC_ClearPendingIRQ+0x30>)
   816cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   816d0:	095b      	lsrs	r3, r3, #5
   816d2:	3360      	adds	r3, #96	; 0x60
   816d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   816d8:	bf00      	nop
   816da:	370c      	adds	r7, #12
   816dc:	46bd      	mov	sp, r7
   816de:	bc80      	pop	{r7}
   816e0:	4770      	bx	lr
   816e2:	bf00      	nop
   816e4:	e000e100 	.word	0xe000e100

000816e8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   816e8:	b480      	push	{r7}
   816ea:	b083      	sub	sp, #12
   816ec:	af00      	add	r7, sp, #0
   816ee:	4603      	mov	r3, r0
   816f0:	6039      	str	r1, [r7, #0]
   816f2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   816f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   816f8:	2b00      	cmp	r3, #0
   816fa:	da0b      	bge.n	81714 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   816fc:	683b      	ldr	r3, [r7, #0]
   816fe:	b2da      	uxtb	r2, r3
   81700:	490c      	ldr	r1, [pc, #48]	; (81734 <NVIC_SetPriority+0x4c>)
   81702:	79fb      	ldrb	r3, [r7, #7]
   81704:	f003 030f 	and.w	r3, r3, #15
   81708:	3b04      	subs	r3, #4
   8170a:	0112      	lsls	r2, r2, #4
   8170c:	b2d2      	uxtb	r2, r2
   8170e:	440b      	add	r3, r1
   81710:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81712:	e009      	b.n	81728 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81714:	683b      	ldr	r3, [r7, #0]
   81716:	b2da      	uxtb	r2, r3
   81718:	4907      	ldr	r1, [pc, #28]	; (81738 <NVIC_SetPriority+0x50>)
   8171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8171e:	0112      	lsls	r2, r2, #4
   81720:	b2d2      	uxtb	r2, r2
   81722:	440b      	add	r3, r1
   81724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81728:	bf00      	nop
   8172a:	370c      	adds	r7, #12
   8172c:	46bd      	mov	sp, r7
   8172e:	bc80      	pop	{r7}
   81730:	4770      	bx	lr
   81732:	bf00      	nop
   81734:	e000ed00 	.word	0xe000ed00
   81738:	e000e100 	.word	0xe000e100

0008173c <osc_get_rate>:
{
   8173c:	b480      	push	{r7}
   8173e:	b083      	sub	sp, #12
   81740:	af00      	add	r7, sp, #0
   81742:	6078      	str	r0, [r7, #4]
   81744:	687b      	ldr	r3, [r7, #4]
   81746:	2b07      	cmp	r3, #7
   81748:	d823      	bhi.n	81792 <osc_get_rate+0x56>
   8174a:	a201      	add	r2, pc, #4	; (adr r2, 81750 <osc_get_rate+0x14>)
   8174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81750:	00081771 	.word	0x00081771
   81754:	00081777 	.word	0x00081777
   81758:	0008177b 	.word	0x0008177b
   8175c:	0008177f 	.word	0x0008177f
   81760:	00081783 	.word	0x00081783
   81764:	00081787 	.word	0x00081787
   81768:	0008178b 	.word	0x0008178b
   8176c:	0008178f 	.word	0x0008178f
		return OSC_SLCK_32K_RC_HZ;
   81770:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81774:	e00e      	b.n	81794 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81776:	2300      	movs	r3, #0
   81778:	e00c      	b.n	81794 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8177a:	2300      	movs	r3, #0
   8177c:	e00a      	b.n	81794 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8177e:	4b08      	ldr	r3, [pc, #32]	; (817a0 <osc_get_rate+0x64>)
   81780:	e008      	b.n	81794 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81782:	4b08      	ldr	r3, [pc, #32]	; (817a4 <osc_get_rate+0x68>)
   81784:	e006      	b.n	81794 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81786:	4b08      	ldr	r3, [pc, #32]	; (817a8 <osc_get_rate+0x6c>)
   81788:	e004      	b.n	81794 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8178a:	4b07      	ldr	r3, [pc, #28]	; (817a8 <osc_get_rate+0x6c>)
   8178c:	e002      	b.n	81794 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8178e:	4b06      	ldr	r3, [pc, #24]	; (817a8 <osc_get_rate+0x6c>)
   81790:	e000      	b.n	81794 <osc_get_rate+0x58>
	return 0;
   81792:	2300      	movs	r3, #0
}
   81794:	4618      	mov	r0, r3
   81796:	370c      	adds	r7, #12
   81798:	46bd      	mov	sp, r7
   8179a:	bc80      	pop	{r7}
   8179c:	4770      	bx	lr
   8179e:	bf00      	nop
   817a0:	003d0900 	.word	0x003d0900
   817a4:	007a1200 	.word	0x007a1200
   817a8:	00b71b00 	.word	0x00b71b00

000817ac <sysclk_get_main_hz>:
{
   817ac:	b580      	push	{r7, lr}
   817ae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   817b0:	2006      	movs	r0, #6
   817b2:	4b03      	ldr	r3, [pc, #12]	; (817c0 <sysclk_get_main_hz+0x14>)
   817b4:	4798      	blx	r3
   817b6:	4603      	mov	r3, r0
   817b8:	011b      	lsls	r3, r3, #4
}
   817ba:	4618      	mov	r0, r3
   817bc:	bd80      	pop	{r7, pc}
   817be:	bf00      	nop
   817c0:	0008173d 	.word	0x0008173d

000817c4 <sysclk_get_cpu_hz>:
{
   817c4:	b580      	push	{r7, lr}
   817c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   817c8:	4b02      	ldr	r3, [pc, #8]	; (817d4 <sysclk_get_cpu_hz+0x10>)
   817ca:	4798      	blx	r3
   817cc:	4603      	mov	r3, r0
   817ce:	085b      	lsrs	r3, r3, #1
}
   817d0:	4618      	mov	r0, r3
   817d2:	bd80      	pop	{r7, pc}
   817d4:	000817ad 	.word	0x000817ad

000817d8 <sysclk_enable_peripheral_clock>:
{
   817d8:	b580      	push	{r7, lr}
   817da:	b082      	sub	sp, #8
   817dc:	af00      	add	r7, sp, #0
   817de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   817e0:	6878      	ldr	r0, [r7, #4]
   817e2:	4b03      	ldr	r3, [pc, #12]	; (817f0 <sysclk_enable_peripheral_clock+0x18>)
   817e4:	4798      	blx	r3
}
   817e6:	bf00      	nop
   817e8:	3708      	adds	r7, #8
   817ea:	46bd      	mov	sp, r7
   817ec:	bd80      	pop	{r7, pc}
   817ee:	bf00      	nop
   817f0:	00084c79 	.word	0x00084c79

000817f4 <usart0_enableIO>:
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
   817f4:	b580      	push	{r7, lr}
   817f6:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   817f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817fc:	2013      	movs	r0, #19
   817fe:	4b04      	ldr	r3, [pc, #16]	; (81810 <usart0_enableIO+0x1c>)
   81800:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81802:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81806:	2012      	movs	r0, #18
   81808:	4b01      	ldr	r3, [pc, #4]	; (81810 <usart0_enableIO+0x1c>)
   8180a:	4798      	blx	r3
}
   8180c:	bf00      	nop
   8180e:	bd80      	pop	{r7, pc}
   81810:	00085269 	.word	0x00085269

00081814 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   81814:	b580      	push	{r7, lr}
   81816:	b08a      	sub	sp, #40	; 0x28
   81818:	af00      	add	r7, sp, #0
   8181a:	6078      	str	r0, [r7, #4]
   8181c:	460b      	mov	r3, r1
   8181e:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81820:	4b9b      	ldr	r3, [pc, #620]	; (81a90 <ctrl_usart+0x27c>)
   81822:	885b      	ldrh	r3, [r3, #2]
   81824:	b2db      	uxtb	r3, r3
   81826:	3b10      	subs	r3, #16
   81828:	2b08      	cmp	r3, #8
   8182a:	f200 81bf 	bhi.w	81bac <ctrl_usart+0x398>
   8182e:	a201      	add	r2, pc, #4	; (adr r2, 81834 <ctrl_usart+0x20>)
   81830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81834:	00081859 	.word	0x00081859
   81838:	000819a3 	.word	0x000819a3
   8183c:	00081a25 	.word	0x00081a25
   81840:	00081bad 	.word	0x00081bad
   81844:	00081a49 	.word	0x00081a49
   81848:	00081bad 	.word	0x00081bad
   8184c:	00081bad 	.word	0x00081bad
   81850:	00081bad 	.word	0x00081bad
   81854:	00081b27 	.word	0x00081b27
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81858:	78fb      	ldrb	r3, [r7, #3]
   8185a:	2b00      	cmp	r3, #0
   8185c:	d006      	beq.n	8186c <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   8185e:	4b8c      	ldr	r3, [pc, #560]	; (81a90 <ctrl_usart+0x27c>)
   81860:	88db      	ldrh	r3, [r3, #6]
   81862:	2b04      	cmp	r3, #4
   81864:	f040 8199 	bne.w	81b9a <ctrl_usart+0x386>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   81868:	2301      	movs	r3, #1
   8186a:	e1a0      	b.n	81bae <ctrl_usart+0x39a>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   8186c:	4b88      	ldr	r3, [pc, #544]	; (81a90 <ctrl_usart+0x27c>)
   8186e:	88db      	ldrh	r3, [r3, #6]
   81870:	2b07      	cmp	r3, #7
   81872:	f040 8192 	bne.w	81b9a <ctrl_usart+0x386>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   81876:	4b86      	ldr	r3, [pc, #536]	; (81a90 <ctrl_usart+0x27c>)
   81878:	689b      	ldr	r3, [r3, #8]
   8187a:	681b      	ldr	r3, [r3, #0]
   8187c:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   8187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81880:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   81882:	4b83      	ldr	r3, [pc, #524]	; (81a90 <ctrl_usart+0x27c>)
   81884:	689b      	ldr	r3, [r3, #8]
   81886:	3304      	adds	r3, #4
   81888:	781b      	ldrb	r3, [r3, #0]
   8188a:	2b02      	cmp	r3, #2
   8188c:	d00d      	beq.n	818aa <ctrl_usart+0x96>
   8188e:	2b02      	cmp	r3, #2
   81890:	dc0f      	bgt.n	818b2 <ctrl_usart+0x9e>
   81892:	2b00      	cmp	r3, #0
   81894:	d002      	beq.n	8189c <ctrl_usart+0x88>
   81896:	2b01      	cmp	r3, #1
   81898:	d003      	beq.n	818a2 <ctrl_usart+0x8e>
   8189a:	e00a      	b.n	818b2 <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8189c:	2300      	movs	r3, #0
   8189e:	61bb      	str	r3, [r7, #24]
								break;
   818a0:	e009      	b.n	818b6 <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   818a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   818a6:	61bb      	str	r3, [r7, #24]
								break;
   818a8:	e005      	b.n	818b6 <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   818aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   818ae:	61bb      	str	r3, [r7, #24]
								break;
   818b0:	e001      	b.n	818b6 <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   818b2:	2300      	movs	r3, #0
   818b4:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   818b6:	4b76      	ldr	r3, [pc, #472]	; (81a90 <ctrl_usart+0x27c>)
   818b8:	689b      	ldr	r3, [r3, #8]
   818ba:	3305      	adds	r3, #5
   818bc:	781b      	ldrb	r3, [r3, #0]
   818be:	2b04      	cmp	r3, #4
   818c0:	d81f      	bhi.n	81902 <ctrl_usart+0xee>
   818c2:	a201      	add	r2, pc, #4	; (adr r2, 818c8 <ctrl_usart+0xb4>)
   818c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   818c8:	000818dd 	.word	0x000818dd
   818cc:	000818e5 	.word	0x000818e5
   818d0:	000818ed 	.word	0x000818ed
   818d4:	000818f3 	.word	0x000818f3
   818d8:	000818fb 	.word	0x000818fb
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   818dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818e0:	617b      	str	r3, [r7, #20]
								break;
   818e2:	e011      	b.n	81908 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   818e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   818e8:	617b      	str	r3, [r7, #20]
								break;
   818ea:	e00d      	b.n	81908 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   818ec:	2300      	movs	r3, #0
   818ee:	617b      	str	r3, [r7, #20]
								break;
   818f0:	e00a      	b.n	81908 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   818f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   818f6:	617b      	str	r3, [r7, #20]
								break;
   818f8:	e006      	b.n	81908 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   818fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   818fe:	617b      	str	r3, [r7, #20]
								break;							
   81900:	e002      	b.n	81908 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   81902:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81906:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   81908:	4b61      	ldr	r3, [pc, #388]	; (81a90 <ctrl_usart+0x27c>)
   8190a:	689b      	ldr	r3, [r3, #8]
   8190c:	3306      	adds	r3, #6
   8190e:	781b      	ldrb	r3, [r3, #0]
   81910:	2b07      	cmp	r3, #7
   81912:	d00c      	beq.n	8192e <ctrl_usart+0x11a>
   81914:	2b07      	cmp	r3, #7
   81916:	dc0d      	bgt.n	81934 <ctrl_usart+0x120>
   81918:	2b05      	cmp	r3, #5
   8191a:	d002      	beq.n	81922 <ctrl_usart+0x10e>
   8191c:	2b06      	cmp	r3, #6
   8191e:	d003      	beq.n	81928 <ctrl_usart+0x114>
   81920:	e008      	b.n	81934 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   81922:	2300      	movs	r3, #0
   81924:	613b      	str	r3, [r7, #16]
								break;
   81926:	e007      	b.n	81938 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81928:	2340      	movs	r3, #64	; 0x40
   8192a:	613b      	str	r3, [r7, #16]
								break;
   8192c:	e004      	b.n	81938 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   8192e:	2380      	movs	r3, #128	; 0x80
   81930:	613b      	str	r3, [r7, #16]
								break;					
   81932:	e001      	b.n	81938 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81934:	23c0      	movs	r3, #192	; 0xc0
   81936:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81938:	2300      	movs	r3, #0
   8193a:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   8193c:	687b      	ldr	r3, [r7, #4]
   8193e:	4a55      	ldr	r2, [pc, #340]	; (81a94 <ctrl_usart+0x280>)
   81940:	4293      	cmp	r3, r2
   81942:	d109      	bne.n	81958 <ctrl_usart+0x144>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   81944:	200d      	movs	r0, #13
   81946:	4b54      	ldr	r3, [pc, #336]	; (81a98 <ctrl_usart+0x284>)
   81948:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   8194a:	4854      	ldr	r0, [pc, #336]	; (81a9c <ctrl_usart+0x288>)
   8194c:	4b54      	ldr	r3, [pc, #336]	; (81aa0 <ctrl_usart+0x28c>)
   8194e:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81950:	4854      	ldr	r0, [pc, #336]	; (81aa4 <ctrl_usart+0x290>)
   81952:	4b53      	ldr	r3, [pc, #332]	; (81aa0 <ctrl_usart+0x28c>)
   81954:	4798      	blx	r3
   81956:	e01a      	b.n	8198e <ctrl_usart+0x17a>
						} else if (usart == USART1)
   81958:	687b      	ldr	r3, [r7, #4]
   8195a:	4a53      	ldr	r2, [pc, #332]	; (81aa8 <ctrl_usart+0x294>)
   8195c:	4293      	cmp	r3, r2
   8195e:	d109      	bne.n	81974 <ctrl_usart+0x160>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   81960:	200e      	movs	r0, #14
   81962:	4b4d      	ldr	r3, [pc, #308]	; (81a98 <ctrl_usart+0x284>)
   81964:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   81966:	4851      	ldr	r0, [pc, #324]	; (81aac <ctrl_usart+0x298>)
   81968:	4b4d      	ldr	r3, [pc, #308]	; (81aa0 <ctrl_usart+0x28c>)
   8196a:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   8196c:	4850      	ldr	r0, [pc, #320]	; (81ab0 <ctrl_usart+0x29c>)
   8196e:	4b4c      	ldr	r3, [pc, #304]	; (81aa0 <ctrl_usart+0x28c>)
   81970:	4798      	blx	r3
   81972:	e00c      	b.n	8198e <ctrl_usart+0x17a>
						} else if (usart == USART2)
   81974:	687b      	ldr	r3, [r7, #4]
   81976:	4a4f      	ldr	r2, [pc, #316]	; (81ab4 <ctrl_usart+0x2a0>)
   81978:	4293      	cmp	r3, r2
   8197a:	d108      	bne.n	8198e <ctrl_usart+0x17a>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   8197c:	200f      	movs	r0, #15
   8197e:	4b46      	ldr	r3, [pc, #280]	; (81a98 <ctrl_usart+0x284>)
   81980:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81982:	484d      	ldr	r0, [pc, #308]	; (81ab8 <ctrl_usart+0x2a4>)
   81984:	4b46      	ldr	r3, [pc, #280]	; (81aa0 <ctrl_usart+0x28c>)
   81986:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   81988:	484c      	ldr	r0, [pc, #304]	; (81abc <ctrl_usart+0x2a8>)
   8198a:	4b45      	ldr	r3, [pc, #276]	; (81aa0 <ctrl_usart+0x28c>)
   8198c:	4798      	blx	r3
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   8198e:	4b4c      	ldr	r3, [pc, #304]	; (81ac0 <ctrl_usart+0x2ac>)
   81990:	4798      	blx	r3
   81992:	4602      	mov	r2, r0
   81994:	f107 030c 	add.w	r3, r7, #12
   81998:	4619      	mov	r1, r3
   8199a:	6878      	ldr	r0, [r7, #4]
   8199c:	4b49      	ldr	r3, [pc, #292]	; (81ac4 <ctrl_usart+0x2b0>)
   8199e:	4798      	blx	r3
					} else {
					}
			}
			break;
   819a0:	e0fb      	b.n	81b9a <ctrl_usart+0x386>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   819a2:	78fb      	ldrb	r3, [r7, #3]
   819a4:	f083 0301 	eor.w	r3, r3, #1
   819a8:	b2db      	uxtb	r3, r3
   819aa:	2b00      	cmp	r3, #0
   819ac:	f000 80f7 	beq.w	81b9e <ctrl_usart+0x38a>
				usart_enable_rx(usart);
   819b0:	6878      	ldr	r0, [r7, #4]
   819b2:	4b45      	ldr	r3, [pc, #276]	; (81ac8 <ctrl_usart+0x2b4>)
   819b4:	4798      	blx	r3
				usart_enable_tx(usart);
   819b6:	6878      	ldr	r0, [r7, #4]
   819b8:	4b44      	ldr	r3, [pc, #272]	; (81acc <ctrl_usart+0x2b8>)
   819ba:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   819bc:	2101      	movs	r1, #1
   819be:	6878      	ldr	r0, [r7, #4]
   819c0:	4b43      	ldr	r3, [pc, #268]	; (81ad0 <ctrl_usart+0x2bc>)
   819c2:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   819c4:	687b      	ldr	r3, [r7, #4]
   819c6:	4a33      	ldr	r2, [pc, #204]	; (81a94 <ctrl_usart+0x280>)
   819c8:	4293      	cmp	r3, r2
   819ca:	d10c      	bne.n	819e6 <ctrl_usart+0x1d2>
					usart0_enableIO();
   819cc:	4b41      	ldr	r3, [pc, #260]	; (81ad4 <ctrl_usart+0x2c0>)
   819ce:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   819d0:	200d      	movs	r0, #13
   819d2:	4b41      	ldr	r3, [pc, #260]	; (81ad8 <ctrl_usart+0x2c4>)
   819d4:	4798      	blx	r3
   819d6:	2105      	movs	r1, #5
   819d8:	200d      	movs	r0, #13
   819da:	4b40      	ldr	r3, [pc, #256]	; (81adc <ctrl_usart+0x2c8>)
   819dc:	4798      	blx	r3
   819de:	200d      	movs	r0, #13
   819e0:	4b3f      	ldr	r3, [pc, #252]	; (81ae0 <ctrl_usart+0x2cc>)
   819e2:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   819e4:	e0db      	b.n	81b9e <ctrl_usart+0x38a>
				} else if (usart == USART1) {
   819e6:	687b      	ldr	r3, [r7, #4]
   819e8:	4a2f      	ldr	r2, [pc, #188]	; (81aa8 <ctrl_usart+0x294>)
   819ea:	4293      	cmp	r3, r2
   819ec:	d10a      	bne.n	81a04 <ctrl_usart+0x1f0>
					irq_register_handler(USART1_IRQn, 5);
   819ee:	200e      	movs	r0, #14
   819f0:	4b39      	ldr	r3, [pc, #228]	; (81ad8 <ctrl_usart+0x2c4>)
   819f2:	4798      	blx	r3
   819f4:	2105      	movs	r1, #5
   819f6:	200e      	movs	r0, #14
   819f8:	4b38      	ldr	r3, [pc, #224]	; (81adc <ctrl_usart+0x2c8>)
   819fa:	4798      	blx	r3
   819fc:	200e      	movs	r0, #14
   819fe:	4b38      	ldr	r3, [pc, #224]	; (81ae0 <ctrl_usart+0x2cc>)
   81a00:	4798      	blx	r3
			break;
   81a02:	e0cc      	b.n	81b9e <ctrl_usart+0x38a>
				} else if (usart == USART2) {
   81a04:	687b      	ldr	r3, [r7, #4]
   81a06:	4a2b      	ldr	r2, [pc, #172]	; (81ab4 <ctrl_usart+0x2a0>)
   81a08:	4293      	cmp	r3, r2
   81a0a:	f040 80c8 	bne.w	81b9e <ctrl_usart+0x38a>
					irq_register_handler(USART2_IRQn, 5);
   81a0e:	200f      	movs	r0, #15
   81a10:	4b31      	ldr	r3, [pc, #196]	; (81ad8 <ctrl_usart+0x2c4>)
   81a12:	4798      	blx	r3
   81a14:	2105      	movs	r1, #5
   81a16:	200f      	movs	r0, #15
   81a18:	4b30      	ldr	r3, [pc, #192]	; (81adc <ctrl_usart+0x2c8>)
   81a1a:	4798      	blx	r3
   81a1c:	200f      	movs	r0, #15
   81a1e:	4b30      	ldr	r3, [pc, #192]	; (81ae0 <ctrl_usart+0x2cc>)
   81a20:	4798      	blx	r3
			break;
   81a22:	e0bc      	b.n	81b9e <ctrl_usart+0x38a>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   81a24:	78fb      	ldrb	r3, [r7, #3]
   81a26:	f083 0301 	eor.w	r3, r3, #1
   81a2a:	b2db      	uxtb	r3, r3
   81a2c:	2b00      	cmp	r3, #0
   81a2e:	f000 80b8 	beq.w	81ba2 <ctrl_usart+0x38e>
				usart_disable_rx(usart);
   81a32:	6878      	ldr	r0, [r7, #4]
   81a34:	4b2b      	ldr	r3, [pc, #172]	; (81ae4 <ctrl_usart+0x2d0>)
   81a36:	4798      	blx	r3
				usart_disable_rx(usart);
   81a38:	6878      	ldr	r0, [r7, #4]
   81a3a:	4b2a      	ldr	r3, [pc, #168]	; (81ae4 <ctrl_usart+0x2d0>)
   81a3c:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81a3e:	2103      	movs	r1, #3
   81a40:	6878      	ldr	r0, [r7, #4]
   81a42:	4b29      	ldr	r3, [pc, #164]	; (81ae8 <ctrl_usart+0x2d4>)
   81a44:	4798      	blx	r3
			}
		
			break;
   81a46:	e0ac      	b.n	81ba2 <ctrl_usart+0x38e>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   81a48:	78fb      	ldrb	r3, [r7, #3]
   81a4a:	2b00      	cmp	r3, #0
   81a4c:	f000 80ab 	beq.w	81ba6 <ctrl_usart+0x392>
				if (udd_g_ctrlreq.req.wLength == 4){
   81a50:	4b0f      	ldr	r3, [pc, #60]	; (81a90 <ctrl_usart+0x27c>)
   81a52:	88db      	ldrh	r3, [r3, #6]
   81a54:	2b04      	cmp	r3, #4
   81a56:	f040 80a6 	bne.w	81ba6 <ctrl_usart+0x392>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81a5a:	4b0d      	ldr	r3, [pc, #52]	; (81a90 <ctrl_usart+0x27c>)
   81a5c:	4a23      	ldr	r2, [pc, #140]	; (81aec <ctrl_usart+0x2d8>)
   81a5e:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81a60:	4b0b      	ldr	r3, [pc, #44]	; (81a90 <ctrl_usart+0x27c>)
   81a62:	2204      	movs	r2, #4
   81a64:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81a66:	687b      	ldr	r3, [r7, #4]
   81a68:	4a0a      	ldr	r2, [pc, #40]	; (81a94 <ctrl_usart+0x280>)
   81a6a:	4293      	cmp	r3, r2
   81a6c:	d105      	bne.n	81a7a <ctrl_usart+0x266>
						cnt = circ_buf_count(&rx0buf);
   81a6e:	480d      	ldr	r0, [pc, #52]	; (81aa4 <ctrl_usart+0x290>)
   81a70:	4b1f      	ldr	r3, [pc, #124]	; (81af0 <ctrl_usart+0x2dc>)
   81a72:	4798      	blx	r3
   81a74:	4603      	mov	r3, r0
   81a76:	60bb      	str	r3, [r7, #8]
   81a78:	e045      	b.n	81b06 <ctrl_usart+0x2f2>
					} else if (usart == USART1){
   81a7a:	687b      	ldr	r3, [r7, #4]
   81a7c:	4a0a      	ldr	r2, [pc, #40]	; (81aa8 <ctrl_usart+0x294>)
   81a7e:	4293      	cmp	r3, r2
   81a80:	d138      	bne.n	81af4 <ctrl_usart+0x2e0>
						cnt = circ_buf_count(&rx1buf);
   81a82:	480b      	ldr	r0, [pc, #44]	; (81ab0 <ctrl_usart+0x29c>)
   81a84:	4b1a      	ldr	r3, [pc, #104]	; (81af0 <ctrl_usart+0x2dc>)
   81a86:	4798      	blx	r3
   81a88:	4603      	mov	r3, r0
   81a8a:	60bb      	str	r3, [r7, #8]
   81a8c:	e03b      	b.n	81b06 <ctrl_usart+0x2f2>
   81a8e:	bf00      	nop
   81a90:	20001810 	.word	0x20001810
   81a94:	40090000 	.word	0x40090000
   81a98:	000817d9 	.word	0x000817d9
   81a9c:	20001784 	.word	0x20001784
   81aa0:	00086891 	.word	0x00086891
   81aa4:	2000143c 	.word	0x2000143c
   81aa8:	40094000 	.word	0x40094000
   81aac:	20001554 	.word	0x20001554
   81ab0:	200016f8 	.word	0x200016f8
   81ab4:	40098000 	.word	0x40098000
   81ab8:	200013b0 	.word	0x200013b0
   81abc:	2000166c 	.word	0x2000166c
   81ac0:	000817c5 	.word	0x000817c5
   81ac4:	000820d1 	.word	0x000820d1
   81ac8:	00082295 	.word	0x00082295
   81acc:	00082265 	.word	0x00082265
   81ad0:	000822dd 	.word	0x000822dd
   81ad4:	000817f5 	.word	0x000817f5
   81ad8:	000816b5 	.word	0x000816b5
   81adc:	000816e9 	.word	0x000816e9
   81ae0:	00081685 	.word	0x00081685
   81ae4:	000822ad 	.word	0x000822ad
   81ae8:	000822f7 	.word	0x000822f7
   81aec:	20001298 	.word	0x20001298
   81af0:	00086989 	.word	0x00086989
					} else if (usart == USART2){
   81af4:	687b      	ldr	r3, [r7, #4]
   81af6:	4a30      	ldr	r2, [pc, #192]	; (81bb8 <ctrl_usart+0x3a4>)
   81af8:	4293      	cmp	r3, r2
   81afa:	d104      	bne.n	81b06 <ctrl_usart+0x2f2>
						cnt = circ_buf_count(&rx2buf);
   81afc:	482f      	ldr	r0, [pc, #188]	; (81bbc <ctrl_usart+0x3a8>)
   81afe:	4b30      	ldr	r3, [pc, #192]	; (81bc0 <ctrl_usart+0x3ac>)
   81b00:	4798      	blx	r3
   81b02:	4603      	mov	r3, r0
   81b04:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81b06:	f107 0308 	add.w	r3, r7, #8
   81b0a:	781a      	ldrb	r2, [r3, #0]
   81b0c:	4b2d      	ldr	r3, [pc, #180]	; (81bc4 <ctrl_usart+0x3b0>)
   81b0e:	701a      	strb	r2, [r3, #0]
   81b10:	7a7a      	ldrb	r2, [r7, #9]
   81b12:	4b2c      	ldr	r3, [pc, #176]	; (81bc4 <ctrl_usart+0x3b0>)
   81b14:	705a      	strb	r2, [r3, #1]
   81b16:	7aba      	ldrb	r2, [r7, #10]
   81b18:	4b2a      	ldr	r3, [pc, #168]	; (81bc4 <ctrl_usart+0x3b0>)
   81b1a:	709a      	strb	r2, [r3, #2]
   81b1c:	7afa      	ldrb	r2, [r7, #11]
   81b1e:	4b29      	ldr	r3, [pc, #164]	; (81bc4 <ctrl_usart+0x3b0>)
   81b20:	70da      	strb	r2, [r3, #3]
			
					return true;
   81b22:	2301      	movs	r3, #1
   81b24:	e043      	b.n	81bae <ctrl_usart+0x39a>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   81b26:	78fb      	ldrb	r3, [r7, #3]
   81b28:	2b00      	cmp	r3, #0
   81b2a:	d03e      	beq.n	81baa <ctrl_usart+0x396>
				if (udd_g_ctrlreq.req.wLength == 4){
   81b2c:	4b26      	ldr	r3, [pc, #152]	; (81bc8 <ctrl_usart+0x3b4>)
   81b2e:	88db      	ldrh	r3, [r3, #6]
   81b30:	2b04      	cmp	r3, #4
   81b32:	d13a      	bne.n	81baa <ctrl_usart+0x396>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81b34:	4b24      	ldr	r3, [pc, #144]	; (81bc8 <ctrl_usart+0x3b4>)
   81b36:	4a23      	ldr	r2, [pc, #140]	; (81bc4 <ctrl_usart+0x3b0>)
   81b38:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81b3a:	4b23      	ldr	r3, [pc, #140]	; (81bc8 <ctrl_usart+0x3b4>)
   81b3c:	2204      	movs	r2, #4
   81b3e:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81b40:	687b      	ldr	r3, [r7, #4]
   81b42:	4a22      	ldr	r2, [pc, #136]	; (81bcc <ctrl_usart+0x3b8>)
   81b44:	4293      	cmp	r3, r2
   81b46:	d105      	bne.n	81b54 <ctrl_usart+0x340>
						cnt = circ_buf_count(&tx0buf);
   81b48:	4821      	ldr	r0, [pc, #132]	; (81bd0 <ctrl_usart+0x3bc>)
   81b4a:	4b1d      	ldr	r3, [pc, #116]	; (81bc0 <ctrl_usart+0x3ac>)
   81b4c:	4798      	blx	r3
   81b4e:	4603      	mov	r3, r0
   81b50:	60bb      	str	r3, [r7, #8]
   81b52:	e012      	b.n	81b7a <ctrl_usart+0x366>
					} else if (usart == USART1){
   81b54:	687b      	ldr	r3, [r7, #4]
   81b56:	4a1f      	ldr	r2, [pc, #124]	; (81bd4 <ctrl_usart+0x3c0>)
   81b58:	4293      	cmp	r3, r2
   81b5a:	d105      	bne.n	81b68 <ctrl_usart+0x354>
						cnt = circ_buf_count(&tx1buf);
   81b5c:	481e      	ldr	r0, [pc, #120]	; (81bd8 <ctrl_usart+0x3c4>)
   81b5e:	4b18      	ldr	r3, [pc, #96]	; (81bc0 <ctrl_usart+0x3ac>)
   81b60:	4798      	blx	r3
   81b62:	4603      	mov	r3, r0
   81b64:	60bb      	str	r3, [r7, #8]
   81b66:	e008      	b.n	81b7a <ctrl_usart+0x366>
					} else if (usart == USART2){
   81b68:	687b      	ldr	r3, [r7, #4]
   81b6a:	4a13      	ldr	r2, [pc, #76]	; (81bb8 <ctrl_usart+0x3a4>)
   81b6c:	4293      	cmp	r3, r2
   81b6e:	d104      	bne.n	81b7a <ctrl_usart+0x366>
						cnt = circ_buf_count(&tx2buf);
   81b70:	481a      	ldr	r0, [pc, #104]	; (81bdc <ctrl_usart+0x3c8>)
   81b72:	4b13      	ldr	r3, [pc, #76]	; (81bc0 <ctrl_usart+0x3ac>)
   81b74:	4798      	blx	r3
   81b76:	4603      	mov	r3, r0
   81b78:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81b7a:	f107 0308 	add.w	r3, r7, #8
   81b7e:	781a      	ldrb	r2, [r3, #0]
   81b80:	4b10      	ldr	r3, [pc, #64]	; (81bc4 <ctrl_usart+0x3b0>)
   81b82:	701a      	strb	r2, [r3, #0]
   81b84:	7a7a      	ldrb	r2, [r7, #9]
   81b86:	4b0f      	ldr	r3, [pc, #60]	; (81bc4 <ctrl_usart+0x3b0>)
   81b88:	705a      	strb	r2, [r3, #1]
   81b8a:	7aba      	ldrb	r2, [r7, #10]
   81b8c:	4b0d      	ldr	r3, [pc, #52]	; (81bc4 <ctrl_usart+0x3b0>)
   81b8e:	709a      	strb	r2, [r3, #2]
   81b90:	7afa      	ldrb	r2, [r7, #11]
   81b92:	4b0c      	ldr	r3, [pc, #48]	; (81bc4 <ctrl_usart+0x3b0>)
   81b94:	70da      	strb	r2, [r3, #3]
			
					return true;
   81b96:	2301      	movs	r3, #1
   81b98:	e009      	b.n	81bae <ctrl_usart+0x39a>
			break;
   81b9a:	bf00      	nop
   81b9c:	e006      	b.n	81bac <ctrl_usart+0x398>
			break;
   81b9e:	bf00      	nop
   81ba0:	e004      	b.n	81bac <ctrl_usart+0x398>
			break;
   81ba2:	bf00      	nop
   81ba4:	e002      	b.n	81bac <ctrl_usart+0x398>
			break;		
   81ba6:	bf00      	nop
   81ba8:	e000      	b.n	81bac <ctrl_usart+0x398>
				}
			}
			break;		
   81baa:	bf00      	nop
	}
	
	return false;
   81bac:	2300      	movs	r3, #0
}
   81bae:	4618      	mov	r0, r3
   81bb0:	3728      	adds	r7, #40	; 0x28
   81bb2:	46bd      	mov	sp, r7
   81bb4:	bd80      	pop	{r7, pc}
   81bb6:	bf00      	nop
   81bb8:	40098000 	.word	0x40098000
   81bbc:	2000166c 	.word	0x2000166c
   81bc0:	00086989 	.word	0x00086989
   81bc4:	20001298 	.word	0x20001298
   81bc8:	20001810 	.word	0x20001810
   81bcc:	40090000 	.word	0x40090000
   81bd0:	20001784 	.word	0x20001784
   81bd4:	40094000 	.word	0x40094000
   81bd8:	20001554 	.word	0x20001554
   81bdc:	200013b0 	.word	0x200013b0

00081be0 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81be0:	b580      	push	{r7, lr}
   81be2:	b084      	sub	sp, #16
   81be4:	af00      	add	r7, sp, #0
   81be6:	60f8      	str	r0, [r7, #12]
   81be8:	60b9      	str	r1, [r7, #8]
   81bea:	4613      	mov	r3, r2
   81bec:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81bee:	68bb      	ldr	r3, [r7, #8]
   81bf0:	2b00      	cmp	r3, #0
   81bf2:	d113      	bne.n	81c1c <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81bf4:	68fb      	ldr	r3, [r7, #12]
   81bf6:	4a19      	ldr	r2, [pc, #100]	; (81c5c <usart_driver_putchar+0x7c>)
   81bf8:	4293      	cmp	r3, r2
   81bfa:	d102      	bne.n	81c02 <usart_driver_putchar+0x22>
   81bfc:	4b18      	ldr	r3, [pc, #96]	; (81c60 <usart_driver_putchar+0x80>)
   81bfe:	60bb      	str	r3, [r7, #8]
   81c00:	e00c      	b.n	81c1c <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81c02:	68fb      	ldr	r3, [r7, #12]
   81c04:	4a17      	ldr	r2, [pc, #92]	; (81c64 <usart_driver_putchar+0x84>)
   81c06:	4293      	cmp	r3, r2
   81c08:	d102      	bne.n	81c10 <usart_driver_putchar+0x30>
   81c0a:	4b17      	ldr	r3, [pc, #92]	; (81c68 <usart_driver_putchar+0x88>)
   81c0c:	60bb      	str	r3, [r7, #8]
   81c0e:	e005      	b.n	81c1c <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81c10:	68fb      	ldr	r3, [r7, #12]
   81c12:	4a16      	ldr	r2, [pc, #88]	; (81c6c <usart_driver_putchar+0x8c>)
   81c14:	4293      	cmp	r3, r2
   81c16:	d11c      	bne.n	81c52 <usart_driver_putchar+0x72>
   81c18:	4b15      	ldr	r3, [pc, #84]	; (81c70 <usart_driver_putchar+0x90>)
   81c1a:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81c1c:	79fb      	ldrb	r3, [r7, #7]
   81c1e:	2200      	movs	r2, #0
   81c20:	4619      	mov	r1, r3
   81c22:	68b8      	ldr	r0, [r7, #8]
   81c24:	4b13      	ldr	r3, [pc, #76]	; (81c74 <usart_driver_putchar+0x94>)
   81c26:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81c28:	68f8      	ldr	r0, [r7, #12]
   81c2a:	4b13      	ldr	r3, [pc, #76]	; (81c78 <usart_driver_putchar+0x98>)
   81c2c:	4798      	blx	r3
   81c2e:	4603      	mov	r3, r0
   81c30:	f003 0302 	and.w	r3, r3, #2
   81c34:	2b00      	cmp	r3, #0
   81c36:	d10d      	bne.n	81c54 <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81c38:	68b8      	ldr	r0, [r7, #8]
   81c3a:	4b10      	ldr	r3, [pc, #64]	; (81c7c <usart_driver_putchar+0x9c>)
   81c3c:	4798      	blx	r3
   81c3e:	4603      	mov	r3, r0
   81c40:	4619      	mov	r1, r3
   81c42:	68f8      	ldr	r0, [r7, #12]
   81c44:	4b0e      	ldr	r3, [pc, #56]	; (81c80 <usart_driver_putchar+0xa0>)
   81c46:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81c48:	2102      	movs	r1, #2
   81c4a:	68f8      	ldr	r0, [r7, #12]
   81c4c:	4b0d      	ldr	r3, [pc, #52]	; (81c84 <usart_driver_putchar+0xa4>)
   81c4e:	4798      	blx	r3
   81c50:	e000      	b.n	81c54 <usart_driver_putchar+0x74>
		else return;
   81c52:	bf00      	nop
	}
}
   81c54:	3710      	adds	r7, #16
   81c56:	46bd      	mov	sp, r7
   81c58:	bd80      	pop	{r7, pc}
   81c5a:	bf00      	nop
   81c5c:	40090000 	.word	0x40090000
   81c60:	20001784 	.word	0x20001784
   81c64:	40094000 	.word	0x40094000
   81c68:	20001554 	.word	0x20001554
   81c6c:	40098000 	.word	0x40098000
   81c70:	200013b0 	.word	0x200013b0
   81c74:	000868b3 	.word	0x000868b3
   81c78:	00082311 	.word	0x00082311
   81c7c:	00086917 	.word	0x00086917
   81c80:	0008238b 	.word	0x0008238b
   81c84:	000822dd 	.word	0x000822dd

00081c88 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81c88:	b580      	push	{r7, lr}
   81c8a:	b084      	sub	sp, #16
   81c8c:	af00      	add	r7, sp, #0
   81c8e:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81c90:	2300      	movs	r3, #0
   81c92:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81c94:	68fb      	ldr	r3, [r7, #12]
   81c96:	2b00      	cmp	r3, #0
   81c98:	d116      	bne.n	81cc8 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81c9a:	687b      	ldr	r3, [r7, #4]
   81c9c:	4a0e      	ldr	r2, [pc, #56]	; (81cd8 <usart_driver_getchar+0x50>)
   81c9e:	4293      	cmp	r3, r2
   81ca0:	d102      	bne.n	81ca8 <usart_driver_getchar+0x20>
   81ca2:	4b0e      	ldr	r3, [pc, #56]	; (81cdc <usart_driver_getchar+0x54>)
   81ca4:	60fb      	str	r3, [r7, #12]
   81ca6:	e00f      	b.n	81cc8 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81ca8:	687b      	ldr	r3, [r7, #4]
   81caa:	4a0d      	ldr	r2, [pc, #52]	; (81ce0 <usart_driver_getchar+0x58>)
   81cac:	4293      	cmp	r3, r2
   81cae:	d102      	bne.n	81cb6 <usart_driver_getchar+0x2e>
   81cb0:	4b0c      	ldr	r3, [pc, #48]	; (81ce4 <usart_driver_getchar+0x5c>)
   81cb2:	60fb      	str	r3, [r7, #12]
   81cb4:	e008      	b.n	81cc8 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81cb6:	687b      	ldr	r3, [r7, #4]
   81cb8:	4a0b      	ldr	r2, [pc, #44]	; (81ce8 <usart_driver_getchar+0x60>)
   81cba:	4293      	cmp	r3, r2
   81cbc:	d102      	bne.n	81cc4 <usart_driver_getchar+0x3c>
   81cbe:	4b0b      	ldr	r3, [pc, #44]	; (81cec <usart_driver_getchar+0x64>)
   81cc0:	60fb      	str	r3, [r7, #12]
   81cc2:	e001      	b.n	81cc8 <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   81cc4:	23ff      	movs	r3, #255	; 0xff
   81cc6:	e003      	b.n	81cd0 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81cc8:	68f8      	ldr	r0, [r7, #12]
   81cca:	4b09      	ldr	r3, [pc, #36]	; (81cf0 <usart_driver_getchar+0x68>)
   81ccc:	4798      	blx	r3
   81cce:	4603      	mov	r3, r0
}
   81cd0:	4618      	mov	r0, r3
   81cd2:	3710      	adds	r7, #16
   81cd4:	46bd      	mov	sp, r7
   81cd6:	bd80      	pop	{r7, pc}
   81cd8:	40090000 	.word	0x40090000
   81cdc:	2000143c 	.word	0x2000143c
   81ce0:	40094000 	.word	0x40094000
   81ce4:	200016f8 	.word	0x200016f8
   81ce8:	40098000 	.word	0x40098000
   81cec:	2000166c 	.word	0x2000166c
   81cf0:	00086917 	.word	0x00086917

00081cf4 <generic_isr>:

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81cf4:	b580      	push	{r7, lr}
   81cf6:	b086      	sub	sp, #24
   81cf8:	af00      	add	r7, sp, #0
   81cfa:	60f8      	str	r0, [r7, #12]
   81cfc:	60b9      	str	r1, [r7, #8]
   81cfe:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81d00:	68f8      	ldr	r0, [r7, #12]
   81d02:	4b18      	ldr	r3, [pc, #96]	; (81d64 <generic_isr+0x70>)
   81d04:	4798      	blx	r3
   81d06:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81d08:	697b      	ldr	r3, [r7, #20]
   81d0a:	f003 0301 	and.w	r3, r3, #1
   81d0e:	2b00      	cmp	r3, #0
   81d10:	d00b      	beq.n	81d2a <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81d12:	68fb      	ldr	r3, [r7, #12]
   81d14:	699b      	ldr	r3, [r3, #24]
   81d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81d1a:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81d1c:	693b      	ldr	r3, [r7, #16]
   81d1e:	b2db      	uxtb	r3, r3
   81d20:	2200      	movs	r2, #0
   81d22:	4619      	mov	r1, r3
   81d24:	68b8      	ldr	r0, [r7, #8]
   81d26:	4b10      	ldr	r3, [pc, #64]	; (81d68 <generic_isr+0x74>)
   81d28:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81d2a:	697b      	ldr	r3, [r7, #20]
   81d2c:	f003 0302 	and.w	r3, r3, #2
   81d30:	2b00      	cmp	r3, #0
   81d32:	d012      	beq.n	81d5a <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81d34:	6878      	ldr	r0, [r7, #4]
   81d36:	4b0d      	ldr	r3, [pc, #52]	; (81d6c <generic_isr+0x78>)
   81d38:	4798      	blx	r3
   81d3a:	4603      	mov	r3, r0
   81d3c:	2b00      	cmp	r3, #0
   81d3e:	d008      	beq.n	81d52 <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81d40:	6878      	ldr	r0, [r7, #4]
   81d42:	4b0b      	ldr	r3, [pc, #44]	; (81d70 <generic_isr+0x7c>)
   81d44:	4798      	blx	r3
   81d46:	4603      	mov	r3, r0
   81d48:	4619      	mov	r1, r3
   81d4a:	68f8      	ldr	r0, [r7, #12]
   81d4c:	4b09      	ldr	r3, [pc, #36]	; (81d74 <generic_isr+0x80>)
   81d4e:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81d50:	e003      	b.n	81d5a <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81d52:	2102      	movs	r1, #2
   81d54:	68f8      	ldr	r0, [r7, #12]
   81d56:	4b08      	ldr	r3, [pc, #32]	; (81d78 <generic_isr+0x84>)
   81d58:	4798      	blx	r3
}
   81d5a:	bf00      	nop
   81d5c:	3718      	adds	r7, #24
   81d5e:	46bd      	mov	sp, r7
   81d60:	bd80      	pop	{r7, pc}
   81d62:	bf00      	nop
   81d64:	00082327 	.word	0x00082327
   81d68:	000868b3 	.word	0x000868b3
   81d6c:	00086961 	.word	0x00086961
   81d70:	00086917 	.word	0x00086917
   81d74:	0008238b 	.word	0x0008238b
   81d78:	000822f7 	.word	0x000822f7

00081d7c <USART0_Handler>:

ISR(USART0_Handler)
{
   81d7c:	b580      	push	{r7, lr}
   81d7e:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81d80:	4a03      	ldr	r2, [pc, #12]	; (81d90 <USART0_Handler+0x14>)
   81d82:	4904      	ldr	r1, [pc, #16]	; (81d94 <USART0_Handler+0x18>)
   81d84:	4804      	ldr	r0, [pc, #16]	; (81d98 <USART0_Handler+0x1c>)
   81d86:	4b05      	ldr	r3, [pc, #20]	; (81d9c <USART0_Handler+0x20>)
   81d88:	4798      	blx	r3
}
   81d8a:	bf00      	nop
   81d8c:	bd80      	pop	{r7, pc}
   81d8e:	bf00      	nop
   81d90:	20001784 	.word	0x20001784
   81d94:	2000143c 	.word	0x2000143c
   81d98:	40090000 	.word	0x40090000
   81d9c:	00081cf5 	.word	0x00081cf5

00081da0 <USART1_Handler>:

ISR(USART1_Handler)
{
   81da0:	b580      	push	{r7, lr}
   81da2:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81da4:	4a03      	ldr	r2, [pc, #12]	; (81db4 <USART1_Handler+0x14>)
   81da6:	4904      	ldr	r1, [pc, #16]	; (81db8 <USART1_Handler+0x18>)
   81da8:	4804      	ldr	r0, [pc, #16]	; (81dbc <USART1_Handler+0x1c>)
   81daa:	4b05      	ldr	r3, [pc, #20]	; (81dc0 <USART1_Handler+0x20>)
   81dac:	4798      	blx	r3
}
   81dae:	bf00      	nop
   81db0:	bd80      	pop	{r7, pc}
   81db2:	bf00      	nop
   81db4:	20001554 	.word	0x20001554
   81db8:	200016f8 	.word	0x200016f8
   81dbc:	40094000 	.word	0x40094000
   81dc0:	00081cf5 	.word	0x00081cf5

00081dc4 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   81dc4:	b580      	push	{r7, lr}
   81dc6:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81dc8:	4a03      	ldr	r2, [pc, #12]	; (81dd8 <USART2_Handler+0x14>)
   81dca:	4904      	ldr	r1, [pc, #16]	; (81ddc <USART2_Handler+0x18>)
   81dcc:	4804      	ldr	r0, [pc, #16]	; (81de0 <USART2_Handler+0x1c>)
   81dce:	4b05      	ldr	r3, [pc, #20]	; (81de4 <USART2_Handler+0x20>)
   81dd0:	4798      	blx	r3
}
   81dd2:	bf00      	nop
   81dd4:	bd80      	pop	{r7, pc}
   81dd6:	bf00      	nop
   81dd8:	200013b0 	.word	0x200013b0
   81ddc:	2000166c 	.word	0x2000166c
   81de0:	40098000 	.word	0x40098000
   81de4:	00081cf5 	.word	0x00081cf5

00081de8 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
   81de8:	b480      	push	{r7}
   81dea:	b083      	sub	sp, #12
   81dec:	af00      	add	r7, sp, #0
   81dee:	6078      	str	r0, [r7, #4]
   81df0:	460b      	mov	r3, r1
   81df2:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   81df4:	887a      	ldrh	r2, [r7, #2]
   81df6:	687b      	ldr	r3, [r7, #4]
   81df8:	60da      	str	r2, [r3, #12]
}
   81dfa:	bf00      	nop
   81dfc:	370c      	adds	r7, #12
   81dfe:	46bd      	mov	sp, r7
   81e00:	bc80      	pop	{r7}
   81e02:	4770      	bx	lr

00081e04 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
   81e04:	b480      	push	{r7}
   81e06:	b083      	sub	sp, #12
   81e08:	af00      	add	r7, sp, #0
   81e0a:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   81e0c:	687b      	ldr	r3, [r7, #4]
   81e0e:	689b      	ldr	r3, [r3, #8]
   81e10:	b29b      	uxth	r3, r3
}
   81e12:	4618      	mov	r0, r3
   81e14:	370c      	adds	r7, #12
   81e16:	46bd      	mov	sp, r7
   81e18:	bc80      	pop	{r7}
   81e1a:	4770      	bx	lr

00081e1c <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
   81e1c:	b480      	push	{r7}
   81e1e:	b083      	sub	sp, #12
   81e20:	af00      	add	r7, sp, #0
   81e22:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   81e24:	687b      	ldr	r3, [r7, #4]
   81e26:	691b      	ldr	r3, [r3, #16]
   81e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81e2c:	2b00      	cmp	r3, #0
   81e2e:	d001      	beq.n	81e34 <spi_is_tx_empty+0x18>
		return 1;
   81e30:	2301      	movs	r3, #1
   81e32:	e000      	b.n	81e36 <spi_is_tx_empty+0x1a>
	} else {
		return 0;
   81e34:	2300      	movs	r3, #0
	}
}
   81e36:	4618      	mov	r0, r3
   81e38:	370c      	adds	r7, #12
   81e3a:	46bd      	mov	sp, r7
   81e3c:	bc80      	pop	{r7}
   81e3e:	4770      	bx	lr

00081e40 <write_spi_adc>:
    gpio_set_pin_low(ADC_RESET);
    for (volatile uint32_t i = 0; i < 500; i++);
}

bool write_spi_adc(uint8_t addr, uint8_t data)
{
   81e40:	b580      	push	{r7, lr}
   81e42:	b082      	sub	sp, #8
   81e44:	af00      	add	r7, sp, #0
   81e46:	4603      	mov	r3, r0
   81e48:	460a      	mov	r2, r1
   81e4a:	71fb      	strb	r3, [r7, #7]
   81e4c:	4613      	mov	r3, r2
   81e4e:	71bb      	strb	r3, [r7, #6]
    gpio_set_pin_low(ADC_SPI_CS);
   81e50:	2003      	movs	r0, #3
   81e52:	4b12      	ldr	r3, [pc, #72]	; (81e9c <write_spi_adc+0x5c>)
   81e54:	4798      	blx	r3

    spi_put(SPI, addr);
   81e56:	79fb      	ldrb	r3, [r7, #7]
   81e58:	b29b      	uxth	r3, r3
   81e5a:	4619      	mov	r1, r3
   81e5c:	4810      	ldr	r0, [pc, #64]	; (81ea0 <write_spi_adc+0x60>)
   81e5e:	4b11      	ldr	r3, [pc, #68]	; (81ea4 <write_spi_adc+0x64>)
   81e60:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81e62:	bf00      	nop
   81e64:	480e      	ldr	r0, [pc, #56]	; (81ea0 <write_spi_adc+0x60>)
   81e66:	4b10      	ldr	r3, [pc, #64]	; (81ea8 <write_spi_adc+0x68>)
   81e68:	4798      	blx	r3
   81e6a:	4603      	mov	r3, r0
   81e6c:	2b00      	cmp	r3, #0
   81e6e:	d0f9      	beq.n	81e64 <write_spi_adc+0x24>
    spi_put(SPI, data);
   81e70:	79bb      	ldrb	r3, [r7, #6]
   81e72:	b29b      	uxth	r3, r3
   81e74:	4619      	mov	r1, r3
   81e76:	480a      	ldr	r0, [pc, #40]	; (81ea0 <write_spi_adc+0x60>)
   81e78:	4b0a      	ldr	r3, [pc, #40]	; (81ea4 <write_spi_adc+0x64>)
   81e7a:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81e7c:	bf00      	nop
   81e7e:	4808      	ldr	r0, [pc, #32]	; (81ea0 <write_spi_adc+0x60>)
   81e80:	4b09      	ldr	r3, [pc, #36]	; (81ea8 <write_spi_adc+0x68>)
   81e82:	4798      	blx	r3
   81e84:	4603      	mov	r3, r0
   81e86:	2b00      	cmp	r3, #0
   81e88:	d0f9      	beq.n	81e7e <write_spi_adc+0x3e>

    gpio_set_pin_high(ADC_SPI_CS);
   81e8a:	2003      	movs	r0, #3
   81e8c:	4b07      	ldr	r3, [pc, #28]	; (81eac <write_spi_adc+0x6c>)
   81e8e:	4798      	blx	r3

    return true;
   81e90:	2301      	movs	r3, #1
}
   81e92:	4618      	mov	r0, r3
   81e94:	3708      	adds	r7, #8
   81e96:	46bd      	mov	sp, r7
   81e98:	bd80      	pop	{r7, pc}
   81e9a:	bf00      	nop
   81e9c:	00085239 	.word	0x00085239
   81ea0:	40008000 	.word	0x40008000
   81ea4:	00081de9 	.word	0x00081de9
   81ea8:	00081e1d 	.word	0x00081e1d
   81eac:	00085209 	.word	0x00085209

00081eb0 <read_spi_adc>:

uint8_t read_spi_adc(uint8_t addr)
{
   81eb0:	b580      	push	{r7, lr}
   81eb2:	b084      	sub	sp, #16
   81eb4:	af00      	add	r7, sp, #0
   81eb6:	4603      	mov	r3, r0
   81eb8:	71fb      	strb	r3, [r7, #7]
    write_spi_adc(0x00, 0x01); //enable read, disable write
   81eba:	2101      	movs	r1, #1
   81ebc:	2000      	movs	r0, #0
   81ebe:	4b17      	ldr	r3, [pc, #92]	; (81f1c <read_spi_adc+0x6c>)
   81ec0:	4798      	blx	r3
    gpio_set_pin_low(ADC_SPI_CS);
   81ec2:	2003      	movs	r0, #3
   81ec4:	4b16      	ldr	r3, [pc, #88]	; (81f20 <read_spi_adc+0x70>)
   81ec6:	4798      	blx	r3
    spi_put(SPI, addr);
   81ec8:	79fb      	ldrb	r3, [r7, #7]
   81eca:	b29b      	uxth	r3, r3
   81ecc:	4619      	mov	r1, r3
   81ece:	4815      	ldr	r0, [pc, #84]	; (81f24 <read_spi_adc+0x74>)
   81ed0:	4b15      	ldr	r3, [pc, #84]	; (81f28 <read_spi_adc+0x78>)
   81ed2:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81ed4:	bf00      	nop
   81ed6:	4813      	ldr	r0, [pc, #76]	; (81f24 <read_spi_adc+0x74>)
   81ed8:	4b14      	ldr	r3, [pc, #80]	; (81f2c <read_spi_adc+0x7c>)
   81eda:	4798      	blx	r3
   81edc:	4603      	mov	r3, r0
   81ede:	2b00      	cmp	r3, #0
   81ee0:	d0f9      	beq.n	81ed6 <read_spi_adc+0x26>
    spi_put(SPI, 0x00); //shift data in
   81ee2:	2100      	movs	r1, #0
   81ee4:	480f      	ldr	r0, [pc, #60]	; (81f24 <read_spi_adc+0x74>)
   81ee6:	4b10      	ldr	r3, [pc, #64]	; (81f28 <read_spi_adc+0x78>)
   81ee8:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81eea:	bf00      	nop
   81eec:	480d      	ldr	r0, [pc, #52]	; (81f24 <read_spi_adc+0x74>)
   81eee:	4b0f      	ldr	r3, [pc, #60]	; (81f2c <read_spi_adc+0x7c>)
   81ef0:	4798      	blx	r3
   81ef2:	4603      	mov	r3, r0
   81ef4:	2b00      	cmp	r3, #0
   81ef6:	d0f9      	beq.n	81eec <read_spi_adc+0x3c>

    uint8_t rtn = spi_get(SPI);
   81ef8:	480a      	ldr	r0, [pc, #40]	; (81f24 <read_spi_adc+0x74>)
   81efa:	4b0d      	ldr	r3, [pc, #52]	; (81f30 <read_spi_adc+0x80>)
   81efc:	4798      	blx	r3
   81efe:	4603      	mov	r3, r0
   81f00:	73fb      	strb	r3, [r7, #15]
    gpio_set_pin_high(ADC_SPI_CS);
   81f02:	2003      	movs	r0, #3
   81f04:	4b0b      	ldr	r3, [pc, #44]	; (81f34 <read_spi_adc+0x84>)
   81f06:	4798      	blx	r3

    write_spi_adc(0x00, 0x00); //disable read, enable write
   81f08:	2100      	movs	r1, #0
   81f0a:	2000      	movs	r0, #0
   81f0c:	4b03      	ldr	r3, [pc, #12]	; (81f1c <read_spi_adc+0x6c>)
   81f0e:	4798      	blx	r3
    return rtn;
   81f10:	7bfb      	ldrb	r3, [r7, #15]
}
   81f12:	4618      	mov	r0, r3
   81f14:	3710      	adds	r7, #16
   81f16:	46bd      	mov	sp, r7
   81f18:	bd80      	pop	{r7, pc}
   81f1a:	bf00      	nop
   81f1c:	00081e41 	.word	0x00081e41
   81f20:	00085239 	.word	0x00085239
   81f24:	40008000 	.word	0x40008000
   81f28:	00081de9 	.word	0x00081de9
   81f2c:	00081e1d 	.word	0x00081e1d
   81f30:	00081e05 	.word	0x00081e05
   81f34:	00085209 	.word	0x00085209

00081f38 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81f38:	b590      	push	{r4, r7, lr}
   81f3a:	b08b      	sub	sp, #44	; 0x2c
   81f3c:	af02      	add	r7, sp, #8
   81f3e:	6078      	str	r0, [r7, #4]
   81f40:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81f42:	f107 030c 	add.w	r3, r7, #12
   81f46:	2204      	movs	r2, #4
   81f48:	9200      	str	r2, [sp, #0]
   81f4a:	220f      	movs	r2, #15
   81f4c:	210e      	movs	r1, #14
   81f4e:	4814      	ldr	r0, [pc, #80]	; (81fa0 <flash_read_unique_id+0x68>)
   81f50:	4c14      	ldr	r4, [pc, #80]	; (81fa4 <flash_read_unique_id+0x6c>)
   81f52:	47a0      	blx	r4
   81f54:	4603      	mov	r3, r0
   81f56:	2b00      	cmp	r3, #0
   81f58:	d001      	beq.n	81f5e <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81f5a:	2310      	movs	r3, #16
   81f5c:	e01b      	b.n	81f96 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   81f5e:	683b      	ldr	r3, [r7, #0]
   81f60:	2b04      	cmp	r3, #4
   81f62:	d901      	bls.n	81f68 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81f64:	2304      	movs	r3, #4
   81f66:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f68:	2300      	movs	r3, #0
   81f6a:	61fb      	str	r3, [r7, #28]
   81f6c:	e00e      	b.n	81f8c <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81f6e:	69fb      	ldr	r3, [r7, #28]
   81f70:	009b      	lsls	r3, r3, #2
   81f72:	687a      	ldr	r2, [r7, #4]
   81f74:	441a      	add	r2, r3
   81f76:	69fb      	ldr	r3, [r7, #28]
   81f78:	009b      	lsls	r3, r3, #2
   81f7a:	f107 0120 	add.w	r1, r7, #32
   81f7e:	440b      	add	r3, r1
   81f80:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81f84:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f86:	69fb      	ldr	r3, [r7, #28]
   81f88:	3301      	adds	r3, #1
   81f8a:	61fb      	str	r3, [r7, #28]
   81f8c:	69fa      	ldr	r2, [r7, #28]
   81f8e:	683b      	ldr	r3, [r7, #0]
   81f90:	429a      	cmp	r2, r3
   81f92:	d3ec      	bcc.n	81f6e <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   81f94:	2300      	movs	r3, #0
}
   81f96:	4618      	mov	r0, r3
   81f98:	3724      	adds	r7, #36	; 0x24
   81f9a:	46bd      	mov	sp, r7
   81f9c:	bd90      	pop	{r4, r7, pc}
   81f9e:	bf00      	nop
   81fa0:	400e0800 	.word	0x400e0800
   81fa4:	20000001 	.word	0x20000001

00081fa8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81fa8:	b480      	push	{r7}
   81faa:	b089      	sub	sp, #36	; 0x24
   81fac:	af00      	add	r7, sp, #0
   81fae:	60f8      	str	r0, [r7, #12]
   81fb0:	60b9      	str	r1, [r7, #8]
   81fb2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81fb4:	68bb      	ldr	r3, [r7, #8]
   81fb6:	011b      	lsls	r3, r3, #4
   81fb8:	687a      	ldr	r2, [r7, #4]
   81fba:	429a      	cmp	r2, r3
   81fbc:	d302      	bcc.n	81fc4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81fbe:	2310      	movs	r3, #16
   81fc0:	61fb      	str	r3, [r7, #28]
   81fc2:	e001      	b.n	81fc8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81fc4:	2308      	movs	r3, #8
   81fc6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81fc8:	687b      	ldr	r3, [r7, #4]
   81fca:	00da      	lsls	r2, r3, #3
   81fcc:	69fb      	ldr	r3, [r7, #28]
   81fce:	68b9      	ldr	r1, [r7, #8]
   81fd0:	fb01 f303 	mul.w	r3, r1, r3
   81fd4:	085b      	lsrs	r3, r3, #1
   81fd6:	441a      	add	r2, r3
   81fd8:	69fb      	ldr	r3, [r7, #28]
   81fda:	68b9      	ldr	r1, [r7, #8]
   81fdc:	fb01 f303 	mul.w	r3, r1, r3
   81fe0:	fbb2 f3f3 	udiv	r3, r2, r3
   81fe4:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81fe6:	69bb      	ldr	r3, [r7, #24]
   81fe8:	08db      	lsrs	r3, r3, #3
   81fea:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81fec:	69bb      	ldr	r3, [r7, #24]
   81fee:	f003 0307 	and.w	r3, r3, #7
   81ff2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81ff4:	697b      	ldr	r3, [r7, #20]
   81ff6:	2b00      	cmp	r3, #0
   81ff8:	d003      	beq.n	82002 <usart_set_async_baudrate+0x5a>
   81ffa:	697b      	ldr	r3, [r7, #20]
   81ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82000:	d301      	bcc.n	82006 <usart_set_async_baudrate+0x5e>
		return 1;
   82002:	2301      	movs	r3, #1
   82004:	e00f      	b.n	82026 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82006:	69fb      	ldr	r3, [r7, #28]
   82008:	2b08      	cmp	r3, #8
   8200a:	d105      	bne.n	82018 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   8200c:	68fb      	ldr	r3, [r7, #12]
   8200e:	685b      	ldr	r3, [r3, #4]
   82010:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82014:	68fb      	ldr	r3, [r7, #12]
   82016:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82018:	693b      	ldr	r3, [r7, #16]
   8201a:	041a      	lsls	r2, r3, #16
   8201c:	697b      	ldr	r3, [r7, #20]
   8201e:	431a      	orrs	r2, r3
   82020:	68fb      	ldr	r3, [r7, #12]
   82022:	621a      	str	r2, [r3, #32]

	return 0;
   82024:	2300      	movs	r3, #0
}
   82026:	4618      	mov	r0, r3
   82028:	3724      	adds	r7, #36	; 0x24
   8202a:	46bd      	mov	sp, r7
   8202c:	bc80      	pop	{r7}
   8202e:	4770      	bx	lr

00082030 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82030:	b480      	push	{r7}
   82032:	b087      	sub	sp, #28
   82034:	af00      	add	r7, sp, #0
   82036:	60f8      	str	r0, [r7, #12]
   82038:	60b9      	str	r1, [r7, #8]
   8203a:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   8203c:	68bb      	ldr	r3, [r7, #8]
   8203e:	085a      	lsrs	r2, r3, #1
   82040:	687b      	ldr	r3, [r7, #4]
   82042:	441a      	add	r2, r3
   82044:	68bb      	ldr	r3, [r7, #8]
   82046:	fbb2 f3f3 	udiv	r3, r2, r3
   8204a:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   8204c:	697b      	ldr	r3, [r7, #20]
   8204e:	2b03      	cmp	r3, #3
   82050:	d903      	bls.n	8205a <usart_set_spi_master_baudrate+0x2a>
   82052:	697b      	ldr	r3, [r7, #20]
   82054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82058:	d301      	bcc.n	8205e <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8205a:	2301      	movs	r3, #1
   8205c:	e003      	b.n	82066 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8205e:	68fb      	ldr	r3, [r7, #12]
   82060:	697a      	ldr	r2, [r7, #20]
   82062:	621a      	str	r2, [r3, #32]

	return 0;
   82064:	2300      	movs	r3, #0
}
   82066:	4618      	mov	r0, r3
   82068:	371c      	adds	r7, #28
   8206a:	46bd      	mov	sp, r7
   8206c:	bc80      	pop	{r7}
   8206e:	4770      	bx	lr

00082070 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82070:	b580      	push	{r7, lr}
   82072:	b082      	sub	sp, #8
   82074:	af00      	add	r7, sp, #0
   82076:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   82078:	6878      	ldr	r0, [r7, #4]
   8207a:	4b0f      	ldr	r3, [pc, #60]	; (820b8 <usart_reset+0x48>)
   8207c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8207e:	687b      	ldr	r3, [r7, #4]
   82080:	2200      	movs	r2, #0
   82082:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82084:	687b      	ldr	r3, [r7, #4]
   82086:	2200      	movs	r2, #0
   82088:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8208a:	687b      	ldr	r3, [r7, #4]
   8208c:	2200      	movs	r2, #0
   8208e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   82090:	6878      	ldr	r0, [r7, #4]
   82092:	4b0a      	ldr	r3, [pc, #40]	; (820bc <usart_reset+0x4c>)
   82094:	4798      	blx	r3
	usart_reset_rx(p_usart);
   82096:	6878      	ldr	r0, [r7, #4]
   82098:	4b09      	ldr	r3, [pc, #36]	; (820c0 <usart_reset+0x50>)
   8209a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8209c:	6878      	ldr	r0, [r7, #4]
   8209e:	4b09      	ldr	r3, [pc, #36]	; (820c4 <usart_reset+0x54>)
   820a0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   820a2:	6878      	ldr	r0, [r7, #4]
   820a4:	4b08      	ldr	r3, [pc, #32]	; (820c8 <usart_reset+0x58>)
   820a6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   820a8:	6878      	ldr	r0, [r7, #4]
   820aa:	4b08      	ldr	r3, [pc, #32]	; (820cc <usart_reset+0x5c>)
   820ac:	4798      	blx	r3
#endif
}
   820ae:	bf00      	nop
   820b0:	3708      	adds	r7, #8
   820b2:	46bd      	mov	sp, r7
   820b4:	bd80      	pop	{r7, pc}
   820b6:	bf00      	nop
   820b8:	000823b9 	.word	0x000823b9
   820bc:	0008227d 	.word	0x0008227d
   820c0:	000822c5 	.word	0x000822c5
   820c4:	0008233d 	.word	0x0008233d
   820c8:	00082371 	.word	0x00082371
   820cc:	00082357 	.word	0x00082357

000820d0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   820d0:	b580      	push	{r7, lr}
   820d2:	b084      	sub	sp, #16
   820d4:	af00      	add	r7, sp, #0
   820d6:	60f8      	str	r0, [r7, #12]
   820d8:	60b9      	str	r1, [r7, #8]
   820da:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   820dc:	68f8      	ldr	r0, [r7, #12]
   820de:	4b1a      	ldr	r3, [pc, #104]	; (82148 <usart_init_rs232+0x78>)
   820e0:	4798      	blx	r3

	ul_reg_val = 0;
   820e2:	4b1a      	ldr	r3, [pc, #104]	; (8214c <usart_init_rs232+0x7c>)
   820e4:	2200      	movs	r2, #0
   820e6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   820e8:	68bb      	ldr	r3, [r7, #8]
   820ea:	2b00      	cmp	r3, #0
   820ec:	d009      	beq.n	82102 <usart_init_rs232+0x32>
   820ee:	68bb      	ldr	r3, [r7, #8]
   820f0:	681b      	ldr	r3, [r3, #0]
   820f2:	687a      	ldr	r2, [r7, #4]
   820f4:	4619      	mov	r1, r3
   820f6:	68f8      	ldr	r0, [r7, #12]
   820f8:	4b15      	ldr	r3, [pc, #84]	; (82150 <usart_init_rs232+0x80>)
   820fa:	4798      	blx	r3
   820fc:	4603      	mov	r3, r0
   820fe:	2b00      	cmp	r3, #0
   82100:	d001      	beq.n	82106 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82102:	2301      	movs	r3, #1
   82104:	e01b      	b.n	8213e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82106:	68bb      	ldr	r3, [r7, #8]
   82108:	685a      	ldr	r2, [r3, #4]
   8210a:	68bb      	ldr	r3, [r7, #8]
   8210c:	689b      	ldr	r3, [r3, #8]
   8210e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82110:	68bb      	ldr	r3, [r7, #8]
   82112:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82114:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82116:	68bb      	ldr	r3, [r7, #8]
   82118:	68db      	ldr	r3, [r3, #12]
   8211a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8211c:	4b0b      	ldr	r3, [pc, #44]	; (8214c <usart_init_rs232+0x7c>)
   8211e:	681b      	ldr	r3, [r3, #0]
   82120:	4313      	orrs	r3, r2
   82122:	4a0a      	ldr	r2, [pc, #40]	; (8214c <usart_init_rs232+0x7c>)
   82124:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82126:	4b09      	ldr	r3, [pc, #36]	; (8214c <usart_init_rs232+0x7c>)
   82128:	681b      	ldr	r3, [r3, #0]
   8212a:	4a08      	ldr	r2, [pc, #32]	; (8214c <usart_init_rs232+0x7c>)
   8212c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8212e:	68fb      	ldr	r3, [r7, #12]
   82130:	685a      	ldr	r2, [r3, #4]
   82132:	4b06      	ldr	r3, [pc, #24]	; (8214c <usart_init_rs232+0x7c>)
   82134:	681b      	ldr	r3, [r3, #0]
   82136:	431a      	orrs	r2, r3
   82138:	68fb      	ldr	r3, [r7, #12]
   8213a:	605a      	str	r2, [r3, #4]

	return 0;
   8213c:	2300      	movs	r3, #0
}
   8213e:	4618      	mov	r0, r3
   82140:	3710      	adds	r7, #16
   82142:	46bd      	mov	sp, r7
   82144:	bd80      	pop	{r7, pc}
   82146:	bf00      	nop
   82148:	00082071 	.word	0x00082071
   8214c:	200012a8 	.word	0x200012a8
   82150:	00081fa9 	.word	0x00081fa9

00082154 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82154:	b580      	push	{r7, lr}
   82156:	b084      	sub	sp, #16
   82158:	af00      	add	r7, sp, #0
   8215a:	60f8      	str	r0, [r7, #12]
   8215c:	60b9      	str	r1, [r7, #8]
   8215e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82160:	68f8      	ldr	r0, [r7, #12]
   82162:	4b3d      	ldr	r3, [pc, #244]	; (82258 <usart_init_spi_master+0x104>)
   82164:	4798      	blx	r3

	ul_reg_val = 0;
   82166:	4b3d      	ldr	r3, [pc, #244]	; (8225c <usart_init_spi_master+0x108>)
   82168:	2200      	movs	r2, #0
   8216a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8216c:	68bb      	ldr	r3, [r7, #8]
   8216e:	2b00      	cmp	r3, #0
   82170:	d00d      	beq.n	8218e <usart_init_spi_master+0x3a>
   82172:	68bb      	ldr	r3, [r7, #8]
   82174:	689b      	ldr	r3, [r3, #8]
   82176:	2b03      	cmp	r3, #3
   82178:	d809      	bhi.n	8218e <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   8217a:	68bb      	ldr	r3, [r7, #8]
   8217c:	681b      	ldr	r3, [r3, #0]
   8217e:	687a      	ldr	r2, [r7, #4]
   82180:	4619      	mov	r1, r3
   82182:	68f8      	ldr	r0, [r7, #12]
   82184:	4b36      	ldr	r3, [pc, #216]	; (82260 <usart_init_spi_master+0x10c>)
   82186:	4798      	blx	r3
   82188:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8218a:	2b00      	cmp	r3, #0
   8218c:	d001      	beq.n	82192 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   8218e:	2301      	movs	r3, #1
   82190:	e05d      	b.n	8224e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   82192:	68bb      	ldr	r3, [r7, #8]
   82194:	685a      	ldr	r2, [r3, #4]
   82196:	4b31      	ldr	r3, [pc, #196]	; (8225c <usart_init_spi_master+0x108>)
   82198:	681b      	ldr	r3, [r3, #0]
   8219a:	4313      	orrs	r3, r2
   8219c:	4a2f      	ldr	r2, [pc, #188]	; (8225c <usart_init_spi_master+0x108>)
   8219e:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   821a0:	68bb      	ldr	r3, [r7, #8]
   821a2:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   821a4:	4b2d      	ldr	r3, [pc, #180]	; (8225c <usart_init_spi_master+0x108>)
   821a6:	681b      	ldr	r3, [r3, #0]
   821a8:	4313      	orrs	r3, r2
   821aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   821ae:	f043 030e 	orr.w	r3, r3, #14
   821b2:	4a2a      	ldr	r2, [pc, #168]	; (8225c <usart_init_spi_master+0x108>)
   821b4:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   821b6:	68bb      	ldr	r3, [r7, #8]
   821b8:	689b      	ldr	r3, [r3, #8]
   821ba:	2b03      	cmp	r3, #3
   821bc:	d83e      	bhi.n	8223c <usart_init_spi_master+0xe8>
   821be:	a201      	add	r2, pc, #4	; (adr r2, 821c4 <usart_init_spi_master+0x70>)
   821c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821c4:	000821d5 	.word	0x000821d5
   821c8:	000821ef 	.word	0x000821ef
   821cc:	00082209 	.word	0x00082209
   821d0:	00082223 	.word	0x00082223
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   821d4:	4b21      	ldr	r3, [pc, #132]	; (8225c <usart_init_spi_master+0x108>)
   821d6:	681b      	ldr	r3, [r3, #0]
   821d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   821dc:	4a1f      	ldr	r2, [pc, #124]	; (8225c <usart_init_spi_master+0x108>)
   821de:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   821e0:	4b1e      	ldr	r3, [pc, #120]	; (8225c <usart_init_spi_master+0x108>)
   821e2:	681b      	ldr	r3, [r3, #0]
   821e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   821e8:	4a1c      	ldr	r2, [pc, #112]	; (8225c <usart_init_spi_master+0x108>)
   821ea:	6013      	str	r3, [r2, #0]
		break;
   821ec:	e027      	b.n	8223e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   821ee:	4b1b      	ldr	r3, [pc, #108]	; (8225c <usart_init_spi_master+0x108>)
   821f0:	681b      	ldr	r3, [r3, #0]
   821f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   821f6:	4a19      	ldr	r2, [pc, #100]	; (8225c <usart_init_spi_master+0x108>)
   821f8:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   821fa:	4b18      	ldr	r3, [pc, #96]	; (8225c <usart_init_spi_master+0x108>)
   821fc:	681b      	ldr	r3, [r3, #0]
   821fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82202:	4a16      	ldr	r2, [pc, #88]	; (8225c <usart_init_spi_master+0x108>)
   82204:	6013      	str	r3, [r2, #0]
		break;
   82206:	e01a      	b.n	8223e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   82208:	4b14      	ldr	r3, [pc, #80]	; (8225c <usart_init_spi_master+0x108>)
   8220a:	681b      	ldr	r3, [r3, #0]
   8220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82210:	4a12      	ldr	r2, [pc, #72]	; (8225c <usart_init_spi_master+0x108>)
   82212:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   82214:	4b11      	ldr	r3, [pc, #68]	; (8225c <usart_init_spi_master+0x108>)
   82216:	681b      	ldr	r3, [r3, #0]
   82218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8221c:	4a0f      	ldr	r2, [pc, #60]	; (8225c <usart_init_spi_master+0x108>)
   8221e:	6013      	str	r3, [r2, #0]
		break;
   82220:	e00d      	b.n	8223e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   82222:	4b0e      	ldr	r3, [pc, #56]	; (8225c <usart_init_spi_master+0x108>)
   82224:	681b      	ldr	r3, [r3, #0]
   82226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8222a:	4a0c      	ldr	r2, [pc, #48]	; (8225c <usart_init_spi_master+0x108>)
   8222c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8222e:	4b0b      	ldr	r3, [pc, #44]	; (8225c <usart_init_spi_master+0x108>)
   82230:	681b      	ldr	r3, [r3, #0]
   82232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82236:	4a09      	ldr	r2, [pc, #36]	; (8225c <usart_init_spi_master+0x108>)
   82238:	6013      	str	r3, [r2, #0]
		break;
   8223a:	e000      	b.n	8223e <usart_init_spi_master+0xea>

	default:
		break;
   8223c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8223e:	68fb      	ldr	r3, [r7, #12]
   82240:	685a      	ldr	r2, [r3, #4]
   82242:	4b06      	ldr	r3, [pc, #24]	; (8225c <usart_init_spi_master+0x108>)
   82244:	681b      	ldr	r3, [r3, #0]
   82246:	431a      	orrs	r2, r3
   82248:	68fb      	ldr	r3, [r7, #12]
   8224a:	605a      	str	r2, [r3, #4]

	return 0;
   8224c:	2300      	movs	r3, #0
}
   8224e:	4618      	mov	r0, r3
   82250:	3710      	adds	r7, #16
   82252:	46bd      	mov	sp, r7
   82254:	bd80      	pop	{r7, pc}
   82256:	bf00      	nop
   82258:	00082071 	.word	0x00082071
   8225c:	200012ac 	.word	0x200012ac
   82260:	00082031 	.word	0x00082031

00082264 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82264:	b480      	push	{r7}
   82266:	b083      	sub	sp, #12
   82268:	af00      	add	r7, sp, #0
   8226a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   8226c:	687b      	ldr	r3, [r7, #4]
   8226e:	2240      	movs	r2, #64	; 0x40
   82270:	601a      	str	r2, [r3, #0]
}
   82272:	bf00      	nop
   82274:	370c      	adds	r7, #12
   82276:	46bd      	mov	sp, r7
   82278:	bc80      	pop	{r7}
   8227a:	4770      	bx	lr

0008227c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8227c:	b480      	push	{r7}
   8227e:	b083      	sub	sp, #12
   82280:	af00      	add	r7, sp, #0
   82282:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82284:	687b      	ldr	r3, [r7, #4]
   82286:	2288      	movs	r2, #136	; 0x88
   82288:	601a      	str	r2, [r3, #0]
}
   8228a:	bf00      	nop
   8228c:	370c      	adds	r7, #12
   8228e:	46bd      	mov	sp, r7
   82290:	bc80      	pop	{r7}
   82292:	4770      	bx	lr

00082294 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82294:	b480      	push	{r7}
   82296:	b083      	sub	sp, #12
   82298:	af00      	add	r7, sp, #0
   8229a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   8229c:	687b      	ldr	r3, [r7, #4]
   8229e:	2210      	movs	r2, #16
   822a0:	601a      	str	r2, [r3, #0]
}
   822a2:	bf00      	nop
   822a4:	370c      	adds	r7, #12
   822a6:	46bd      	mov	sp, r7
   822a8:	bc80      	pop	{r7}
   822aa:	4770      	bx	lr

000822ac <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   822ac:	b480      	push	{r7}
   822ae:	b083      	sub	sp, #12
   822b0:	af00      	add	r7, sp, #0
   822b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   822b4:	687b      	ldr	r3, [r7, #4]
   822b6:	2220      	movs	r2, #32
   822b8:	601a      	str	r2, [r3, #0]
}
   822ba:	bf00      	nop
   822bc:	370c      	adds	r7, #12
   822be:	46bd      	mov	sp, r7
   822c0:	bc80      	pop	{r7}
   822c2:	4770      	bx	lr

000822c4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   822c4:	b480      	push	{r7}
   822c6:	b083      	sub	sp, #12
   822c8:	af00      	add	r7, sp, #0
   822ca:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   822cc:	687b      	ldr	r3, [r7, #4]
   822ce:	2224      	movs	r2, #36	; 0x24
   822d0:	601a      	str	r2, [r3, #0]
}
   822d2:	bf00      	nop
   822d4:	370c      	adds	r7, #12
   822d6:	46bd      	mov	sp, r7
   822d8:	bc80      	pop	{r7}
   822da:	4770      	bx	lr

000822dc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   822dc:	b480      	push	{r7}
   822de:	b083      	sub	sp, #12
   822e0:	af00      	add	r7, sp, #0
   822e2:	6078      	str	r0, [r7, #4]
   822e4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   822e6:	687b      	ldr	r3, [r7, #4]
   822e8:	683a      	ldr	r2, [r7, #0]
   822ea:	609a      	str	r2, [r3, #8]
}
   822ec:	bf00      	nop
   822ee:	370c      	adds	r7, #12
   822f0:	46bd      	mov	sp, r7
   822f2:	bc80      	pop	{r7}
   822f4:	4770      	bx	lr

000822f6 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   822f6:	b480      	push	{r7}
   822f8:	b083      	sub	sp, #12
   822fa:	af00      	add	r7, sp, #0
   822fc:	6078      	str	r0, [r7, #4]
   822fe:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   82300:	687b      	ldr	r3, [r7, #4]
   82302:	683a      	ldr	r2, [r7, #0]
   82304:	60da      	str	r2, [r3, #12]
}
   82306:	bf00      	nop
   82308:	370c      	adds	r7, #12
   8230a:	46bd      	mov	sp, r7
   8230c:	bc80      	pop	{r7}
   8230e:	4770      	bx	lr

00082310 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   82310:	b480      	push	{r7}
   82312:	b083      	sub	sp, #12
   82314:	af00      	add	r7, sp, #0
   82316:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   82318:	687b      	ldr	r3, [r7, #4]
   8231a:	691b      	ldr	r3, [r3, #16]
}
   8231c:	4618      	mov	r0, r3
   8231e:	370c      	adds	r7, #12
   82320:	46bd      	mov	sp, r7
   82322:	bc80      	pop	{r7}
   82324:	4770      	bx	lr

00082326 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   82326:	b480      	push	{r7}
   82328:	b083      	sub	sp, #12
   8232a:	af00      	add	r7, sp, #0
   8232c:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8232e:	687b      	ldr	r3, [r7, #4]
   82330:	695b      	ldr	r3, [r3, #20]
}
   82332:	4618      	mov	r0, r3
   82334:	370c      	adds	r7, #12
   82336:	46bd      	mov	sp, r7
   82338:	bc80      	pop	{r7}
   8233a:	4770      	bx	lr

0008233c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   8233c:	b480      	push	{r7}
   8233e:	b083      	sub	sp, #12
   82340:	af00      	add	r7, sp, #0
   82342:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82344:	687b      	ldr	r3, [r7, #4]
   82346:	f44f 7280 	mov.w	r2, #256	; 0x100
   8234a:	601a      	str	r2, [r3, #0]
}
   8234c:	bf00      	nop
   8234e:	370c      	adds	r7, #12
   82350:	46bd      	mov	sp, r7
   82352:	bc80      	pop	{r7}
   82354:	4770      	bx	lr

00082356 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   82356:	b480      	push	{r7}
   82358:	b083      	sub	sp, #12
   8235a:	af00      	add	r7, sp, #0
   8235c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   8235e:	687b      	ldr	r3, [r7, #4]
   82360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   82364:	601a      	str	r2, [r3, #0]
}
   82366:	bf00      	nop
   82368:	370c      	adds	r7, #12
   8236a:	46bd      	mov	sp, r7
   8236c:	bc80      	pop	{r7}
   8236e:	4770      	bx	lr

00082370 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82370:	b480      	push	{r7}
   82372:	b083      	sub	sp, #12
   82374:	af00      	add	r7, sp, #0
   82376:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82378:	687b      	ldr	r3, [r7, #4]
   8237a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8237e:	601a      	str	r2, [r3, #0]
}
   82380:	bf00      	nop
   82382:	370c      	adds	r7, #12
   82384:	46bd      	mov	sp, r7
   82386:	bc80      	pop	{r7}
   82388:	4770      	bx	lr

0008238a <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   8238a:	b480      	push	{r7}
   8238c:	b083      	sub	sp, #12
   8238e:	af00      	add	r7, sp, #0
   82390:	6078      	str	r0, [r7, #4]
   82392:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82394:	bf00      	nop
   82396:	687b      	ldr	r3, [r7, #4]
   82398:	695b      	ldr	r3, [r3, #20]
   8239a:	f003 0302 	and.w	r3, r3, #2
   8239e:	2b00      	cmp	r3, #0
   823a0:	d0f9      	beq.n	82396 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   823a2:	683b      	ldr	r3, [r7, #0]
   823a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   823a8:	687b      	ldr	r3, [r7, #4]
   823aa:	61da      	str	r2, [r3, #28]

	return 0;
   823ac:	2300      	movs	r3, #0
}
   823ae:	4618      	mov	r0, r3
   823b0:	370c      	adds	r7, #12
   823b2:	46bd      	mov	sp, r7
   823b4:	bc80      	pop	{r7}
   823b6:	4770      	bx	lr

000823b8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   823b8:	b480      	push	{r7}
   823ba:	b083      	sub	sp, #12
   823bc:	af00      	add	r7, sp, #0
   823be:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   823c0:	687b      	ldr	r3, [r7, #4]
   823c2:	4a04      	ldr	r2, [pc, #16]	; (823d4 <usart_disable_writeprotect+0x1c>)
   823c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   823c8:	bf00      	nop
   823ca:	370c      	adds	r7, #12
   823cc:	46bd      	mov	sp, r7
   823ce:	bc80      	pop	{r7}
   823d0:	4770      	bx	lr
   823d2:	bf00      	nop
   823d4:	55534100 	.word	0x55534100

000823d8 <sysclk_enable_peripheral_clock>:
{
   823d8:	b580      	push	{r7, lr}
   823da:	b082      	sub	sp, #8
   823dc:	af00      	add	r7, sp, #0
   823de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   823e0:	6878      	ldr	r0, [r7, #4]
   823e2:	4b03      	ldr	r3, [pc, #12]	; (823f0 <sysclk_enable_peripheral_clock+0x18>)
   823e4:	4798      	blx	r3
}
   823e6:	bf00      	nop
   823e8:	3708      	adds	r7, #8
   823ea:	46bd      	mov	sp, r7
   823ec:	bd80      	pop	{r7, pc}
   823ee:	bf00      	nop
   823f0:	00084c79 	.word	0x00084c79

000823f4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   823f4:	b580      	push	{r7, lr}
   823f6:	b082      	sub	sp, #8
   823f8:	af00      	add	r7, sp, #0
   823fa:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
   823fc:	2014      	movs	r0, #20
   823fe:	4b03      	ldr	r3, [pc, #12]	; (8240c <spi_enable_clock+0x18>)
   82400:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   82402:	bf00      	nop
   82404:	3708      	adds	r7, #8
   82406:	46bd      	mov	sp, r7
   82408:	bd80      	pop	{r7, pc}
   8240a:	bf00      	nop
   8240c:	000823d9 	.word	0x000823d9

00082410 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   82410:	b480      	push	{r7}
   82412:	b085      	sub	sp, #20
   82414:	af00      	add	r7, sp, #0
   82416:	60f8      	str	r0, [r7, #12]
   82418:	60b9      	str	r1, [r7, #8]
   8241a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8241c:	687b      	ldr	r3, [r7, #4]
   8241e:	2b00      	cmp	r3, #0
   82420:	d00c      	beq.n	8243c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   82422:	68fb      	ldr	r3, [r7, #12]
   82424:	68ba      	ldr	r2, [r7, #8]
   82426:	320c      	adds	r2, #12
   82428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8242c:	f043 0101 	orr.w	r1, r3, #1
   82430:	68fb      	ldr	r3, [r7, #12]
   82432:	68ba      	ldr	r2, [r7, #8]
   82434:	320c      	adds	r2, #12
   82436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   8243a:	e00b      	b.n	82454 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8243c:	68fb      	ldr	r3, [r7, #12]
   8243e:	68ba      	ldr	r2, [r7, #8]
   82440:	320c      	adds	r2, #12
   82442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82446:	f023 0101 	bic.w	r1, r3, #1
   8244a:	68fb      	ldr	r3, [r7, #12]
   8244c:	68ba      	ldr	r2, [r7, #8]
   8244e:	320c      	adds	r2, #12
   82450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   82454:	bf00      	nop
   82456:	3714      	adds	r7, #20
   82458:	46bd      	mov	sp, r7
   8245a:	bc80      	pop	{r7}
   8245c:	4770      	bx	lr

0008245e <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   8245e:	b480      	push	{r7}
   82460:	b085      	sub	sp, #20
   82462:	af00      	add	r7, sp, #0
   82464:	60f8      	str	r0, [r7, #12]
   82466:	60b9      	str	r1, [r7, #8]
   82468:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8246a:	687b      	ldr	r3, [r7, #4]
   8246c:	2b00      	cmp	r3, #0
   8246e:	d00c      	beq.n	8248a <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   82470:	68fb      	ldr	r3, [r7, #12]
   82472:	68ba      	ldr	r2, [r7, #8]
   82474:	320c      	adds	r2, #12
   82476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8247a:	f043 0102 	orr.w	r1, r3, #2
   8247e:	68fb      	ldr	r3, [r7, #12]
   82480:	68ba      	ldr	r2, [r7, #8]
   82482:	320c      	adds	r2, #12
   82484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   82488:	e00b      	b.n	824a2 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8248a:	68fb      	ldr	r3, [r7, #12]
   8248c:	68ba      	ldr	r2, [r7, #8]
   8248e:	320c      	adds	r2, #12
   82490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82494:	f023 0102 	bic.w	r1, r3, #2
   82498:	68fb      	ldr	r3, [r7, #12]
   8249a:	68ba      	ldr	r2, [r7, #8]
   8249c:	320c      	adds	r2, #12
   8249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   824a2:	bf00      	nop
   824a4:	3714      	adds	r7, #20
   824a6:	46bd      	mov	sp, r7
   824a8:	bc80      	pop	{r7}
   824aa:	4770      	bx	lr

000824ac <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   824ac:	b480      	push	{r7}
   824ae:	b085      	sub	sp, #20
   824b0:	af00      	add	r7, sp, #0
   824b2:	60f8      	str	r0, [r7, #12]
   824b4:	60b9      	str	r1, [r7, #8]
   824b6:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   824b8:	68fb      	ldr	r3, [r7, #12]
   824ba:	68ba      	ldr	r2, [r7, #8]
   824bc:	320c      	adds	r2, #12
   824be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   824c2:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   824c6:	68fb      	ldr	r3, [r7, #12]
   824c8:	68ba      	ldr	r2, [r7, #8]
   824ca:	320c      	adds	r2, #12
   824cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   824d0:	68fb      	ldr	r3, [r7, #12]
   824d2:	68ba      	ldr	r2, [r7, #8]
   824d4:	320c      	adds	r2, #12
   824d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   824da:	687b      	ldr	r3, [r7, #4]
   824dc:	ea42 0103 	orr.w	r1, r2, r3
   824e0:	68fb      	ldr	r3, [r7, #12]
   824e2:	68ba      	ldr	r2, [r7, #8]
   824e4:	320c      	adds	r2, #12
   824e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   824ea:	bf00      	nop
   824ec:	3714      	adds	r7, #20
   824ee:	46bd      	mov	sp, r7
   824f0:	bc80      	pop	{r7}
   824f2:	4770      	bx	lr

000824f4 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   824f4:	b480      	push	{r7}
   824f6:	b085      	sub	sp, #20
   824f8:	af00      	add	r7, sp, #0
   824fa:	6078      	str	r0, [r7, #4]
   824fc:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   824fe:	683a      	ldr	r2, [r7, #0]
   82500:	687b      	ldr	r3, [r7, #4]
   82502:	4413      	add	r3, r2
   82504:	1e5a      	subs	r2, r3, #1
   82506:	687b      	ldr	r3, [r7, #4]
   82508:	fbb2 f3f3 	udiv	r3, r2, r3
   8250c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8250e:	68fb      	ldr	r3, [r7, #12]
   82510:	2b00      	cmp	r3, #0
   82512:	dd02      	ble.n	8251a <spi_calc_baudrate_div+0x26>
   82514:	68fb      	ldr	r3, [r7, #12]
   82516:	2bff      	cmp	r3, #255	; 0xff
   82518:	dd02      	ble.n	82520 <spi_calc_baudrate_div+0x2c>
		return -1;
   8251a:	f04f 33ff 	mov.w	r3, #4294967295
   8251e:	e001      	b.n	82524 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   82520:	68fb      	ldr	r3, [r7, #12]
   82522:	b21b      	sxth	r3, r3
}
   82524:	4618      	mov	r0, r3
   82526:	3714      	adds	r7, #20
   82528:	46bd      	mov	sp, r7
   8252a:	bc80      	pop	{r7}
   8252c:	4770      	bx	lr

0008252e <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8252e:	b480      	push	{r7}
   82530:	b085      	sub	sp, #20
   82532:	af00      	add	r7, sp, #0
   82534:	60f8      	str	r0, [r7, #12]
   82536:	60b9      	str	r1, [r7, #8]
   82538:	4613      	mov	r3, r2
   8253a:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8253c:	68fb      	ldr	r3, [r7, #12]
   8253e:	68ba      	ldr	r2, [r7, #8]
   82540:	320c      	adds	r2, #12
   82542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82546:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   8254a:	68fb      	ldr	r3, [r7, #12]
   8254c:	68ba      	ldr	r2, [r7, #8]
   8254e:	320c      	adds	r2, #12
   82550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   82554:	68fb      	ldr	r3, [r7, #12]
   82556:	68ba      	ldr	r2, [r7, #8]
   82558:	320c      	adds	r2, #12
   8255a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8255e:	79fb      	ldrb	r3, [r7, #7]
   82560:	021b      	lsls	r3, r3, #8
   82562:	b29b      	uxth	r3, r3
   82564:	ea42 0103 	orr.w	r1, r2, r3
   82568:	68fb      	ldr	r3, [r7, #12]
   8256a:	68ba      	ldr	r2, [r7, #8]
   8256c:	320c      	adds	r2, #12
   8256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   82572:	bf00      	nop
   82574:	3714      	adds	r7, #20
   82576:	46bd      	mov	sp, r7
   82578:	bc80      	pop	{r7}
   8257a:	4770      	bx	lr

0008257c <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   8257c:	b480      	push	{r7}
   8257e:	b085      	sub	sp, #20
   82580:	af00      	add	r7, sp, #0
   82582:	60f8      	str	r0, [r7, #12]
   82584:	60b9      	str	r1, [r7, #8]
   82586:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82588:	68f9      	ldr	r1, [r7, #12]
   8258a:	68ba      	ldr	r2, [r7, #8]
   8258c:	4613      	mov	r3, r2
   8258e:	009b      	lsls	r3, r3, #2
   82590:	4413      	add	r3, r2
   82592:	009b      	lsls	r3, r3, #2
   82594:	440b      	add	r3, r1
   82596:	3370      	adds	r3, #112	; 0x70
   82598:	687a      	ldr	r2, [r7, #4]
   8259a:	601a      	str	r2, [r3, #0]
}
   8259c:	bf00      	nop
   8259e:	3714      	adds	r7, #20
   825a0:	46bd      	mov	sp, r7
   825a2:	bc80      	pop	{r7}
   825a4:	4770      	bx	lr

000825a6 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   825a6:	b480      	push	{r7}
   825a8:	b085      	sub	sp, #20
   825aa:	af00      	add	r7, sp, #0
   825ac:	60f8      	str	r0, [r7, #12]
   825ae:	60b9      	str	r1, [r7, #8]
   825b0:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   825b2:	68f9      	ldr	r1, [r7, #12]
   825b4:	68ba      	ldr	r2, [r7, #8]
   825b6:	4613      	mov	r3, r2
   825b8:	009b      	lsls	r3, r3, #2
   825ba:	4413      	add	r3, r2
   825bc:	009b      	lsls	r3, r3, #2
   825be:	440b      	add	r3, r1
   825c0:	3374      	adds	r3, #116	; 0x74
   825c2:	687a      	ldr	r2, [r7, #4]
   825c4:	601a      	str	r2, [r3, #0]
}
   825c6:	bf00      	nop
   825c8:	3714      	adds	r7, #20
   825ca:	46bd      	mov	sp, r7
   825cc:	bc80      	pop	{r7}
   825ce:	4770      	bx	lr

000825d0 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   825d0:	b480      	push	{r7}
   825d2:	b085      	sub	sp, #20
   825d4:	af00      	add	r7, sp, #0
   825d6:	60f8      	str	r0, [r7, #12]
   825d8:	60b9      	str	r1, [r7, #8]
   825da:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   825dc:	68f9      	ldr	r1, [r7, #12]
   825de:	68ba      	ldr	r2, [r7, #8]
   825e0:	4613      	mov	r3, r2
   825e2:	009b      	lsls	r3, r3, #2
   825e4:	4413      	add	r3, r2
   825e6:	009b      	lsls	r3, r3, #2
   825e8:	440b      	add	r3, r1
   825ea:	3378      	adds	r3, #120	; 0x78
   825ec:	687a      	ldr	r2, [r7, #4]
   825ee:	601a      	str	r2, [r3, #0]
}
   825f0:	bf00      	nop
   825f2:	3714      	adds	r7, #20
   825f4:	46bd      	mov	sp, r7
   825f6:	bc80      	pop	{r7}
   825f8:	4770      	bx	lr

000825fa <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   825fa:	b480      	push	{r7}
   825fc:	b085      	sub	sp, #20
   825fe:	af00      	add	r7, sp, #0
   82600:	60f8      	str	r0, [r7, #12]
   82602:	60b9      	str	r1, [r7, #8]
   82604:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82606:	68f9      	ldr	r1, [r7, #12]
   82608:	68ba      	ldr	r2, [r7, #8]
   8260a:	4613      	mov	r3, r2
   8260c:	009b      	lsls	r3, r3, #2
   8260e:	4413      	add	r3, r2
   82610:	009b      	lsls	r3, r3, #2
   82612:	440b      	add	r3, r1
   82614:	3380      	adds	r3, #128	; 0x80
   82616:	687a      	ldr	r2, [r7, #4]
   82618:	601a      	str	r2, [r3, #0]
}
   8261a:	bf00      	nop
   8261c:	3714      	adds	r7, #20
   8261e:	46bd      	mov	sp, r7
   82620:	bc80      	pop	{r7}
   82622:	4770      	bx	lr

00082624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82624:	b580      	push	{r7, lr}
   82626:	b084      	sub	sp, #16
   82628:	af00      	add	r7, sp, #0
   8262a:	6078      	str	r0, [r7, #4]
   8262c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8262e:	6878      	ldr	r0, [r7, #4]
   82630:	4b26      	ldr	r3, [pc, #152]	; (826cc <pio_handler_process+0xa8>)
   82632:	4798      	blx	r3
   82634:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82636:	6878      	ldr	r0, [r7, #4]
   82638:	4b25      	ldr	r3, [pc, #148]	; (826d0 <pio_handler_process+0xac>)
   8263a:	4798      	blx	r3
   8263c:	4602      	mov	r2, r0
   8263e:	68fb      	ldr	r3, [r7, #12]
   82640:	4013      	ands	r3, r2
   82642:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82644:	68fb      	ldr	r3, [r7, #12]
   82646:	2b00      	cmp	r3, #0
   82648:	d03c      	beq.n	826c4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   8264a:	2300      	movs	r3, #0
   8264c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8264e:	e034      	b.n	826ba <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82650:	4a20      	ldr	r2, [pc, #128]	; (826d4 <pio_handler_process+0xb0>)
   82652:	68bb      	ldr	r3, [r7, #8]
   82654:	011b      	lsls	r3, r3, #4
   82656:	4413      	add	r3, r2
   82658:	681b      	ldr	r3, [r3, #0]
   8265a:	683a      	ldr	r2, [r7, #0]
   8265c:	429a      	cmp	r2, r3
   8265e:	d126      	bne.n	826ae <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82660:	4a1c      	ldr	r2, [pc, #112]	; (826d4 <pio_handler_process+0xb0>)
   82662:	68bb      	ldr	r3, [r7, #8]
   82664:	011b      	lsls	r3, r3, #4
   82666:	4413      	add	r3, r2
   82668:	3304      	adds	r3, #4
   8266a:	681a      	ldr	r2, [r3, #0]
   8266c:	68fb      	ldr	r3, [r7, #12]
   8266e:	4013      	ands	r3, r2
   82670:	2b00      	cmp	r3, #0
   82672:	d01c      	beq.n	826ae <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82674:	4a17      	ldr	r2, [pc, #92]	; (826d4 <pio_handler_process+0xb0>)
   82676:	68bb      	ldr	r3, [r7, #8]
   82678:	011b      	lsls	r3, r3, #4
   8267a:	4413      	add	r3, r2
   8267c:	330c      	adds	r3, #12
   8267e:	681b      	ldr	r3, [r3, #0]
   82680:	4914      	ldr	r1, [pc, #80]	; (826d4 <pio_handler_process+0xb0>)
   82682:	68ba      	ldr	r2, [r7, #8]
   82684:	0112      	lsls	r2, r2, #4
   82686:	440a      	add	r2, r1
   82688:	6810      	ldr	r0, [r2, #0]
   8268a:	4912      	ldr	r1, [pc, #72]	; (826d4 <pio_handler_process+0xb0>)
   8268c:	68ba      	ldr	r2, [r7, #8]
   8268e:	0112      	lsls	r2, r2, #4
   82690:	440a      	add	r2, r1
   82692:	3204      	adds	r2, #4
   82694:	6812      	ldr	r2, [r2, #0]
   82696:	4611      	mov	r1, r2
   82698:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8269a:	4a0e      	ldr	r2, [pc, #56]	; (826d4 <pio_handler_process+0xb0>)
   8269c:	68bb      	ldr	r3, [r7, #8]
   8269e:	011b      	lsls	r3, r3, #4
   826a0:	4413      	add	r3, r2
   826a2:	3304      	adds	r3, #4
   826a4:	681b      	ldr	r3, [r3, #0]
   826a6:	43db      	mvns	r3, r3
   826a8:	68fa      	ldr	r2, [r7, #12]
   826aa:	4013      	ands	r3, r2
   826ac:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   826ae:	68bb      	ldr	r3, [r7, #8]
   826b0:	3301      	adds	r3, #1
   826b2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   826b4:	68bb      	ldr	r3, [r7, #8]
   826b6:	2b06      	cmp	r3, #6
   826b8:	d803      	bhi.n	826c2 <pio_handler_process+0x9e>
		while (status != 0) {
   826ba:	68fb      	ldr	r3, [r7, #12]
   826bc:	2b00      	cmp	r3, #0
   826be:	d1c7      	bne.n	82650 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   826c0:	e000      	b.n	826c4 <pio_handler_process+0xa0>
				break;
   826c2:	bf00      	nop
}
   826c4:	bf00      	nop
   826c6:	3710      	adds	r7, #16
   826c8:	46bd      	mov	sp, r7
   826ca:	bd80      	pop	{r7, pc}
   826cc:	000851ab 	.word	0x000851ab
   826d0:	000851c1 	.word	0x000851c1
   826d4:	200012b0 	.word	0x200012b0

000826d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   826d8:	b580      	push	{r7, lr}
   826da:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   826dc:	210a      	movs	r1, #10
   826de:	4802      	ldr	r0, [pc, #8]	; (826e8 <PIOA_Handler+0x10>)
   826e0:	4b02      	ldr	r3, [pc, #8]	; (826ec <PIOA_Handler+0x14>)
   826e2:	4798      	blx	r3
}
   826e4:	bf00      	nop
   826e6:	bd80      	pop	{r7, pc}
   826e8:	400e0c00 	.word	0x400e0c00
   826ec:	00082625 	.word	0x00082625

000826f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   826f0:	b580      	push	{r7, lr}
   826f2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   826f4:	210b      	movs	r1, #11
   826f6:	4802      	ldr	r0, [pc, #8]	; (82700 <PIOB_Handler+0x10>)
   826f8:	4b02      	ldr	r3, [pc, #8]	; (82704 <PIOB_Handler+0x14>)
   826fa:	4798      	blx	r3
}
   826fc:	bf00      	nop
   826fe:	bd80      	pop	{r7, pc}
   82700:	400e0e00 	.word	0x400e0e00
   82704:	00082625 	.word	0x00082625

00082708 <NVIC_EnableIRQ>:
{
   82708:	b480      	push	{r7}
   8270a:	b083      	sub	sp, #12
   8270c:	af00      	add	r7, sp, #0
   8270e:	4603      	mov	r3, r0
   82710:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82712:	79fb      	ldrb	r3, [r7, #7]
   82714:	f003 031f 	and.w	r3, r3, #31
   82718:	2201      	movs	r2, #1
   8271a:	fa02 f103 	lsl.w	r1, r2, r3
   8271e:	4a05      	ldr	r2, [pc, #20]	; (82734 <NVIC_EnableIRQ+0x2c>)
   82720:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82724:	095b      	lsrs	r3, r3, #5
   82726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   8272a:	bf00      	nop
   8272c:	370c      	adds	r7, #12
   8272e:	46bd      	mov	sp, r7
   82730:	bc80      	pop	{r7}
   82732:	4770      	bx	lr
   82734:	e000e100 	.word	0xe000e100

00082738 <NVIC_SetPriority>:
{
   82738:	b480      	push	{r7}
   8273a:	b083      	sub	sp, #12
   8273c:	af00      	add	r7, sp, #0
   8273e:	4603      	mov	r3, r0
   82740:	6039      	str	r1, [r7, #0]
   82742:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82744:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82748:	2b00      	cmp	r3, #0
   8274a:	da0b      	bge.n	82764 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   8274c:	683b      	ldr	r3, [r7, #0]
   8274e:	b2da      	uxtb	r2, r3
   82750:	490c      	ldr	r1, [pc, #48]	; (82784 <NVIC_SetPriority+0x4c>)
   82752:	79fb      	ldrb	r3, [r7, #7]
   82754:	f003 030f 	and.w	r3, r3, #15
   82758:	3b04      	subs	r3, #4
   8275a:	0112      	lsls	r2, r2, #4
   8275c:	b2d2      	uxtb	r2, r2
   8275e:	440b      	add	r3, r1
   82760:	761a      	strb	r2, [r3, #24]
}
   82762:	e009      	b.n	82778 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82764:	683b      	ldr	r3, [r7, #0]
   82766:	b2da      	uxtb	r2, r3
   82768:	4907      	ldr	r1, [pc, #28]	; (82788 <NVIC_SetPriority+0x50>)
   8276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8276e:	0112      	lsls	r2, r2, #4
   82770:	b2d2      	uxtb	r2, r2
   82772:	440b      	add	r3, r1
   82774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82778:	bf00      	nop
   8277a:	370c      	adds	r7, #12
   8277c:	46bd      	mov	sp, r7
   8277e:	bc80      	pop	{r7}
   82780:	4770      	bx	lr
   82782:	bf00      	nop
   82784:	e000ed00 	.word	0xe000ed00
   82788:	e000e100 	.word	0xe000e100

0008278c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   8278c:	b480      	push	{r7}
   8278e:	b083      	sub	sp, #12
   82790:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82792:	f3ef 8310 	mrs	r3, PRIMASK
   82796:	603b      	str	r3, [r7, #0]
  return(result);
   82798:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8279a:	2b00      	cmp	r3, #0
   8279c:	bf0c      	ite	eq
   8279e:	2301      	moveq	r3, #1
   827a0:	2300      	movne	r3, #0
   827a2:	b2db      	uxtb	r3, r3
   827a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   827a6:	b672      	cpsid	i
}
   827a8:	bf00      	nop
  __ASM volatile ("dmb");
   827aa:	f3bf 8f5f 	dmb	sy
}
   827ae:	bf00      	nop
	cpu_irq_disable();
   827b0:	4b04      	ldr	r3, [pc, #16]	; (827c4 <cpu_irq_save+0x38>)
   827b2:	2200      	movs	r2, #0
   827b4:	701a      	strb	r2, [r3, #0]
	return flags;
   827b6:	687b      	ldr	r3, [r7, #4]
}
   827b8:	4618      	mov	r0, r3
   827ba:	370c      	adds	r7, #12
   827bc:	46bd      	mov	sp, r7
   827be:	bc80      	pop	{r7}
   827c0:	4770      	bx	lr
   827c2:	bf00      	nop
   827c4:	200003aa 	.word	0x200003aa

000827c8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   827c8:	b480      	push	{r7}
   827ca:	b083      	sub	sp, #12
   827cc:	af00      	add	r7, sp, #0
   827ce:	6078      	str	r0, [r7, #4]
	return (flags);
   827d0:	687b      	ldr	r3, [r7, #4]
   827d2:	2b00      	cmp	r3, #0
   827d4:	bf14      	ite	ne
   827d6:	2301      	movne	r3, #1
   827d8:	2300      	moveq	r3, #0
   827da:	b2db      	uxtb	r3, r3
}
   827dc:	4618      	mov	r0, r3
   827de:	370c      	adds	r7, #12
   827e0:	46bd      	mov	sp, r7
   827e2:	bc80      	pop	{r7}
   827e4:	4770      	bx	lr
   827e6:	0000      	movs	r0, r0

000827e8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   827e8:	b580      	push	{r7, lr}
   827ea:	b082      	sub	sp, #8
   827ec:	af00      	add	r7, sp, #0
   827ee:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   827f0:	6878      	ldr	r0, [r7, #4]
   827f2:	4b08      	ldr	r3, [pc, #32]	; (82814 <cpu_irq_restore+0x2c>)
   827f4:	4798      	blx	r3
   827f6:	4603      	mov	r3, r0
   827f8:	2b00      	cmp	r3, #0
   827fa:	d007      	beq.n	8280c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   827fc:	4b06      	ldr	r3, [pc, #24]	; (82818 <cpu_irq_restore+0x30>)
   827fe:	2201      	movs	r2, #1
   82800:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82802:	f3bf 8f5f 	dmb	sy
}
   82806:	bf00      	nop
  __ASM volatile ("cpsie i");
   82808:	b662      	cpsie	i
}
   8280a:	bf00      	nop
}
   8280c:	bf00      	nop
   8280e:	3708      	adds	r7, #8
   82810:	46bd      	mov	sp, r7
   82812:	bd80      	pop	{r7, pc}
   82814:	000827c9 	.word	0x000827c9
   82818:	200003aa 	.word	0x200003aa

0008281c <sleepmgr_lock_mode>:
{
   8281c:	b580      	push	{r7, lr}
   8281e:	b084      	sub	sp, #16
   82820:	af00      	add	r7, sp, #0
   82822:	4603      	mov	r3, r0
   82824:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   82826:	4b08      	ldr	r3, [pc, #32]	; (82848 <sleepmgr_lock_mode+0x2c>)
   82828:	4798      	blx	r3
   8282a:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   8282c:	79fb      	ldrb	r3, [r7, #7]
   8282e:	4a07      	ldr	r2, [pc, #28]	; (8284c <sleepmgr_lock_mode+0x30>)
   82830:	5cd2      	ldrb	r2, [r2, r3]
   82832:	3201      	adds	r2, #1
   82834:	b2d1      	uxtb	r1, r2
   82836:	4a05      	ldr	r2, [pc, #20]	; (8284c <sleepmgr_lock_mode+0x30>)
   82838:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   8283a:	68f8      	ldr	r0, [r7, #12]
   8283c:	4b04      	ldr	r3, [pc, #16]	; (82850 <sleepmgr_lock_mode+0x34>)
   8283e:	4798      	blx	r3
}
   82840:	bf00      	nop
   82842:	3710      	adds	r7, #16
   82844:	46bd      	mov	sp, r7
   82846:	bd80      	pop	{r7, pc}
   82848:	0008278d 	.word	0x0008278d
   8284c:	20001834 	.word	0x20001834
   82850:	000827e9 	.word	0x000827e9

00082854 <sleepmgr_unlock_mode>:
{
   82854:	b580      	push	{r7, lr}
   82856:	b084      	sub	sp, #16
   82858:	af00      	add	r7, sp, #0
   8285a:	4603      	mov	r3, r0
   8285c:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8285e:	4b08      	ldr	r3, [pc, #32]	; (82880 <sleepmgr_unlock_mode+0x2c>)
   82860:	4798      	blx	r3
   82862:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   82864:	79fb      	ldrb	r3, [r7, #7]
   82866:	4a07      	ldr	r2, [pc, #28]	; (82884 <sleepmgr_unlock_mode+0x30>)
   82868:	5cd2      	ldrb	r2, [r2, r3]
   8286a:	3a01      	subs	r2, #1
   8286c:	b2d1      	uxtb	r1, r2
   8286e:	4a05      	ldr	r2, [pc, #20]	; (82884 <sleepmgr_unlock_mode+0x30>)
   82870:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   82872:	68f8      	ldr	r0, [r7, #12]
   82874:	4b04      	ldr	r3, [pc, #16]	; (82888 <sleepmgr_unlock_mode+0x34>)
   82876:	4798      	blx	r3
}
   82878:	bf00      	nop
   8287a:	3710      	adds	r7, #16
   8287c:	46bd      	mov	sp, r7
   8287e:	bd80      	pop	{r7, pc}
   82880:	0008278d 	.word	0x0008278d
   82884:	20001834 	.word	0x20001834
   82888:	000827e9 	.word	0x000827e9

0008288c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   8288c:	b580      	push	{r7, lr}
   8288e:	b082      	sub	sp, #8
   82890:	af00      	add	r7, sp, #0
   82892:	4603      	mov	r3, r0
   82894:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   82896:	79fb      	ldrb	r3, [r7, #7]
   82898:	f083 0301 	eor.w	r3, r3, #1
   8289c:	b2db      	uxtb	r3, r3
   8289e:	2b00      	cmp	r3, #0
   828a0:	d006      	beq.n	828b0 <udd_sleep_mode+0x24>
   828a2:	4b0d      	ldr	r3, [pc, #52]	; (828d8 <udd_sleep_mode+0x4c>)
   828a4:	781b      	ldrb	r3, [r3, #0]
   828a6:	2b00      	cmp	r3, #0
   828a8:	d002      	beq.n	828b0 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   828aa:	2002      	movs	r0, #2
   828ac:	4b0b      	ldr	r3, [pc, #44]	; (828dc <udd_sleep_mode+0x50>)
   828ae:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   828b0:	79fb      	ldrb	r3, [r7, #7]
   828b2:	2b00      	cmp	r3, #0
   828b4:	d009      	beq.n	828ca <udd_sleep_mode+0x3e>
   828b6:	4b08      	ldr	r3, [pc, #32]	; (828d8 <udd_sleep_mode+0x4c>)
   828b8:	781b      	ldrb	r3, [r3, #0]
   828ba:	f083 0301 	eor.w	r3, r3, #1
   828be:	b2db      	uxtb	r3, r3
   828c0:	2b00      	cmp	r3, #0
   828c2:	d002      	beq.n	828ca <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   828c4:	2002      	movs	r0, #2
   828c6:	4b06      	ldr	r3, [pc, #24]	; (828e0 <udd_sleep_mode+0x54>)
   828c8:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   828ca:	4a03      	ldr	r2, [pc, #12]	; (828d8 <udd_sleep_mode+0x4c>)
   828cc:	79fb      	ldrb	r3, [r7, #7]
   828ce:	7013      	strb	r3, [r2, #0]
}
   828d0:	bf00      	nop
   828d2:	3708      	adds	r7, #8
   828d4:	46bd      	mov	sp, r7
   828d6:	bd80      	pop	{r7, pc}
   828d8:	20001320 	.word	0x20001320
   828dc:	00082855 	.word	0x00082855
   828e0:	0008281d 	.word	0x0008281d

000828e4 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   828e4:	b580      	push	{r7, lr}
   828e6:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   828e8:	201d      	movs	r0, #29
   828ea:	4b5f      	ldr	r3, [pc, #380]	; (82a68 <UDPHS_Handler+0x184>)
   828ec:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   828ee:	4b5f      	ldr	r3, [pc, #380]	; (82a6c <UDPHS_Handler+0x188>)
   828f0:	4798      	blx	r3
   828f2:	4603      	mov	r3, r0
   828f4:	f083 0301 	eor.w	r3, r3, #1
   828f8:	b2db      	uxtb	r3, r3
   828fa:	2b00      	cmp	r3, #0
   828fc:	d00e      	beq.n	8291c <UDPHS_Handler+0x38>
   828fe:	4b5c      	ldr	r3, [pc, #368]	; (82a70 <UDPHS_Handler+0x18c>)
   82900:	695b      	ldr	r3, [r3, #20]
   82902:	f003 0302 	and.w	r3, r3, #2
   82906:	2b00      	cmp	r3, #0
   82908:	d108      	bne.n	8291c <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   8290a:	b672      	cpsid	i
}
   8290c:	bf00      	nop
  __ASM volatile ("dmb");
   8290e:	f3bf 8f5f 	dmb	sy
}
   82912:	bf00      	nop
		cpu_irq_disable();
   82914:	4b57      	ldr	r3, [pc, #348]	; (82a74 <UDPHS_Handler+0x190>)
   82916:	2200      	movs	r2, #0
   82918:	701a      	strb	r2, [r3, #0]
		return;
   8291a:	e0a4      	b.n	82a66 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   8291c:	4b54      	ldr	r3, [pc, #336]	; (82a70 <UDPHS_Handler+0x18c>)
   8291e:	695b      	ldr	r3, [r3, #20]
   82920:	f003 0308 	and.w	r3, r3, #8
   82924:	2b00      	cmp	r3, #0
   82926:	d00d      	beq.n	82944 <UDPHS_Handler+0x60>
		udd_ack_sof();
   82928:	4b51      	ldr	r3, [pc, #324]	; (82a70 <UDPHS_Handler+0x18c>)
   8292a:	2208      	movs	r2, #8
   8292c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8292e:	4b50      	ldr	r3, [pc, #320]	; (82a70 <UDPHS_Handler+0x18c>)
   82930:	695b      	ldr	r3, [r3, #20]
   82932:	f003 0301 	and.w	r3, r3, #1
   82936:	2b00      	cmp	r3, #0
   82938:	d101      	bne.n	8293e <UDPHS_Handler+0x5a>
			udc_sof_notify();
   8293a:	4b4f      	ldr	r3, [pc, #316]	; (82a78 <UDPHS_Handler+0x194>)
   8293c:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   8293e:	4b4f      	ldr	r3, [pc, #316]	; (82a7c <UDPHS_Handler+0x198>)
   82940:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   82942:	e08f      	b.n	82a64 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   82944:	4b4a      	ldr	r3, [pc, #296]	; (82a70 <UDPHS_Handler+0x18c>)
   82946:	695b      	ldr	r3, [r3, #20]
   82948:	f003 0304 	and.w	r3, r3, #4
   8294c:	2b00      	cmp	r3, #0
   8294e:	d005      	beq.n	8295c <UDPHS_Handler+0x78>
		udd_ack_msof();
   82950:	4b47      	ldr	r3, [pc, #284]	; (82a70 <UDPHS_Handler+0x18c>)
   82952:	2204      	movs	r2, #4
   82954:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   82956:	4b48      	ldr	r3, [pc, #288]	; (82a78 <UDPHS_Handler+0x194>)
   82958:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8295a:	e083      	b.n	82a64 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   8295c:	4b48      	ldr	r3, [pc, #288]	; (82a80 <UDPHS_Handler+0x19c>)
   8295e:	4798      	blx	r3
   82960:	4603      	mov	r3, r0
   82962:	2b00      	cmp	r3, #0
   82964:	d179      	bne.n	82a5a <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   82966:	4b47      	ldr	r3, [pc, #284]	; (82a84 <UDPHS_Handler+0x1a0>)
   82968:	4798      	blx	r3
   8296a:	4603      	mov	r3, r0
   8296c:	2b00      	cmp	r3, #0
   8296e:	d176      	bne.n	82a5e <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   82970:	4b3f      	ldr	r3, [pc, #252]	; (82a70 <UDPHS_Handler+0x18c>)
   82972:	695b      	ldr	r3, [r3, #20]
   82974:	f003 0310 	and.w	r3, r3, #16
   82978:	2b00      	cmp	r3, #0
   8297a:	d01d      	beq.n	829b8 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   8297c:	4b3c      	ldr	r3, [pc, #240]	; (82a70 <UDPHS_Handler+0x18c>)
   8297e:	2210      	movs	r2, #16
   82980:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   82982:	4b41      	ldr	r3, [pc, #260]	; (82a88 <UDPHS_Handler+0x1a4>)
   82984:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   82986:	4b41      	ldr	r3, [pc, #260]	; (82a8c <UDPHS_Handler+0x1a8>)
   82988:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   8298a:	4b41      	ldr	r3, [pc, #260]	; (82a90 <UDPHS_Handler+0x1ac>)
   8298c:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   8298e:	4b41      	ldr	r3, [pc, #260]	; (82a94 <UDPHS_Handler+0x1b0>)
   82990:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   82992:	4b37      	ldr	r3, [pc, #220]	; (82a70 <UDPHS_Handler+0x18c>)
   82994:	691b      	ldr	r3, [r3, #16]
   82996:	4a36      	ldr	r2, [pc, #216]	; (82a70 <UDPHS_Handler+0x18c>)
   82998:	f043 0308 	orr.w	r3, r3, #8
   8299c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8299e:	4b34      	ldr	r3, [pc, #208]	; (82a70 <UDPHS_Handler+0x18c>)
   829a0:	691b      	ldr	r3, [r3, #16]
   829a2:	4a33      	ldr	r2, [pc, #204]	; (82a70 <UDPHS_Handler+0x18c>)
   829a4:	f043 0304 	orr.w	r3, r3, #4
   829a8:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   829aa:	4b31      	ldr	r3, [pc, #196]	; (82a70 <UDPHS_Handler+0x18c>)
   829ac:	691b      	ldr	r3, [r3, #16]
   829ae:	4a30      	ldr	r2, [pc, #192]	; (82a70 <UDPHS_Handler+0x18c>)
   829b0:	f043 0302 	orr.w	r3, r3, #2
   829b4:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   829b6:	e055      	b.n	82a64 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   829b8:	4b2d      	ldr	r3, [pc, #180]	; (82a70 <UDPHS_Handler+0x18c>)
   829ba:	691b      	ldr	r3, [r3, #16]
   829bc:	f003 0302 	and.w	r3, r3, #2
   829c0:	2b00      	cmp	r3, #0
   829c2:	d020      	beq.n	82a06 <UDPHS_Handler+0x122>
   829c4:	4b2a      	ldr	r3, [pc, #168]	; (82a70 <UDPHS_Handler+0x18c>)
   829c6:	695b      	ldr	r3, [r3, #20]
   829c8:	f003 0302 	and.w	r3, r3, #2
   829cc:	2b00      	cmp	r3, #0
   829ce:	d01a      	beq.n	82a06 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   829d0:	4b27      	ldr	r3, [pc, #156]	; (82a70 <UDPHS_Handler+0x18c>)
   829d2:	2220      	movs	r2, #32
   829d4:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   829d6:	4b26      	ldr	r3, [pc, #152]	; (82a70 <UDPHS_Handler+0x18c>)
   829d8:	691b      	ldr	r3, [r3, #16]
   829da:	4a25      	ldr	r2, [pc, #148]	; (82a70 <UDPHS_Handler+0x18c>)
   829dc:	f023 0302 	bic.w	r3, r3, #2
   829e0:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   829e2:	4b23      	ldr	r3, [pc, #140]	; (82a70 <UDPHS_Handler+0x18c>)
   829e4:	691b      	ldr	r3, [r3, #16]
   829e6:	4a22      	ldr	r2, [pc, #136]	; (82a70 <UDPHS_Handler+0x18c>)
   829e8:	f043 0320 	orr.w	r3, r3, #32
   829ec:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   829ee:	4b20      	ldr	r3, [pc, #128]	; (82a70 <UDPHS_Handler+0x18c>)
   829f0:	2202      	movs	r2, #2
   829f2:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   829f4:	201d      	movs	r0, #29
   829f6:	4b28      	ldr	r3, [pc, #160]	; (82a98 <UDPHS_Handler+0x1b4>)
   829f8:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   829fa:	4b28      	ldr	r3, [pc, #160]	; (82a9c <UDPHS_Handler+0x1b8>)
   829fc:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   829fe:	2000      	movs	r0, #0
   82a00:	4b27      	ldr	r3, [pc, #156]	; (82aa0 <UDPHS_Handler+0x1bc>)
   82a02:	4798      	blx	r3
		goto udd_interrupt_end;
   82a04:	e02e      	b.n	82a64 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   82a06:	4b1a      	ldr	r3, [pc, #104]	; (82a70 <UDPHS_Handler+0x18c>)
   82a08:	695b      	ldr	r3, [r3, #20]
   82a0a:	f003 0320 	and.w	r3, r3, #32
   82a0e:	2b00      	cmp	r3, #0
   82a10:	d027      	beq.n	82a62 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   82a12:	2001      	movs	r0, #1
   82a14:	4b22      	ldr	r3, [pc, #136]	; (82aa0 <UDPHS_Handler+0x1bc>)
   82a16:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   82a18:	4b15      	ldr	r3, [pc, #84]	; (82a70 <UDPHS_Handler+0x18c>)
   82a1a:	2202      	movs	r2, #2
   82a1c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   82a1e:	4b14      	ldr	r3, [pc, #80]	; (82a70 <UDPHS_Handler+0x18c>)
   82a20:	2220      	movs	r2, #32
   82a22:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   82a24:	4b12      	ldr	r3, [pc, #72]	; (82a70 <UDPHS_Handler+0x18c>)
   82a26:	691b      	ldr	r3, [r3, #16]
   82a28:	4a11      	ldr	r2, [pc, #68]	; (82a70 <UDPHS_Handler+0x18c>)
   82a2a:	f023 0320 	bic.w	r3, r3, #32
   82a2e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   82a30:	4b0f      	ldr	r3, [pc, #60]	; (82a70 <UDPHS_Handler+0x18c>)
   82a32:	691b      	ldr	r3, [r3, #16]
   82a34:	4a0e      	ldr	r2, [pc, #56]	; (82a70 <UDPHS_Handler+0x18c>)
   82a36:	f043 0302 	orr.w	r3, r3, #2
   82a3a:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   82a3c:	4b0c      	ldr	r3, [pc, #48]	; (82a70 <UDPHS_Handler+0x18c>)
   82a3e:	691b      	ldr	r3, [r3, #16]
   82a40:	4a0b      	ldr	r2, [pc, #44]	; (82a70 <UDPHS_Handler+0x18c>)
   82a42:	f043 0308 	orr.w	r3, r3, #8
   82a46:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   82a48:	4b09      	ldr	r3, [pc, #36]	; (82a70 <UDPHS_Handler+0x18c>)
   82a4a:	691b      	ldr	r3, [r3, #16]
   82a4c:	4a08      	ldr	r2, [pc, #32]	; (82a70 <UDPHS_Handler+0x18c>)
   82a4e:	f043 0304 	orr.w	r3, r3, #4
   82a52:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   82a54:	4b13      	ldr	r3, [pc, #76]	; (82aa4 <UDPHS_Handler+0x1c0>)
   82a56:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   82a58:	e004      	b.n	82a64 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   82a5a:	bf00      	nop
   82a5c:	e002      	b.n	82a64 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   82a5e:	bf00      	nop
   82a60:	e000      	b.n	82a64 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   82a62:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   82a64:	bf00      	nop
}
   82a66:	bd80      	pop	{r7, pc}
   82a68:	00084c79 	.word	0x00084c79
   82a6c:	000866c5 	.word	0x000866c5
   82a70:	400a4000 	.word	0x400a4000
   82a74:	200003aa 	.word	0x200003aa
   82a78:	00085781 	.word	0x00085781
   82a7c:	00080ca5 	.word	0x00080ca5
   82a80:	00083d79 	.word	0x00083d79
   82a84:	00084195 	.word	0x00084195
   82a88:	00083eb9 	.word	0x00083eb9
   82a8c:	0008572d 	.word	0x0008572d
   82a90:	000836d9 	.word	0x000836d9
   82a94:	00083759 	.word	0x00083759
   82a98:	00084cc5 	.word	0x00084cc5
   82a9c:	00080c79 	.word	0x00080c79
   82aa0:	0008288d 	.word	0x0008288d
   82aa4:	00080c95 	.word	0x00080c95

00082aa8 <udd_enable>:
#endif
}


void udd_enable(void)
{
   82aa8:	b580      	push	{r7, lr}
   82aaa:	b082      	sub	sp, #8
   82aac:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   82aae:	4b19      	ldr	r3, [pc, #100]	; (82b14 <udd_enable+0x6c>)
   82ab0:	4798      	blx	r3

	udd_enable_periph_ck();
   82ab2:	201d      	movs	r0, #29
   82ab4:	4b18      	ldr	r3, [pc, #96]	; (82b18 <udd_enable+0x70>)
   82ab6:	4798      	blx	r3

	flags = cpu_irq_save();
   82ab8:	4b18      	ldr	r3, [pc, #96]	; (82b1c <udd_enable+0x74>)
   82aba:	4798      	blx	r3
   82abc:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   82abe:	4b18      	ldr	r3, [pc, #96]	; (82b20 <udd_enable+0x78>)
   82ac0:	681b      	ldr	r3, [r3, #0]
   82ac2:	4a17      	ldr	r2, [pc, #92]	; (82b20 <udd_enable+0x78>)
   82ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82ac8:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   82aca:	2105      	movs	r1, #5
   82acc:	201d      	movs	r0, #29
   82ace:	4b15      	ldr	r3, [pc, #84]	; (82b24 <udd_enable+0x7c>)
   82ad0:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   82ad2:	201d      	movs	r0, #29
   82ad4:	4b14      	ldr	r3, [pc, #80]	; (82b28 <udd_enable+0x80>)
   82ad6:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   82ad8:	4b14      	ldr	r3, [pc, #80]	; (82b2c <udd_enable+0x84>)
   82ada:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   82adc:	4b10      	ldr	r3, [pc, #64]	; (82b20 <udd_enable+0x78>)
   82ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82ae2:	4a0f      	ldr	r2, [pc, #60]	; (82b20 <udd_enable+0x78>)
   82ae4:	f023 0303 	bic.w	r3, r3, #3
   82ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   82aec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82af0:	4b0f      	ldr	r3, [pc, #60]	; (82b30 <udd_enable+0x88>)
   82af2:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   82af4:	4b0f      	ldr	r3, [pc, #60]	; (82b34 <udd_enable+0x8c>)
   82af6:	2200      	movs	r2, #0
   82af8:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   82afa:	2003      	movs	r0, #3
   82afc:	4b0e      	ldr	r3, [pc, #56]	; (82b38 <udd_enable+0x90>)
   82afe:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   82b00:	4b0e      	ldr	r3, [pc, #56]	; (82b3c <udd_enable+0x94>)
   82b02:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   82b04:	6878      	ldr	r0, [r7, #4]
   82b06:	4b0e      	ldr	r3, [pc, #56]	; (82b40 <udd_enable+0x98>)
   82b08:	4798      	blx	r3
}
   82b0a:	bf00      	nop
   82b0c:	3708      	adds	r7, #8
   82b0e:	46bd      	mov	sp, r7
   82b10:	bd80      	pop	{r7, pc}
   82b12:	bf00      	nop
   82b14:	0008485d 	.word	0x0008485d
   82b18:	00084c79 	.word	0x00084c79
   82b1c:	0008278d 	.word	0x0008278d
   82b20:	400a4000 	.word	0x400a4000
   82b24:	00082739 	.word	0x00082739
   82b28:	00082709 	.word	0x00082709
   82b2c:	00083e5d 	.word	0x00083e5d
   82b30:	00084d35 	.word	0x00084d35
   82b34:	20001320 	.word	0x20001320
   82b38:	0008281d 	.word	0x0008281d
   82b3c:	00082b45 	.word	0x00082b45
   82b40:	000827e9 	.word	0x000827e9

00082b44 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   82b44:	b580      	push	{r7, lr}
   82b46:	b082      	sub	sp, #8
   82b48:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   82b4a:	4b26      	ldr	r3, [pc, #152]	; (82be4 <udd_attach+0xa0>)
   82b4c:	4798      	blx	r3
   82b4e:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   82b50:	2001      	movs	r0, #1
   82b52:	4b25      	ldr	r3, [pc, #148]	; (82be8 <udd_attach+0xa4>)
   82b54:	4798      	blx	r3
	udd_enable_periph_ck();
   82b56:	201d      	movs	r0, #29
   82b58:	4b24      	ldr	r3, [pc, #144]	; (82bec <udd_attach+0xa8>)
   82b5a:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   82b5c:	4b24      	ldr	r3, [pc, #144]	; (82bf0 <udd_attach+0xac>)
   82b5e:	681b      	ldr	r3, [r3, #0]
   82b60:	4a23      	ldr	r2, [pc, #140]	; (82bf0 <udd_attach+0xac>)
   82b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b66:	6013      	str	r3, [r2, #0]
   82b68:	4b21      	ldr	r3, [pc, #132]	; (82bf0 <udd_attach+0xac>)
   82b6a:	681b      	ldr	r3, [r3, #0]
   82b6c:	4a20      	ldr	r2, [pc, #128]	; (82bf0 <udd_attach+0xac>)
   82b6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82b72:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   82b74:	4b1e      	ldr	r3, [pc, #120]	; (82bf0 <udd_attach+0xac>)
   82b76:	691b      	ldr	r3, [r3, #16]
   82b78:	4a1d      	ldr	r2, [pc, #116]	; (82bf0 <udd_attach+0xac>)
   82b7a:	f043 0310 	orr.w	r3, r3, #16
   82b7e:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   82b80:	4b1b      	ldr	r3, [pc, #108]	; (82bf0 <udd_attach+0xac>)
   82b82:	691b      	ldr	r3, [r3, #16]
   82b84:	4a1a      	ldr	r2, [pc, #104]	; (82bf0 <udd_attach+0xac>)
   82b86:	f043 0302 	orr.w	r3, r3, #2
   82b8a:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   82b8c:	4b18      	ldr	r3, [pc, #96]	; (82bf0 <udd_attach+0xac>)
   82b8e:	691b      	ldr	r3, [r3, #16]
   82b90:	4a17      	ldr	r2, [pc, #92]	; (82bf0 <udd_attach+0xac>)
   82b92:	f043 0320 	orr.w	r3, r3, #32
   82b96:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   82b98:	4b15      	ldr	r3, [pc, #84]	; (82bf0 <udd_attach+0xac>)
   82b9a:	691b      	ldr	r3, [r3, #16]
   82b9c:	4a14      	ldr	r2, [pc, #80]	; (82bf0 <udd_attach+0xac>)
   82b9e:	f043 0308 	orr.w	r3, r3, #8
   82ba2:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   82ba4:	4b12      	ldr	r3, [pc, #72]	; (82bf0 <udd_attach+0xac>)
   82ba6:	691b      	ldr	r3, [r3, #16]
   82ba8:	4a11      	ldr	r2, [pc, #68]	; (82bf0 <udd_attach+0xac>)
   82baa:	f043 0304 	orr.w	r3, r3, #4
   82bae:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   82bb0:	4b0f      	ldr	r3, [pc, #60]	; (82bf0 <udd_attach+0xac>)
   82bb2:	2208      	movs	r2, #8
   82bb4:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   82bb6:	4b0e      	ldr	r3, [pc, #56]	; (82bf0 <udd_attach+0xac>)
   82bb8:	2204      	movs	r2, #4
   82bba:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   82bbc:	4b0c      	ldr	r3, [pc, #48]	; (82bf0 <udd_attach+0xac>)
   82bbe:	2210      	movs	r2, #16
   82bc0:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   82bc2:	4b0b      	ldr	r3, [pc, #44]	; (82bf0 <udd_attach+0xac>)
   82bc4:	2202      	movs	r2, #2
   82bc6:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   82bc8:	4b09      	ldr	r3, [pc, #36]	; (82bf0 <udd_attach+0xac>)
   82bca:	2220      	movs	r2, #32
   82bcc:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   82bce:	201d      	movs	r0, #29
   82bd0:	4b08      	ldr	r3, [pc, #32]	; (82bf4 <udd_attach+0xb0>)
   82bd2:	4798      	blx	r3
	cpu_irq_restore(flags);
   82bd4:	6878      	ldr	r0, [r7, #4]
   82bd6:	4b08      	ldr	r3, [pc, #32]	; (82bf8 <udd_attach+0xb4>)
   82bd8:	4798      	blx	r3
}
   82bda:	bf00      	nop
   82bdc:	3708      	adds	r7, #8
   82bde:	46bd      	mov	sp, r7
   82be0:	bd80      	pop	{r7, pc}
   82be2:	bf00      	nop
   82be4:	0008278d 	.word	0x0008278d
   82be8:	0008288d 	.word	0x0008288d
   82bec:	00084c79 	.word	0x00084c79
   82bf0:	400a4000 	.word	0x400a4000
   82bf4:	00084cc5 	.word	0x00084cc5
   82bf8:	000827e9 	.word	0x000827e9

00082bfc <udd_detach>:


void udd_detach(void)
{
   82bfc:	b580      	push	{r7, lr}
   82bfe:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   82c00:	201d      	movs	r0, #29
   82c02:	4b0b      	ldr	r3, [pc, #44]	; (82c30 <udd_detach+0x34>)
   82c04:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   82c06:	4b0b      	ldr	r3, [pc, #44]	; (82c34 <udd_detach+0x38>)
   82c08:	681b      	ldr	r3, [r3, #0]
   82c0a:	4a0a      	ldr	r2, [pc, #40]	; (82c34 <udd_detach+0x38>)
   82c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82c10:	6013      	str	r3, [r2, #0]
   82c12:	4b08      	ldr	r3, [pc, #32]	; (82c34 <udd_detach+0x38>)
   82c14:	681b      	ldr	r3, [r3, #0]
   82c16:	4a07      	ldr	r2, [pc, #28]	; (82c34 <udd_detach+0x38>)
   82c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82c1c:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   82c1e:	201d      	movs	r0, #29
   82c20:	4b05      	ldr	r3, [pc, #20]	; (82c38 <udd_detach+0x3c>)
   82c22:	4798      	blx	r3
	udd_sleep_mode(false);
   82c24:	2000      	movs	r0, #0
   82c26:	4b05      	ldr	r3, [pc, #20]	; (82c3c <udd_detach+0x40>)
   82c28:	4798      	blx	r3
}
   82c2a:	bf00      	nop
   82c2c:	bd80      	pop	{r7, pc}
   82c2e:	bf00      	nop
   82c30:	00084c79 	.word	0x00084c79
   82c34:	400a4000 	.word	0x400a4000
   82c38:	00084cc5 	.word	0x00084cc5
   82c3c:	0008288d 	.word	0x0008288d

00082c40 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   82c40:	b480      	push	{r7}
   82c42:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   82c44:	4b06      	ldr	r3, [pc, #24]	; (82c60 <udd_is_high_speed+0x20>)
   82c46:	695b      	ldr	r3, [r3, #20]
   82c48:	f003 0301 	and.w	r3, r3, #1
   82c4c:	2b00      	cmp	r3, #0
   82c4e:	bf14      	ite	ne
   82c50:	2301      	movne	r3, #1
   82c52:	2300      	moveq	r3, #0
   82c54:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   82c56:	4618      	mov	r0, r3
   82c58:	46bd      	mov	sp, r7
   82c5a:	bc80      	pop	{r7}
   82c5c:	4770      	bx	lr
   82c5e:	bf00      	nop
   82c60:	400a4000 	.word	0x400a4000

00082c64 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   82c64:	b480      	push	{r7}
   82c66:	b083      	sub	sp, #12
   82c68:	af00      	add	r7, sp, #0
   82c6a:	4603      	mov	r3, r0
   82c6c:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   82c6e:	4b0d      	ldr	r3, [pc, #52]	; (82ca4 <udd_set_address+0x40>)
   82c70:	681b      	ldr	r3, [r3, #0]
   82c72:	4a0c      	ldr	r2, [pc, #48]	; (82ca4 <udd_set_address+0x40>)
   82c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82c78:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   82c7a:	4b0a      	ldr	r3, [pc, #40]	; (82ca4 <udd_set_address+0x40>)
   82c7c:	681b      	ldr	r3, [r3, #0]
   82c7e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   82c82:	79fb      	ldrb	r3, [r7, #7]
   82c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82c88:	4906      	ldr	r1, [pc, #24]	; (82ca4 <udd_set_address+0x40>)
   82c8a:	4313      	orrs	r3, r2
   82c8c:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   82c8e:	4b05      	ldr	r3, [pc, #20]	; (82ca4 <udd_set_address+0x40>)
   82c90:	681b      	ldr	r3, [r3, #0]
   82c92:	4a04      	ldr	r2, [pc, #16]	; (82ca4 <udd_set_address+0x40>)
   82c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c98:	6013      	str	r3, [r2, #0]
}
   82c9a:	bf00      	nop
   82c9c:	370c      	adds	r7, #12
   82c9e:	46bd      	mov	sp, r7
   82ca0:	bc80      	pop	{r7}
   82ca2:	4770      	bx	lr
   82ca4:	400a4000 	.word	0x400a4000

00082ca8 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   82ca8:	b480      	push	{r7}
   82caa:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   82cac:	4b04      	ldr	r3, [pc, #16]	; (82cc0 <udd_getaddress+0x18>)
   82cae:	681b      	ldr	r3, [r3, #0]
   82cb0:	b2db      	uxtb	r3, r3
   82cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82cb6:	b2db      	uxtb	r3, r3
}
   82cb8:	4618      	mov	r0, r3
   82cba:	46bd      	mov	sp, r7
   82cbc:	bc80      	pop	{r7}
   82cbe:	4770      	bx	lr
   82cc0:	400a4000 	.word	0x400a4000

00082cc4 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   82cc4:	b480      	push	{r7}
   82cc6:	af00      	add	r7, sp, #0
	return udd_frame_number();
   82cc8:	4b05      	ldr	r3, [pc, #20]	; (82ce0 <udd_get_frame_number+0x1c>)
   82cca:	685b      	ldr	r3, [r3, #4]
   82ccc:	08db      	lsrs	r3, r3, #3
   82cce:	b29b      	uxth	r3, r3
   82cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82cd4:	b29b      	uxth	r3, r3
}
   82cd6:	4618      	mov	r0, r3
   82cd8:	46bd      	mov	sp, r7
   82cda:	bc80      	pop	{r7}
   82cdc:	4770      	bx	lr
   82cde:	bf00      	nop
   82ce0:	400a4000 	.word	0x400a4000

00082ce4 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   82ce4:	b480      	push	{r7}
   82ce6:	b083      	sub	sp, #12
   82ce8:	af00      	add	r7, sp, #0
   82cea:	6078      	str	r0, [r7, #4]
   82cec:	460b      	mov	r3, r1
   82cee:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   82cf0:	4a05      	ldr	r2, [pc, #20]	; (82d08 <udd_set_setup_payload+0x24>)
   82cf2:	687b      	ldr	r3, [r7, #4]
   82cf4:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82cf6:	4a04      	ldr	r2, [pc, #16]	; (82d08 <udd_set_setup_payload+0x24>)
   82cf8:	887b      	ldrh	r3, [r7, #2]
   82cfa:	8193      	strh	r3, [r2, #12]
}
   82cfc:	bf00      	nop
   82cfe:	370c      	adds	r7, #12
   82d00:	46bd      	mov	sp, r7
   82d02:	bc80      	pop	{r7}
   82d04:	4770      	bx	lr
   82d06:	bf00      	nop
   82d08:	20001810 	.word	0x20001810

00082d0c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82d0c:	b590      	push	{r4, r7, lr}
   82d0e:	b089      	sub	sp, #36	; 0x24
   82d10:	af02      	add	r7, sp, #8
   82d12:	4603      	mov	r3, r0
   82d14:	71fb      	strb	r3, [r7, #7]
   82d16:	460b      	mov	r3, r1
   82d18:	71bb      	strb	r3, [r7, #6]
   82d1a:	4613      	mov	r3, r2
   82d1c:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   82d1e:	2300      	movs	r3, #0
   82d20:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   82d22:	2300      	movs	r3, #0
   82d24:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   82d26:	79fb      	ldrb	r3, [r7, #7]
   82d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82d2c:	2b00      	cmp	r3, #0
   82d2e:	bf14      	ite	ne
   82d30:	2301      	movne	r3, #1
   82d32:	2300      	moveq	r3, #0
   82d34:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   82d36:	79fb      	ldrb	r3, [r7, #7]
   82d38:	f003 030f 	and.w	r3, r3, #15
   82d3c:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   82d3e:	79fb      	ldrb	r3, [r7, #7]
   82d40:	2b02      	cmp	r3, #2
   82d42:	d901      	bls.n	82d48 <udd_ep_alloc+0x3c>
		return false;
   82d44:	2300      	movs	r3, #0
   82d46:	e1b4      	b.n	830b2 <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82d48:	4ab3      	ldr	r2, [pc, #716]	; (83018 <udd_ep_alloc+0x30c>)
   82d4a:	79fb      	ldrb	r3, [r7, #7]
   82d4c:	015b      	lsls	r3, r3, #5
   82d4e:	4413      	add	r3, r2
   82d50:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82d54:	681b      	ldr	r3, [r3, #0]
   82d56:	f003 0301 	and.w	r3, r3, #1
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	d001      	beq.n	82d62 <udd_ep_alloc+0x56>
		return false;
   82d5e:	2300      	movs	r3, #0
   82d60:	e1a7      	b.n	830b2 <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82d62:	79bb      	ldrb	r3, [r7, #6]
   82d64:	f003 0303 	and.w	r3, r3, #3
   82d68:	2b03      	cmp	r3, #3
   82d6a:	d01a      	beq.n	82da2 <udd_ep_alloc+0x96>
   82d6c:	2b03      	cmp	r3, #3
   82d6e:	dc1e      	bgt.n	82dae <udd_ep_alloc+0xa2>
   82d70:	2b01      	cmp	r3, #1
   82d72:	d002      	beq.n	82d7a <udd_ep_alloc+0x6e>
   82d74:	2b02      	cmp	r3, #2
   82d76:	d017      	beq.n	82da8 <udd_ep_alloc+0x9c>
   82d78:	e019      	b.n	82dae <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   82d7a:	79fb      	ldrb	r3, [r7, #7]
   82d7c:	2b00      	cmp	r3, #0
   82d7e:	d007      	beq.n	82d90 <udd_ep_alloc+0x84>
   82d80:	79fb      	ldrb	r3, [r7, #7]
   82d82:	2b03      	cmp	r3, #3
   82d84:	d004      	beq.n	82d90 <udd_ep_alloc+0x84>
   82d86:	79fb      	ldrb	r3, [r7, #7]
   82d88:	2b04      	cmp	r3, #4
   82d8a:	d001      	beq.n	82d90 <udd_ep_alloc+0x84>
   82d8c:	2301      	movs	r3, #1
   82d8e:	e000      	b.n	82d92 <udd_ep_alloc+0x86>
   82d90:	2300      	movs	r3, #0
   82d92:	747b      	strb	r3, [r7, #17]
   82d94:	7c7b      	ldrb	r3, [r7, #17]
   82d96:	f003 0301 	and.w	r3, r3, #1
   82d9a:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   82d9c:	2301      	movs	r3, #1
   82d9e:	757b      	strb	r3, [r7, #21]
		break;
   82da0:	e007      	b.n	82db2 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   82da2:	2301      	movs	r3, #1
   82da4:	757b      	strb	r3, [r7, #21]
		break;
   82da6:	e004      	b.n	82db2 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   82da8:	2302      	movs	r3, #2
   82daa:	757b      	strb	r3, [r7, #21]
		break;
   82dac:	e001      	b.n	82db2 <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   82dae:	2300      	movs	r3, #0
   82db0:	e17f      	b.n	830b2 <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   82db2:	7d7b      	ldrb	r3, [r7, #21]
   82db4:	2b03      	cmp	r3, #3
   82db6:	d00c      	beq.n	82dd2 <udd_ep_alloc+0xc6>
   82db8:	2b03      	cmp	r3, #3
   82dba:	dc0d      	bgt.n	82dd8 <udd_ep_alloc+0xcc>
   82dbc:	2b01      	cmp	r3, #1
   82dbe:	d002      	beq.n	82dc6 <udd_ep_alloc+0xba>
   82dc0:	2b02      	cmp	r3, #2
   82dc2:	d003      	beq.n	82dcc <udd_ep_alloc+0xc0>
   82dc4:	e008      	b.n	82dd8 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82dc6:	2301      	movs	r3, #1
   82dc8:	753b      	strb	r3, [r7, #20]
		break;
   82dca:	e007      	b.n	82ddc <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82dcc:	2302      	movs	r3, #2
   82dce:	753b      	strb	r3, [r7, #20]
		break;
   82dd0:	e004      	b.n	82ddc <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82dd2:	2303      	movs	r3, #3
   82dd4:	753b      	strb	r3, [r7, #20]
		break;
   82dd6:	e001      	b.n	82ddc <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   82dd8:	2300      	movs	r3, #0
   82dda:	e16a      	b.n	830b2 <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   82ddc:	7c7b      	ldrb	r3, [r7, #17]
   82dde:	2b00      	cmp	r3, #0
   82de0:	d017      	beq.n	82e12 <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   82de2:	88bb      	ldrh	r3, [r7, #4]
   82de4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   82dec:	d003      	beq.n	82df6 <udd_ep_alloc+0xea>
   82dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   82df2:	d003      	beq.n	82dfc <udd_ep_alloc+0xf0>
   82df4:	e005      	b.n	82e02 <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   82df6:	2302      	movs	r3, #2
   82df8:	74fb      	strb	r3, [r7, #19]
			break;
   82dfa:	e005      	b.n	82e08 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   82dfc:	2303      	movs	r3, #3
   82dfe:	74fb      	strb	r3, [r7, #19]
			break;
   82e00:	e002      	b.n	82e08 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   82e02:	2301      	movs	r3, #1
   82e04:	74fb      	strb	r3, [r7, #19]
			break;
   82e06:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   82e08:	88bb      	ldrh	r3, [r7, #4]
   82e0a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   82e0e:	80bb      	strh	r3, [r7, #4]
   82e10:	e006      	b.n	82e20 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   82e12:	88bb      	ldrh	r3, [r7, #4]
   82e14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82e18:	2b00      	cmp	r3, #0
   82e1a:	d001      	beq.n	82e20 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   82e1c:	2300      	movs	r3, #0
   82e1e:	e148      	b.n	830b2 <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82e20:	4a7d      	ldr	r2, [pc, #500]	; (83018 <udd_ep_alloc+0x30c>)
   82e22:	79fb      	ldrb	r3, [r7, #7]
   82e24:	3308      	adds	r3, #8
   82e26:	015b      	lsls	r3, r3, #5
   82e28:	4413      	add	r3, r2
   82e2a:	681b      	ldr	r3, [r3, #0]
   82e2c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82e30:	f023 0303 	bic.w	r3, r3, #3
   82e34:	79ba      	ldrb	r2, [r7, #6]
   82e36:	0112      	lsls	r2, r2, #4
   82e38:	f002 0230 	and.w	r2, r2, #48	; 0x30
   82e3c:	7c39      	ldrb	r1, [r7, #16]
   82e3e:	2900      	cmp	r1, #0
   82e40:	d001      	beq.n	82e46 <udd_ep_alloc+0x13a>
   82e42:	2108      	movs	r1, #8
   82e44:	e000      	b.n	82e48 <udd_ep_alloc+0x13c>
   82e46:	2100      	movs	r1, #0
   82e48:	4311      	orrs	r1, r2
   82e4a:	88ba      	ldrh	r2, [r7, #4]
   82e4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   82e50:	d207      	bcs.n	82e62 <udd_ep_alloc+0x156>
   82e52:	88ba      	ldrh	r2, [r7, #4]
   82e54:	2a08      	cmp	r2, #8
   82e56:	bf38      	it	cc
   82e58:	2208      	movcc	r2, #8
   82e5a:	b292      	uxth	r2, r2
   82e5c:	0052      	lsls	r2, r2, #1
   82e5e:	3a01      	subs	r2, #1
   82e60:	e001      	b.n	82e66 <udd_ep_alloc+0x15a>
   82e62:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82e66:	fab2 f282 	clz	r2, r2
   82e6a:	f1c2 021c 	rsb	r2, r2, #28
   82e6e:	4311      	orrs	r1, r2
   82e70:	7d3a      	ldrb	r2, [r7, #20]
   82e72:	0192      	lsls	r2, r2, #6
   82e74:	b2d2      	uxtb	r2, r2
   82e76:	4311      	orrs	r1, r2
   82e78:	7c7a      	ldrb	r2, [r7, #17]
   82e7a:	2a00      	cmp	r2, #0
   82e7c:	d004      	beq.n	82e88 <udd_ep_alloc+0x17c>
   82e7e:	7cfa      	ldrb	r2, [r7, #19]
   82e80:	0212      	lsls	r2, r2, #8
   82e82:	f402 7240 	and.w	r2, r2, #768	; 0x300
   82e86:	e000      	b.n	82e8a <udd_ep_alloc+0x17e>
   82e88:	2200      	movs	r2, #0
   82e8a:	430a      	orrs	r2, r1
   82e8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
   82e90:	4861      	ldr	r0, [pc, #388]	; (83018 <udd_ep_alloc+0x30c>)
   82e92:	79f9      	ldrb	r1, [r7, #7]
   82e94:	431a      	orrs	r2, r3
   82e96:	f101 0308 	add.w	r3, r1, #8
   82e9a:	015b      	lsls	r3, r3, #5
   82e9c:	4403      	add	r3, r0
   82e9e:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   82ea0:	4a5d      	ldr	r2, [pc, #372]	; (83018 <udd_ep_alloc+0x30c>)
   82ea2:	79fb      	ldrb	r3, [r7, #7]
   82ea4:	3308      	adds	r3, #8
   82ea6:	015b      	lsls	r3, r3, #5
   82ea8:	4413      	add	r3, r2
   82eaa:	681b      	ldr	r3, [r3, #0]
   82eac:	2b00      	cmp	r3, #0
   82eae:	db01      	blt.n	82eb4 <udd_ep_alloc+0x1a8>
		return false;
   82eb0:	2300      	movs	r3, #0
   82eb2:	e0fe      	b.n	830b2 <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   82eb4:	4a58      	ldr	r2, [pc, #352]	; (83018 <udd_ep_alloc+0x30c>)
   82eb6:	79fb      	ldrb	r3, [r7, #7]
   82eb8:	3308      	adds	r3, #8
   82eba:	015b      	lsls	r3, r3, #5
   82ebc:	4413      	add	r3, r2
   82ebe:	3304      	adds	r3, #4
   82ec0:	2201      	movs	r2, #1
   82ec2:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   82ec4:	2300      	movs	r3, #0
   82ec6:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82ec8:	2302      	movs	r3, #2
   82eca:	74bb      	strb	r3, [r7, #18]
   82ecc:	e039      	b.n	82f42 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   82ece:	4a52      	ldr	r2, [pc, #328]	; (83018 <udd_ep_alloc+0x30c>)
   82ed0:	7cbb      	ldrb	r3, [r7, #18]
   82ed2:	015b      	lsls	r3, r3, #5
   82ed4:	4413      	add	r3, r2
   82ed6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82eda:	681b      	ldr	r3, [r3, #0]
   82edc:	f003 0301 	and.w	r3, r3, #1
   82ee0:	2b00      	cmp	r3, #0
   82ee2:	d02b      	beq.n	82f3c <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   82ee4:	4a4c      	ldr	r2, [pc, #304]	; (83018 <udd_ep_alloc+0x30c>)
   82ee6:	7cbb      	ldrb	r3, [r7, #18]
   82ee8:	3308      	adds	r3, #8
   82eea:	015b      	lsls	r3, r3, #5
   82eec:	4413      	add	r3, r2
   82eee:	681b      	ldr	r3, [r3, #0]
   82ef0:	099b      	lsrs	r3, r3, #6
   82ef2:	b2db      	uxtb	r3, r3
   82ef4:	f003 0303 	and.w	r3, r3, #3
   82ef8:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   82efa:	7d3a      	ldrb	r2, [r7, #20]
   82efc:	7cbb      	ldrb	r3, [r7, #18]
   82efe:	005b      	lsls	r3, r3, #1
   82f00:	fa02 f303 	lsl.w	r3, r2, r3
   82f04:	b21a      	sxth	r2, r3
   82f06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   82f0a:	4313      	orrs	r3, r2
   82f0c:	b21b      	sxth	r3, r3
   82f0e:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   82f10:	4a41      	ldr	r2, [pc, #260]	; (83018 <udd_ep_alloc+0x30c>)
   82f12:	7cbb      	ldrb	r3, [r7, #18]
   82f14:	015b      	lsls	r3, r3, #5
   82f16:	4413      	add	r3, r2
   82f18:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82f1c:	2201      	movs	r2, #1
   82f1e:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   82f20:	4a3d      	ldr	r2, [pc, #244]	; (83018 <udd_ep_alloc+0x30c>)
   82f22:	7cbb      	ldrb	r3, [r7, #18]
   82f24:	3308      	adds	r3, #8
   82f26:	015b      	lsls	r3, r3, #5
   82f28:	4413      	add	r3, r2
   82f2a:	681a      	ldr	r2, [r3, #0]
   82f2c:	493a      	ldr	r1, [pc, #232]	; (83018 <udd_ep_alloc+0x30c>)
   82f2e:	7cbb      	ldrb	r3, [r7, #18]
   82f30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82f34:	3308      	adds	r3, #8
   82f36:	015b      	lsls	r3, r3, #5
   82f38:	440b      	add	r3, r1
   82f3a:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82f3c:	7cbb      	ldrb	r3, [r7, #18]
   82f3e:	3b01      	subs	r3, #1
   82f40:	74bb      	strb	r3, [r7, #18]
   82f42:	7cba      	ldrb	r2, [r7, #18]
   82f44:	79fb      	ldrb	r3, [r7, #7]
   82f46:	429a      	cmp	r2, r3
   82f48:	d2c1      	bcs.n	82ece <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82f4a:	79fb      	ldrb	r3, [r7, #7]
   82f4c:	74bb      	strb	r3, [r7, #18]
   82f4e:	e0ab      	b.n	830a8 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82f50:	7cbb      	ldrb	r3, [r7, #18]
   82f52:	1e5a      	subs	r2, r3, #1
   82f54:	4613      	mov	r3, r2
   82f56:	005b      	lsls	r3, r3, #1
   82f58:	4413      	add	r3, r2
   82f5a:	00db      	lsls	r3, r3, #3
   82f5c:	4a2f      	ldr	r2, [pc, #188]	; (8301c <udd_ep_alloc+0x310>)
   82f5e:	4413      	add	r3, r2
   82f60:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   82f62:	68fb      	ldr	r3, [r7, #12]
   82f64:	7d1b      	ldrb	r3, [r3, #20]
   82f66:	f3c3 0300 	ubfx	r3, r3, #0, #1
   82f6a:	b2db      	uxtb	r3, r3
   82f6c:	2b00      	cmp	r3, #0
   82f6e:	bf14      	ite	ne
   82f70:	2301      	movne	r3, #1
   82f72:	2300      	moveq	r3, #0
   82f74:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82f76:	8afa      	ldrh	r2, [r7, #22]
   82f78:	7cbb      	ldrb	r3, [r7, #18]
   82f7a:	005b      	lsls	r3, r3, #1
   82f7c:	fa42 f303 	asr.w	r3, r2, r3
   82f80:	b2db      	uxtb	r3, r3
   82f82:	f003 0303 	and.w	r3, r3, #3
   82f86:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   82f88:	7d3b      	ldrb	r3, [r7, #20]
   82f8a:	2b00      	cmp	r3, #0
   82f8c:	f000 8088 	beq.w	830a0 <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   82f90:	68fa      	ldr	r2, [r7, #12]
   82f92:	7d13      	ldrb	r3, [r2, #20]
   82f94:	f36f 0300 	bfc	r3, #0, #1
   82f98:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   82f9a:	4a1f      	ldr	r2, [pc, #124]	; (83018 <udd_ep_alloc+0x30c>)
   82f9c:	7cbb      	ldrb	r3, [r7, #18]
   82f9e:	3308      	adds	r3, #8
   82fa0:	015b      	lsls	r3, r3, #5
   82fa2:	4413      	add	r3, r2
   82fa4:	681b      	ldr	r3, [r3, #0]
   82fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   82faa:	7d3b      	ldrb	r3, [r7, #20]
   82fac:	019b      	lsls	r3, r3, #6
   82fae:	b2da      	uxtb	r2, r3
   82fb0:	4819      	ldr	r0, [pc, #100]	; (83018 <udd_ep_alloc+0x30c>)
   82fb2:	7cbb      	ldrb	r3, [r7, #18]
   82fb4:	430a      	orrs	r2, r1
   82fb6:	3308      	adds	r3, #8
   82fb8:	015b      	lsls	r3, r3, #5
   82fba:	4403      	add	r3, r0
   82fbc:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   82fbe:	4a16      	ldr	r2, [pc, #88]	; (83018 <udd_ep_alloc+0x30c>)
   82fc0:	7cbb      	ldrb	r3, [r7, #18]
   82fc2:	3308      	adds	r3, #8
   82fc4:	015b      	lsls	r3, r3, #5
   82fc6:	4413      	add	r3, r2
   82fc8:	3304      	adds	r3, #4
   82fca:	2201      	movs	r2, #1
   82fcc:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   82fce:	4a12      	ldr	r2, [pc, #72]	; (83018 <udd_ep_alloc+0x30c>)
   82fd0:	7cbb      	ldrb	r3, [r7, #18]
   82fd2:	3308      	adds	r3, #8
   82fd4:	015b      	lsls	r3, r3, #5
   82fd6:	4413      	add	r3, r2
   82fd8:	681b      	ldr	r3, [r3, #0]
   82fda:	2b00      	cmp	r3, #0
   82fdc:	db20      	blt.n	83020 <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   82fde:	68fb      	ldr	r3, [r7, #12]
   82fe0:	681b      	ldr	r3, [r3, #0]
   82fe2:	2b00      	cmp	r3, #0
   82fe4:	d101      	bne.n	82fea <udd_ep_alloc+0x2de>
				return false;
   82fe6:	2300      	movs	r3, #0
   82fe8:	e063      	b.n	830b2 <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   82fea:	4a0b      	ldr	r2, [pc, #44]	; (83018 <udd_ep_alloc+0x30c>)
   82fec:	7cbb      	ldrb	r3, [r7, #18]
   82fee:	3308      	adds	r3, #8
   82ff0:	015b      	lsls	r3, r3, #5
   82ff2:	4413      	add	r3, r2
   82ff4:	681b      	ldr	r3, [r3, #0]
   82ff6:	f003 0308 	and.w	r3, r3, #8
   82ffa:	2b00      	cmp	r3, #0
   82ffc:	d003      	beq.n	83006 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   82ffe:	7cbb      	ldrb	r3, [r7, #18]
   83000:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83004:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   83006:	68fb      	ldr	r3, [r7, #12]
   83008:	681b      	ldr	r3, [r3, #0]
   8300a:	68fa      	ldr	r2, [r7, #12]
   8300c:	68d1      	ldr	r1, [r2, #12]
   8300e:	7cba      	ldrb	r2, [r7, #18]
   83010:	2001      	movs	r0, #1
   83012:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   83014:	2300      	movs	r3, #0
   83016:	e04c      	b.n	830b2 <udd_ep_alloc+0x3a6>
   83018:	400a4000 	.word	0x400a4000
   8301c:	20001328 	.word	0x20001328
		}
		udd_enable_endpoint_bank_autoswitch(i);
   83020:	4a26      	ldr	r2, [pc, #152]	; (830bc <udd_ep_alloc+0x3b0>)
   83022:	7cbb      	ldrb	r3, [r7, #18]
   83024:	3308      	adds	r3, #8
   83026:	015b      	lsls	r3, r3, #5
   83028:	4413      	add	r3, r2
   8302a:	3304      	adds	r3, #4
   8302c:	681a      	ldr	r2, [r3, #0]
   8302e:	4923      	ldr	r1, [pc, #140]	; (830bc <udd_ep_alloc+0x3b0>)
   83030:	7cbb      	ldrb	r3, [r7, #18]
   83032:	f042 0202 	orr.w	r2, r2, #2
   83036:	3308      	adds	r3, #8
   83038:	015b      	lsls	r3, r3, #5
   8303a:	440b      	add	r3, r1
   8303c:	3304      	adds	r3, #4
   8303e:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   83040:	7afb      	ldrb	r3, [r7, #11]
   83042:	2b00      	cmp	r3, #0
   83044:	d02d      	beq.n	830a2 <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   83046:	68fb      	ldr	r3, [r7, #12]
   83048:	68da      	ldr	r2, [r3, #12]
   8304a:	68fb      	ldr	r3, [r7, #12]
   8304c:	691b      	ldr	r3, [r3, #16]
   8304e:	1ad2      	subs	r2, r2, r3
   83050:	68fb      	ldr	r3, [r7, #12]
   83052:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   83054:	68fb      	ldr	r3, [r7, #12]
   83056:	7d1b      	ldrb	r3, [r3, #20]
   83058:	f3c3 0340 	ubfx	r3, r3, #1, #1
   8305c:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   8305e:	2b00      	cmp	r3, #0
   83060:	bf14      	ite	ne
   83062:	2301      	movne	r3, #1
   83064:	2300      	moveq	r3, #0
   83066:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   83068:	68fb      	ldr	r3, [r7, #12]
   8306a:	685a      	ldr	r2, [r3, #4]
   8306c:	68fb      	ldr	r3, [r7, #12]
   8306e:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   83070:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   83072:	68fb      	ldr	r3, [r7, #12]
   83074:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   83076:	68fb      	ldr	r3, [r7, #12]
   83078:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   8307a:	1ad2      	subs	r2, r2, r3
   8307c:	68fb      	ldr	r3, [r7, #12]
   8307e:	681b      	ldr	r3, [r3, #0]
   83080:	7cb8      	ldrb	r0, [r7, #18]
   83082:	9300      	str	r3, [sp, #0]
   83084:	4613      	mov	r3, r2
   83086:	4622      	mov	r2, r4
   83088:	4c0d      	ldr	r4, [pc, #52]	; (830c0 <udd_ep_alloc+0x3b4>)
   8308a:	47a0      	blx	r4
   8308c:	4603      	mov	r3, r0
   8308e:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   83090:	7afb      	ldrb	r3, [r7, #11]
   83092:	f083 0301 	eor.w	r3, r3, #1
   83096:	b2db      	uxtb	r3, r3
   83098:	2b00      	cmp	r3, #0
   8309a:	d002      	beq.n	830a2 <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   8309c:	2300      	movs	r3, #0
   8309e:	e008      	b.n	830b2 <udd_ep_alloc+0x3a6>
			continue;
   830a0:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   830a2:	7cbb      	ldrb	r3, [r7, #18]
   830a4:	3301      	adds	r3, #1
   830a6:	74bb      	strb	r3, [r7, #18]
   830a8:	7cbb      	ldrb	r3, [r7, #18]
   830aa:	2b02      	cmp	r3, #2
   830ac:	f67f af50 	bls.w	82f50 <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   830b0:	2301      	movs	r3, #1
}
   830b2:	4618      	mov	r0, r3
   830b4:	371c      	adds	r7, #28
   830b6:	46bd      	mov	sp, r7
   830b8:	bd90      	pop	{r4, r7, pc}
   830ba:	bf00      	nop
   830bc:	400a4000 	.word	0x400a4000
   830c0:	000833f1 	.word	0x000833f1

000830c4 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   830c4:	b580      	push	{r7, lr}
   830c6:	b084      	sub	sp, #16
   830c8:	af00      	add	r7, sp, #0
   830ca:	4603      	mov	r3, r0
   830cc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   830ce:	79fb      	ldrb	r3, [r7, #7]
   830d0:	f003 030f 	and.w	r3, r3, #15
   830d4:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   830d6:	7bfb      	ldrb	r3, [r7, #15]
   830d8:	2b02      	cmp	r3, #2
   830da:	d828      	bhi.n	8312e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   830dc:	4a16      	ldr	r2, [pc, #88]	; (83138 <udd_ep_free+0x74>)
   830de:	7bfb      	ldrb	r3, [r7, #15]
   830e0:	015b      	lsls	r3, r3, #5
   830e2:	4413      	add	r3, r2
   830e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   830e8:	2201      	movs	r2, #1
   830ea:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   830ec:	4a12      	ldr	r2, [pc, #72]	; (83138 <udd_ep_free+0x74>)
   830ee:	7bfb      	ldrb	r3, [r7, #15]
   830f0:	3308      	adds	r3, #8
   830f2:	015b      	lsls	r3, r3, #5
   830f4:	4413      	add	r3, r2
   830f6:	681a      	ldr	r2, [r3, #0]
   830f8:	490f      	ldr	r1, [pc, #60]	; (83138 <udd_ep_free+0x74>)
   830fa:	7bfb      	ldrb	r3, [r7, #15]
   830fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   83100:	3308      	adds	r3, #8
   83102:	015b      	lsls	r3, r3, #5
   83104:	440b      	add	r3, r1
   83106:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   83108:	79fb      	ldrb	r3, [r7, #7]
   8310a:	4618      	mov	r0, r3
   8310c:	4b0b      	ldr	r3, [pc, #44]	; (8313c <udd_ep_free+0x78>)
   8310e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83110:	7bfb      	ldrb	r3, [r7, #15]
   83112:	1e5a      	subs	r2, r3, #1
   83114:	490a      	ldr	r1, [pc, #40]	; (83140 <udd_ep_free+0x7c>)
   83116:	4613      	mov	r3, r2
   83118:	005b      	lsls	r3, r3, #1
   8311a:	4413      	add	r3, r2
   8311c:	00db      	lsls	r3, r3, #3
   8311e:	440b      	add	r3, r1
   83120:	f103 0210 	add.w	r2, r3, #16
   83124:	7913      	ldrb	r3, [r2, #4]
   83126:	f36f 0382 	bfc	r3, #2, #1
   8312a:	7113      	strb	r3, [r2, #4]
   8312c:	e000      	b.n	83130 <udd_ep_free+0x6c>
		return;
   8312e:	bf00      	nop
}
   83130:	3710      	adds	r7, #16
   83132:	46bd      	mov	sp, r7
   83134:	bd80      	pop	{r7, pc}
   83136:	bf00      	nop
   83138:	400a4000 	.word	0x400a4000
   8313c:	00083f01 	.word	0x00083f01
   83140:	20001328 	.word	0x20001328

00083144 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   83144:	b480      	push	{r7}
   83146:	b085      	sub	sp, #20
   83148:	af00      	add	r7, sp, #0
   8314a:	4603      	mov	r3, r0
   8314c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8314e:	79fb      	ldrb	r3, [r7, #7]
   83150:	f003 030f 	and.w	r3, r3, #15
   83154:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   83156:	7bfb      	ldrb	r3, [r7, #15]
   83158:	1e5a      	subs	r2, r3, #1
   8315a:	4613      	mov	r3, r2
   8315c:	005b      	lsls	r3, r3, #1
   8315e:	4413      	add	r3, r2
   83160:	00db      	lsls	r3, r3, #3
   83162:	4a10      	ldr	r2, [pc, #64]	; (831a4 <udd_ep_is_halted+0x60>)
   83164:	4413      	add	r3, r2
   83166:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   83168:	4a0f      	ldr	r2, [pc, #60]	; (831a8 <udd_ep_is_halted+0x64>)
   8316a:	7bfb      	ldrb	r3, [r7, #15]
   8316c:	015b      	lsls	r3, r3, #5
   8316e:	4413      	add	r3, r2
   83170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83174:	681b      	ldr	r3, [r3, #0]
   83176:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   8317a:	2b00      	cmp	r3, #0
   8317c:	d106      	bne.n	8318c <udd_ep_is_halted+0x48>
   8317e:	68bb      	ldr	r3, [r7, #8]
   83180:	7d1b      	ldrb	r3, [r3, #20]
   83182:	f003 0304 	and.w	r3, r3, #4
   83186:	b2db      	uxtb	r3, r3
   83188:	2b00      	cmp	r3, #0
   8318a:	d001      	beq.n	83190 <udd_ep_is_halted+0x4c>
   8318c:	2301      	movs	r3, #1
   8318e:	e000      	b.n	83192 <udd_ep_is_halted+0x4e>
   83190:	2300      	movs	r3, #0
   83192:	f003 0301 	and.w	r3, r3, #1
   83196:	b2db      	uxtb	r3, r3
}
   83198:	4618      	mov	r0, r3
   8319a:	3714      	adds	r7, #20
   8319c:	46bd      	mov	sp, r7
   8319e:	bc80      	pop	{r7}
   831a0:	4770      	bx	lr
   831a2:	bf00      	nop
   831a4:	20001328 	.word	0x20001328
   831a8:	400a4000 	.word	0x400a4000

000831ac <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   831ac:	b480      	push	{r7}
   831ae:	b085      	sub	sp, #20
   831b0:	af00      	add	r7, sp, #0
   831b2:	4603      	mov	r3, r0
   831b4:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   831b6:	79fb      	ldrb	r3, [r7, #7]
   831b8:	f003 030f 	and.w	r3, r3, #15
   831bc:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   831be:	7bfb      	ldrb	r3, [r7, #15]
   831c0:	2b02      	cmp	r3, #2
   831c2:	d901      	bls.n	831c8 <udd_ep_set_halt+0x1c>
		return false;
   831c4:	2300      	movs	r3, #0
   831c6:	e071      	b.n	832ac <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   831c8:	7bfb      	ldrb	r3, [r7, #15]
   831ca:	1e5a      	subs	r2, r3, #1
   831cc:	4613      	mov	r3, r2
   831ce:	005b      	lsls	r3, r3, #1
   831d0:	4413      	add	r3, r2
   831d2:	00db      	lsls	r3, r3, #3
   831d4:	4a38      	ldr	r2, [pc, #224]	; (832b8 <udd_ep_set_halt+0x10c>)
   831d6:	4413      	add	r3, r2
   831d8:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   831da:	4a38      	ldr	r2, [pc, #224]	; (832bc <udd_ep_set_halt+0x110>)
   831dc:	7bfb      	ldrb	r3, [r7, #15]
   831de:	015b      	lsls	r3, r3, #5
   831e0:	4413      	add	r3, r2
   831e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   831e6:	681b      	ldr	r3, [r3, #0]
   831e8:	f003 0320 	and.w	r3, r3, #32
   831ec:	2b00      	cmp	r3, #0
   831ee:	d106      	bne.n	831fe <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   831f0:	68bb      	ldr	r3, [r7, #8]
   831f2:	7d1b      	ldrb	r3, [r3, #20]
   831f4:	f003 0304 	and.w	r3, r3, #4
   831f8:	b2db      	uxtb	r3, r3
   831fa:	2b00      	cmp	r3, #0
   831fc:	d001      	beq.n	83202 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   831fe:	2301      	movs	r3, #1
   83200:	e054      	b.n	832ac <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   83202:	68bb      	ldr	r3, [r7, #8]
   83204:	7d1b      	ldrb	r3, [r3, #20]
   83206:	f003 0301 	and.w	r3, r3, #1
   8320a:	b2db      	uxtb	r3, r3
   8320c:	2b00      	cmp	r3, #0
   8320e:	d001      	beq.n	83214 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   83210:	2300      	movs	r3, #0
   83212:	e04b      	b.n	832ac <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83214:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83218:	2b00      	cmp	r3, #0
   8321a:	da25      	bge.n	83268 <udd_ep_set_halt+0xbc>
   8321c:	4a27      	ldr	r2, [pc, #156]	; (832bc <udd_ep_set_halt+0x110>)
   8321e:	7bfb      	ldrb	r3, [r7, #15]
   83220:	015b      	lsls	r3, r3, #5
   83222:	4413      	add	r3, r2
   83224:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83228:	681b      	ldr	r3, [r3, #0]
   8322a:	0c9b      	lsrs	r3, r3, #18
   8322c:	f003 0303 	and.w	r3, r3, #3
   83230:	2b00      	cmp	r3, #0
   83232:	d019      	beq.n	83268 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   83234:	68ba      	ldr	r2, [r7, #8]
   83236:	7d13      	ldrb	r3, [r2, #20]
   83238:	f043 0304 	orr.w	r3, r3, #4
   8323c:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   8323e:	4a1f      	ldr	r2, [pc, #124]	; (832bc <udd_ep_set_halt+0x110>)
   83240:	7bfb      	ldrb	r3, [r7, #15]
   83242:	3308      	adds	r3, #8
   83244:	015b      	lsls	r3, r3, #5
   83246:	4413      	add	r3, r2
   83248:	3304      	adds	r3, #4
   8324a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8324e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   83250:	4b1a      	ldr	r3, [pc, #104]	; (832bc <udd_ep_set_halt+0x110>)
   83252:	691a      	ldr	r2, [r3, #16]
   83254:	7bfb      	ldrb	r3, [r7, #15]
   83256:	f44f 7180 	mov.w	r1, #256	; 0x100
   8325a:	fa01 f303 	lsl.w	r3, r1, r3
   8325e:	4917      	ldr	r1, [pc, #92]	; (832bc <udd_ep_set_halt+0x110>)
   83260:	4313      	orrs	r3, r2
   83262:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   83264:	2301      	movs	r3, #1
   83266:	e021      	b.n	832ac <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83268:	4a14      	ldr	r2, [pc, #80]	; (832bc <udd_ep_set_halt+0x110>)
   8326a:	7bfb      	ldrb	r3, [r7, #15]
   8326c:	015b      	lsls	r3, r3, #5
   8326e:	4413      	add	r3, r2
   83270:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83274:	681a      	ldr	r2, [r3, #0]
   83276:	4911      	ldr	r1, [pc, #68]	; (832bc <udd_ep_set_halt+0x110>)
   83278:	7bfb      	ldrb	r3, [r7, #15]
   8327a:	f022 0202 	bic.w	r2, r2, #2
   8327e:	015b      	lsls	r3, r3, #5
   83280:	440b      	add	r3, r1
   83282:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83286:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   83288:	4a0c      	ldr	r2, [pc, #48]	; (832bc <udd_ep_set_halt+0x110>)
   8328a:	7bfb      	ldrb	r3, [r7, #15]
   8328c:	015b      	lsls	r3, r3, #5
   8328e:	4413      	add	r3, r2
   83290:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83298:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   8329a:	4a08      	ldr	r2, [pc, #32]	; (832bc <udd_ep_set_halt+0x110>)
   8329c:	7bfb      	ldrb	r3, [r7, #15]
   8329e:	015b      	lsls	r3, r3, #5
   832a0:	4413      	add	r3, r2
   832a2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   832a6:	2220      	movs	r2, #32
   832a8:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   832aa:	2301      	movs	r3, #1
}
   832ac:	4618      	mov	r0, r3
   832ae:	3714      	adds	r7, #20
   832b0:	46bd      	mov	sp, r7
   832b2:	bc80      	pop	{r7}
   832b4:	4770      	bx	lr
   832b6:	bf00      	nop
   832b8:	20001328 	.word	0x20001328
   832bc:	400a4000 	.word	0x400a4000

000832c0 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   832c0:	b580      	push	{r7, lr}
   832c2:	b084      	sub	sp, #16
   832c4:	af00      	add	r7, sp, #0
   832c6:	4603      	mov	r3, r0
   832c8:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   832ca:	2300      	movs	r3, #0
   832cc:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   832ce:	79fb      	ldrb	r3, [r7, #7]
   832d0:	f003 030f 	and.w	r3, r3, #15
   832d4:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   832d6:	79fb      	ldrb	r3, [r7, #7]
   832d8:	2b02      	cmp	r3, #2
   832da:	d901      	bls.n	832e0 <udd_ep_clear_halt+0x20>
		return false;
   832dc:	2300      	movs	r3, #0
   832de:	e07e      	b.n	833de <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   832e0:	79fb      	ldrb	r3, [r7, #7]
   832e2:	1e5a      	subs	r2, r3, #1
   832e4:	4613      	mov	r3, r2
   832e6:	005b      	lsls	r3, r3, #1
   832e8:	4413      	add	r3, r2
   832ea:	00db      	lsls	r3, r3, #3
   832ec:	4a3e      	ldr	r2, [pc, #248]	; (833e8 <udd_ep_clear_halt+0x128>)
   832ee:	4413      	add	r3, r2
   832f0:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   832f2:	68bb      	ldr	r3, [r7, #8]
   832f4:	7d1b      	ldrb	r3, [r3, #20]
   832f6:	f003 0304 	and.w	r3, r3, #4
   832fa:	b2db      	uxtb	r3, r3
   832fc:	2b00      	cmp	r3, #0
   832fe:	d01a      	beq.n	83336 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   83300:	68ba      	ldr	r2, [r7, #8]
   83302:	7d13      	ldrb	r3, [r2, #20]
   83304:	f36f 0382 	bfc	r3, #2, #1
   83308:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8330a:	4a38      	ldr	r2, [pc, #224]	; (833ec <udd_ep_clear_halt+0x12c>)
   8330c:	79fb      	ldrb	r3, [r7, #7]
   8330e:	015b      	lsls	r3, r3, #5
   83310:	4413      	add	r3, r2
   83312:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83316:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8331a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   8331c:	4b33      	ldr	r3, [pc, #204]	; (833ec <udd_ep_clear_halt+0x12c>)
   8331e:	691a      	ldr	r2, [r3, #16]
   83320:	79fb      	ldrb	r3, [r7, #7]
   83322:	f44f 7180 	mov.w	r1, #256	; 0x100
   83326:	fa01 f303 	lsl.w	r3, r1, r3
   8332a:	43db      	mvns	r3, r3
   8332c:	492f      	ldr	r1, [pc, #188]	; (833ec <udd_ep_clear_halt+0x12c>)
   8332e:	4013      	ands	r3, r2
   83330:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   83332:	2301      	movs	r3, #1
   83334:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   83336:	4a2d      	ldr	r2, [pc, #180]	; (833ec <udd_ep_clear_halt+0x12c>)
   83338:	79fb      	ldrb	r3, [r7, #7]
   8333a:	015b      	lsls	r3, r3, #5
   8333c:	4413      	add	r3, r2
   8333e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83342:	681b      	ldr	r3, [r3, #0]
   83344:	f003 0320 	and.w	r3, r3, #32
   83348:	2b00      	cmp	r3, #0
   8334a:	d035      	beq.n	833b8 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   8334c:	4a27      	ldr	r2, [pc, #156]	; (833ec <udd_ep_clear_halt+0x12c>)
   8334e:	79fb      	ldrb	r3, [r7, #7]
   83350:	015b      	lsls	r3, r3, #5
   83352:	4413      	add	r3, r2
   83354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83358:	681b      	ldr	r3, [r3, #0]
   8335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8335e:	2b00      	cmp	r3, #0
   83360:	d010      	beq.n	83384 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   83362:	4a22      	ldr	r2, [pc, #136]	; (833ec <udd_ep_clear_halt+0x12c>)
   83364:	79fb      	ldrb	r3, [r7, #7]
   83366:	015b      	lsls	r3, r3, #5
   83368:	4413      	add	r3, r2
   8336a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8336e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83372:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   83374:	4a1d      	ldr	r2, [pc, #116]	; (833ec <udd_ep_clear_halt+0x12c>)
   83376:	79fb      	ldrb	r3, [r7, #7]
   83378:	015b      	lsls	r3, r3, #5
   8337a:	4413      	add	r3, r2
   8337c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83380:	2240      	movs	r2, #64	; 0x40
   83382:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   83384:	4a19      	ldr	r2, [pc, #100]	; (833ec <udd_ep_clear_halt+0x12c>)
   83386:	79fb      	ldrb	r3, [r7, #7]
   83388:	015b      	lsls	r3, r3, #5
   8338a:	4413      	add	r3, r2
   8338c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83390:	2220      	movs	r2, #32
   83392:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   83394:	4a15      	ldr	r2, [pc, #84]	; (833ec <udd_ep_clear_halt+0x12c>)
   83396:	79fb      	ldrb	r3, [r7, #7]
   83398:	3308      	adds	r3, #8
   8339a:	015b      	lsls	r3, r3, #5
   8339c:	4413      	add	r3, r2
   8339e:	3304      	adds	r3, #4
   833a0:	681a      	ldr	r2, [r3, #0]
   833a2:	4912      	ldr	r1, [pc, #72]	; (833ec <udd_ep_clear_halt+0x12c>)
   833a4:	79fb      	ldrb	r3, [r7, #7]
   833a6:	f042 0202 	orr.w	r2, r2, #2
   833aa:	3308      	adds	r3, #8
   833ac:	015b      	lsls	r3, r3, #5
   833ae:	440b      	add	r3, r1
   833b0:	3304      	adds	r3, #4
   833b2:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   833b4:	2301      	movs	r3, #1
   833b6:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   833b8:	7bfb      	ldrb	r3, [r7, #15]
   833ba:	2b00      	cmp	r3, #0
   833bc:	d00e      	beq.n	833dc <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   833be:	68bb      	ldr	r3, [r7, #8]
   833c0:	7d1b      	ldrb	r3, [r3, #20]
   833c2:	f003 0301 	and.w	r3, r3, #1
   833c6:	b2db      	uxtb	r3, r3
   833c8:	2b00      	cmp	r3, #0
   833ca:	d007      	beq.n	833dc <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   833cc:	68ba      	ldr	r2, [r7, #8]
   833ce:	7d13      	ldrb	r3, [r2, #20]
   833d0:	f36f 0300 	bfc	r3, #0, #1
   833d4:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   833d6:	68bb      	ldr	r3, [r7, #8]
   833d8:	681b      	ldr	r3, [r3, #0]
   833da:	4798      	blx	r3
		}
	}
	return true;
   833dc:	2301      	movs	r3, #1
}
   833de:	4618      	mov	r0, r3
   833e0:	3710      	adds	r7, #16
   833e2:	46bd      	mov	sp, r7
   833e4:	bd80      	pop	{r7, pc}
   833e6:	bf00      	nop
   833e8:	20001328 	.word	0x20001328
   833ec:	400a4000 	.word	0x400a4000

000833f0 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   833f0:	b580      	push	{r7, lr}
   833f2:	b086      	sub	sp, #24
   833f4:	af00      	add	r7, sp, #0
   833f6:	60ba      	str	r2, [r7, #8]
   833f8:	607b      	str	r3, [r7, #4]
   833fa:	4603      	mov	r3, r0
   833fc:	73fb      	strb	r3, [r7, #15]
   833fe:	460b      	mov	r3, r1
   83400:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   83402:	7bfb      	ldrb	r3, [r7, #15]
   83404:	f003 030f 	and.w	r3, r3, #15
   83408:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   8340a:	7bfb      	ldrb	r3, [r7, #15]
   8340c:	2b02      	cmp	r3, #2
   8340e:	d901      	bls.n	83414 <udd_ep_run+0x24>
		return false;
   83410:	2300      	movs	r3, #0
   83412:	e063      	b.n	834dc <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83414:	7bfb      	ldrb	r3, [r7, #15]
   83416:	1e5a      	subs	r2, r3, #1
   83418:	4613      	mov	r3, r2
   8341a:	005b      	lsls	r3, r3, #1
   8341c:	4413      	add	r3, r2
   8341e:	00db      	lsls	r3, r3, #3
   83420:	4a30      	ldr	r2, [pc, #192]	; (834e4 <udd_ep_run+0xf4>)
   83422:	4413      	add	r3, r2
   83424:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   83426:	4a30      	ldr	r2, [pc, #192]	; (834e8 <udd_ep_run+0xf8>)
   83428:	7bfb      	ldrb	r3, [r7, #15]
   8342a:	015b      	lsls	r3, r3, #5
   8342c:	4413      	add	r3, r2
   8342e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83432:	681b      	ldr	r3, [r3, #0]
   83434:	f003 0301 	and.w	r3, r3, #1
   83438:	2b00      	cmp	r3, #0
   8343a:	d011      	beq.n	83460 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   8343c:	4a2a      	ldr	r2, [pc, #168]	; (834e8 <udd_ep_run+0xf8>)
   8343e:	7bfb      	ldrb	r3, [r7, #15]
   83440:	015b      	lsls	r3, r3, #5
   83442:	4413      	add	r3, r2
   83444:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83448:	681b      	ldr	r3, [r3, #0]
   8344a:	f003 0320 	and.w	r3, r3, #32
   8344e:	2b00      	cmp	r3, #0
   83450:	d106      	bne.n	83460 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   83452:	697b      	ldr	r3, [r7, #20]
   83454:	7d1b      	ldrb	r3, [r3, #20]
   83456:	f003 0304 	and.w	r3, r3, #4
   8345a:	b2db      	uxtb	r3, r3
   8345c:	2b00      	cmp	r3, #0
   8345e:	d001      	beq.n	83464 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   83460:	2300      	movs	r3, #0
   83462:	e03b      	b.n	834dc <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   83464:	4b21      	ldr	r3, [pc, #132]	; (834ec <udd_ep_run+0xfc>)
   83466:	4798      	blx	r3
   83468:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   8346a:	697b      	ldr	r3, [r7, #20]
   8346c:	7d1b      	ldrb	r3, [r3, #20]
   8346e:	f003 0301 	and.w	r3, r3, #1
   83472:	b2db      	uxtb	r3, r3
   83474:	2b00      	cmp	r3, #0
   83476:	d004      	beq.n	83482 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   83478:	6938      	ldr	r0, [r7, #16]
   8347a:	4b1d      	ldr	r3, [pc, #116]	; (834f0 <udd_ep_run+0x100>)
   8347c:	4798      	blx	r3
		return false; // Job already on going
   8347e:	2300      	movs	r3, #0
   83480:	e02c      	b.n	834dc <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   83482:	697a      	ldr	r2, [r7, #20]
   83484:	7d13      	ldrb	r3, [r2, #20]
   83486:	f043 0301 	orr.w	r3, r3, #1
   8348a:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   8348c:	6938      	ldr	r0, [r7, #16]
   8348e:	4b18      	ldr	r3, [pc, #96]	; (834f0 <udd_ep_run+0x100>)
   83490:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   83492:	697b      	ldr	r3, [r7, #20]
   83494:	68ba      	ldr	r2, [r7, #8]
   83496:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   83498:	697b      	ldr	r3, [r7, #20]
   8349a:	687a      	ldr	r2, [r7, #4]
   8349c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8349e:	697b      	ldr	r3, [r7, #20]
   834a0:	2200      	movs	r2, #0
   834a2:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   834a4:	697b      	ldr	r3, [r7, #20]
   834a6:	2200      	movs	r2, #0
   834a8:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   834aa:	697b      	ldr	r3, [r7, #20]
   834ac:	6a3a      	ldr	r2, [r7, #32]
   834ae:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   834b0:	7bbb      	ldrb	r3, [r7, #14]
   834b2:	2b00      	cmp	r3, #0
   834b4:	d102      	bne.n	834bc <udd_ep_run+0xcc>
   834b6:	687b      	ldr	r3, [r7, #4]
   834b8:	2b00      	cmp	r3, #0
   834ba:	d101      	bne.n	834c0 <udd_ep_run+0xd0>
   834bc:	2301      	movs	r3, #1
   834be:	e000      	b.n	834c2 <udd_ep_run+0xd2>
   834c0:	2300      	movs	r3, #0
   834c2:	f003 0301 	and.w	r3, r3, #1
   834c6:	b2d9      	uxtb	r1, r3
   834c8:	697a      	ldr	r2, [r7, #20]
   834ca:	7d13      	ldrb	r3, [r2, #20]
   834cc:	f361 0341 	bfi	r3, r1, #1, #1
   834d0:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   834d2:	7bfb      	ldrb	r3, [r7, #15]
   834d4:	4618      	mov	r0, r3
   834d6:	4b07      	ldr	r3, [pc, #28]	; (834f4 <udd_ep_run+0x104>)
   834d8:	4798      	blx	r3
	return true;
   834da:	2301      	movs	r3, #1
}
   834dc:	4618      	mov	r0, r3
   834de:	3718      	adds	r7, #24
   834e0:	46bd      	mov	sp, r7
   834e2:	bd80      	pop	{r7, pc}
   834e4:	20001328 	.word	0x20001328
   834e8:	400a4000 	.word	0x400a4000
   834ec:	0008278d 	.word	0x0008278d
   834f0:	000827e9 	.word	0x000827e9
   834f4:	00083fad 	.word	0x00083fad

000834f8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   834f8:	b580      	push	{r7, lr}
   834fa:	b084      	sub	sp, #16
   834fc:	af00      	add	r7, sp, #0
   834fe:	4603      	mov	r3, r0
   83500:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83502:	79fb      	ldrb	r3, [r7, #7]
   83504:	f003 030f 	and.w	r3, r3, #15
   83508:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8350a:	7bfb      	ldrb	r3, [r7, #15]
   8350c:	011a      	lsls	r2, r3, #4
   8350e:	4b19      	ldr	r3, [pc, #100]	; (83574 <udd_ep_abort+0x7c>)
   83510:	4413      	add	r3, r2
   83512:	2200      	movs	r2, #0
   83514:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   83516:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8351a:	2b00      	cmp	r3, #0
   8351c:	da21      	bge.n	83562 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8351e:	e014      	b.n	8354a <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   83520:	4a15      	ldr	r2, [pc, #84]	; (83578 <udd_ep_abort+0x80>)
   83522:	7bfb      	ldrb	r3, [r7, #15]
   83524:	015b      	lsls	r3, r3, #5
   83526:	4413      	add	r3, r2
   83528:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8352c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83530:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   83532:	bf00      	nop
   83534:	4a10      	ldr	r2, [pc, #64]	; (83578 <udd_ep_abort+0x80>)
   83536:	7bfb      	ldrb	r3, [r7, #15]
   83538:	015b      	lsls	r3, r3, #5
   8353a:	4413      	add	r3, r2
   8353c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83540:	681b      	ldr	r3, [r3, #0]
   83542:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83546:	2b00      	cmp	r3, #0
   83548:	d1f4      	bne.n	83534 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   8354a:	4a0b      	ldr	r2, [pc, #44]	; (83578 <udd_ep_abort+0x80>)
   8354c:	7bfb      	ldrb	r3, [r7, #15]
   8354e:	015b      	lsls	r3, r3, #5
   83550:	4413      	add	r3, r2
   83552:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83556:	681b      	ldr	r3, [r3, #0]
   83558:	0c9b      	lsrs	r3, r3, #18
   8355a:	f003 0303 	and.w	r3, r3, #3
   8355e:	2b00      	cmp	r3, #0
   83560:	d1de      	bne.n	83520 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   83562:	79fb      	ldrb	r3, [r7, #7]
   83564:	4618      	mov	r0, r3
   83566:	4b05      	ldr	r3, [pc, #20]	; (8357c <udd_ep_abort+0x84>)
   83568:	4798      	blx	r3
}
   8356a:	bf00      	nop
   8356c:	3710      	adds	r7, #16
   8356e:	46bd      	mov	sp, r7
   83570:	bd80      	pop	{r7, pc}
   83572:	bf00      	nop
   83574:	400a4300 	.word	0x400a4300
   83578:	400a4000 	.word	0x400a4000
   8357c:	00083f01 	.word	0x00083f01

00083580 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   83580:	b480      	push	{r7}
   83582:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83584:	4b0a      	ldr	r3, [pc, #40]	; (835b0 <udd_test_mode_j+0x30>)
   83586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8358a:	f023 0303 	bic.w	r3, r3, #3
   8358e:	4a08      	ldr	r2, [pc, #32]	; (835b0 <udd_test_mode_j+0x30>)
   83590:	f043 0302 	orr.w	r3, r3, #2
   83594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   83598:	4b05      	ldr	r3, [pc, #20]	; (835b0 <udd_test_mode_j+0x30>)
   8359a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8359e:	4a04      	ldr	r2, [pc, #16]	; (835b0 <udd_test_mode_j+0x30>)
   835a0:	f043 0304 	orr.w	r3, r3, #4
   835a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   835a8:	bf00      	nop
   835aa:	46bd      	mov	sp, r7
   835ac:	bc80      	pop	{r7}
   835ae:	4770      	bx	lr
   835b0:	400a4000 	.word	0x400a4000

000835b4 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   835b4:	b480      	push	{r7}
   835b6:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   835b8:	4b0a      	ldr	r3, [pc, #40]	; (835e4 <udd_test_mode_k+0x30>)
   835ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   835be:	f023 0303 	bic.w	r3, r3, #3
   835c2:	4a08      	ldr	r2, [pc, #32]	; (835e4 <udd_test_mode_k+0x30>)
   835c4:	f043 0302 	orr.w	r3, r3, #2
   835c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   835cc:	4b05      	ldr	r3, [pc, #20]	; (835e4 <udd_test_mode_k+0x30>)
   835ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   835d2:	4a04      	ldr	r2, [pc, #16]	; (835e4 <udd_test_mode_k+0x30>)
   835d4:	f043 0308 	orr.w	r3, r3, #8
   835d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   835dc:	bf00      	nop
   835de:	46bd      	mov	sp, r7
   835e0:	bc80      	pop	{r7}
   835e2:	4770      	bx	lr
   835e4:	400a4000 	.word	0x400a4000

000835e8 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   835e8:	b480      	push	{r7}
   835ea:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   835ec:	4b06      	ldr	r3, [pc, #24]	; (83608 <udd_test_mode_se0_nak+0x20>)
   835ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   835f2:	f023 0303 	bic.w	r3, r3, #3
   835f6:	4a04      	ldr	r2, [pc, #16]	; (83608 <udd_test_mode_se0_nak+0x20>)
   835f8:	f043 0302 	orr.w	r3, r3, #2
   835fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83600:	bf00      	nop
   83602:	46bd      	mov	sp, r7
   83604:	bc80      	pop	{r7}
   83606:	4770      	bx	lr
   83608:	400a4000 	.word	0x400a4000

0008360c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   8360c:	b4b0      	push	{r4, r5, r7}
   8360e:	b093      	sub	sp, #76	; 0x4c
   83610:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   83612:	4b2e      	ldr	r3, [pc, #184]	; (836cc <udd_test_mode_packet+0xc0>)
   83614:	1d3c      	adds	r4, r7, #4
   83616:	461d      	mov	r5, r3
   83618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8361a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8361c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8361e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83624:	e895 0003 	ldmia.w	r5, {r0, r1}
   83628:	6020      	str	r0, [r4, #0]
   8362a:	3404      	adds	r4, #4
   8362c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8362e:	4b28      	ldr	r3, [pc, #160]	; (836d0 <udd_test_mode_packet+0xc4>)
   83630:	2201      	movs	r2, #1
   83632:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   83636:	4b26      	ldr	r3, [pc, #152]	; (836d0 <udd_test_mode_packet+0xc4>)
   83638:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8363c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83640:	f023 0303 	bic.w	r3, r3, #3
   83644:	4a22      	ldr	r2, [pc, #136]	; (836d0 <udd_test_mode_packet+0xc4>)
   83646:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   8364a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   8364e:	4b20      	ldr	r3, [pc, #128]	; (836d0 <udd_test_mode_packet+0xc4>)
   83650:	2201      	movs	r2, #1
   83652:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   83656:	4b1e      	ldr	r3, [pc, #120]	; (836d0 <udd_test_mode_packet+0xc4>)
   83658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8365c:	f023 0303 	bic.w	r3, r3, #3
   83660:	4a1b      	ldr	r2, [pc, #108]	; (836d0 <udd_test_mode_packet+0xc4>)
   83662:	f043 0302 	orr.w	r3, r3, #2
   83666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   8366a:	4b19      	ldr	r3, [pc, #100]	; (836d0 <udd_test_mode_packet+0xc4>)
   8366c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83670:	4a17      	ldr	r2, [pc, #92]	; (836d0 <udd_test_mode_packet+0xc4>)
   83672:	f043 0310 	orr.w	r3, r3, #16
   83676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8367a:	4b16      	ldr	r3, [pc, #88]	; (836d4 <udd_test_mode_packet+0xc8>)
   8367c:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   8367e:	1d3b      	adds	r3, r7, #4
   83680:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   83682:	2300      	movs	r3, #0
   83684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   83688:	e00c      	b.n	836a4 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   8368a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   8368c:	1c53      	adds	r3, r2, #1
   8368e:	63fb      	str	r3, [r7, #60]	; 0x3c
   83690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   83692:	1c59      	adds	r1, r3, #1
   83694:	6439      	str	r1, [r7, #64]	; 0x40
   83696:	7812      	ldrb	r2, [r2, #0]
   83698:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8369a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8369e:	3301      	adds	r3, #1
   836a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   836a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   836a8:	2b34      	cmp	r3, #52	; 0x34
   836aa:	d9ee      	bls.n	8368a <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   836ac:	4b08      	ldr	r3, [pc, #32]	; (836d0 <udd_test_mode_packet+0xc4>)
   836ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   836b6:	4b06      	ldr	r3, [pc, #24]	; (836d0 <udd_test_mode_packet+0xc4>)
   836b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   836bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   836c0:	bf00      	nop
   836c2:	374c      	adds	r7, #76	; 0x4c
   836c4:	46bd      	mov	sp, r7
   836c6:	bcb0      	pop	{r4, r5, r7}
   836c8:	4770      	bx	lr
   836ca:	bf00      	nop
   836cc:	0008d990 	.word	0x0008d990
   836d0:	400a4000 	.word	0x400a4000
   836d4:	20180000 	.word	0x20180000

000836d8 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   836d8:	b580      	push	{r7, lr}
   836da:	b082      	sub	sp, #8
   836dc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   836de:	4b1b      	ldr	r3, [pc, #108]	; (8374c <udd_reset_ep_ctrl+0x74>)
   836e0:	681b      	ldr	r3, [r3, #0]
   836e2:	4a1a      	ldr	r2, [pc, #104]	; (8374c <udd_reset_ep_ctrl+0x74>)
   836e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   836e8:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   836ea:	4b18      	ldr	r3, [pc, #96]	; (8374c <udd_reset_ep_ctrl+0x74>)
   836ec:	681b      	ldr	r3, [r3, #0]
   836ee:	4a17      	ldr	r2, [pc, #92]	; (8374c <udd_reset_ep_ctrl+0x74>)
   836f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   836f4:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   836f6:	4b15      	ldr	r3, [pc, #84]	; (8374c <udd_reset_ep_ctrl+0x74>)
   836f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   836fc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83700:	f023 0303 	bic.w	r3, r3, #3
   83704:	4a11      	ldr	r2, [pc, #68]	; (8374c <udd_reset_ep_ctrl+0x74>)
   83706:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8370a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8370e:	4b0f      	ldr	r3, [pc, #60]	; (8374c <udd_reset_ep_ctrl+0x74>)
   83710:	2201      	movs	r2, #1
   83712:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   83716:	4b0e      	ldr	r3, [pc, #56]	; (83750 <udd_reset_ep_ctrl+0x78>)
   83718:	4798      	blx	r3
   8371a:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   8371c:	4b0b      	ldr	r3, [pc, #44]	; (8374c <udd_reset_ep_ctrl+0x74>)
   8371e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83722:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   83726:	4b09      	ldr	r3, [pc, #36]	; (8374c <udd_reset_ep_ctrl+0x74>)
   83728:	f44f 7200 	mov.w	r2, #512	; 0x200
   8372c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   83730:	4b06      	ldr	r3, [pc, #24]	; (8374c <udd_reset_ep_ctrl+0x74>)
   83732:	691b      	ldr	r3, [r3, #16]
   83734:	4a05      	ldr	r2, [pc, #20]	; (8374c <udd_reset_ep_ctrl+0x74>)
   83736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8373a:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   8373c:	6878      	ldr	r0, [r7, #4]
   8373e:	4b05      	ldr	r3, [pc, #20]	; (83754 <udd_reset_ep_ctrl+0x7c>)
   83740:	4798      	blx	r3
}
   83742:	bf00      	nop
   83744:	3708      	adds	r7, #8
   83746:	46bd      	mov	sp, r7
   83748:	bd80      	pop	{r7, pc}
   8374a:	bf00      	nop
   8374c:	400a4000 	.word	0x400a4000
   83750:	0008278d 	.word	0x0008278d
   83754:	000827e9 	.word	0x000827e9

00083758 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   83758:	b580      	push	{r7, lr}
   8375a:	b082      	sub	sp, #8
   8375c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   8375e:	4b10      	ldr	r3, [pc, #64]	; (837a0 <udd_ctrl_init+0x48>)
   83760:	4798      	blx	r3
   83762:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   83764:	4b0f      	ldr	r3, [pc, #60]	; (837a4 <udd_ctrl_init+0x4c>)
   83766:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8376a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8376e:	6878      	ldr	r0, [r7, #4]
   83770:	4b0d      	ldr	r3, [pc, #52]	; (837a8 <udd_ctrl_init+0x50>)
   83772:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   83774:	4b0b      	ldr	r3, [pc, #44]	; (837a4 <udd_ctrl_init+0x4c>)
   83776:	f44f 7200 	mov.w	r2, #512	; 0x200
   8377a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8377e:	4b0b      	ldr	r3, [pc, #44]	; (837ac <udd_ctrl_init+0x54>)
   83780:	2200      	movs	r2, #0
   83782:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83784:	4b09      	ldr	r3, [pc, #36]	; (837ac <udd_ctrl_init+0x54>)
   83786:	2200      	movs	r2, #0
   83788:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   8378a:	4b08      	ldr	r3, [pc, #32]	; (837ac <udd_ctrl_init+0x54>)
   8378c:	2200      	movs	r2, #0
   8378e:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83790:	4b07      	ldr	r3, [pc, #28]	; (837b0 <udd_ctrl_init+0x58>)
   83792:	2200      	movs	r2, #0
   83794:	701a      	strb	r2, [r3, #0]
}
   83796:	bf00      	nop
   83798:	3708      	adds	r7, #8
   8379a:	46bd      	mov	sp, r7
   8379c:	bd80      	pop	{r7, pc}
   8379e:	bf00      	nop
   837a0:	0008278d 	.word	0x0008278d
   837a4:	400a4000 	.word	0x400a4000
   837a8:	000827e9 	.word	0x000827e9
   837ac:	20001810 	.word	0x20001810
   837b0:	20001321 	.word	0x20001321

000837b4 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   837b4:	b580      	push	{r7, lr}
   837b6:	b084      	sub	sp, #16
   837b8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   837ba:	4b40      	ldr	r3, [pc, #256]	; (838bc <udd_ctrl_setup_received+0x108>)
   837bc:	781b      	ldrb	r3, [r3, #0]
   837be:	2b00      	cmp	r3, #0
   837c0:	d003      	beq.n	837ca <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   837c2:	4b3f      	ldr	r3, [pc, #252]	; (838c0 <udd_ctrl_setup_received+0x10c>)
   837c4:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   837c6:	4b3f      	ldr	r3, [pc, #252]	; (838c4 <udd_ctrl_setup_received+0x110>)
   837c8:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   837ca:	4b3f      	ldr	r3, [pc, #252]	; (838c8 <udd_ctrl_setup_received+0x114>)
   837cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   837d0:	0d1b      	lsrs	r3, r3, #20
   837d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
   837d6:	2b08      	cmp	r3, #8
   837d8:	d007      	beq.n	837ea <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   837da:	4b3c      	ldr	r3, [pc, #240]	; (838cc <udd_ctrl_setup_received+0x118>)
   837dc:	4798      	blx	r3
		udd_ack_setup_received(0);
   837de:	4b3a      	ldr	r3, [pc, #232]	; (838c8 <udd_ctrl_setup_received+0x114>)
   837e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   837e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   837e8:	e064      	b.n	838b4 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   837ea:	4b39      	ldr	r3, [pc, #228]	; (838d0 <udd_ctrl_setup_received+0x11c>)
   837ec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   837ee:	2300      	movs	r3, #0
   837f0:	73fb      	strb	r3, [r7, #15]
   837f2:	e00a      	b.n	8380a <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   837f4:	68bb      	ldr	r3, [r7, #8]
   837f6:	1c5a      	adds	r2, r3, #1
   837f8:	60ba      	str	r2, [r7, #8]
   837fa:	7bfa      	ldrb	r2, [r7, #15]
   837fc:	4935      	ldr	r1, [pc, #212]	; (838d4 <udd_ctrl_setup_received+0x120>)
   837fe:	440a      	add	r2, r1
   83800:	781b      	ldrb	r3, [r3, #0]
   83802:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   83804:	7bfb      	ldrb	r3, [r7, #15]
   83806:	3301      	adds	r3, #1
   83808:	73fb      	strb	r3, [r7, #15]
   8380a:	7bfb      	ldrb	r3, [r7, #15]
   8380c:	2b07      	cmp	r3, #7
   8380e:	d9f1      	bls.n	837f4 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   83810:	4b30      	ldr	r3, [pc, #192]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83812:	885a      	ldrh	r2, [r3, #2]
   83814:	4b2f      	ldr	r3, [pc, #188]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83816:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   83818:	4b2e      	ldr	r3, [pc, #184]	; (838d4 <udd_ctrl_setup_received+0x120>)
   8381a:	889a      	ldrh	r2, [r3, #4]
   8381c:	4b2d      	ldr	r3, [pc, #180]	; (838d4 <udd_ctrl_setup_received+0x120>)
   8381e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   83820:	4b2c      	ldr	r3, [pc, #176]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83822:	88da      	ldrh	r2, [r3, #6]
   83824:	4b2b      	ldr	r3, [pc, #172]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83826:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   83828:	4b2b      	ldr	r3, [pc, #172]	; (838d8 <udd_ctrl_setup_received+0x124>)
   8382a:	4798      	blx	r3
   8382c:	4603      	mov	r3, r0
   8382e:	f083 0301 	eor.w	r3, r3, #1
   83832:	b2db      	uxtb	r3, r3
   83834:	2b00      	cmp	r3, #0
   83836:	d007      	beq.n	83848 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   83838:	4b24      	ldr	r3, [pc, #144]	; (838cc <udd_ctrl_setup_received+0x118>)
   8383a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8383c:	4b22      	ldr	r3, [pc, #136]	; (838c8 <udd_ctrl_setup_received+0x114>)
   8383e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83842:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   83846:	e035      	b.n	838b4 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   83848:	4b1f      	ldr	r3, [pc, #124]	; (838c8 <udd_ctrl_setup_received+0x114>)
   8384a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8384e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   83852:	4b20      	ldr	r3, [pc, #128]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83854:	781b      	ldrb	r3, [r3, #0]
   83856:	b25b      	sxtb	r3, r3
   83858:	2b00      	cmp	r3, #0
   8385a:	da0b      	bge.n	83874 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8385c:	4b1f      	ldr	r3, [pc, #124]	; (838dc <udd_ctrl_setup_received+0x128>)
   8385e:	2200      	movs	r2, #0
   83860:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83862:	4b1f      	ldr	r3, [pc, #124]	; (838e0 <udd_ctrl_setup_received+0x12c>)
   83864:	2200      	movs	r2, #0
   83866:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   83868:	4b14      	ldr	r3, [pc, #80]	; (838bc <udd_ctrl_setup_received+0x108>)
   8386a:	2202      	movs	r2, #2
   8386c:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8386e:	4b1d      	ldr	r3, [pc, #116]	; (838e4 <udd_ctrl_setup_received+0x130>)
   83870:	4798      	blx	r3
   83872:	e01f      	b.n	838b4 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   83874:	4b17      	ldr	r3, [pc, #92]	; (838d4 <udd_ctrl_setup_received+0x120>)
   83876:	88db      	ldrh	r3, [r3, #6]
   83878:	2b00      	cmp	r3, #0
   8387a:	d102      	bne.n	83882 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   8387c:	4b1a      	ldr	r3, [pc, #104]	; (838e8 <udd_ctrl_setup_received+0x134>)
   8387e:	4798      	blx	r3
			return;
   83880:	e018      	b.n	838b4 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   83882:	4b16      	ldr	r3, [pc, #88]	; (838dc <udd_ctrl_setup_received+0x128>)
   83884:	2200      	movs	r2, #0
   83886:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83888:	4b15      	ldr	r3, [pc, #84]	; (838e0 <udd_ctrl_setup_received+0x12c>)
   8388a:	2200      	movs	r2, #0
   8388c:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8388e:	4b0b      	ldr	r3, [pc, #44]	; (838bc <udd_ctrl_setup_received+0x108>)
   83890:	2201      	movs	r2, #1
   83892:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   83894:	4b0c      	ldr	r3, [pc, #48]	; (838c8 <udd_ctrl_setup_received+0x114>)
   83896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8389a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   8389e:	4b13      	ldr	r3, [pc, #76]	; (838ec <udd_ctrl_setup_received+0x138>)
   838a0:	4798      	blx	r3
   838a2:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   838a4:	4b08      	ldr	r3, [pc, #32]	; (838c8 <udd_ctrl_setup_received+0x114>)
   838a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   838aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   838ae:	6878      	ldr	r0, [r7, #4]
   838b0:	4b0f      	ldr	r3, [pc, #60]	; (838f0 <udd_ctrl_setup_received+0x13c>)
   838b2:	4798      	blx	r3
	}
}
   838b4:	3710      	adds	r7, #16
   838b6:	46bd      	mov	sp, r7
   838b8:	bd80      	pop	{r7, pc}
   838ba:	bf00      	nop
   838bc:	20001321 	.word	0x20001321
   838c0:	00083d5d 	.word	0x00083d5d
   838c4:	00083759 	.word	0x00083759
   838c8:	400a4000 	.word	0x400a4000
   838cc:	00083c91 	.word	0x00083c91
   838d0:	20180000 	.word	0x20180000
   838d4:	20001810 	.word	0x20001810
   838d8:	000861e5 	.word	0x000861e5
   838dc:	20001322 	.word	0x20001322
   838e0:	20001324 	.word	0x20001324
   838e4:	000838f5 	.word	0x000838f5
   838e8:	00083cb5 	.word	0x00083cb5
   838ec:	0008278d 	.word	0x0008278d
   838f0:	000827e9 	.word	0x000827e9

000838f4 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   838f4:	b580      	push	{r7, lr}
   838f6:	b084      	sub	sp, #16
   838f8:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   838fa:	4b4c      	ldr	r3, [pc, #304]	; (83a2c <udd_ctrl_in_sent+0x138>)
   838fc:	4798      	blx	r3
   838fe:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   83900:	4b4b      	ldr	r3, [pc, #300]	; (83a30 <udd_ctrl_in_sent+0x13c>)
   83902:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83906:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8390a:	6838      	ldr	r0, [r7, #0]
   8390c:	4b49      	ldr	r3, [pc, #292]	; (83a34 <udd_ctrl_in_sent+0x140>)
   8390e:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83910:	4b49      	ldr	r3, [pc, #292]	; (83a38 <udd_ctrl_in_sent+0x144>)
   83912:	781b      	ldrb	r3, [r3, #0]
   83914:	2b03      	cmp	r3, #3
   83916:	d104      	bne.n	83922 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   83918:	4b48      	ldr	r3, [pc, #288]	; (83a3c <udd_ctrl_in_sent+0x148>)
   8391a:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8391c:	4b48      	ldr	r3, [pc, #288]	; (83a40 <udd_ctrl_in_sent+0x14c>)
   8391e:	4798      	blx	r3
		return;
   83920:	e081      	b.n	83a26 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83922:	4b48      	ldr	r3, [pc, #288]	; (83a44 <udd_ctrl_in_sent+0x150>)
   83924:	899a      	ldrh	r2, [r3, #12]
   83926:	4b48      	ldr	r3, [pc, #288]	; (83a48 <udd_ctrl_in_sent+0x154>)
   83928:	881b      	ldrh	r3, [r3, #0]
   8392a:	1ad3      	subs	r3, r2, r3
   8392c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8392e:	89fb      	ldrh	r3, [r7, #14]
   83930:	2b00      	cmp	r3, #0
   83932:	d127      	bne.n	83984 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83934:	4b45      	ldr	r3, [pc, #276]	; (83a4c <udd_ctrl_in_sent+0x158>)
   83936:	881a      	ldrh	r2, [r3, #0]
   83938:	4b43      	ldr	r3, [pc, #268]	; (83a48 <udd_ctrl_in_sent+0x154>)
   8393a:	881b      	ldrh	r3, [r3, #0]
   8393c:	4413      	add	r3, r2
   8393e:	b29a      	uxth	r2, r3
   83940:	4b42      	ldr	r3, [pc, #264]	; (83a4c <udd_ctrl_in_sent+0x158>)
   83942:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83944:	4b3f      	ldr	r3, [pc, #252]	; (83a44 <udd_ctrl_in_sent+0x150>)
   83946:	88da      	ldrh	r2, [r3, #6]
   83948:	4b40      	ldr	r3, [pc, #256]	; (83a4c <udd_ctrl_in_sent+0x158>)
   8394a:	881b      	ldrh	r3, [r3, #0]
   8394c:	429a      	cmp	r2, r3
   8394e:	d003      	beq.n	83958 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   83950:	4b3f      	ldr	r3, [pc, #252]	; (83a50 <udd_ctrl_in_sent+0x15c>)
   83952:	781b      	ldrb	r3, [r3, #0]
   83954:	2b00      	cmp	r3, #0
   83956:	d002      	beq.n	8395e <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   83958:	4b3e      	ldr	r3, [pc, #248]	; (83a54 <udd_ctrl_in_sent+0x160>)
   8395a:	4798      	blx	r3
			return;
   8395c:	e063      	b.n	83a26 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8395e:	4b39      	ldr	r3, [pc, #228]	; (83a44 <udd_ctrl_in_sent+0x150>)
   83960:	695b      	ldr	r3, [r3, #20]
   83962:	2b00      	cmp	r3, #0
   83964:	d00e      	beq.n	83984 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   83966:	4b37      	ldr	r3, [pc, #220]	; (83a44 <udd_ctrl_in_sent+0x150>)
   83968:	695b      	ldr	r3, [r3, #20]
   8396a:	4798      	blx	r3
   8396c:	4603      	mov	r3, r0
   8396e:	f083 0301 	eor.w	r3, r3, #1
   83972:	b2db      	uxtb	r3, r3
   83974:	2b00      	cmp	r3, #0
   83976:	d105      	bne.n	83984 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   83978:	4b33      	ldr	r3, [pc, #204]	; (83a48 <udd_ctrl_in_sent+0x154>)
   8397a:	2200      	movs	r2, #0
   8397c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8397e:	4b31      	ldr	r3, [pc, #196]	; (83a44 <udd_ctrl_in_sent+0x150>)
   83980:	899b      	ldrh	r3, [r3, #12]
   83982:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83984:	89fb      	ldrh	r3, [r7, #14]
   83986:	2b3f      	cmp	r3, #63	; 0x3f
   83988:	d905      	bls.n	83996 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8398a:	2340      	movs	r3, #64	; 0x40
   8398c:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   8398e:	4b30      	ldr	r3, [pc, #192]	; (83a50 <udd_ctrl_in_sent+0x15c>)
   83990:	2200      	movs	r2, #0
   83992:	701a      	strb	r2, [r3, #0]
   83994:	e002      	b.n	8399c <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   83996:	4b2e      	ldr	r3, [pc, #184]	; (83a50 <udd_ctrl_in_sent+0x15c>)
   83998:	2201      	movs	r2, #1
   8399a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8399c:	4b2e      	ldr	r3, [pc, #184]	; (83a58 <udd_ctrl_in_sent+0x164>)
   8399e:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   839a0:	4b28      	ldr	r3, [pc, #160]	; (83a44 <udd_ctrl_in_sent+0x150>)
   839a2:	689b      	ldr	r3, [r3, #8]
   839a4:	4a28      	ldr	r2, [pc, #160]	; (83a48 <udd_ctrl_in_sent+0x154>)
   839a6:	8812      	ldrh	r2, [r2, #0]
   839a8:	4413      	add	r3, r2
   839aa:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   839ac:	4b1f      	ldr	r3, [pc, #124]	; (83a2c <udd_ctrl_in_sent+0x138>)
   839ae:	4798      	blx	r3
   839b0:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   839b2:	4b1f      	ldr	r3, [pc, #124]	; (83a30 <udd_ctrl_in_sent+0x13c>)
   839b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   839b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   839bc:	2b00      	cmp	r3, #0
   839be:	d006      	beq.n	839ce <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   839c0:	6838      	ldr	r0, [r7, #0]
   839c2:	4b1c      	ldr	r3, [pc, #112]	; (83a34 <udd_ctrl_in_sent+0x140>)
   839c4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   839c6:	4b1c      	ldr	r3, [pc, #112]	; (83a38 <udd_ctrl_in_sent+0x144>)
   839c8:	2204      	movs	r2, #4
   839ca:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   839cc:	e02b      	b.n	83a26 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   839ce:	2300      	movs	r3, #0
   839d0:	737b      	strb	r3, [r7, #13]
   839d2:	e00a      	b.n	839ea <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   839d4:	687a      	ldr	r2, [r7, #4]
   839d6:	1c53      	adds	r3, r2, #1
   839d8:	607b      	str	r3, [r7, #4]
   839da:	68bb      	ldr	r3, [r7, #8]
   839dc:	1c59      	adds	r1, r3, #1
   839de:	60b9      	str	r1, [r7, #8]
   839e0:	7812      	ldrb	r2, [r2, #0]
   839e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   839e4:	7b7b      	ldrb	r3, [r7, #13]
   839e6:	3301      	adds	r3, #1
   839e8:	737b      	strb	r3, [r7, #13]
   839ea:	7b7b      	ldrb	r3, [r7, #13]
   839ec:	b29b      	uxth	r3, r3
   839ee:	89fa      	ldrh	r2, [r7, #14]
   839f0:	429a      	cmp	r2, r3
   839f2:	d8ef      	bhi.n	839d4 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   839f4:	4b14      	ldr	r3, [pc, #80]	; (83a48 <udd_ctrl_in_sent+0x154>)
   839f6:	881a      	ldrh	r2, [r3, #0]
   839f8:	89fb      	ldrh	r3, [r7, #14]
   839fa:	4413      	add	r3, r2
   839fc:	b29a      	uxth	r2, r3
   839fe:	4b12      	ldr	r3, [pc, #72]	; (83a48 <udd_ctrl_in_sent+0x154>)
   83a00:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   83a02:	4b0b      	ldr	r3, [pc, #44]	; (83a30 <udd_ctrl_in_sent+0x13c>)
   83a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a08:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83a0c:	4b08      	ldr	r3, [pc, #32]	; (83a30 <udd_ctrl_in_sent+0x13c>)
   83a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83a12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83a16:	4b06      	ldr	r3, [pc, #24]	; (83a30 <udd_ctrl_in_sent+0x13c>)
   83a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83a1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   83a20:	6838      	ldr	r0, [r7, #0]
   83a22:	4b04      	ldr	r3, [pc, #16]	; (83a34 <udd_ctrl_in_sent+0x140>)
   83a24:	4798      	blx	r3
}
   83a26:	3710      	adds	r7, #16
   83a28:	46bd      	mov	sp, r7
   83a2a:	bd80      	pop	{r7, pc}
   83a2c:	0008278d 	.word	0x0008278d
   83a30:	400a4000 	.word	0x400a4000
   83a34:	000827e9 	.word	0x000827e9
   83a38:	20001321 	.word	0x20001321
   83a3c:	00083d5d 	.word	0x00083d5d
   83a40:	00083759 	.word	0x00083759
   83a44:	20001810 	.word	0x20001810
   83a48:	20001324 	.word	0x20001324
   83a4c:	20001322 	.word	0x20001322
   83a50:	20001358 	.word	0x20001358
   83a54:	00083d19 	.word	0x00083d19
   83a58:	20180000 	.word	0x20180000

00083a5c <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   83a5c:	b580      	push	{r7, lr}
   83a5e:	b084      	sub	sp, #16
   83a60:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   83a62:	4b61      	ldr	r3, [pc, #388]	; (83be8 <udd_ctrl_out_received+0x18c>)
   83a64:	781b      	ldrb	r3, [r3, #0]
   83a66:	2b01      	cmp	r3, #1
   83a68:	d00f      	beq.n	83a8a <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   83a6a:	4b5f      	ldr	r3, [pc, #380]	; (83be8 <udd_ctrl_out_received+0x18c>)
   83a6c:	781b      	ldrb	r3, [r3, #0]
   83a6e:	2b02      	cmp	r3, #2
   83a70:	d003      	beq.n	83a7a <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   83a72:	4b5d      	ldr	r3, [pc, #372]	; (83be8 <udd_ctrl_out_received+0x18c>)
   83a74:	781b      	ldrb	r3, [r3, #0]
   83a76:	2b04      	cmp	r3, #4
   83a78:	d102      	bne.n	83a80 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   83a7a:	4b5c      	ldr	r3, [pc, #368]	; (83bec <udd_ctrl_out_received+0x190>)
   83a7c:	4798      	blx	r3
   83a7e:	e001      	b.n	83a84 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   83a80:	4b5b      	ldr	r3, [pc, #364]	; (83bf0 <udd_ctrl_out_received+0x194>)
   83a82:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   83a84:	4b5b      	ldr	r3, [pc, #364]	; (83bf4 <udd_ctrl_out_received+0x198>)
   83a86:	4798      	blx	r3
		return;
   83a88:	e0ab      	b.n	83be2 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   83a8a:	4b5b      	ldr	r3, [pc, #364]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83a8c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83a90:	0d1b      	lsrs	r3, r3, #20
   83a92:	b29b      	uxth	r3, r3
   83a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
   83a98:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   83a9a:	4b58      	ldr	r3, [pc, #352]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83a9c:	899b      	ldrh	r3, [r3, #12]
   83a9e:	461a      	mov	r2, r3
   83aa0:	4b57      	ldr	r3, [pc, #348]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83aa2:	881b      	ldrh	r3, [r3, #0]
   83aa4:	4619      	mov	r1, r3
   83aa6:	89bb      	ldrh	r3, [r7, #12]
   83aa8:	440b      	add	r3, r1
   83aaa:	429a      	cmp	r2, r3
   83aac:	da05      	bge.n	83aba <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83aae:	4b53      	ldr	r3, [pc, #332]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83ab0:	899a      	ldrh	r2, [r3, #12]
   83ab2:	4b53      	ldr	r3, [pc, #332]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83ab4:	881b      	ldrh	r3, [r3, #0]
   83ab6:	1ad3      	subs	r3, r2, r3
   83ab8:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83aba:	4b52      	ldr	r3, [pc, #328]	; (83c04 <udd_ctrl_out_received+0x1a8>)
   83abc:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83abe:	4b4f      	ldr	r3, [pc, #316]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83ac0:	689b      	ldr	r3, [r3, #8]
   83ac2:	4a4f      	ldr	r2, [pc, #316]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83ac4:	8812      	ldrh	r2, [r2, #0]
   83ac6:	4413      	add	r3, r2
   83ac8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   83aca:	2300      	movs	r3, #0
   83acc:	73fb      	strb	r3, [r7, #15]
   83ace:	e00a      	b.n	83ae6 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   83ad0:	68ba      	ldr	r2, [r7, #8]
   83ad2:	1c53      	adds	r3, r2, #1
   83ad4:	60bb      	str	r3, [r7, #8]
   83ad6:	687b      	ldr	r3, [r7, #4]
   83ad8:	1c59      	adds	r1, r3, #1
   83ada:	6079      	str	r1, [r7, #4]
   83adc:	7812      	ldrb	r2, [r2, #0]
   83ade:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   83ae0:	7bfb      	ldrb	r3, [r7, #15]
   83ae2:	3301      	adds	r3, #1
   83ae4:	73fb      	strb	r3, [r7, #15]
   83ae6:	7bfb      	ldrb	r3, [r7, #15]
   83ae8:	b29b      	uxth	r3, r3
   83aea:	89ba      	ldrh	r2, [r7, #12]
   83aec:	429a      	cmp	r2, r3
   83aee:	d8ef      	bhi.n	83ad0 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   83af0:	4b43      	ldr	r3, [pc, #268]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83af2:	881a      	ldrh	r2, [r3, #0]
   83af4:	89bb      	ldrh	r3, [r7, #12]
   83af6:	4413      	add	r3, r2
   83af8:	b29a      	uxth	r2, r3
   83afa:	4b41      	ldr	r3, [pc, #260]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83afc:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83afe:	89bb      	ldrh	r3, [r7, #12]
   83b00:	2b40      	cmp	r3, #64	; 0x40
   83b02:	d10a      	bne.n	83b1a <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   83b04:	4b3d      	ldr	r3, [pc, #244]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b06:	88db      	ldrh	r3, [r3, #6]
   83b08:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   83b0a:	4b3f      	ldr	r3, [pc, #252]	; (83c08 <udd_ctrl_out_received+0x1ac>)
   83b0c:	881b      	ldrh	r3, [r3, #0]
   83b0e:	4619      	mov	r1, r3
   83b10:	4b3b      	ldr	r3, [pc, #236]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83b12:	881b      	ldrh	r3, [r3, #0]
   83b14:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   83b16:	429a      	cmp	r2, r3
   83b18:	dc20      	bgt.n	83b5c <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83b1a:	4b39      	ldr	r3, [pc, #228]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83b1c:	881a      	ldrh	r2, [r3, #0]
   83b1e:	4b37      	ldr	r3, [pc, #220]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b20:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83b22:	4b36      	ldr	r3, [pc, #216]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b24:	695b      	ldr	r3, [r3, #20]
   83b26:	2b00      	cmp	r3, #0
   83b28:	d010      	beq.n	83b4c <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   83b2a:	4b34      	ldr	r3, [pc, #208]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b2c:	695b      	ldr	r3, [r3, #20]
   83b2e:	4798      	blx	r3
   83b30:	4603      	mov	r3, r0
   83b32:	f083 0301 	eor.w	r3, r3, #1
   83b36:	b2db      	uxtb	r3, r3
   83b38:	2b00      	cmp	r3, #0
   83b3a:	d007      	beq.n	83b4c <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   83b3c:	4b2c      	ldr	r3, [pc, #176]	; (83bf0 <udd_ctrl_out_received+0x194>)
   83b3e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   83b40:	4b2d      	ldr	r3, [pc, #180]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83b42:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b46:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   83b4a:	e04a      	b.n	83be2 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   83b4c:	4b2a      	ldr	r3, [pc, #168]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b52:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   83b56:	4b2d      	ldr	r3, [pc, #180]	; (83c0c <udd_ctrl_out_received+0x1b0>)
   83b58:	4798      	blx	r3
		return;
   83b5a:	e042      	b.n	83be2 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83b5c:	4b27      	ldr	r3, [pc, #156]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b5e:	899a      	ldrh	r2, [r3, #12]
   83b60:	4b27      	ldr	r3, [pc, #156]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83b62:	881b      	ldrh	r3, [r3, #0]
   83b64:	429a      	cmp	r2, r3
   83b66:	d127      	bne.n	83bb8 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   83b68:	4b24      	ldr	r3, [pc, #144]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b6a:	695b      	ldr	r3, [r3, #20]
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	d107      	bne.n	83b80 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   83b70:	4b1f      	ldr	r3, [pc, #124]	; (83bf0 <udd_ctrl_out_received+0x194>)
   83b72:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   83b74:	4b20      	ldr	r3, [pc, #128]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83b76:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83b7e:	e030      	b.n	83be2 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   83b80:	4b1e      	ldr	r3, [pc, #120]	; (83bfc <udd_ctrl_out_received+0x1a0>)
   83b82:	695b      	ldr	r3, [r3, #20]
   83b84:	4798      	blx	r3
   83b86:	4603      	mov	r3, r0
   83b88:	f083 0301 	eor.w	r3, r3, #1
   83b8c:	b2db      	uxtb	r3, r3
   83b8e:	2b00      	cmp	r3, #0
   83b90:	d007      	beq.n	83ba2 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   83b92:	4b17      	ldr	r3, [pc, #92]	; (83bf0 <udd_ctrl_out_received+0x194>)
   83b94:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   83b96:	4b18      	ldr	r3, [pc, #96]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83b98:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b9c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83ba0:	e01f      	b.n	83be2 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83ba2:	4b19      	ldr	r3, [pc, #100]	; (83c08 <udd_ctrl_out_received+0x1ac>)
   83ba4:	881a      	ldrh	r2, [r3, #0]
   83ba6:	4b16      	ldr	r3, [pc, #88]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83ba8:	881b      	ldrh	r3, [r3, #0]
   83baa:	4413      	add	r3, r2
   83bac:	b29a      	uxth	r2, r3
   83bae:	4b16      	ldr	r3, [pc, #88]	; (83c08 <udd_ctrl_out_received+0x1ac>)
   83bb0:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   83bb2:	4b13      	ldr	r3, [pc, #76]	; (83c00 <udd_ctrl_out_received+0x1a4>)
   83bb4:	2200      	movs	r2, #0
   83bb6:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   83bb8:	4b0f      	ldr	r3, [pc, #60]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83bba:	f44f 7200 	mov.w	r2, #512	; 0x200
   83bbe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   83bc2:	4b0d      	ldr	r3, [pc, #52]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83bc8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   83bcc:	4b10      	ldr	r3, [pc, #64]	; (83c10 <udd_ctrl_out_received+0x1b4>)
   83bce:	4798      	blx	r3
   83bd0:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   83bd2:	4b09      	ldr	r3, [pc, #36]	; (83bf8 <udd_ctrl_out_received+0x19c>)
   83bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83bd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83bdc:	6838      	ldr	r0, [r7, #0]
   83bde:	4b0d      	ldr	r3, [pc, #52]	; (83c14 <udd_ctrl_out_received+0x1b8>)
   83be0:	4798      	blx	r3
}
   83be2:	3710      	adds	r7, #16
   83be4:	46bd      	mov	sp, r7
   83be6:	bd80      	pop	{r7, pc}
   83be8:	20001321 	.word	0x20001321
   83bec:	00083d5d 	.word	0x00083d5d
   83bf0:	00083c91 	.word	0x00083c91
   83bf4:	00083759 	.word	0x00083759
   83bf8:	400a4000 	.word	0x400a4000
   83bfc:	20001810 	.word	0x20001810
   83c00:	20001324 	.word	0x20001324
   83c04:	20180000 	.word	0x20180000
   83c08:	20001322 	.word	0x20001322
   83c0c:	00083cb5 	.word	0x00083cb5
   83c10:	0008278d 	.word	0x0008278d
   83c14:	000827e9 	.word	0x000827e9

00083c18 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   83c18:	b580      	push	{r7, lr}
   83c1a:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   83c1c:	4b0c      	ldr	r3, [pc, #48]	; (83c50 <udd_ctrl_underflow+0x38>)
   83c1e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83c26:	2b00      	cmp	r3, #0
   83c28:	d10f      	bne.n	83c4a <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83c2a:	4b0a      	ldr	r3, [pc, #40]	; (83c54 <udd_ctrl_underflow+0x3c>)
   83c2c:	781b      	ldrb	r3, [r3, #0]
   83c2e:	2b01      	cmp	r3, #1
   83c30:	d102      	bne.n	83c38 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   83c32:	4b09      	ldr	r3, [pc, #36]	; (83c58 <udd_ctrl_underflow+0x40>)
   83c34:	4798      	blx	r3
   83c36:	e009      	b.n	83c4c <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   83c38:	4b06      	ldr	r3, [pc, #24]	; (83c54 <udd_ctrl_underflow+0x3c>)
   83c3a:	781b      	ldrb	r3, [r3, #0]
   83c3c:	2b04      	cmp	r3, #4
   83c3e:	d105      	bne.n	83c4c <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   83c40:	4b03      	ldr	r3, [pc, #12]	; (83c50 <udd_ctrl_underflow+0x38>)
   83c42:	2220      	movs	r2, #32
   83c44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83c48:	e000      	b.n	83c4c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   83c4a:	bf00      	nop
	}
}
   83c4c:	bd80      	pop	{r7, pc}
   83c4e:	bf00      	nop
   83c50:	400a4000 	.word	0x400a4000
   83c54:	20001321 	.word	0x20001321
   83c58:	00083cb5 	.word	0x00083cb5

00083c5c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   83c5c:	b480      	push	{r7}
   83c5e:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   83c60:	4b09      	ldr	r3, [pc, #36]	; (83c88 <udd_ctrl_overflow+0x2c>)
   83c62:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83c6a:	2b00      	cmp	r3, #0
   83c6c:	d108      	bne.n	83c80 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83c6e:	4b07      	ldr	r3, [pc, #28]	; (83c8c <udd_ctrl_overflow+0x30>)
   83c70:	781b      	ldrb	r3, [r3, #0]
   83c72:	2b03      	cmp	r3, #3
   83c74:	d105      	bne.n	83c82 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   83c76:	4b04      	ldr	r3, [pc, #16]	; (83c88 <udd_ctrl_overflow+0x2c>)
   83c78:	2220      	movs	r2, #32
   83c7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83c7e:	e000      	b.n	83c82 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   83c80:	bf00      	nop
	}
}
   83c82:	46bd      	mov	sp, r7
   83c84:	bc80      	pop	{r7}
   83c86:	4770      	bx	lr
   83c88:	400a4000 	.word	0x400a4000
   83c8c:	20001321 	.word	0x20001321

00083c90 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   83c90:	b480      	push	{r7}
   83c92:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83c94:	4b05      	ldr	r3, [pc, #20]	; (83cac <udd_ctrl_stall_data+0x1c>)
   83c96:	2205      	movs	r2, #5
   83c98:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   83c9a:	4b05      	ldr	r3, [pc, #20]	; (83cb0 <udd_ctrl_stall_data+0x20>)
   83c9c:	2220      	movs	r2, #32
   83c9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   83ca2:	bf00      	nop
   83ca4:	46bd      	mov	sp, r7
   83ca6:	bc80      	pop	{r7}
   83ca8:	4770      	bx	lr
   83caa:	bf00      	nop
   83cac:	20001321 	.word	0x20001321
   83cb0:	400a4000 	.word	0x400a4000

00083cb4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   83cb4:	b580      	push	{r7, lr}
   83cb6:	b082      	sub	sp, #8
   83cb8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83cba:	4b13      	ldr	r3, [pc, #76]	; (83d08 <udd_ctrl_send_zlp_in+0x54>)
   83cbc:	2203      	movs	r2, #3
   83cbe:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   83cc0:	4b12      	ldr	r3, [pc, #72]	; (83d0c <udd_ctrl_send_zlp_in+0x58>)
   83cc2:	4798      	blx	r3
   83cc4:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   83cc6:	4b12      	ldr	r3, [pc, #72]	; (83d10 <udd_ctrl_send_zlp_in+0x5c>)
   83cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83ccc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83cd0:	4b0f      	ldr	r3, [pc, #60]	; (83d10 <udd_ctrl_send_zlp_in+0x5c>)
   83cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83cd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83cda:	4b0d      	ldr	r3, [pc, #52]	; (83d10 <udd_ctrl_send_zlp_in+0x5c>)
   83cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83ce0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   83ce4:	4b0a      	ldr	r3, [pc, #40]	; (83d10 <udd_ctrl_send_zlp_in+0x5c>)
   83ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83cea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83cee:	4b08      	ldr	r3, [pc, #32]	; (83d10 <udd_ctrl_send_zlp_in+0x5c>)
   83cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83cf4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83cf8:	6878      	ldr	r0, [r7, #4]
   83cfa:	4b06      	ldr	r3, [pc, #24]	; (83d14 <udd_ctrl_send_zlp_in+0x60>)
   83cfc:	4798      	blx	r3
}
   83cfe:	bf00      	nop
   83d00:	3708      	adds	r7, #8
   83d02:	46bd      	mov	sp, r7
   83d04:	bd80      	pop	{r7, pc}
   83d06:	bf00      	nop
   83d08:	20001321 	.word	0x20001321
   83d0c:	0008278d 	.word	0x0008278d
   83d10:	400a4000 	.word	0x400a4000
   83d14:	000827e9 	.word	0x000827e9

00083d18 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   83d18:	b580      	push	{r7, lr}
   83d1a:	b082      	sub	sp, #8
   83d1c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83d1e:	4b0b      	ldr	r3, [pc, #44]	; (83d4c <udd_ctrl_send_zlp_out+0x34>)
   83d20:	2204      	movs	r2, #4
   83d22:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   83d24:	4b0a      	ldr	r3, [pc, #40]	; (83d50 <udd_ctrl_send_zlp_out+0x38>)
   83d26:	4798      	blx	r3
   83d28:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   83d2a:	4b0a      	ldr	r3, [pc, #40]	; (83d54 <udd_ctrl_send_zlp_out+0x3c>)
   83d2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83d34:	4b07      	ldr	r3, [pc, #28]	; (83d54 <udd_ctrl_send_zlp_out+0x3c>)
   83d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83d3e:	6878      	ldr	r0, [r7, #4]
   83d40:	4b05      	ldr	r3, [pc, #20]	; (83d58 <udd_ctrl_send_zlp_out+0x40>)
   83d42:	4798      	blx	r3
}
   83d44:	bf00      	nop
   83d46:	3708      	adds	r7, #8
   83d48:	46bd      	mov	sp, r7
   83d4a:	bd80      	pop	{r7, pc}
   83d4c:	20001321 	.word	0x20001321
   83d50:	0008278d 	.word	0x0008278d
   83d54:	400a4000 	.word	0x400a4000
   83d58:	000827e9 	.word	0x000827e9

00083d5c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   83d5c:	b580      	push	{r7, lr}
   83d5e:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83d60:	4b04      	ldr	r3, [pc, #16]	; (83d74 <udd_ctrl_endofrequest+0x18>)
   83d62:	691b      	ldr	r3, [r3, #16]
   83d64:	2b00      	cmp	r3, #0
   83d66:	d002      	beq.n	83d6e <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   83d68:	4b02      	ldr	r3, [pc, #8]	; (83d74 <udd_ctrl_endofrequest+0x18>)
   83d6a:	691b      	ldr	r3, [r3, #16]
   83d6c:	4798      	blx	r3
	}
}
   83d6e:	bf00      	nop
   83d70:	bd80      	pop	{r7, pc}
   83d72:	bf00      	nop
   83d74:	20001810 	.word	0x20001810

00083d78 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   83d78:	b580      	push	{r7, lr}
   83d7a:	b082      	sub	sp, #8
   83d7c:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   83d7e:	4b31      	ldr	r3, [pc, #196]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83d80:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83d84:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   83d86:	4b2f      	ldr	r3, [pc, #188]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83d88:	695b      	ldr	r3, [r3, #20]
   83d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   83d8e:	2b00      	cmp	r3, #0
   83d90:	d101      	bne.n	83d96 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   83d92:	2300      	movs	r3, #0
   83d94:	e052      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   83d96:	4b2b      	ldr	r3, [pc, #172]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83d98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   83da0:	4b28      	ldr	r3, [pc, #160]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83da2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83da6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   83daa:	687b      	ldr	r3, [r7, #4]
   83dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   83db0:	2b00      	cmp	r3, #0
   83db2:	d003      	beq.n	83dbc <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   83db4:	4b24      	ldr	r3, [pc, #144]	; (83e48 <udd_ctrl_interrupt+0xd0>)
   83db6:	4798      	blx	r3
		return true;
   83db8:	2301      	movs	r3, #1
   83dba:	e03f      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   83dbc:	687b      	ldr	r3, [r7, #4]
   83dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83dc2:	2b00      	cmp	r3, #0
   83dc4:	d00a      	beq.n	83ddc <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   83dc6:	4b1f      	ldr	r3, [pc, #124]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83dc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   83dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83dd0:	2b00      	cmp	r3, #0
   83dd2:	d003      	beq.n	83ddc <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   83dd4:	4b1d      	ldr	r3, [pc, #116]	; (83e4c <udd_ctrl_interrupt+0xd4>)
   83dd6:	4798      	blx	r3
		return true;
   83dd8:	2301      	movs	r3, #1
   83dda:	e02f      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   83ddc:	687b      	ldr	r3, [r7, #4]
   83dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83de2:	2b00      	cmp	r3, #0
   83de4:	d003      	beq.n	83dee <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   83de6:	4b1a      	ldr	r3, [pc, #104]	; (83e50 <udd_ctrl_interrupt+0xd8>)
   83de8:	4798      	blx	r3
		return true;
   83dea:	2301      	movs	r3, #1
   83dec:	e026      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   83dee:	687b      	ldr	r3, [r7, #4]
   83df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   83df4:	2b00      	cmp	r3, #0
   83df6:	d004      	beq.n	83e02 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   83df8:	4b12      	ldr	r3, [pc, #72]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83dfe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   83e02:	687b      	ldr	r3, [r7, #4]
   83e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   83e08:	2b00      	cmp	r3, #0
   83e0a:	d008      	beq.n	83e1e <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   83e0c:	4b0d      	ldr	r3, [pc, #52]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83e0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83e12:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   83e16:	4b0f      	ldr	r3, [pc, #60]	; (83e54 <udd_ctrl_interrupt+0xdc>)
   83e18:	4798      	blx	r3
		return true;
   83e1a:	2301      	movs	r3, #1
   83e1c:	e00e      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   83e1e:	687b      	ldr	r3, [r7, #4]
   83e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   83e24:	2b00      	cmp	r3, #0
   83e26:	d008      	beq.n	83e3a <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   83e28:	4b06      	ldr	r3, [pc, #24]	; (83e44 <udd_ctrl_interrupt+0xcc>)
   83e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83e2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83e32:	4b09      	ldr	r3, [pc, #36]	; (83e58 <udd_ctrl_interrupt+0xe0>)
   83e34:	4798      	blx	r3
		return true;
   83e36:	2301      	movs	r3, #1
   83e38:	e000      	b.n	83e3c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   83e3a:	2300      	movs	r3, #0
}
   83e3c:	4618      	mov	r0, r3
   83e3e:	3708      	adds	r7, #8
   83e40:	46bd      	mov	sp, r7
   83e42:	bd80      	pop	{r7, pc}
   83e44:	400a4000 	.word	0x400a4000
   83e48:	000837b5 	.word	0x000837b5
   83e4c:	000838f5 	.word	0x000838f5
   83e50:	00083a5d 	.word	0x00083a5d
   83e54:	00083c5d 	.word	0x00083c5d
   83e58:	00083c19 	.word	0x00083c19

00083e5c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   83e5c:	b480      	push	{r7}
   83e5e:	b083      	sub	sp, #12
   83e60:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e62:	2300      	movs	r3, #0
   83e64:	71fb      	strb	r3, [r7, #7]
   83e66:	e01c      	b.n	83ea2 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   83e68:	79fa      	ldrb	r2, [r7, #7]
   83e6a:	4912      	ldr	r1, [pc, #72]	; (83eb4 <udd_ep_job_table_reset+0x58>)
   83e6c:	4613      	mov	r3, r2
   83e6e:	005b      	lsls	r3, r3, #1
   83e70:	4413      	add	r3, r2
   83e72:	00db      	lsls	r3, r3, #3
   83e74:	440b      	add	r3, r1
   83e76:	f103 0210 	add.w	r2, r3, #16
   83e7a:	7913      	ldrb	r3, [r2, #4]
   83e7c:	f36f 0300 	bfc	r3, #0, #1
   83e80:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   83e82:	79fa      	ldrb	r2, [r7, #7]
   83e84:	490b      	ldr	r1, [pc, #44]	; (83eb4 <udd_ep_job_table_reset+0x58>)
   83e86:	4613      	mov	r3, r2
   83e88:	005b      	lsls	r3, r3, #1
   83e8a:	4413      	add	r3, r2
   83e8c:	00db      	lsls	r3, r3, #3
   83e8e:	440b      	add	r3, r1
   83e90:	f103 0210 	add.w	r2, r3, #16
   83e94:	7913      	ldrb	r3, [r2, #4]
   83e96:	f36f 0382 	bfc	r3, #2, #1
   83e9a:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e9c:	79fb      	ldrb	r3, [r7, #7]
   83e9e:	3301      	adds	r3, #1
   83ea0:	71fb      	strb	r3, [r7, #7]
   83ea2:	79fb      	ldrb	r3, [r7, #7]
   83ea4:	2b01      	cmp	r3, #1
   83ea6:	d9df      	bls.n	83e68 <udd_ep_job_table_reset+0xc>
	}
}
   83ea8:	bf00      	nop
   83eaa:	bf00      	nop
   83eac:	370c      	adds	r7, #12
   83eae:	46bd      	mov	sp, r7
   83eb0:	bc80      	pop	{r7}
   83eb2:	4770      	bx	lr
   83eb4:	20001328 	.word	0x20001328

00083eb8 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   83eb8:	b580      	push	{r7, lr}
   83eba:	b082      	sub	sp, #8
   83ebc:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83ebe:	2300      	movs	r3, #0
   83ec0:	71fb      	strb	r3, [r7, #7]
   83ec2:	e010      	b.n	83ee6 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83ec4:	79fa      	ldrb	r2, [r7, #7]
   83ec6:	4613      	mov	r3, r2
   83ec8:	005b      	lsls	r3, r3, #1
   83eca:	4413      	add	r3, r2
   83ecc:	00db      	lsls	r3, r3, #3
   83ece:	4a0a      	ldr	r2, [pc, #40]	; (83ef8 <udd_ep_job_table_kill+0x40>)
   83ed0:	1898      	adds	r0, r3, r2
   83ed2:	79fb      	ldrb	r3, [r7, #7]
   83ed4:	3301      	adds	r3, #1
   83ed6:	b2db      	uxtb	r3, r3
   83ed8:	461a      	mov	r2, r3
   83eda:	2101      	movs	r1, #1
   83edc:	4b07      	ldr	r3, [pc, #28]	; (83efc <udd_ep_job_table_kill+0x44>)
   83ede:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83ee0:	79fb      	ldrb	r3, [r7, #7]
   83ee2:	3301      	adds	r3, #1
   83ee4:	71fb      	strb	r3, [r7, #7]
   83ee6:	79fb      	ldrb	r3, [r7, #7]
   83ee8:	2b01      	cmp	r3, #1
   83eea:	d9eb      	bls.n	83ec4 <udd_ep_job_table_kill+0xc>
	}
}
   83eec:	bf00      	nop
   83eee:	bf00      	nop
   83ef0:	3708      	adds	r7, #8
   83ef2:	46bd      	mov	sp, r7
   83ef4:	bd80      	pop	{r7, pc}
   83ef6:	bf00      	nop
   83ef8:	20001328 	.word	0x20001328
   83efc:	00083f3d 	.word	0x00083f3d

00083f00 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   83f00:	b580      	push	{r7, lr}
   83f02:	b082      	sub	sp, #8
   83f04:	af00      	add	r7, sp, #0
   83f06:	4603      	mov	r3, r0
   83f08:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   83f0a:	79fb      	ldrb	r3, [r7, #7]
   83f0c:	f003 030f 	and.w	r3, r3, #15
   83f10:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83f12:	79fb      	ldrb	r3, [r7, #7]
   83f14:	1e5a      	subs	r2, r3, #1
   83f16:	4613      	mov	r3, r2
   83f18:	005b      	lsls	r3, r3, #1
   83f1a:	4413      	add	r3, r2
   83f1c:	00db      	lsls	r3, r3, #3
   83f1e:	4a05      	ldr	r2, [pc, #20]	; (83f34 <udd_ep_abort_job+0x34>)
   83f20:	4413      	add	r3, r2
   83f22:	79fa      	ldrb	r2, [r7, #7]
   83f24:	2101      	movs	r1, #1
   83f26:	4618      	mov	r0, r3
   83f28:	4b03      	ldr	r3, [pc, #12]	; (83f38 <udd_ep_abort_job+0x38>)
   83f2a:	4798      	blx	r3
}
   83f2c:	bf00      	nop
   83f2e:	3708      	adds	r7, #8
   83f30:	46bd      	mov	sp, r7
   83f32:	bd80      	pop	{r7, pc}
   83f34:	20001328 	.word	0x20001328
   83f38:	00083f3d 	.word	0x00083f3d

00083f3c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83f3c:	b580      	push	{r7, lr}
   83f3e:	b082      	sub	sp, #8
   83f40:	af00      	add	r7, sp, #0
   83f42:	6078      	str	r0, [r7, #4]
   83f44:	460b      	mov	r3, r1
   83f46:	70fb      	strb	r3, [r7, #3]
   83f48:	4613      	mov	r3, r2
   83f4a:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   83f4c:	687b      	ldr	r3, [r7, #4]
   83f4e:	7d1b      	ldrb	r3, [r3, #20]
   83f50:	f003 0301 	and.w	r3, r3, #1
   83f54:	b2db      	uxtb	r3, r3
   83f56:	2b00      	cmp	r3, #0
   83f58:	d01f      	beq.n	83f9a <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83f5a:	687a      	ldr	r2, [r7, #4]
   83f5c:	7d13      	ldrb	r3, [r2, #20]
   83f5e:	f36f 0300 	bfc	r3, #0, #1
   83f62:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83f64:	687b      	ldr	r3, [r7, #4]
   83f66:	681b      	ldr	r3, [r3, #0]
   83f68:	2b00      	cmp	r3, #0
   83f6a:	d018      	beq.n	83f9e <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83f6c:	4a0e      	ldr	r2, [pc, #56]	; (83fa8 <udd_ep_finish_job+0x6c>)
   83f6e:	78bb      	ldrb	r3, [r7, #2]
   83f70:	3308      	adds	r3, #8
   83f72:	015b      	lsls	r3, r3, #5
   83f74:	4413      	add	r3, r2
   83f76:	681b      	ldr	r3, [r3, #0]
   83f78:	f003 0308 	and.w	r3, r3, #8
   83f7c:	2b00      	cmp	r3, #0
   83f7e:	d003      	beq.n	83f88 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   83f80:	78bb      	ldrb	r3, [r7, #2]
   83f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83f86:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83f88:	687b      	ldr	r3, [r7, #4]
   83f8a:	681b      	ldr	r3, [r3, #0]
   83f8c:	78fa      	ldrb	r2, [r7, #3]
   83f8e:	4610      	mov	r0, r2
   83f90:	687a      	ldr	r2, [r7, #4]
   83f92:	6891      	ldr	r1, [r2, #8]
   83f94:	78ba      	ldrb	r2, [r7, #2]
   83f96:	4798      	blx	r3
   83f98:	e002      	b.n	83fa0 <udd_ep_finish_job+0x64>
		return; // No on-going job
   83f9a:	bf00      	nop
   83f9c:	e000      	b.n	83fa0 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   83f9e:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83fa0:	3708      	adds	r7, #8
   83fa2:	46bd      	mov	sp, r7
   83fa4:	bd80      	pop	{r7, pc}
   83fa6:	bf00      	nop
   83fa8:	400a4000 	.word	0x400a4000

00083fac <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83fac:	b580      	push	{r7, lr}
   83fae:	b086      	sub	sp, #24
   83fb0:	af00      	add	r7, sp, #0
   83fb2:	4603      	mov	r3, r0
   83fb4:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   83fb6:	2300      	movs	r3, #0
   83fb8:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83fba:	79fb      	ldrb	r3, [r7, #7]
   83fbc:	1e5a      	subs	r2, r3, #1
   83fbe:	4613      	mov	r3, r2
   83fc0:	005b      	lsls	r3, r3, #1
   83fc2:	4413      	add	r3, r2
   83fc4:	00db      	lsls	r3, r3, #3
   83fc6:	4a6d      	ldr	r2, [pc, #436]	; (8417c <udd_ep_trans_done+0x1d0>)
   83fc8:	4413      	add	r3, r2
   83fca:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   83fcc:	68fb      	ldr	r3, [r7, #12]
   83fce:	7d1b      	ldrb	r3, [r3, #20]
   83fd0:	f003 0301 	and.w	r3, r3, #1
   83fd4:	b2db      	uxtb	r3, r3
   83fd6:	2b00      	cmp	r3, #0
   83fd8:	f000 80cc 	beq.w	84174 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83fdc:	68fb      	ldr	r3, [r7, #12]
   83fde:	68da      	ldr	r2, [r3, #12]
   83fe0:	68fb      	ldr	r3, [r7, #12]
   83fe2:	689b      	ldr	r3, [r3, #8]
   83fe4:	429a      	cmp	r2, r3
   83fe6:	f000 8099 	beq.w	8411c <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83fea:	68fb      	ldr	r3, [r7, #12]
   83fec:	689a      	ldr	r2, [r3, #8]
   83fee:	68fb      	ldr	r3, [r7, #12]
   83ff0:	68db      	ldr	r3, [r3, #12]
   83ff2:	1ad3      	subs	r3, r2, r3
   83ff4:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83ff6:	693b      	ldr	r3, [r7, #16]
   83ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83ffc:	d905      	bls.n	8400a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   84002:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84004:	2300      	movs	r3, #0
   84006:	617b      	str	r3, [r7, #20]
   84008:	e002      	b.n	84010 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8400a:	693b      	ldr	r3, [r7, #16]
   8400c:	041b      	lsls	r3, r3, #16
   8400e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   84010:	4a5b      	ldr	r2, [pc, #364]	; (84180 <udd_ep_trans_done+0x1d4>)
   84012:	79fb      	ldrb	r3, [r7, #7]
   84014:	3308      	adds	r3, #8
   84016:	015b      	lsls	r3, r3, #5
   84018:	4413      	add	r3, r2
   8401a:	681b      	ldr	r3, [r3, #0]
   8401c:	f003 0308 	and.w	r3, r3, #8
   84020:	2b00      	cmp	r3, #0
   84022:	d01d      	beq.n	84060 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84024:	4a56      	ldr	r2, [pc, #344]	; (84180 <udd_ep_trans_done+0x1d4>)
   84026:	79fb      	ldrb	r3, [r7, #7]
   84028:	3308      	adds	r3, #8
   8402a:	015b      	lsls	r3, r3, #5
   8402c:	4413      	add	r3, r2
   8402e:	681b      	ldr	r3, [r3, #0]
   84030:	f003 0307 	and.w	r3, r3, #7
   84034:	2208      	movs	r2, #8
   84036:	fa02 f303 	lsl.w	r3, r2, r3
   8403a:	461a      	mov	r2, r3
   8403c:	693b      	ldr	r3, [r7, #16]
   8403e:	fbb3 f1f2 	udiv	r1, r3, r2
   84042:	fb02 f201 	mul.w	r2, r2, r1
   84046:	1a9b      	subs	r3, r3, r2
   84048:	2b00      	cmp	r3, #0
   8404a:	d027      	beq.n	8409c <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8404c:	697b      	ldr	r3, [r7, #20]
   8404e:	f043 0308 	orr.w	r3, r3, #8
   84052:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84054:	68fa      	ldr	r2, [r7, #12]
   84056:	7d13      	ldrb	r3, [r2, #20]
   84058:	f36f 0341 	bfc	r3, #1, #1
   8405c:	7513      	strb	r3, [r2, #20]
   8405e:	e01d      	b.n	8409c <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84060:	4a47      	ldr	r2, [pc, #284]	; (84180 <udd_ep_trans_done+0x1d4>)
   84062:	79fb      	ldrb	r3, [r7, #7]
   84064:	3308      	adds	r3, #8
   84066:	015b      	lsls	r3, r3, #5
   84068:	4413      	add	r3, r2
   8406a:	681b      	ldr	r3, [r3, #0]
   8406c:	091b      	lsrs	r3, r3, #4
   8406e:	f003 0303 	and.w	r3, r3, #3
   84072:	2b01      	cmp	r3, #1
   84074:	d10e      	bne.n	84094 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84076:	4a42      	ldr	r2, [pc, #264]	; (84180 <udd_ep_trans_done+0x1d4>)
   84078:	79fb      	ldrb	r3, [r7, #7]
   8407a:	3308      	adds	r3, #8
   8407c:	015b      	lsls	r3, r3, #5
   8407e:	4413      	add	r3, r2
   84080:	681b      	ldr	r3, [r3, #0]
   84082:	f003 0307 	and.w	r3, r3, #7
   84086:	2208      	movs	r2, #8
   84088:	fa02 f303 	lsl.w	r3, r2, r3
   8408c:	461a      	mov	r2, r3
   8408e:	693b      	ldr	r3, [r7, #16]
   84090:	4293      	cmp	r3, r2
   84092:	d803      	bhi.n	8409c <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   84094:	697b      	ldr	r3, [r7, #20]
   84096:	f043 0314 	orr.w	r3, r3, #20
   8409a:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8409c:	68fb      	ldr	r3, [r7, #12]
   8409e:	685a      	ldr	r2, [r3, #4]
   840a0:	68fb      	ldr	r3, [r7, #12]
   840a2:	68db      	ldr	r3, [r3, #12]
   840a4:	18d1      	adds	r1, r2, r3
   840a6:	79fb      	ldrb	r3, [r7, #7]
   840a8:	011a      	lsls	r2, r3, #4
   840aa:	4b36      	ldr	r3, [pc, #216]	; (84184 <udd_ep_trans_done+0x1d8>)
   840ac:	4413      	add	r3, r2
   840ae:	460a      	mov	r2, r1
   840b0:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   840b2:	697b      	ldr	r3, [r7, #20]
   840b4:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   840b8:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   840ba:	4b33      	ldr	r3, [pc, #204]	; (84188 <udd_ep_trans_done+0x1dc>)
   840bc:	4798      	blx	r3
   840be:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   840c0:	79fb      	ldrb	r3, [r7, #7]
   840c2:	011a      	lsls	r2, r3, #4
   840c4:	4b2f      	ldr	r3, [pc, #188]	; (84184 <udd_ep_trans_done+0x1d8>)
   840c6:	4413      	add	r3, r2
   840c8:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   840ca:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   840ce:	2b00      	cmp	r3, #0
   840d0:	d11d      	bne.n	8410e <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   840d2:	79fb      	ldrb	r3, [r7, #7]
   840d4:	011a      	lsls	r2, r3, #4
   840d6:	4b2b      	ldr	r3, [pc, #172]	; (84184 <udd_ep_trans_done+0x1d8>)
   840d8:	4413      	add	r3, r2
   840da:	697a      	ldr	r2, [r7, #20]
   840dc:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   840de:	68fb      	ldr	r3, [r7, #12]
   840e0:	68da      	ldr	r2, [r3, #12]
   840e2:	693b      	ldr	r3, [r7, #16]
   840e4:	441a      	add	r2, r3
   840e6:	68fb      	ldr	r3, [r7, #12]
   840e8:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   840ea:	68fb      	ldr	r3, [r7, #12]
   840ec:	693a      	ldr	r2, [r7, #16]
   840ee:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   840f0:	4b23      	ldr	r3, [pc, #140]	; (84180 <udd_ep_trans_done+0x1d4>)
   840f2:	691a      	ldr	r2, [r3, #16]
   840f4:	79fb      	ldrb	r3, [r7, #7]
   840f6:	3b01      	subs	r3, #1
   840f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   840fc:	fa01 f303 	lsl.w	r3, r1, r3
   84100:	491f      	ldr	r1, [pc, #124]	; (84180 <udd_ep_trans_done+0x1d4>)
   84102:	4313      	orrs	r3, r2
   84104:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   84106:	68b8      	ldr	r0, [r7, #8]
   84108:	4b20      	ldr	r3, [pc, #128]	; (8418c <udd_ep_trans_done+0x1e0>)
   8410a:	4798      	blx	r3
			return;
   8410c:	e033      	b.n	84176 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   8410e:	68b8      	ldr	r0, [r7, #8]
   84110:	4b1e      	ldr	r3, [pc, #120]	; (8418c <udd_ep_trans_done+0x1e0>)
   84112:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84114:	68fb      	ldr	r3, [r7, #12]
   84116:	68da      	ldr	r2, [r3, #12]
   84118:	68fb      	ldr	r3, [r7, #12]
   8411a:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8411c:	4a18      	ldr	r2, [pc, #96]	; (84180 <udd_ep_trans_done+0x1d4>)
   8411e:	79fb      	ldrb	r3, [r7, #7]
   84120:	3308      	adds	r3, #8
   84122:	015b      	lsls	r3, r3, #5
   84124:	4413      	add	r3, r2
   84126:	681b      	ldr	r3, [r3, #0]
   84128:	f003 0308 	and.w	r3, r3, #8
   8412c:	2b00      	cmp	r3, #0
   8412e:	d01a      	beq.n	84166 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   84130:	68fb      	ldr	r3, [r7, #12]
   84132:	7d1b      	ldrb	r3, [r3, #20]
   84134:	f003 0302 	and.w	r3, r3, #2
   84138:	b2db      	uxtb	r3, r3
   8413a:	2b00      	cmp	r3, #0
   8413c:	d013      	beq.n	84166 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   8413e:	4a10      	ldr	r2, [pc, #64]	; (84180 <udd_ep_trans_done+0x1d4>)
   84140:	79fb      	ldrb	r3, [r7, #7]
   84142:	3308      	adds	r3, #8
   84144:	015b      	lsls	r3, r3, #5
   84146:	4413      	add	r3, r2
   84148:	3304      	adds	r3, #4
   8414a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8414e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   84150:	4b0b      	ldr	r3, [pc, #44]	; (84180 <udd_ep_trans_done+0x1d4>)
   84152:	691a      	ldr	r2, [r3, #16]
   84154:	79fb      	ldrb	r3, [r7, #7]
   84156:	f44f 7180 	mov.w	r1, #256	; 0x100
   8415a:	fa01 f303 	lsl.w	r3, r1, r3
   8415e:	4908      	ldr	r1, [pc, #32]	; (84180 <udd_ep_trans_done+0x1d4>)
   84160:	4313      	orrs	r3, r2
   84162:	610b      	str	r3, [r1, #16]
			return;
   84164:	e007      	b.n	84176 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   84166:	79fb      	ldrb	r3, [r7, #7]
   84168:	461a      	mov	r2, r3
   8416a:	2100      	movs	r1, #0
   8416c:	68f8      	ldr	r0, [r7, #12]
   8416e:	4b08      	ldr	r3, [pc, #32]	; (84190 <udd_ep_trans_done+0x1e4>)
   84170:	4798      	blx	r3
   84172:	e000      	b.n	84176 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   84174:	bf00      	nop
}
   84176:	3718      	adds	r7, #24
   84178:	46bd      	mov	sp, r7
   8417a:	bd80      	pop	{r7, pc}
   8417c:	20001328 	.word	0x20001328
   84180:	400a4000 	.word	0x400a4000
   84184:	400a4300 	.word	0x400a4300
   84188:	0008278d 	.word	0x0008278d
   8418c:	000827e9 	.word	0x000827e9
   84190:	00083f3d 	.word	0x00083f3d

00084194 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   84194:	b580      	push	{r7, lr}
   84196:	b084      	sub	sp, #16
   84198:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8419a:	2301      	movs	r3, #1
   8419c:	73fb      	strb	r3, [r7, #15]
   8419e:	e0e0      	b.n	84362 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   841a0:	7bfb      	ldrb	r3, [r7, #15]
   841a2:	1e5a      	subs	r2, r3, #1
   841a4:	4613      	mov	r3, r2
   841a6:	005b      	lsls	r3, r3, #1
   841a8:	4413      	add	r3, r2
   841aa:	00db      	lsls	r3, r3, #3
   841ac:	4a71      	ldr	r2, [pc, #452]	; (84374 <udd_ep_interrupt+0x1e0>)
   841ae:	4413      	add	r3, r2
   841b0:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   841b2:	4b71      	ldr	r3, [pc, #452]	; (84378 <udd_ep_interrupt+0x1e4>)
   841b4:	691a      	ldr	r2, [r3, #16]
   841b6:	7bfb      	ldrb	r3, [r7, #15]
   841b8:	3b01      	subs	r3, #1
   841ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   841be:	fa01 f303 	lsl.w	r3, r1, r3
   841c2:	4013      	ands	r3, r2
   841c4:	2b00      	cmp	r3, #0
   841c6:	d03c      	beq.n	84242 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   841c8:	4b6b      	ldr	r3, [pc, #428]	; (84378 <udd_ep_interrupt+0x1e4>)
   841ca:	695a      	ldr	r2, [r3, #20]
   841cc:	7bfb      	ldrb	r3, [r7, #15]
   841ce:	3b01      	subs	r3, #1
   841d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   841d4:	fa01 f303 	lsl.w	r3, r1, r3
   841d8:	4013      	ands	r3, r2
   841da:	2b00      	cmp	r3, #0
   841dc:	d031      	beq.n	84242 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   841de:	7bfb      	ldrb	r3, [r7, #15]
   841e0:	011a      	lsls	r2, r3, #4
   841e2:	4b66      	ldr	r3, [pc, #408]	; (8437c <udd_ep_interrupt+0x1e8>)
   841e4:	4413      	add	r3, r2
   841e6:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   841e8:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   841ec:	2b00      	cmp	r3, #0
   841ee:	d001      	beq.n	841f4 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   841f0:	2301      	movs	r3, #1
   841f2:	e0bb      	b.n	8436c <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   841f4:	4b60      	ldr	r3, [pc, #384]	; (84378 <udd_ep_interrupt+0x1e4>)
   841f6:	691a      	ldr	r2, [r3, #16]
   841f8:	7bfb      	ldrb	r3, [r7, #15]
   841fa:	3b01      	subs	r3, #1
   841fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84200:	fa01 f303 	lsl.w	r3, r1, r3
   84204:	43db      	mvns	r3, r3
   84206:	495c      	ldr	r1, [pc, #368]	; (84378 <udd_ep_interrupt+0x1e4>)
   84208:	4013      	ands	r3, r2
   8420a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8420c:	7bfb      	ldrb	r3, [r7, #15]
   8420e:	011a      	lsls	r2, r3, #4
   84210:	4b5a      	ldr	r3, [pc, #360]	; (8437c <udd_ep_interrupt+0x1e8>)
   84212:	4413      	add	r3, r2
   84214:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   84216:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84218:	b29b      	uxth	r3, r3
   8421a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   8421c:	687b      	ldr	r3, [r7, #4]
   8421e:	2b00      	cmp	r3, #0
   84220:	d009      	beq.n	84236 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   84222:	68bb      	ldr	r3, [r7, #8]
   84224:	68da      	ldr	r2, [r3, #12]
   84226:	687b      	ldr	r3, [r7, #4]
   84228:	1ad2      	subs	r2, r2, r3
   8422a:	68bb      	ldr	r3, [r7, #8]
   8422c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8422e:	68bb      	ldr	r3, [r7, #8]
   84230:	68da      	ldr	r2, [r3, #12]
   84232:	68bb      	ldr	r3, [r7, #8]
   84234:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   84236:	7bfb      	ldrb	r3, [r7, #15]
   84238:	4618      	mov	r0, r3
   8423a:	4b51      	ldr	r3, [pc, #324]	; (84380 <udd_ep_interrupt+0x1ec>)
   8423c:	4798      	blx	r3
			return true;
   8423e:	2301      	movs	r3, #1
   84240:	e094      	b.n	8436c <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84242:	4b4d      	ldr	r3, [pc, #308]	; (84378 <udd_ep_interrupt+0x1e4>)
   84244:	691a      	ldr	r2, [r3, #16]
   84246:	7bfb      	ldrb	r3, [r7, #15]
   84248:	f44f 7180 	mov.w	r1, #256	; 0x100
   8424c:	fa01 f303 	lsl.w	r3, r1, r3
   84250:	4013      	ands	r3, r2
   84252:	2b00      	cmp	r3, #0
   84254:	f000 8082 	beq.w	8435c <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84258:	4a47      	ldr	r2, [pc, #284]	; (84378 <udd_ep_interrupt+0x1e4>)
   8425a:	7bfb      	ldrb	r3, [r7, #15]
   8425c:	015b      	lsls	r3, r3, #5
   8425e:	4413      	add	r3, r2
   84260:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84264:	681b      	ldr	r3, [r3, #0]
   84266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8426a:	2b00      	cmp	r3, #0
   8426c:	d024      	beq.n	842b8 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8426e:	4a42      	ldr	r2, [pc, #264]	; (84378 <udd_ep_interrupt+0x1e4>)
   84270:	7bfb      	ldrb	r3, [r7, #15]
   84272:	015b      	lsls	r3, r3, #5
   84274:	4413      	add	r3, r2
   84276:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8427a:	681b      	ldr	r3, [r3, #0]
   8427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   84280:	2b00      	cmp	r3, #0
   84282:	d119      	bne.n	842b8 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   84284:	4a3c      	ldr	r2, [pc, #240]	; (84378 <udd_ep_interrupt+0x1e4>)
   84286:	7bfb      	ldrb	r3, [r7, #15]
   84288:	015b      	lsls	r3, r3, #5
   8428a:	4413      	add	r3, r2
   8428c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84290:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84294:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84296:	4a38      	ldr	r2, [pc, #224]	; (84378 <udd_ep_interrupt+0x1e4>)
   84298:	7bfb      	ldrb	r3, [r7, #15]
   8429a:	015b      	lsls	r3, r3, #5
   8429c:	4413      	add	r3, r2
   8429e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   842a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   842a6:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   842a8:	7bfb      	ldrb	r3, [r7, #15]
   842aa:	461a      	mov	r2, r3
   842ac:	2100      	movs	r1, #0
   842ae:	68b8      	ldr	r0, [r7, #8]
   842b0:	4b34      	ldr	r3, [pc, #208]	; (84384 <udd_ep_interrupt+0x1f0>)
   842b2:	4798      	blx	r3
				return true;
   842b4:	2301      	movs	r3, #1
   842b6:	e059      	b.n	8436c <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   842b8:	4a2f      	ldr	r2, [pc, #188]	; (84378 <udd_ep_interrupt+0x1e4>)
   842ba:	7bfb      	ldrb	r3, [r7, #15]
   842bc:	015b      	lsls	r3, r3, #5
   842be:	4413      	add	r3, r2
   842c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   842c4:	681b      	ldr	r3, [r3, #0]
   842c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   842ca:	2b00      	cmp	r3, #0
   842cc:	d046      	beq.n	8435c <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   842ce:	4a2a      	ldr	r2, [pc, #168]	; (84378 <udd_ep_interrupt+0x1e4>)
   842d0:	7bfb      	ldrb	r3, [r7, #15]
   842d2:	015b      	lsls	r3, r3, #5
   842d4:	4413      	add	r3, r2
   842d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   842da:	681b      	ldr	r3, [r3, #0]
   842dc:	0c9b      	lsrs	r3, r3, #18
   842de:	f003 0303 	and.w	r3, r3, #3
   842e2:	2b00      	cmp	r3, #0
   842e4:	d13a      	bne.n	8435c <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   842e6:	4a24      	ldr	r2, [pc, #144]	; (84378 <udd_ep_interrupt+0x1e4>)
   842e8:	7bfb      	ldrb	r3, [r7, #15]
   842ea:	015b      	lsls	r3, r3, #5
   842ec:	4413      	add	r3, r2
   842ee:	f503 7384 	add.w	r3, r3, #264	; 0x108
   842f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   842f6:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   842f8:	4b1f      	ldr	r3, [pc, #124]	; (84378 <udd_ep_interrupt+0x1e4>)
   842fa:	691a      	ldr	r2, [r3, #16]
   842fc:	7bfb      	ldrb	r3, [r7, #15]
   842fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   84302:	fa01 f303 	lsl.w	r3, r1, r3
   84306:	43db      	mvns	r3, r3
   84308:	491b      	ldr	r1, [pc, #108]	; (84378 <udd_ep_interrupt+0x1e4>)
   8430a:	4013      	ands	r3, r2
   8430c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8430e:	68ba      	ldr	r2, [r7, #8]
   84310:	7d13      	ldrb	r3, [r2, #20]
   84312:	f36f 0382 	bfc	r3, #2, #1
   84316:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84318:	4a17      	ldr	r2, [pc, #92]	; (84378 <udd_ep_interrupt+0x1e4>)
   8431a:	7bfb      	ldrb	r3, [r7, #15]
   8431c:	015b      	lsls	r3, r3, #5
   8431e:	4413      	add	r3, r2
   84320:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84324:	681a      	ldr	r2, [r3, #0]
   84326:	4914      	ldr	r1, [pc, #80]	; (84378 <udd_ep_interrupt+0x1e4>)
   84328:	7bfb      	ldrb	r3, [r7, #15]
   8432a:	f022 0202 	bic.w	r2, r2, #2
   8432e:	015b      	lsls	r3, r3, #5
   84330:	440b      	add	r3, r1
   84332:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84336:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   84338:	4a0f      	ldr	r2, [pc, #60]	; (84378 <udd_ep_interrupt+0x1e4>)
   8433a:	7bfb      	ldrb	r3, [r7, #15]
   8433c:	015b      	lsls	r3, r3, #5
   8433e:	4413      	add	r3, r2
   84340:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84344:	2220      	movs	r2, #32
   84346:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   84348:	4a0b      	ldr	r2, [pc, #44]	; (84378 <udd_ep_interrupt+0x1e4>)
   8434a:	7bfb      	ldrb	r3, [r7, #15]
   8434c:	015b      	lsls	r3, r3, #5
   8434e:	4413      	add	r3, r2
   84350:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84354:	2240      	movs	r2, #64	; 0x40
   84356:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   84358:	2301      	movs	r3, #1
   8435a:	e007      	b.n	8436c <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8435c:	7bfb      	ldrb	r3, [r7, #15]
   8435e:	3301      	adds	r3, #1
   84360:	73fb      	strb	r3, [r7, #15]
   84362:	7bfb      	ldrb	r3, [r7, #15]
   84364:	2b02      	cmp	r3, #2
   84366:	f67f af1b 	bls.w	841a0 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   8436a:	2300      	movs	r3, #0
}
   8436c:	4618      	mov	r0, r3
   8436e:	3710      	adds	r7, #16
   84370:	46bd      	mov	sp, r7
   84372:	bd80      	pop	{r7, pc}
   84374:	20001328 	.word	0x20001328
   84378:	400a4000 	.word	0x400a4000
   8437c:	400a4300 	.word	0x400a4300
   84380:	00083fad 	.word	0x00083fad
   84384:	00083f3d 	.word	0x00083f3d

00084388 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   84388:	b580      	push	{r7, lr}
   8438a:	b086      	sub	sp, #24
   8438c:	af00      	add	r7, sp, #0
   8438e:	60f8      	str	r0, [r7, #12]
   84390:	60b9      	str	r1, [r7, #8]
   84392:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   84394:	2300      	movs	r3, #0
   84396:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   84398:	68fb      	ldr	r3, [r7, #12]
   8439a:	2b01      	cmp	r3, #1
   8439c:	d01e      	beq.n	843dc <_write+0x54>
   8439e:	68fb      	ldr	r3, [r7, #12]
   843a0:	2b02      	cmp	r3, #2
   843a2:	d01b      	beq.n	843dc <_write+0x54>
   843a4:	68fb      	ldr	r3, [r7, #12]
   843a6:	2b03      	cmp	r3, #3
   843a8:	d018      	beq.n	843dc <_write+0x54>
		return -1;
   843aa:	f04f 33ff 	mov.w	r3, #4294967295
   843ae:	e019      	b.n	843e4 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   843b0:	4b0e      	ldr	r3, [pc, #56]	; (843ec <_write+0x64>)
   843b2:	681a      	ldr	r2, [r3, #0]
   843b4:	4b0e      	ldr	r3, [pc, #56]	; (843f0 <_write+0x68>)
   843b6:	6818      	ldr	r0, [r3, #0]
   843b8:	68bb      	ldr	r3, [r7, #8]
   843ba:	1c59      	adds	r1, r3, #1
   843bc:	60b9      	str	r1, [r7, #8]
   843be:	781b      	ldrb	r3, [r3, #0]
   843c0:	4619      	mov	r1, r3
   843c2:	4790      	blx	r2
   843c4:	4603      	mov	r3, r0
   843c6:	2b00      	cmp	r3, #0
   843c8:	da02      	bge.n	843d0 <_write+0x48>
			return -1;
   843ca:	f04f 33ff 	mov.w	r3, #4294967295
   843ce:	e009      	b.n	843e4 <_write+0x5c>
		}
		++nChars;
   843d0:	697b      	ldr	r3, [r7, #20]
   843d2:	3301      	adds	r3, #1
   843d4:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   843d6:	687b      	ldr	r3, [r7, #4]
   843d8:	3b01      	subs	r3, #1
   843da:	607b      	str	r3, [r7, #4]
   843dc:	687b      	ldr	r3, [r7, #4]
   843de:	2b00      	cmp	r3, #0
   843e0:	d1e6      	bne.n	843b0 <_write+0x28>
	}
	return nChars;
   843e2:	697b      	ldr	r3, [r7, #20]
}
   843e4:	4618      	mov	r0, r3
   843e6:	3718      	adds	r7, #24
   843e8:	46bd      	mov	sp, r7
   843ea:	bd80      	pop	{r7, pc}
   843ec:	20001828 	.word	0x20001828
   843f0:	2000182c 	.word	0x2000182c

000843f4 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   843f4:	b580      	push	{r7, lr}
   843f6:	b084      	sub	sp, #16
   843f8:	af00      	add	r7, sp, #0
   843fa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   843fc:	2300      	movs	r3, #0
   843fe:	60fb      	str	r3, [r7, #12]
   84400:	e017      	b.n	84432 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84402:	4a10      	ldr	r2, [pc, #64]	; (84444 <LED_Off+0x50>)
   84404:	68fb      	ldr	r3, [r7, #12]
   84406:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   8440a:	687a      	ldr	r2, [r7, #4]
   8440c:	429a      	cmp	r2, r3
   8440e:	d10d      	bne.n	8442c <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84410:	4a0c      	ldr	r2, [pc, #48]	; (84444 <LED_Off+0x50>)
   84412:	68fb      	ldr	r3, [r7, #12]
   84414:	00db      	lsls	r3, r3, #3
   84416:	4413      	add	r3, r2
   84418:	685b      	ldr	r3, [r3, #4]
   8441a:	2b01      	cmp	r3, #1
   8441c:	d103      	bne.n	84426 <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   8441e:	6878      	ldr	r0, [r7, #4]
   84420:	4b09      	ldr	r3, [pc, #36]	; (84448 <LED_Off+0x54>)
   84422:	4798      	blx	r3
   84424:	e002      	b.n	8442c <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   84426:	6878      	ldr	r0, [r7, #4]
   84428:	4b08      	ldr	r3, [pc, #32]	; (8444c <LED_Off+0x58>)
   8442a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8442c:	68fb      	ldr	r3, [r7, #12]
   8442e:	3301      	adds	r3, #1
   84430:	60fb      	str	r3, [r7, #12]
   84432:	68fb      	ldr	r3, [r7, #12]
   84434:	2b01      	cmp	r3, #1
   84436:	d9e4      	bls.n	84402 <LED_Off+0xe>
			}
		}
	}
}
   84438:	bf00      	nop
   8443a:	bf00      	nop
   8443c:	3710      	adds	r7, #16
   8443e:	46bd      	mov	sp, r7
   84440:	bd80      	pop	{r7, pc}
   84442:	bf00      	nop
   84444:	0008d9c8 	.word	0x0008d9c8
   84448:	00085239 	.word	0x00085239
   8444c:	00085209 	.word	0x00085209

00084450 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84450:	b580      	push	{r7, lr}
   84452:	b084      	sub	sp, #16
   84454:	af00      	add	r7, sp, #0
   84456:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84458:	2300      	movs	r3, #0
   8445a:	60fb      	str	r3, [r7, #12]
   8445c:	e017      	b.n	8448e <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8445e:	4a10      	ldr	r2, [pc, #64]	; (844a0 <LED_On+0x50>)
   84460:	68fb      	ldr	r3, [r7, #12]
   84462:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   84466:	687a      	ldr	r2, [r7, #4]
   84468:	429a      	cmp	r2, r3
   8446a:	d10d      	bne.n	84488 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8446c:	4a0c      	ldr	r2, [pc, #48]	; (844a0 <LED_On+0x50>)
   8446e:	68fb      	ldr	r3, [r7, #12]
   84470:	00db      	lsls	r3, r3, #3
   84472:	4413      	add	r3, r2
   84474:	685b      	ldr	r3, [r3, #4]
   84476:	2b01      	cmp	r3, #1
   84478:	d103      	bne.n	84482 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   8447a:	6878      	ldr	r0, [r7, #4]
   8447c:	4b09      	ldr	r3, [pc, #36]	; (844a4 <LED_On+0x54>)
   8447e:	4798      	blx	r3
   84480:	e002      	b.n	84488 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   84482:	6878      	ldr	r0, [r7, #4]
   84484:	4b08      	ldr	r3, [pc, #32]	; (844a8 <LED_On+0x58>)
   84486:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84488:	68fb      	ldr	r3, [r7, #12]
   8448a:	3301      	adds	r3, #1
   8448c:	60fb      	str	r3, [r7, #12]
   8448e:	68fb      	ldr	r3, [r7, #12]
   84490:	2b01      	cmp	r3, #1
   84492:	d9e4      	bls.n	8445e <LED_On+0xe>
			}
		}
	}
}
   84494:	bf00      	nop
   84496:	bf00      	nop
   84498:	3710      	adds	r7, #16
   8449a:	46bd      	mov	sp, r7
   8449c:	bd80      	pop	{r7, pc}
   8449e:	bf00      	nop
   844a0:	0008d9c8 	.word	0x0008d9c8
   844a4:	00085209 	.word	0x00085209
   844a8:	00085239 	.word	0x00085239

000844ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   844ac:	b580      	push	{r7, lr}
   844ae:	b082      	sub	sp, #8
   844b0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   844b2:	4b1e      	ldr	r3, [pc, #120]	; (8452c <Reset_Handler+0x80>)
   844b4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   844b6:	4b1e      	ldr	r3, [pc, #120]	; (84530 <Reset_Handler+0x84>)
   844b8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   844ba:	687a      	ldr	r2, [r7, #4]
   844bc:	683b      	ldr	r3, [r7, #0]
   844be:	429a      	cmp	r2, r3
   844c0:	d00c      	beq.n	844dc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   844c2:	e007      	b.n	844d4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   844c4:	687a      	ldr	r2, [r7, #4]
   844c6:	1d13      	adds	r3, r2, #4
   844c8:	607b      	str	r3, [r7, #4]
   844ca:	683b      	ldr	r3, [r7, #0]
   844cc:	1d19      	adds	r1, r3, #4
   844ce:	6039      	str	r1, [r7, #0]
   844d0:	6812      	ldr	r2, [r2, #0]
   844d2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   844d4:	683b      	ldr	r3, [r7, #0]
   844d6:	4a17      	ldr	r2, [pc, #92]	; (84534 <Reset_Handler+0x88>)
   844d8:	4293      	cmp	r3, r2
   844da:	d3f3      	bcc.n	844c4 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   844dc:	4b16      	ldr	r3, [pc, #88]	; (84538 <Reset_Handler+0x8c>)
   844de:	603b      	str	r3, [r7, #0]
   844e0:	e004      	b.n	844ec <Reset_Handler+0x40>
		*pDest++ = 0;
   844e2:	683b      	ldr	r3, [r7, #0]
   844e4:	1d1a      	adds	r2, r3, #4
   844e6:	603a      	str	r2, [r7, #0]
   844e8:	2200      	movs	r2, #0
   844ea:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   844ec:	683b      	ldr	r3, [r7, #0]
   844ee:	4a13      	ldr	r2, [pc, #76]	; (8453c <Reset_Handler+0x90>)
   844f0:	4293      	cmp	r3, r2
   844f2:	d3f6      	bcc.n	844e2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   844f4:	4b12      	ldr	r3, [pc, #72]	; (84540 <Reset_Handler+0x94>)
   844f6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   844f8:	687b      	ldr	r3, [r7, #4]
   844fa:	4a12      	ldr	r2, [pc, #72]	; (84544 <Reset_Handler+0x98>)
   844fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84504:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   84506:	687b      	ldr	r3, [r7, #4]
   84508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8450c:	d309      	bcc.n	84522 <Reset_Handler+0x76>
   8450e:	687b      	ldr	r3, [r7, #4]
   84510:	4a0d      	ldr	r2, [pc, #52]	; (84548 <Reset_Handler+0x9c>)
   84512:	4293      	cmp	r3, r2
   84514:	d205      	bcs.n	84522 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84516:	4b0b      	ldr	r3, [pc, #44]	; (84544 <Reset_Handler+0x98>)
   84518:	689b      	ldr	r3, [r3, #8]
   8451a:	4a0a      	ldr	r2, [pc, #40]	; (84544 <Reset_Handler+0x98>)
   8451c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84520:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84522:	4b0a      	ldr	r3, [pc, #40]	; (8454c <Reset_Handler+0xa0>)
   84524:	4798      	blx	r3

	/* Branch to main function */
	main();
   84526:	4b0a      	ldr	r3, [pc, #40]	; (84550 <Reset_Handler+0xa4>)
   84528:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8452a:	e7fe      	b.n	8452a <Reset_Handler+0x7e>
   8452c:	0008de3c 	.word	0x0008de3c
   84530:	20000000 	.word	0x20000000
   84534:	20000de8 	.word	0x20000de8
   84538:	20000de8 	.word	0x20000de8
   8453c:	20001864 	.word	0x20001864
   84540:	00080000 	.word	0x00080000
   84544:	e000ed00 	.word	0xe000ed00
   84548:	20004000 	.word	0x20004000
   8454c:	00086fdd 	.word	0x00086fdd
   84550:	00080a7d 	.word	0x00080a7d

00084554 <osc_enable>:
{
   84554:	b580      	push	{r7, lr}
   84556:	b082      	sub	sp, #8
   84558:	af00      	add	r7, sp, #0
   8455a:	6078      	str	r0, [r7, #4]
   8455c:	687b      	ldr	r3, [r7, #4]
   8455e:	2b07      	cmp	r3, #7
   84560:	d82e      	bhi.n	845c0 <osc_enable+0x6c>
   84562:	a201      	add	r2, pc, #4	; (adr r2, 84568 <osc_enable+0x14>)
   84564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84568:	000845bf 	.word	0x000845bf
   8456c:	00084589 	.word	0x00084589
   84570:	00084591 	.word	0x00084591
   84574:	00084599 	.word	0x00084599
   84578:	000845a1 	.word	0x000845a1
   8457c:	000845a9 	.word	0x000845a9
   84580:	000845b1 	.word	0x000845b1
   84584:	000845b9 	.word	0x000845b9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   84588:	2000      	movs	r0, #0
   8458a:	4b0f      	ldr	r3, [pc, #60]	; (845c8 <osc_enable+0x74>)
   8458c:	4798      	blx	r3
		break;
   8458e:	e017      	b.n	845c0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   84590:	2001      	movs	r0, #1
   84592:	4b0d      	ldr	r3, [pc, #52]	; (845c8 <osc_enable+0x74>)
   84594:	4798      	blx	r3
		break;
   84596:	e013      	b.n	845c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   84598:	2000      	movs	r0, #0
   8459a:	4b0c      	ldr	r3, [pc, #48]	; (845cc <osc_enable+0x78>)
   8459c:	4798      	blx	r3
		break;
   8459e:	e00f      	b.n	845c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   845a0:	2010      	movs	r0, #16
   845a2:	4b0a      	ldr	r3, [pc, #40]	; (845cc <osc_enable+0x78>)
   845a4:	4798      	blx	r3
		break;
   845a6:	e00b      	b.n	845c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   845a8:	2020      	movs	r0, #32
   845aa:	4b08      	ldr	r3, [pc, #32]	; (845cc <osc_enable+0x78>)
   845ac:	4798      	blx	r3
		break;
   845ae:	e007      	b.n	845c0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   845b0:	203e      	movs	r0, #62	; 0x3e
   845b2:	4b07      	ldr	r3, [pc, #28]	; (845d0 <osc_enable+0x7c>)
   845b4:	4798      	blx	r3
		break;
   845b6:	e003      	b.n	845c0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   845b8:	4b06      	ldr	r3, [pc, #24]	; (845d4 <osc_enable+0x80>)
   845ba:	4798      	blx	r3
		break;
   845bc:	e000      	b.n	845c0 <osc_enable+0x6c>
		break;
   845be:	bf00      	nop
}
   845c0:	bf00      	nop
   845c2:	3708      	adds	r7, #8
   845c4:	46bd      	mov	sp, r7
   845c6:	bd80      	pop	{r7, pc}
   845c8:	00084a29 	.word	0x00084a29
   845cc:	00084a95 	.word	0x00084a95
   845d0:	00084b09 	.word	0x00084b09
   845d4:	00084b59 	.word	0x00084b59

000845d8 <osc_is_ready>:
{
   845d8:	b580      	push	{r7, lr}
   845da:	b082      	sub	sp, #8
   845dc:	af00      	add	r7, sp, #0
   845de:	6078      	str	r0, [r7, #4]
   845e0:	687b      	ldr	r3, [r7, #4]
   845e2:	2b07      	cmp	r3, #7
   845e4:	d82f      	bhi.n	84646 <osc_is_ready+0x6e>
   845e6:	a201      	add	r2, pc, #4	; (adr r2, 845ec <osc_is_ready+0x14>)
   845e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   845ec:	0008460d 	.word	0x0008460d
   845f0:	00084611 	.word	0x00084611
   845f4:	00084611 	.word	0x00084611
   845f8:	00084623 	.word	0x00084623
   845fc:	00084623 	.word	0x00084623
   84600:	00084623 	.word	0x00084623
   84604:	00084635 	.word	0x00084635
   84608:	00084635 	.word	0x00084635
		return 1;
   8460c:	2301      	movs	r3, #1
   8460e:	e01b      	b.n	84648 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   84610:	4b0f      	ldr	r3, [pc, #60]	; (84650 <osc_is_ready+0x78>)
   84612:	4798      	blx	r3
   84614:	4603      	mov	r3, r0
   84616:	2b00      	cmp	r3, #0
   84618:	bf14      	ite	ne
   8461a:	2301      	movne	r3, #1
   8461c:	2300      	moveq	r3, #0
   8461e:	b2db      	uxtb	r3, r3
   84620:	e012      	b.n	84648 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   84622:	4b0c      	ldr	r3, [pc, #48]	; (84654 <osc_is_ready+0x7c>)
   84624:	4798      	blx	r3
   84626:	4603      	mov	r3, r0
   84628:	2b00      	cmp	r3, #0
   8462a:	bf14      	ite	ne
   8462c:	2301      	movne	r3, #1
   8462e:	2300      	moveq	r3, #0
   84630:	b2db      	uxtb	r3, r3
   84632:	e009      	b.n	84648 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   84634:	4b08      	ldr	r3, [pc, #32]	; (84658 <osc_is_ready+0x80>)
   84636:	4798      	blx	r3
   84638:	4603      	mov	r3, r0
   8463a:	2b00      	cmp	r3, #0
   8463c:	bf14      	ite	ne
   8463e:	2301      	movne	r3, #1
   84640:	2300      	moveq	r3, #0
   84642:	b2db      	uxtb	r3, r3
   84644:	e000      	b.n	84648 <osc_is_ready+0x70>
	return 0;
   84646:	2300      	movs	r3, #0
}
   84648:	4618      	mov	r0, r3
   8464a:	3708      	adds	r7, #8
   8464c:	46bd      	mov	sp, r7
   8464e:	bd80      	pop	{r7, pc}
   84650:	00084a61 	.word	0x00084a61
   84654:	00084af1 	.word	0x00084af1
   84658:	00084ba5 	.word	0x00084ba5

0008465c <osc_get_rate>:
{
   8465c:	b480      	push	{r7}
   8465e:	b083      	sub	sp, #12
   84660:	af00      	add	r7, sp, #0
   84662:	6078      	str	r0, [r7, #4]
   84664:	687b      	ldr	r3, [r7, #4]
   84666:	2b07      	cmp	r3, #7
   84668:	d823      	bhi.n	846b2 <osc_get_rate+0x56>
   8466a:	a201      	add	r2, pc, #4	; (adr r2, 84670 <osc_get_rate+0x14>)
   8466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84670:	00084691 	.word	0x00084691
   84674:	00084697 	.word	0x00084697
   84678:	0008469b 	.word	0x0008469b
   8467c:	0008469f 	.word	0x0008469f
   84680:	000846a3 	.word	0x000846a3
   84684:	000846a7 	.word	0x000846a7
   84688:	000846ab 	.word	0x000846ab
   8468c:	000846af 	.word	0x000846af
		return OSC_SLCK_32K_RC_HZ;
   84690:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84694:	e00e      	b.n	846b4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   84696:	2300      	movs	r3, #0
   84698:	e00c      	b.n	846b4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8469a:	2300      	movs	r3, #0
   8469c:	e00a      	b.n	846b4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8469e:	4b08      	ldr	r3, [pc, #32]	; (846c0 <osc_get_rate+0x64>)
   846a0:	e008      	b.n	846b4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   846a2:	4b08      	ldr	r3, [pc, #32]	; (846c4 <osc_get_rate+0x68>)
   846a4:	e006      	b.n	846b4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   846a6:	4b08      	ldr	r3, [pc, #32]	; (846c8 <osc_get_rate+0x6c>)
   846a8:	e004      	b.n	846b4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   846aa:	4b07      	ldr	r3, [pc, #28]	; (846c8 <osc_get_rate+0x6c>)
   846ac:	e002      	b.n	846b4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   846ae:	4b06      	ldr	r3, [pc, #24]	; (846c8 <osc_get_rate+0x6c>)
   846b0:	e000      	b.n	846b4 <osc_get_rate+0x58>
	return 0;
   846b2:	2300      	movs	r3, #0
}
   846b4:	4618      	mov	r0, r3
   846b6:	370c      	adds	r7, #12
   846b8:	46bd      	mov	sp, r7
   846ba:	bc80      	pop	{r7}
   846bc:	4770      	bx	lr
   846be:	bf00      	nop
   846c0:	003d0900 	.word	0x003d0900
   846c4:	007a1200 	.word	0x007a1200
   846c8:	00b71b00 	.word	0x00b71b00

000846cc <osc_wait_ready>:
{
   846cc:	b580      	push	{r7, lr}
   846ce:	b082      	sub	sp, #8
   846d0:	af00      	add	r7, sp, #0
   846d2:	4603      	mov	r3, r0
   846d4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   846d6:	bf00      	nop
   846d8:	79fb      	ldrb	r3, [r7, #7]
   846da:	4618      	mov	r0, r3
   846dc:	4b06      	ldr	r3, [pc, #24]	; (846f8 <osc_wait_ready+0x2c>)
   846de:	4798      	blx	r3
   846e0:	4603      	mov	r3, r0
   846e2:	f083 0301 	eor.w	r3, r3, #1
   846e6:	b2db      	uxtb	r3, r3
   846e8:	2b00      	cmp	r3, #0
   846ea:	d1f5      	bne.n	846d8 <osc_wait_ready+0xc>
}
   846ec:	bf00      	nop
   846ee:	bf00      	nop
   846f0:	3708      	adds	r7, #8
   846f2:	46bd      	mov	sp, r7
   846f4:	bd80      	pop	{r7, pc}
   846f6:	bf00      	nop
   846f8:	000845d9 	.word	0x000845d9

000846fc <pll_config_init>:
{
   846fc:	b580      	push	{r7, lr}
   846fe:	b086      	sub	sp, #24
   84700:	af00      	add	r7, sp, #0
   84702:	60f8      	str	r0, [r7, #12]
   84704:	607a      	str	r2, [r7, #4]
   84706:	603b      	str	r3, [r7, #0]
   84708:	460b      	mov	r3, r1
   8470a:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8470c:	687b      	ldr	r3, [r7, #4]
   8470e:	2b00      	cmp	r3, #0
   84710:	d107      	bne.n	84722 <pll_config_init+0x26>
   84712:	683b      	ldr	r3, [r7, #0]
   84714:	2b00      	cmp	r3, #0
   84716:	d104      	bne.n	84722 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   84718:	68fb      	ldr	r3, [r7, #12]
   8471a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8471e:	601a      	str	r2, [r3, #0]
   84720:	e01a      	b.n	84758 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   84722:	7afb      	ldrb	r3, [r7, #11]
   84724:	4618      	mov	r0, r3
   84726:	4b0e      	ldr	r3, [pc, #56]	; (84760 <pll_config_init+0x64>)
   84728:	4798      	blx	r3
   8472a:	4602      	mov	r2, r0
   8472c:	687b      	ldr	r3, [r7, #4]
   8472e:	fbb2 f3f3 	udiv	r3, r2, r3
   84732:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   84734:	697b      	ldr	r3, [r7, #20]
   84736:	683a      	ldr	r2, [r7, #0]
   84738:	fb02 f303 	mul.w	r3, r2, r3
   8473c:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8473e:	683b      	ldr	r3, [r7, #0]
   84740:	3b01      	subs	r3, #1
   84742:	041a      	lsls	r2, r3, #16
   84744:	4b07      	ldr	r3, [pc, #28]	; (84764 <pll_config_init+0x68>)
   84746:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   84748:	687a      	ldr	r2, [r7, #4]
   8474a:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8474c:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8474e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   84752:	68fb      	ldr	r3, [r7, #12]
   84754:	601a      	str	r2, [r3, #0]
}
   84756:	bf00      	nop
   84758:	bf00      	nop
   8475a:	3718      	adds	r7, #24
   8475c:	46bd      	mov	sp, r7
   8475e:	bd80      	pop	{r7, pc}
   84760:	0008465d 	.word	0x0008465d
   84764:	07ff0000 	.word	0x07ff0000

00084768 <pll_enable>:
{
   84768:	b580      	push	{r7, lr}
   8476a:	b082      	sub	sp, #8
   8476c:	af00      	add	r7, sp, #0
   8476e:	6078      	str	r0, [r7, #4]
   84770:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   84772:	683b      	ldr	r3, [r7, #0]
   84774:	2b00      	cmp	r3, #0
   84776:	d108      	bne.n	8478a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   84778:	4b09      	ldr	r3, [pc, #36]	; (847a0 <pll_enable+0x38>)
   8477a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8477c:	687b      	ldr	r3, [r7, #4]
   8477e:	681b      	ldr	r3, [r3, #0]
   84780:	4a08      	ldr	r2, [pc, #32]	; (847a4 <pll_enable+0x3c>)
   84782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84786:	6293      	str	r3, [r2, #40]	; 0x28
}
   84788:	e005      	b.n	84796 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8478a:	687b      	ldr	r3, [r7, #4]
   8478c:	681b      	ldr	r3, [r3, #0]
   8478e:	4a05      	ldr	r2, [pc, #20]	; (847a4 <pll_enable+0x3c>)
   84790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   84794:	61d3      	str	r3, [r2, #28]
}
   84796:	bf00      	nop
   84798:	3708      	adds	r7, #8
   8479a:	46bd      	mov	sp, r7
   8479c:	bd80      	pop	{r7, pc}
   8479e:	bf00      	nop
   847a0:	00084c15 	.word	0x00084c15
   847a4:	400e0400 	.word	0x400e0400

000847a8 <pll_is_locked>:
{
   847a8:	b580      	push	{r7, lr}
   847aa:	b082      	sub	sp, #8
   847ac:	af00      	add	r7, sp, #0
   847ae:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   847b0:	687b      	ldr	r3, [r7, #4]
   847b2:	2b00      	cmp	r3, #0
   847b4:	d103      	bne.n	847be <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   847b6:	4b05      	ldr	r3, [pc, #20]	; (847cc <pll_is_locked+0x24>)
   847b8:	4798      	blx	r3
   847ba:	4603      	mov	r3, r0
   847bc:	e002      	b.n	847c4 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   847be:	4b04      	ldr	r3, [pc, #16]	; (847d0 <pll_is_locked+0x28>)
   847c0:	4798      	blx	r3
   847c2:	4603      	mov	r3, r0
}
   847c4:	4618      	mov	r0, r3
   847c6:	3708      	adds	r7, #8
   847c8:	46bd      	mov	sp, r7
   847ca:	bd80      	pop	{r7, pc}
   847cc:	00084c2d 	.word	0x00084c2d
   847d0:	00084c61 	.word	0x00084c61

000847d4 <pll_enable_source>:
{
   847d4:	b580      	push	{r7, lr}
   847d6:	b082      	sub	sp, #8
   847d8:	af00      	add	r7, sp, #0
   847da:	4603      	mov	r3, r0
   847dc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   847de:	79fb      	ldrb	r3, [r7, #7]
   847e0:	3b03      	subs	r3, #3
   847e2:	2b04      	cmp	r3, #4
   847e4:	d808      	bhi.n	847f8 <pll_enable_source+0x24>
		osc_enable(e_src);
   847e6:	79fb      	ldrb	r3, [r7, #7]
   847e8:	4618      	mov	r0, r3
   847ea:	4b06      	ldr	r3, [pc, #24]	; (84804 <pll_enable_source+0x30>)
   847ec:	4798      	blx	r3
		osc_wait_ready(e_src);
   847ee:	79fb      	ldrb	r3, [r7, #7]
   847f0:	4618      	mov	r0, r3
   847f2:	4b05      	ldr	r3, [pc, #20]	; (84808 <pll_enable_source+0x34>)
   847f4:	4798      	blx	r3
		break;
   847f6:	e000      	b.n	847fa <pll_enable_source+0x26>
		break;
   847f8:	bf00      	nop
}
   847fa:	bf00      	nop
   847fc:	3708      	adds	r7, #8
   847fe:	46bd      	mov	sp, r7
   84800:	bd80      	pop	{r7, pc}
   84802:	bf00      	nop
   84804:	00084555 	.word	0x00084555
   84808:	000846cd 	.word	0x000846cd

0008480c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8480c:	b580      	push	{r7, lr}
   8480e:	b082      	sub	sp, #8
   84810:	af00      	add	r7, sp, #0
   84812:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84814:	bf00      	nop
   84816:	6878      	ldr	r0, [r7, #4]
   84818:	4b04      	ldr	r3, [pc, #16]	; (8482c <pll_wait_for_lock+0x20>)
   8481a:	4798      	blx	r3
   8481c:	4603      	mov	r3, r0
   8481e:	2b00      	cmp	r3, #0
   84820:	d0f9      	beq.n	84816 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   84822:	2300      	movs	r3, #0
}
   84824:	4618      	mov	r0, r3
   84826:	3708      	adds	r7, #8
   84828:	46bd      	mov	sp, r7
   8482a:	bd80      	pop	{r7, pc}
   8482c:	000847a9 	.word	0x000847a9

00084830 <sysclk_get_main_hz>:
{
   84830:	b580      	push	{r7, lr}
   84832:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84834:	2006      	movs	r0, #6
   84836:	4b03      	ldr	r3, [pc, #12]	; (84844 <sysclk_get_main_hz+0x14>)
   84838:	4798      	blx	r3
   8483a:	4603      	mov	r3, r0
   8483c:	011b      	lsls	r3, r3, #4
}
   8483e:	4618      	mov	r0, r3
   84840:	bd80      	pop	{r7, pc}
   84842:	bf00      	nop
   84844:	0008465d 	.word	0x0008465d

00084848 <sysclk_get_cpu_hz>:
{
   84848:	b580      	push	{r7, lr}
   8484a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8484c:	4b02      	ldr	r3, [pc, #8]	; (84858 <sysclk_get_cpu_hz+0x10>)
   8484e:	4798      	blx	r3
   84850:	4603      	mov	r3, r0
   84852:	085b      	lsrs	r3, r3, #1
}
   84854:	4618      	mov	r0, r3
   84856:	bd80      	pop	{r7, pc}
   84858:	00084831 	.word	0x00084831

0008485c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8485c:	b590      	push	{r4, r7, lr}
   8485e:	b083      	sub	sp, #12
   84860:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   84862:	2006      	movs	r0, #6
   84864:	4b09      	ldr	r3, [pc, #36]	; (8488c <sysclk_enable_usb+0x30>)
   84866:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   84868:	1d38      	adds	r0, r7, #4
   8486a:	2300      	movs	r3, #0
   8486c:	2200      	movs	r2, #0
   8486e:	2106      	movs	r1, #6
   84870:	4c07      	ldr	r4, [pc, #28]	; (84890 <sysclk_enable_usb+0x34>)
   84872:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   84874:	1d3b      	adds	r3, r7, #4
   84876:	2101      	movs	r1, #1
   84878:	4618      	mov	r0, r3
   8487a:	4b06      	ldr	r3, [pc, #24]	; (84894 <sysclk_enable_usb+0x38>)
   8487c:	4798      	blx	r3
	pll_wait_for_lock(1);
   8487e:	2001      	movs	r0, #1
   84880:	4b05      	ldr	r3, [pc, #20]	; (84898 <sysclk_enable_usb+0x3c>)
   84882:	4798      	blx	r3
}
   84884:	bf00      	nop
   84886:	370c      	adds	r7, #12
   84888:	46bd      	mov	sp, r7
   8488a:	bd90      	pop	{r4, r7, pc}
   8488c:	000847d5 	.word	0x000847d5
   84890:	000846fd 	.word	0x000846fd
   84894:	00084769 	.word	0x00084769
   84898:	0008480d 	.word	0x0008480d

0008489c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8489c:	b590      	push	{r4, r7, lr}
   8489e:	b083      	sub	sp, #12
   848a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   848a2:	4816      	ldr	r0, [pc, #88]	; (848fc <sysclk_init+0x60>)
   848a4:	4b16      	ldr	r3, [pc, #88]	; (84900 <sysclk_init+0x64>)
   848a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   848a8:	2006      	movs	r0, #6
   848aa:	4b16      	ldr	r3, [pc, #88]	; (84904 <sysclk_init+0x68>)
   848ac:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   848ae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   848b2:	4b15      	ldr	r3, [pc, #84]	; (84908 <sysclk_init+0x6c>)
   848b4:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   848b6:	bf00      	nop
   848b8:	4b14      	ldr	r3, [pc, #80]	; (8490c <sysclk_init+0x70>)
   848ba:	4798      	blx	r3
   848bc:	4603      	mov	r3, r0
   848be:	2b00      	cmp	r3, #0
   848c0:	d0fa      	beq.n	848b8 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   848c2:	1d38      	adds	r0, r7, #4
   848c4:	2310      	movs	r3, #16
   848c6:	2201      	movs	r2, #1
   848c8:	2106      	movs	r1, #6
   848ca:	4c11      	ldr	r4, [pc, #68]	; (84910 <sysclk_init+0x74>)
   848cc:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   848ce:	1d3b      	adds	r3, r7, #4
   848d0:	2100      	movs	r1, #0
   848d2:	4618      	mov	r0, r3
   848d4:	4b0f      	ldr	r3, [pc, #60]	; (84914 <sysclk_init+0x78>)
   848d6:	4798      	blx	r3
		pll_wait_for_lock(0);
   848d8:	2000      	movs	r0, #0
   848da:	4b0f      	ldr	r3, [pc, #60]	; (84918 <sysclk_init+0x7c>)
   848dc:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   848de:	2010      	movs	r0, #16
   848e0:	4b0e      	ldr	r3, [pc, #56]	; (8491c <sysclk_init+0x80>)
   848e2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   848e4:	4b0e      	ldr	r3, [pc, #56]	; (84920 <sysclk_init+0x84>)
   848e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   848e8:	4b0e      	ldr	r3, [pc, #56]	; (84924 <sysclk_init+0x88>)
   848ea:	4798      	blx	r3
   848ec:	4603      	mov	r3, r0
   848ee:	4618      	mov	r0, r3
   848f0:	4b03      	ldr	r3, [pc, #12]	; (84900 <sysclk_init+0x64>)
   848f2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   848f4:	bf00      	nop
   848f6:	370c      	adds	r7, #12
   848f8:	46bd      	mov	sp, r7
   848fa:	bd90      	pop	{r4, r7, pc}
   848fc:	05b8d800 	.word	0x05b8d800
   84900:	200001bd 	.word	0x200001bd
   84904:	000847d5 	.word	0x000847d5
   84908:	00084bd5 	.word	0x00084bd5
   8490c:	00084bbd 	.word	0x00084bbd
   84910:	000846fd 	.word	0x000846fd
   84914:	00084769 	.word	0x00084769
   84918:	0008480d 	.word	0x0008480d
   8491c:	000849a9 	.word	0x000849a9
   84920:	00086aa9 	.word	0x00086aa9
   84924:	00084849 	.word	0x00084849

00084928 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   84928:	b480      	push	{r7}
   8492a:	b085      	sub	sp, #20
   8492c:	af00      	add	r7, sp, #0
   8492e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84930:	4b1c      	ldr	r3, [pc, #112]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   84932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84934:	f023 0303 	bic.w	r3, r3, #3
   84938:	4a1a      	ldr	r2, [pc, #104]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   8493a:	f043 0301 	orr.w	r3, r3, #1
   8493e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84940:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84944:	60fb      	str	r3, [r7, #12]
   84946:	e007      	b.n	84958 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84948:	68fb      	ldr	r3, [r7, #12]
   8494a:	2b00      	cmp	r3, #0
   8494c:	d101      	bne.n	84952 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   8494e:	2301      	movs	r3, #1
   84950:	e023      	b.n	8499a <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   84952:	68fb      	ldr	r3, [r7, #12]
   84954:	3b01      	subs	r3, #1
   84956:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84958:	4b12      	ldr	r3, [pc, #72]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   8495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8495c:	f003 0308 	and.w	r3, r3, #8
   84960:	2b00      	cmp	r3, #0
   84962:	d0f1      	beq.n	84948 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84964:	4b0f      	ldr	r3, [pc, #60]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   84966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8496c:	490d      	ldr	r1, [pc, #52]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   8496e:	687b      	ldr	r3, [r7, #4]
   84970:	4313      	orrs	r3, r2
   84972:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84974:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84978:	60fb      	str	r3, [r7, #12]
   8497a:	e007      	b.n	8498c <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8497c:	68fb      	ldr	r3, [r7, #12]
   8497e:	2b00      	cmp	r3, #0
   84980:	d101      	bne.n	84986 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   84982:	2301      	movs	r3, #1
   84984:	e009      	b.n	8499a <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   84986:	68fb      	ldr	r3, [r7, #12]
   84988:	3b01      	subs	r3, #1
   8498a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8498c:	4b05      	ldr	r3, [pc, #20]	; (849a4 <pmc_switch_mck_to_mainck+0x7c>)
   8498e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84990:	f003 0308 	and.w	r3, r3, #8
   84994:	2b00      	cmp	r3, #0
   84996:	d0f1      	beq.n	8497c <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   84998:	2300      	movs	r3, #0
}
   8499a:	4618      	mov	r0, r3
   8499c:	3714      	adds	r7, #20
   8499e:	46bd      	mov	sp, r7
   849a0:	bc80      	pop	{r7}
   849a2:	4770      	bx	lr
   849a4:	400e0400 	.word	0x400e0400

000849a8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   849a8:	b480      	push	{r7}
   849aa:	b085      	sub	sp, #20
   849ac:	af00      	add	r7, sp, #0
   849ae:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   849b0:	4b1c      	ldr	r3, [pc, #112]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   849b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   849b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   849b8:	491a      	ldr	r1, [pc, #104]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   849ba:	687b      	ldr	r3, [r7, #4]
   849bc:	4313      	orrs	r3, r2
   849be:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   849c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   849c4:	60fb      	str	r3, [r7, #12]
   849c6:	e007      	b.n	849d8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   849c8:	68fb      	ldr	r3, [r7, #12]
   849ca:	2b00      	cmp	r3, #0
   849cc:	d101      	bne.n	849d2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   849ce:	2301      	movs	r3, #1
   849d0:	e023      	b.n	84a1a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   849d2:	68fb      	ldr	r3, [r7, #12]
   849d4:	3b01      	subs	r3, #1
   849d6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   849d8:	4b12      	ldr	r3, [pc, #72]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   849da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   849dc:	f003 0308 	and.w	r3, r3, #8
   849e0:	2b00      	cmp	r3, #0
   849e2:	d0f1      	beq.n	849c8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   849e4:	4b0f      	ldr	r3, [pc, #60]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   849e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   849e8:	f023 0303 	bic.w	r3, r3, #3
   849ec:	4a0d      	ldr	r2, [pc, #52]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   849ee:	f043 0302 	orr.w	r3, r3, #2
   849f2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   849f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   849f8:	60fb      	str	r3, [r7, #12]
   849fa:	e007      	b.n	84a0c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   849fc:	68fb      	ldr	r3, [r7, #12]
   849fe:	2b00      	cmp	r3, #0
   84a00:	d101      	bne.n	84a06 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   84a02:	2301      	movs	r3, #1
   84a04:	e009      	b.n	84a1a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   84a06:	68fb      	ldr	r3, [r7, #12]
   84a08:	3b01      	subs	r3, #1
   84a0a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84a0c:	4b05      	ldr	r3, [pc, #20]	; (84a24 <pmc_switch_mck_to_pllack+0x7c>)
   84a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a10:	f003 0308 	and.w	r3, r3, #8
   84a14:	2b00      	cmp	r3, #0
   84a16:	d0f1      	beq.n	849fc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   84a18:	2300      	movs	r3, #0
}
   84a1a:	4618      	mov	r0, r3
   84a1c:	3714      	adds	r7, #20
   84a1e:	46bd      	mov	sp, r7
   84a20:	bc80      	pop	{r7}
   84a22:	4770      	bx	lr
   84a24:	400e0400 	.word	0x400e0400

00084a28 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   84a28:	b480      	push	{r7}
   84a2a:	b083      	sub	sp, #12
   84a2c:	af00      	add	r7, sp, #0
   84a2e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   84a30:	687b      	ldr	r3, [r7, #4]
   84a32:	2b01      	cmp	r3, #1
   84a34:	d107      	bne.n	84a46 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   84a36:	4b08      	ldr	r3, [pc, #32]	; (84a58 <pmc_switch_sclk_to_32kxtal+0x30>)
   84a38:	689b      	ldr	r3, [r3, #8]
   84a3a:	4a07      	ldr	r2, [pc, #28]	; (84a58 <pmc_switch_sclk_to_32kxtal+0x30>)
   84a3c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   84a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84a44:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   84a46:	4b04      	ldr	r3, [pc, #16]	; (84a58 <pmc_switch_sclk_to_32kxtal+0x30>)
   84a48:	4a04      	ldr	r2, [pc, #16]	; (84a5c <pmc_switch_sclk_to_32kxtal+0x34>)
   84a4a:	601a      	str	r2, [r3, #0]
}
   84a4c:	bf00      	nop
   84a4e:	370c      	adds	r7, #12
   84a50:	46bd      	mov	sp, r7
   84a52:	bc80      	pop	{r7}
   84a54:	4770      	bx	lr
   84a56:	bf00      	nop
   84a58:	400e1210 	.word	0x400e1210
   84a5c:	a5000008 	.word	0xa5000008

00084a60 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   84a60:	b480      	push	{r7}
   84a62:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   84a64:	4b09      	ldr	r3, [pc, #36]	; (84a8c <pmc_osc_is_ready_32kxtal+0x2c>)
   84a66:	695b      	ldr	r3, [r3, #20]
   84a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   84a6c:	2b00      	cmp	r3, #0
   84a6e:	d007      	beq.n	84a80 <pmc_osc_is_ready_32kxtal+0x20>
   84a70:	4b07      	ldr	r3, [pc, #28]	; (84a90 <pmc_osc_is_ready_32kxtal+0x30>)
   84a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84a78:	2b00      	cmp	r3, #0
   84a7a:	d001      	beq.n	84a80 <pmc_osc_is_ready_32kxtal+0x20>
   84a7c:	2301      	movs	r3, #1
   84a7e:	e000      	b.n	84a82 <pmc_osc_is_ready_32kxtal+0x22>
   84a80:	2300      	movs	r3, #0
}
   84a82:	4618      	mov	r0, r3
   84a84:	46bd      	mov	sp, r7
   84a86:	bc80      	pop	{r7}
   84a88:	4770      	bx	lr
   84a8a:	bf00      	nop
   84a8c:	400e1210 	.word	0x400e1210
   84a90:	400e0400 	.word	0x400e0400

00084a94 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   84a94:	b480      	push	{r7}
   84a96:	b083      	sub	sp, #12
   84a98:	af00      	add	r7, sp, #0
   84a9a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   84a9c:	4b13      	ldr	r3, [pc, #76]	; (84aec <pmc_osc_enable_fastrc+0x58>)
   84a9e:	6a1b      	ldr	r3, [r3, #32]
   84aa0:	4a12      	ldr	r2, [pc, #72]	; (84aec <pmc_osc_enable_fastrc+0x58>)
   84aa2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84aa6:	f043 0308 	orr.w	r3, r3, #8
   84aaa:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84aac:	bf00      	nop
   84aae:	4b0f      	ldr	r3, [pc, #60]	; (84aec <pmc_osc_enable_fastrc+0x58>)
   84ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84ab6:	2b00      	cmp	r3, #0
   84ab8:	d0f9      	beq.n	84aae <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84aba:	4b0c      	ldr	r3, [pc, #48]	; (84aec <pmc_osc_enable_fastrc+0x58>)
   84abc:	6a1b      	ldr	r3, [r3, #32]
   84abe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   84ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84ac6:	687a      	ldr	r2, [r7, #4]
   84ac8:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84aca:	4a08      	ldr	r2, [pc, #32]	; (84aec <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84acc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84ad0:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84ad2:	bf00      	nop
   84ad4:	4b05      	ldr	r3, [pc, #20]	; (84aec <pmc_osc_enable_fastrc+0x58>)
   84ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84adc:	2b00      	cmp	r3, #0
   84ade:	d0f9      	beq.n	84ad4 <pmc_osc_enable_fastrc+0x40>
}
   84ae0:	bf00      	nop
   84ae2:	bf00      	nop
   84ae4:	370c      	adds	r7, #12
   84ae6:	46bd      	mov	sp, r7
   84ae8:	bc80      	pop	{r7}
   84aea:	4770      	bx	lr
   84aec:	400e0400 	.word	0x400e0400

00084af0 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   84af0:	b480      	push	{r7}
   84af2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   84af4:	4b03      	ldr	r3, [pc, #12]	; (84b04 <pmc_osc_is_ready_fastrc+0x14>)
   84af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   84afc:	4618      	mov	r0, r3
   84afe:	46bd      	mov	sp, r7
   84b00:	bc80      	pop	{r7}
   84b02:	4770      	bx	lr
   84b04:	400e0400 	.word	0x400e0400

00084b08 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   84b08:	b480      	push	{r7}
   84b0a:	b085      	sub	sp, #20
   84b0c:	af00      	add	r7, sp, #0
   84b0e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   84b10:	4b10      	ldr	r3, [pc, #64]	; (84b54 <pmc_osc_enable_main_xtal+0x4c>)
   84b12:	6a1b      	ldr	r3, [r3, #32]
   84b14:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84b16:	68fb      	ldr	r3, [r7, #12]
   84b18:	f023 0303 	bic.w	r3, r3, #3
   84b1c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84b1e:	687b      	ldr	r3, [r7, #4]
   84b20:	021b      	lsls	r3, r3, #8
   84b22:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84b24:	68fb      	ldr	r3, [r7, #12]
   84b26:	4313      	orrs	r3, r2
   84b28:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84b2c:	f043 0301 	orr.w	r3, r3, #1
   84b30:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   84b32:	4a08      	ldr	r2, [pc, #32]	; (84b54 <pmc_osc_enable_main_xtal+0x4c>)
   84b34:	68fb      	ldr	r3, [r7, #12]
   84b36:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84b38:	bf00      	nop
   84b3a:	4b06      	ldr	r3, [pc, #24]	; (84b54 <pmc_osc_enable_main_xtal+0x4c>)
   84b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84b3e:	f003 0301 	and.w	r3, r3, #1
   84b42:	2b00      	cmp	r3, #0
   84b44:	d0f9      	beq.n	84b3a <pmc_osc_enable_main_xtal+0x32>
}
   84b46:	bf00      	nop
   84b48:	bf00      	nop
   84b4a:	3714      	adds	r7, #20
   84b4c:	46bd      	mov	sp, r7
   84b4e:	bc80      	pop	{r7}
   84b50:	4770      	bx	lr
   84b52:	bf00      	nop
   84b54:	400e0400 	.word	0x400e0400

00084b58 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   84b58:	b480      	push	{r7}
   84b5a:	b083      	sub	sp, #12
   84b5c:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   84b5e:	4b0a      	ldr	r3, [pc, #40]	; (84b88 <pmc_osc_bypass_main_xtal+0x30>)
   84b60:	6a1b      	ldr	r3, [r3, #32]
   84b62:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84b64:	687b      	ldr	r3, [r7, #4]
   84b66:	f023 0303 	bic.w	r3, r3, #3
   84b6a:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   84b6c:	687b      	ldr	r3, [r7, #4]
   84b6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84b72:	f043 0302 	orr.w	r3, r3, #2
   84b76:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   84b78:	4a03      	ldr	r2, [pc, #12]	; (84b88 <pmc_osc_bypass_main_xtal+0x30>)
   84b7a:	687b      	ldr	r3, [r7, #4]
   84b7c:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   84b7e:	bf00      	nop
   84b80:	370c      	adds	r7, #12
   84b82:	46bd      	mov	sp, r7
   84b84:	bc80      	pop	{r7}
   84b86:	4770      	bx	lr
   84b88:	400e0400 	.word	0x400e0400

00084b8c <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   84b8c:	b480      	push	{r7}
   84b8e:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   84b90:	4b03      	ldr	r3, [pc, #12]	; (84ba0 <pmc_osc_is_bypassed_main_xtal+0x14>)
   84b92:	6a1b      	ldr	r3, [r3, #32]
   84b94:	f003 0302 	and.w	r3, r3, #2
}
   84b98:	4618      	mov	r0, r3
   84b9a:	46bd      	mov	sp, r7
   84b9c:	bc80      	pop	{r7}
   84b9e:	4770      	bx	lr
   84ba0:	400e0400 	.word	0x400e0400

00084ba4 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   84ba4:	b480      	push	{r7}
   84ba6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84ba8:	4b03      	ldr	r3, [pc, #12]	; (84bb8 <pmc_osc_is_ready_main_xtal+0x14>)
   84baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84bac:	f003 0301 	and.w	r3, r3, #1
}
   84bb0:	4618      	mov	r0, r3
   84bb2:	46bd      	mov	sp, r7
   84bb4:	bc80      	pop	{r7}
   84bb6:	4770      	bx	lr
   84bb8:	400e0400 	.word	0x400e0400

00084bbc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   84bbc:	b480      	push	{r7}
   84bbe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84bc0:	4b03      	ldr	r3, [pc, #12]	; (84bd0 <pmc_osc_is_ready_mainck+0x14>)
   84bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   84bc8:	4618      	mov	r0, r3
   84bca:	46bd      	mov	sp, r7
   84bcc:	bc80      	pop	{r7}
   84bce:	4770      	bx	lr
   84bd0:	400e0400 	.word	0x400e0400

00084bd4 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   84bd4:	b480      	push	{r7}
   84bd6:	b085      	sub	sp, #20
   84bd8:	af00      	add	r7, sp, #0
   84bda:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   84bdc:	4b0c      	ldr	r3, [pc, #48]	; (84c10 <pmc_mainck_osc_select+0x3c>)
   84bde:	6a1b      	ldr	r3, [r3, #32]
   84be0:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   84be2:	687b      	ldr	r3, [r7, #4]
   84be4:	2b00      	cmp	r3, #0
   84be6:	d004      	beq.n	84bf2 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   84be8:	68fb      	ldr	r3, [r7, #12]
   84bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   84bee:	60fb      	str	r3, [r7, #12]
   84bf0:	e003      	b.n	84bfa <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   84bf2:	68fb      	ldr	r3, [r7, #12]
   84bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   84bf8:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84bfa:	4a05      	ldr	r2, [pc, #20]	; (84c10 <pmc_mainck_osc_select+0x3c>)
   84bfc:	68fb      	ldr	r3, [r7, #12]
   84bfe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84c02:	6213      	str	r3, [r2, #32]
}
   84c04:	bf00      	nop
   84c06:	3714      	adds	r7, #20
   84c08:	46bd      	mov	sp, r7
   84c0a:	bc80      	pop	{r7}
   84c0c:	4770      	bx	lr
   84c0e:	bf00      	nop
   84c10:	400e0400 	.word	0x400e0400

00084c14 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   84c14:	b480      	push	{r7}
   84c16:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84c18:	4b03      	ldr	r3, [pc, #12]	; (84c28 <pmc_disable_pllack+0x14>)
   84c1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84c1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   84c20:	bf00      	nop
   84c22:	46bd      	mov	sp, r7
   84c24:	bc80      	pop	{r7}
   84c26:	4770      	bx	lr
   84c28:	400e0400 	.word	0x400e0400

00084c2c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   84c2c:	b480      	push	{r7}
   84c2e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84c30:	4b03      	ldr	r3, [pc, #12]	; (84c40 <pmc_is_locked_pllack+0x14>)
   84c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84c34:	f003 0302 	and.w	r3, r3, #2
}
   84c38:	4618      	mov	r0, r3
   84c3a:	46bd      	mov	sp, r7
   84c3c:	bc80      	pop	{r7}
   84c3e:	4770      	bx	lr
   84c40:	400e0400 	.word	0x400e0400

00084c44 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   84c44:	b480      	push	{r7}
   84c46:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   84c48:	4b04      	ldr	r3, [pc, #16]	; (84c5c <pmc_disable_upll_clock+0x18>)
   84c4a:	69db      	ldr	r3, [r3, #28]
   84c4c:	4a03      	ldr	r2, [pc, #12]	; (84c5c <pmc_disable_upll_clock+0x18>)
   84c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   84c52:	61d3      	str	r3, [r2, #28]
}
   84c54:	bf00      	nop
   84c56:	46bd      	mov	sp, r7
   84c58:	bc80      	pop	{r7}
   84c5a:	4770      	bx	lr
   84c5c:	400e0400 	.word	0x400e0400

00084c60 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   84c60:	b480      	push	{r7}
   84c62:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84c64:	4b03      	ldr	r3, [pc, #12]	; (84c74 <pmc_is_locked_upll+0x14>)
   84c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   84c6c:	4618      	mov	r0, r3
   84c6e:	46bd      	mov	sp, r7
   84c70:	bc80      	pop	{r7}
   84c72:	4770      	bx	lr
   84c74:	400e0400 	.word	0x400e0400

00084c78 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   84c78:	b480      	push	{r7}
   84c7a:	b083      	sub	sp, #12
   84c7c:	af00      	add	r7, sp, #0
   84c7e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84c80:	687b      	ldr	r3, [r7, #4]
   84c82:	2b1d      	cmp	r3, #29
   84c84:	d901      	bls.n	84c8a <pmc_enable_periph_clk+0x12>
		return 1;
   84c86:	2301      	movs	r3, #1
   84c88:	e015      	b.n	84cb6 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   84c8a:	687b      	ldr	r3, [r7, #4]
   84c8c:	2b1f      	cmp	r3, #31
   84c8e:	d811      	bhi.n	84cb4 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84c90:	4b0b      	ldr	r3, [pc, #44]	; (84cc0 <pmc_enable_periph_clk+0x48>)
   84c92:	699a      	ldr	r2, [r3, #24]
   84c94:	2101      	movs	r1, #1
   84c96:	687b      	ldr	r3, [r7, #4]
   84c98:	fa01 f303 	lsl.w	r3, r1, r3
   84c9c:	401a      	ands	r2, r3
   84c9e:	2101      	movs	r1, #1
   84ca0:	687b      	ldr	r3, [r7, #4]
   84ca2:	fa01 f303 	lsl.w	r3, r1, r3
   84ca6:	429a      	cmp	r2, r3
   84ca8:	d004      	beq.n	84cb4 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   84caa:	2201      	movs	r2, #1
   84cac:	687b      	ldr	r3, [r7, #4]
   84cae:	409a      	lsls	r2, r3
   84cb0:	4b03      	ldr	r3, [pc, #12]	; (84cc0 <pmc_enable_periph_clk+0x48>)
   84cb2:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84cb4:	2300      	movs	r3, #0
}
   84cb6:	4618      	mov	r0, r3
   84cb8:	370c      	adds	r7, #12
   84cba:	46bd      	mov	sp, r7
   84cbc:	bc80      	pop	{r7}
   84cbe:	4770      	bx	lr
   84cc0:	400e0400 	.word	0x400e0400

00084cc4 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   84cc4:	b480      	push	{r7}
   84cc6:	b083      	sub	sp, #12
   84cc8:	af00      	add	r7, sp, #0
   84cca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84ccc:	687b      	ldr	r3, [r7, #4]
   84cce:	2b1d      	cmp	r3, #29
   84cd0:	d901      	bls.n	84cd6 <pmc_disable_periph_clk+0x12>
		return 1;
   84cd2:	2301      	movs	r3, #1
   84cd4:	e015      	b.n	84d02 <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   84cd6:	687b      	ldr	r3, [r7, #4]
   84cd8:	2b1f      	cmp	r3, #31
   84cda:	d811      	bhi.n	84d00 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84cdc:	4b0b      	ldr	r3, [pc, #44]	; (84d0c <pmc_disable_periph_clk+0x48>)
   84cde:	699a      	ldr	r2, [r3, #24]
   84ce0:	2101      	movs	r1, #1
   84ce2:	687b      	ldr	r3, [r7, #4]
   84ce4:	fa01 f303 	lsl.w	r3, r1, r3
   84ce8:	401a      	ands	r2, r3
   84cea:	2101      	movs	r1, #1
   84cec:	687b      	ldr	r3, [r7, #4]
   84cee:	fa01 f303 	lsl.w	r3, r1, r3
   84cf2:	429a      	cmp	r2, r3
   84cf4:	d104      	bne.n	84d00 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   84cf6:	2201      	movs	r2, #1
   84cf8:	687b      	ldr	r3, [r7, #4]
   84cfa:	409a      	lsls	r2, r3
   84cfc:	4b03      	ldr	r3, [pc, #12]	; (84d0c <pmc_disable_periph_clk+0x48>)
   84cfe:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   84d00:	2300      	movs	r3, #0
}
   84d02:	4618      	mov	r0, r3
   84d04:	370c      	adds	r7, #12
   84d06:	46bd      	mov	sp, r7
   84d08:	bc80      	pop	{r7}
   84d0a:	4770      	bx	lr
   84d0c:	400e0400 	.word	0x400e0400

00084d10 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   84d10:	b480      	push	{r7}
   84d12:	b083      	sub	sp, #12
   84d14:	af00      	add	r7, sp, #0
   84d16:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84d18:	4a05      	ldr	r2, [pc, #20]	; (84d30 <pmc_enable_pck+0x20>)
   84d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   84d1e:	687b      	ldr	r3, [r7, #4]
   84d20:	fa01 f303 	lsl.w	r3, r1, r3
   84d24:	6013      	str	r3, [r2, #0]
}
   84d26:	bf00      	nop
   84d28:	370c      	adds	r7, #12
   84d2a:	46bd      	mov	sp, r7
   84d2c:	bc80      	pop	{r7}
   84d2e:	4770      	bx	lr
   84d30:	400e0400 	.word	0x400e0400

00084d34 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   84d34:	b480      	push	{r7}
   84d36:	b083      	sub	sp, #12
   84d38:	af00      	add	r7, sp, #0
   84d3a:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84d3c:	687b      	ldr	r3, [r7, #4]
   84d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
   84d42:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   84d44:	4b05      	ldr	r3, [pc, #20]	; (84d5c <pmc_set_fast_startup_input+0x28>)
   84d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84d48:	4904      	ldr	r1, [pc, #16]	; (84d5c <pmc_set_fast_startup_input+0x28>)
   84d4a:	687b      	ldr	r3, [r7, #4]
   84d4c:	4313      	orrs	r3, r2
   84d4e:	670b      	str	r3, [r1, #112]	; 0x70
}
   84d50:	bf00      	nop
   84d52:	370c      	adds	r7, #12
   84d54:	46bd      	mov	sp, r7
   84d56:	bc80      	pop	{r7}
   84d58:	4770      	bx	lr
   84d5a:	bf00      	nop
   84d5c:	400e0400 	.word	0x400e0400

00084d60 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   84d60:	b480      	push	{r7}
   84d62:	b083      	sub	sp, #12
   84d64:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   84d66:	4b13      	ldr	r3, [pc, #76]	; (84db4 <pmc_enable_waitmode+0x54>)
   84d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84d6a:	4a12      	ldr	r2, [pc, #72]	; (84db4 <pmc_enable_waitmode+0x54>)
   84d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84d70:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   84d72:	4b11      	ldr	r3, [pc, #68]	; (84db8 <pmc_enable_waitmode+0x58>)
   84d74:	691b      	ldr	r3, [r3, #16]
   84d76:	4a10      	ldr	r2, [pc, #64]	; (84db8 <pmc_enable_waitmode+0x58>)
   84d78:	f023 0304 	bic.w	r3, r3, #4
   84d7c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   84d7e:	bf20      	wfe
}
   84d80:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   84d82:	2300      	movs	r3, #0
   84d84:	607b      	str	r3, [r7, #4]
   84d86:	e004      	b.n	84d92 <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   84d88:	bf00      	nop
}
   84d8a:	bf00      	nop
   84d8c:	687b      	ldr	r3, [r7, #4]
   84d8e:	3301      	adds	r3, #1
   84d90:	607b      	str	r3, [r7, #4]
   84d92:	687b      	ldr	r3, [r7, #4]
   84d94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   84d98:	d3f6      	bcc.n	84d88 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   84d9a:	bf00      	nop
   84d9c:	4b05      	ldr	r3, [pc, #20]	; (84db4 <pmc_enable_waitmode+0x54>)
   84d9e:	6a1b      	ldr	r3, [r3, #32]
   84da0:	f003 0308 	and.w	r3, r3, #8
   84da4:	2b00      	cmp	r3, #0
   84da6:	d0f9      	beq.n	84d9c <pmc_enable_waitmode+0x3c>

}
   84da8:	bf00      	nop
   84daa:	bf00      	nop
   84dac:	370c      	adds	r7, #12
   84dae:	46bd      	mov	sp, r7
   84db0:	bc80      	pop	{r7}
   84db2:	4770      	bx	lr
   84db4:	400e0400 	.word	0x400e0400
   84db8:	e000ed00 	.word	0xe000ed00

00084dbc <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84dbc:	b580      	push	{r7, lr}
   84dbe:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84dc0:	4b0b      	ldr	r3, [pc, #44]	; (84df0 <udi_vendor_enable+0x34>)
   84dc2:	4798      	blx	r3
   84dc4:	4603      	mov	r3, r0
   84dc6:	78da      	ldrb	r2, [r3, #3]
   84dc8:	4b0a      	ldr	r3, [pc, #40]	; (84df4 <udi_vendor_enable+0x38>)
   84dca:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84dcc:	4b09      	ldr	r3, [pc, #36]	; (84df4 <udi_vendor_enable+0x38>)
   84dce:	781b      	ldrb	r3, [r3, #0]
   84dd0:	2b00      	cmp	r3, #0
   84dd2:	d109      	bne.n	84de8 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84dd4:	4b08      	ldr	r3, [pc, #32]	; (84df8 <udi_vendor_enable+0x3c>)
   84dd6:	4798      	blx	r3
   84dd8:	4603      	mov	r3, r0
   84dda:	f083 0301 	eor.w	r3, r3, #1
   84dde:	b2db      	uxtb	r3, r3
   84de0:	2b00      	cmp	r3, #0
   84de2:	d001      	beq.n	84de8 <udi_vendor_enable+0x2c>
			return false;
   84de4:	2300      	movs	r3, #0
   84de6:	e000      	b.n	84dea <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84de8:	2301      	movs	r3, #1
}
   84dea:	4618      	mov	r0, r3
   84dec:	bd80      	pop	{r7, pc}
   84dee:	bf00      	nop
   84df0:	000854b5 	.word	0x000854b5
   84df4:	20001359 	.word	0x20001359
   84df8:	00080cd9 	.word	0x00080cd9

00084dfc <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84dfc:	b580      	push	{r7, lr}
   84dfe:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84e00:	4b03      	ldr	r3, [pc, #12]	; (84e10 <udi_vendor_disable+0x14>)
   84e02:	781b      	ldrb	r3, [r3, #0]
   84e04:	2b00      	cmp	r3, #0
   84e06:	d101      	bne.n	84e0c <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84e08:	4b02      	ldr	r3, [pc, #8]	; (84e14 <udi_vendor_disable+0x18>)
   84e0a:	4798      	blx	r3
	}
}
   84e0c:	bf00      	nop
   84e0e:	bd80      	pop	{r7, pc}
   84e10:	20001359 	.word	0x20001359
   84e14:	00080d11 	.word	0x00080d11

00084e18 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84e18:	b580      	push	{r7, lr}
   84e1a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84e1c:	4b10      	ldr	r3, [pc, #64]	; (84e60 <udi_vendor_setup+0x48>)
   84e1e:	781b      	ldrb	r3, [r3, #0]
   84e20:	b25b      	sxtb	r3, r3
   84e22:	2b00      	cmp	r3, #0
   84e24:	da09      	bge.n	84e3a <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84e26:	4b0e      	ldr	r3, [pc, #56]	; (84e60 <udi_vendor_setup+0x48>)
   84e28:	781b      	ldrb	r3, [r3, #0]
   84e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84e2e:	2b40      	cmp	r3, #64	; 0x40
   84e30:	d103      	bne.n	84e3a <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84e32:	4b0c      	ldr	r3, [pc, #48]	; (84e64 <udi_vendor_setup+0x4c>)
   84e34:	4798      	blx	r3
   84e36:	4603      	mov	r3, r0
   84e38:	e00f      	b.n	84e5a <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84e3a:	4b09      	ldr	r3, [pc, #36]	; (84e60 <udi_vendor_setup+0x48>)
   84e3c:	781b      	ldrb	r3, [r3, #0]
   84e3e:	b25b      	sxtb	r3, r3
   84e40:	2b00      	cmp	r3, #0
   84e42:	db09      	blt.n	84e58 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84e44:	4b06      	ldr	r3, [pc, #24]	; (84e60 <udi_vendor_setup+0x48>)
   84e46:	781b      	ldrb	r3, [r3, #0]
   84e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84e4c:	2b40      	cmp	r3, #64	; 0x40
   84e4e:	d103      	bne.n	84e58 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84e50:	4b05      	ldr	r3, [pc, #20]	; (84e68 <udi_vendor_setup+0x50>)
   84e52:	4798      	blx	r3
   84e54:	4603      	mov	r3, r0
   84e56:	e000      	b.n	84e5a <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84e58:	2300      	movs	r3, #0
}
   84e5a:	4618      	mov	r0, r3
   84e5c:	bd80      	pop	{r7, pc}
   84e5e:	bf00      	nop
   84e60:	20001810 	.word	0x20001810
   84e64:	000811a1 	.word	0x000811a1
   84e68:	00081031 	.word	0x00081031

00084e6c <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84e6c:	b480      	push	{r7}
   84e6e:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84e70:	4b02      	ldr	r3, [pc, #8]	; (84e7c <udi_vendor_getsetting+0x10>)
   84e72:	781b      	ldrb	r3, [r3, #0]
}
   84e74:	4618      	mov	r0, r3
   84e76:	46bd      	mov	sp, r7
   84e78:	bc80      	pop	{r7}
   84e7a:	4770      	bx	lr
   84e7c:	20001359 	.word	0x20001359

00084e80 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84e80:	b590      	push	{r4, r7, lr}
   84e82:	b087      	sub	sp, #28
   84e84:	af02      	add	r7, sp, #8
   84e86:	60f8      	str	r0, [r7, #12]
   84e88:	60b9      	str	r1, [r7, #8]
   84e8a:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84e8c:	687b      	ldr	r3, [r7, #4]
   84e8e:	9300      	str	r3, [sp, #0]
   84e90:	68bb      	ldr	r3, [r7, #8]
   84e92:	68fa      	ldr	r2, [r7, #12]
   84e94:	2100      	movs	r1, #0
   84e96:	2081      	movs	r0, #129	; 0x81
   84e98:	4c03      	ldr	r4, [pc, #12]	; (84ea8 <udi_vendor_bulk_in_run+0x28>)
   84e9a:	47a0      	blx	r4
   84e9c:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84e9e:	4618      	mov	r0, r3
   84ea0:	3714      	adds	r7, #20
   84ea2:	46bd      	mov	sp, r7
   84ea4:	bd90      	pop	{r4, r7, pc}
   84ea6:	bf00      	nop
   84ea8:	000833f1 	.word	0x000833f1

00084eac <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84eac:	b590      	push	{r4, r7, lr}
   84eae:	b087      	sub	sp, #28
   84eb0:	af02      	add	r7, sp, #8
   84eb2:	60f8      	str	r0, [r7, #12]
   84eb4:	60b9      	str	r1, [r7, #8]
   84eb6:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84eb8:	687b      	ldr	r3, [r7, #4]
   84eba:	9300      	str	r3, [sp, #0]
   84ebc:	68bb      	ldr	r3, [r7, #8]
   84ebe:	68fa      	ldr	r2, [r7, #12]
   84ec0:	2100      	movs	r1, #0
   84ec2:	2002      	movs	r0, #2
   84ec4:	4c03      	ldr	r4, [pc, #12]	; (84ed4 <udi_vendor_bulk_out_run+0x28>)
   84ec6:	47a0      	blx	r4
   84ec8:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84eca:	4618      	mov	r0, r3
   84ecc:	3714      	adds	r7, #20
   84ece:	46bd      	mov	sp, r7
   84ed0:	bd90      	pop	{r4, r7, pc}
   84ed2:	bf00      	nop
   84ed4:	000833f1 	.word	0x000833f1

00084ed8 <cpu_irq_save>:
{
   84ed8:	b480      	push	{r7}
   84eda:	b083      	sub	sp, #12
   84edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ede:	f3ef 8310 	mrs	r3, PRIMASK
   84ee2:	603b      	str	r3, [r7, #0]
  return(result);
   84ee4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84ee6:	2b00      	cmp	r3, #0
   84ee8:	bf0c      	ite	eq
   84eea:	2301      	moveq	r3, #1
   84eec:	2300      	movne	r3, #0
   84eee:	b2db      	uxtb	r3, r3
   84ef0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84ef2:	b672      	cpsid	i
}
   84ef4:	bf00      	nop
  __ASM volatile ("dmb");
   84ef6:	f3bf 8f5f 	dmb	sy
}
   84efa:	bf00      	nop
	cpu_irq_disable();
   84efc:	4b04      	ldr	r3, [pc, #16]	; (84f10 <cpu_irq_save+0x38>)
   84efe:	2200      	movs	r2, #0
   84f00:	701a      	strb	r2, [r3, #0]
	return flags;
   84f02:	687b      	ldr	r3, [r7, #4]
}
   84f04:	4618      	mov	r0, r3
   84f06:	370c      	adds	r7, #12
   84f08:	46bd      	mov	sp, r7
   84f0a:	bc80      	pop	{r7}
   84f0c:	4770      	bx	lr
   84f0e:	bf00      	nop
   84f10:	200003aa 	.word	0x200003aa

00084f14 <cpu_irq_is_enabled_flags>:
{
   84f14:	b480      	push	{r7}
   84f16:	b083      	sub	sp, #12
   84f18:	af00      	add	r7, sp, #0
   84f1a:	6078      	str	r0, [r7, #4]
	return (flags);
   84f1c:	687b      	ldr	r3, [r7, #4]
   84f1e:	2b00      	cmp	r3, #0
   84f20:	bf14      	ite	ne
   84f22:	2301      	movne	r3, #1
   84f24:	2300      	moveq	r3, #0
   84f26:	b2db      	uxtb	r3, r3
}
   84f28:	4618      	mov	r0, r3
   84f2a:	370c      	adds	r7, #12
   84f2c:	46bd      	mov	sp, r7
   84f2e:	bc80      	pop	{r7}
   84f30:	4770      	bx	lr
   84f32:	0000      	movs	r0, r0

00084f34 <cpu_irq_restore>:
{
   84f34:	b580      	push	{r7, lr}
   84f36:	b082      	sub	sp, #8
   84f38:	af00      	add	r7, sp, #0
   84f3a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84f3c:	6878      	ldr	r0, [r7, #4]
   84f3e:	4b08      	ldr	r3, [pc, #32]	; (84f60 <cpu_irq_restore+0x2c>)
   84f40:	4798      	blx	r3
   84f42:	4603      	mov	r3, r0
   84f44:	2b00      	cmp	r3, #0
   84f46:	d007      	beq.n	84f58 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84f48:	4b06      	ldr	r3, [pc, #24]	; (84f64 <cpu_irq_restore+0x30>)
   84f4a:	2201      	movs	r2, #1
   84f4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84f4e:	f3bf 8f5f 	dmb	sy
}
   84f52:	bf00      	nop
  __ASM volatile ("cpsie i");
   84f54:	b662      	cpsie	i
}
   84f56:	bf00      	nop
}
   84f58:	bf00      	nop
   84f5a:	3708      	adds	r7, #8
   84f5c:	46bd      	mov	sp, r7
   84f5e:	bd80      	pop	{r7, pc}
   84f60:	00084f15 	.word	0x00084f15
   84f64:	200003aa 	.word	0x200003aa

00084f68 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84f68:	b580      	push	{r7, lr}
   84f6a:	b086      	sub	sp, #24
   84f6c:	af00      	add	r7, sp, #0
   84f6e:	60f8      	str	r0, [r7, #12]
   84f70:	60b9      	str	r1, [r7, #8]
   84f72:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84f74:	68bb      	ldr	r3, [r7, #8]
   84f76:	2b0e      	cmp	r3, #14
   84f78:	d002      	beq.n	84f80 <efc_perform_command+0x18>
   84f7a:	68bb      	ldr	r3, [r7, #8]
   84f7c:	2b0f      	cmp	r3, #15
   84f7e:	d102      	bne.n	84f86 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   84f80:	f04f 33ff 	mov.w	r3, #4294967295
   84f84:	e016      	b.n	84fb4 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   84f86:	4b0d      	ldr	r3, [pc, #52]	; (84fbc <efc_perform_command+0x54>)
   84f88:	4798      	blx	r3
   84f8a:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84f8c:	687b      	ldr	r3, [r7, #4]
   84f8e:	021b      	lsls	r3, r3, #8
   84f90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   84f94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   84f98:	68ba      	ldr	r2, [r7, #8]
   84f9a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84f9c:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   84f9e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   84fa2:	4619      	mov	r1, r3
   84fa4:	68f8      	ldr	r0, [r7, #12]
   84fa6:	4b06      	ldr	r3, [pc, #24]	; (84fc0 <efc_perform_command+0x58>)
   84fa8:	4798      	blx	r3
   84faa:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   84fac:	6978      	ldr	r0, [r7, #20]
   84fae:	4b05      	ldr	r3, [pc, #20]	; (84fc4 <efc_perform_command+0x5c>)
   84fb0:	4798      	blx	r3
	return result;
   84fb2:	693b      	ldr	r3, [r7, #16]
}
   84fb4:	4618      	mov	r0, r3
   84fb6:	3718      	adds	r7, #24
   84fb8:	46bd      	mov	sp, r7
   84fba:	bd80      	pop	{r7, pc}
   84fbc:	00084ed9 	.word	0x00084ed9
   84fc0:	200000bd 	.word	0x200000bd
   84fc4:	00084f35 	.word	0x00084f35

00084fc8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   84fc8:	b480      	push	{r7}
   84fca:	b085      	sub	sp, #20
   84fcc:	af00      	add	r7, sp, #0
   84fce:	60f8      	str	r0, [r7, #12]
   84fd0:	60b9      	str	r1, [r7, #8]
   84fd2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84fd4:	687b      	ldr	r3, [r7, #4]
   84fd6:	2b00      	cmp	r3, #0
   84fd8:	d003      	beq.n	84fe2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   84fda:	68fb      	ldr	r3, [r7, #12]
   84fdc:	68ba      	ldr	r2, [r7, #8]
   84fde:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   84fe0:	e002      	b.n	84fe8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   84fe2:	68fb      	ldr	r3, [r7, #12]
   84fe4:	68ba      	ldr	r2, [r7, #8]
   84fe6:	661a      	str	r2, [r3, #96]	; 0x60
}
   84fe8:	bf00      	nop
   84fea:	3714      	adds	r7, #20
   84fec:	46bd      	mov	sp, r7
   84fee:	bc80      	pop	{r7}
   84ff0:	4770      	bx	lr

00084ff2 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   84ff2:	b480      	push	{r7}
   84ff4:	b087      	sub	sp, #28
   84ff6:	af00      	add	r7, sp, #0
   84ff8:	60f8      	str	r0, [r7, #12]
   84ffa:	60b9      	str	r1, [r7, #8]
   84ffc:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84ffe:	68fb      	ldr	r3, [r7, #12]
   85000:	687a      	ldr	r2, [r7, #4]
   85002:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   85004:	68bb      	ldr	r3, [r7, #8]
   85006:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8500a:	d03c      	beq.n	85086 <pio_set_peripheral+0x94>
   8500c:	68bb      	ldr	r3, [r7, #8]
   8500e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85012:	d834      	bhi.n	8507e <pio_set_peripheral+0x8c>
   85014:	68bb      	ldr	r3, [r7, #8]
   85016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8501a:	d034      	beq.n	85086 <pio_set_peripheral+0x94>
   8501c:	68bb      	ldr	r3, [r7, #8]
   8501e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85022:	d82c      	bhi.n	8507e <pio_set_peripheral+0x8c>
   85024:	68bb      	ldr	r3, [r7, #8]
   85026:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8502a:	d02c      	beq.n	85086 <pio_set_peripheral+0x94>
   8502c:	68bb      	ldr	r3, [r7, #8]
   8502e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85032:	d824      	bhi.n	8507e <pio_set_peripheral+0x8c>
   85034:	68bb      	ldr	r3, [r7, #8]
   85036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8503a:	d017      	beq.n	8506c <pio_set_peripheral+0x7a>
   8503c:	68bb      	ldr	r3, [r7, #8]
   8503e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85042:	d81c      	bhi.n	8507e <pio_set_peripheral+0x8c>
   85044:	68bb      	ldr	r3, [r7, #8]
   85046:	2b00      	cmp	r3, #0
   85048:	d01d      	beq.n	85086 <pio_set_peripheral+0x94>
   8504a:	68bb      	ldr	r3, [r7, #8]
   8504c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85050:	d115      	bne.n	8507e <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   85052:	68fb      	ldr	r3, [r7, #12]
   85054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85056:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85058:	68fb      	ldr	r3, [r7, #12]
   8505a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8505c:	687b      	ldr	r3, [r7, #4]
   8505e:	43d9      	mvns	r1, r3
   85060:	697b      	ldr	r3, [r7, #20]
   85062:	400b      	ands	r3, r1
   85064:	401a      	ands	r2, r3
   85066:	68fb      	ldr	r3, [r7, #12]
   85068:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8506a:	e008      	b.n	8507e <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8506c:	68fb      	ldr	r3, [r7, #12]
   8506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85070:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   85072:	687a      	ldr	r2, [r7, #4]
   85074:	697b      	ldr	r3, [r7, #20]
   85076:	431a      	orrs	r2, r3
   85078:	68fb      	ldr	r3, [r7, #12]
   8507a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8507c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8507e:	68fb      	ldr	r3, [r7, #12]
   85080:	687a      	ldr	r2, [r7, #4]
   85082:	605a      	str	r2, [r3, #4]
   85084:	e000      	b.n	85088 <pio_set_peripheral+0x96>
		return;
   85086:	bf00      	nop
}
   85088:	371c      	adds	r7, #28
   8508a:	46bd      	mov	sp, r7
   8508c:	bc80      	pop	{r7}
   8508e:	4770      	bx	lr

00085090 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   85090:	b580      	push	{r7, lr}
   85092:	b084      	sub	sp, #16
   85094:	af00      	add	r7, sp, #0
   85096:	60f8      	str	r0, [r7, #12]
   85098:	60b9      	str	r1, [r7, #8]
   8509a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   8509c:	68b9      	ldr	r1, [r7, #8]
   8509e:	68f8      	ldr	r0, [r7, #12]
   850a0:	4b19      	ldr	r3, [pc, #100]	; (85108 <pio_set_input+0x78>)
   850a2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   850a4:	687b      	ldr	r3, [r7, #4]
   850a6:	f003 0301 	and.w	r3, r3, #1
   850aa:	461a      	mov	r2, r3
   850ac:	68b9      	ldr	r1, [r7, #8]
   850ae:	68f8      	ldr	r0, [r7, #12]
   850b0:	4b16      	ldr	r3, [pc, #88]	; (8510c <pio_set_input+0x7c>)
   850b2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   850b4:	687b      	ldr	r3, [r7, #4]
   850b6:	f003 030a 	and.w	r3, r3, #10
   850ba:	2b00      	cmp	r3, #0
   850bc:	d003      	beq.n	850c6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   850be:	68fb      	ldr	r3, [r7, #12]
   850c0:	68ba      	ldr	r2, [r7, #8]
   850c2:	621a      	str	r2, [r3, #32]
   850c4:	e002      	b.n	850cc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   850c6:	68fb      	ldr	r3, [r7, #12]
   850c8:	68ba      	ldr	r2, [r7, #8]
   850ca:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   850cc:	687b      	ldr	r3, [r7, #4]
   850ce:	f003 0302 	and.w	r3, r3, #2
   850d2:	2b00      	cmp	r3, #0
   850d4:	d004      	beq.n	850e0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   850d6:	68fb      	ldr	r3, [r7, #12]
   850d8:	68ba      	ldr	r2, [r7, #8]
   850da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   850de:	e008      	b.n	850f2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   850e0:	687b      	ldr	r3, [r7, #4]
   850e2:	f003 0308 	and.w	r3, r3, #8
   850e6:	2b00      	cmp	r3, #0
   850e8:	d003      	beq.n	850f2 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   850ea:	68fb      	ldr	r3, [r7, #12]
   850ec:	68ba      	ldr	r2, [r7, #8]
   850ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   850f2:	68fb      	ldr	r3, [r7, #12]
   850f4:	68ba      	ldr	r2, [r7, #8]
   850f6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   850f8:	68fb      	ldr	r3, [r7, #12]
   850fa:	68ba      	ldr	r2, [r7, #8]
   850fc:	601a      	str	r2, [r3, #0]
}
   850fe:	bf00      	nop
   85100:	3710      	adds	r7, #16
   85102:	46bd      	mov	sp, r7
   85104:	bd80      	pop	{r7, pc}
   85106:	bf00      	nop
   85108:	00085191 	.word	0x00085191
   8510c:	00084fc9 	.word	0x00084fc9

00085110 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   85110:	b580      	push	{r7, lr}
   85112:	b084      	sub	sp, #16
   85114:	af00      	add	r7, sp, #0
   85116:	60f8      	str	r0, [r7, #12]
   85118:	60b9      	str	r1, [r7, #8]
   8511a:	607a      	str	r2, [r7, #4]
   8511c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8511e:	68b9      	ldr	r1, [r7, #8]
   85120:	68f8      	ldr	r0, [r7, #12]
   85122:	4b12      	ldr	r3, [pc, #72]	; (8516c <pio_set_output+0x5c>)
   85124:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   85126:	69ba      	ldr	r2, [r7, #24]
   85128:	68b9      	ldr	r1, [r7, #8]
   8512a:	68f8      	ldr	r0, [r7, #12]
   8512c:	4b10      	ldr	r3, [pc, #64]	; (85170 <pio_set_output+0x60>)
   8512e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   85130:	683b      	ldr	r3, [r7, #0]
   85132:	2b00      	cmp	r3, #0
   85134:	d003      	beq.n	8513e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   85136:	68fb      	ldr	r3, [r7, #12]
   85138:	68ba      	ldr	r2, [r7, #8]
   8513a:	651a      	str	r2, [r3, #80]	; 0x50
   8513c:	e002      	b.n	85144 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8513e:	68fb      	ldr	r3, [r7, #12]
   85140:	68ba      	ldr	r2, [r7, #8]
   85142:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   85144:	687b      	ldr	r3, [r7, #4]
   85146:	2b00      	cmp	r3, #0
   85148:	d003      	beq.n	85152 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8514a:	68fb      	ldr	r3, [r7, #12]
   8514c:	68ba      	ldr	r2, [r7, #8]
   8514e:	631a      	str	r2, [r3, #48]	; 0x30
   85150:	e002      	b.n	85158 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   85152:	68fb      	ldr	r3, [r7, #12]
   85154:	68ba      	ldr	r2, [r7, #8]
   85156:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   85158:	68fb      	ldr	r3, [r7, #12]
   8515a:	68ba      	ldr	r2, [r7, #8]
   8515c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8515e:	68fb      	ldr	r3, [r7, #12]
   85160:	68ba      	ldr	r2, [r7, #8]
   85162:	601a      	str	r2, [r3, #0]
}
   85164:	bf00      	nop
   85166:	3710      	adds	r7, #16
   85168:	46bd      	mov	sp, r7
   8516a:	bd80      	pop	{r7, pc}
   8516c:	00085191 	.word	0x00085191
   85170:	00084fc9 	.word	0x00084fc9

00085174 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   85174:	b480      	push	{r7}
   85176:	b083      	sub	sp, #12
   85178:	af00      	add	r7, sp, #0
   8517a:	6078      	str	r0, [r7, #4]
   8517c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   8517e:	687b      	ldr	r3, [r7, #4]
   85180:	683a      	ldr	r2, [r7, #0]
   85182:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   85186:	bf00      	nop
   85188:	370c      	adds	r7, #12
   8518a:	46bd      	mov	sp, r7
   8518c:	bc80      	pop	{r7}
   8518e:	4770      	bx	lr

00085190 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   85190:	b480      	push	{r7}
   85192:	b083      	sub	sp, #12
   85194:	af00      	add	r7, sp, #0
   85196:	6078      	str	r0, [r7, #4]
   85198:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8519a:	687b      	ldr	r3, [r7, #4]
   8519c:	683a      	ldr	r2, [r7, #0]
   8519e:	645a      	str	r2, [r3, #68]	; 0x44
}
   851a0:	bf00      	nop
   851a2:	370c      	adds	r7, #12
   851a4:	46bd      	mov	sp, r7
   851a6:	bc80      	pop	{r7}
   851a8:	4770      	bx	lr

000851aa <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   851aa:	b480      	push	{r7}
   851ac:	b083      	sub	sp, #12
   851ae:	af00      	add	r7, sp, #0
   851b0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   851b2:	687b      	ldr	r3, [r7, #4]
   851b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   851b6:	4618      	mov	r0, r3
   851b8:	370c      	adds	r7, #12
   851ba:	46bd      	mov	sp, r7
   851bc:	bc80      	pop	{r7}
   851be:	4770      	bx	lr

000851c0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   851c0:	b480      	push	{r7}
   851c2:	b083      	sub	sp, #12
   851c4:	af00      	add	r7, sp, #0
   851c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   851c8:	687b      	ldr	r3, [r7, #4]
   851ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   851cc:	4618      	mov	r0, r3
   851ce:	370c      	adds	r7, #12
   851d0:	46bd      	mov	sp, r7
   851d2:	bc80      	pop	{r7}
   851d4:	4770      	bx	lr
   851d6:	0000      	movs	r0, r0

000851d8 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   851d8:	b580      	push	{r7, lr}
   851da:	b084      	sub	sp, #16
   851dc:	af00      	add	r7, sp, #0
   851de:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   851e0:	6878      	ldr	r0, [r7, #4]
   851e2:	4b08      	ldr	r3, [pc, #32]	; (85204 <pio_get_pin_value+0x2c>)
   851e4:	4798      	blx	r3
   851e6:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   851e8:	68fb      	ldr	r3, [r7, #12]
   851ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   851ec:	687b      	ldr	r3, [r7, #4]
   851ee:	f003 031f 	and.w	r3, r3, #31
   851f2:	fa22 f303 	lsr.w	r3, r2, r3
   851f6:	f003 0301 	and.w	r3, r3, #1
}
   851fa:	4618      	mov	r0, r3
   851fc:	3710      	adds	r7, #16
   851fe:	46bd      	mov	sp, r7
   85200:	bd80      	pop	{r7, pc}
   85202:	bf00      	nop
   85204:	00085475 	.word	0x00085475

00085208 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   85208:	b580      	push	{r7, lr}
   8520a:	b084      	sub	sp, #16
   8520c:	af00      	add	r7, sp, #0
   8520e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85210:	6878      	ldr	r0, [r7, #4]
   85212:	4b08      	ldr	r3, [pc, #32]	; (85234 <pio_set_pin_high+0x2c>)
   85214:	4798      	blx	r3
   85216:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85218:	687b      	ldr	r3, [r7, #4]
   8521a:	f003 031f 	and.w	r3, r3, #31
   8521e:	2201      	movs	r2, #1
   85220:	fa02 f303 	lsl.w	r3, r2, r3
   85224:	461a      	mov	r2, r3
   85226:	68fb      	ldr	r3, [r7, #12]
   85228:	631a      	str	r2, [r3, #48]	; 0x30
}
   8522a:	bf00      	nop
   8522c:	3710      	adds	r7, #16
   8522e:	46bd      	mov	sp, r7
   85230:	bd80      	pop	{r7, pc}
   85232:	bf00      	nop
   85234:	00085475 	.word	0x00085475

00085238 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   85238:	b580      	push	{r7, lr}
   8523a:	b084      	sub	sp, #16
   8523c:	af00      	add	r7, sp, #0
   8523e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85240:	6878      	ldr	r0, [r7, #4]
   85242:	4b08      	ldr	r3, [pc, #32]	; (85264 <pio_set_pin_low+0x2c>)
   85244:	4798      	blx	r3
   85246:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85248:	687b      	ldr	r3, [r7, #4]
   8524a:	f003 031f 	and.w	r3, r3, #31
   8524e:	2201      	movs	r2, #1
   85250:	fa02 f303 	lsl.w	r3, r2, r3
   85254:	461a      	mov	r2, r3
   85256:	68fb      	ldr	r3, [r7, #12]
   85258:	635a      	str	r2, [r3, #52]	; 0x34
}
   8525a:	bf00      	nop
   8525c:	3710      	adds	r7, #16
   8525e:	46bd      	mov	sp, r7
   85260:	bd80      	pop	{r7, pc}
   85262:	bf00      	nop
   85264:	00085475 	.word	0x00085475

00085268 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   85268:	b590      	push	{r4, r7, lr}
   8526a:	b087      	sub	sp, #28
   8526c:	af02      	add	r7, sp, #8
   8526e:	6078      	str	r0, [r7, #4]
   85270:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85272:	6878      	ldr	r0, [r7, #4]
   85274:	4b43      	ldr	r3, [pc, #268]	; (85384 <pio_configure_pin+0x11c>)
   85276:	4798      	blx	r3
   85278:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8527a:	683b      	ldr	r3, [r7, #0]
   8527c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   85280:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85284:	d057      	beq.n	85336 <pio_configure_pin+0xce>
   85286:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8528a:	d873      	bhi.n	85374 <pio_configure_pin+0x10c>
   8528c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85290:	d051      	beq.n	85336 <pio_configure_pin+0xce>
   85292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85296:	d86d      	bhi.n	85374 <pio_configure_pin+0x10c>
   85298:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8529c:	d03f      	beq.n	8531e <pio_configure_pin+0xb6>
   8529e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   852a2:	d867      	bhi.n	85374 <pio_configure_pin+0x10c>
   852a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   852a8:	d003      	beq.n	852b2 <pio_configure_pin+0x4a>
   852aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   852ae:	d01b      	beq.n	852e8 <pio_configure_pin+0x80>
   852b0:	e060      	b.n	85374 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   852b2:	687b      	ldr	r3, [r7, #4]
   852b4:	f003 031f 	and.w	r3, r3, #31
   852b8:	2201      	movs	r2, #1
   852ba:	fa02 f303 	lsl.w	r3, r2, r3
   852be:	461a      	mov	r2, r3
   852c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   852c4:	68f8      	ldr	r0, [r7, #12]
   852c6:	4b30      	ldr	r3, [pc, #192]	; (85388 <pio_configure_pin+0x120>)
   852c8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   852ca:	687b      	ldr	r3, [r7, #4]
   852cc:	f003 031f 	and.w	r3, r3, #31
   852d0:	2201      	movs	r2, #1
   852d2:	fa02 f303 	lsl.w	r3, r2, r3
   852d6:	4619      	mov	r1, r3
   852d8:	683b      	ldr	r3, [r7, #0]
   852da:	f003 0301 	and.w	r3, r3, #1
   852de:	461a      	mov	r2, r3
   852e0:	68f8      	ldr	r0, [r7, #12]
   852e2:	4b2a      	ldr	r3, [pc, #168]	; (8538c <pio_configure_pin+0x124>)
   852e4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   852e6:	e047      	b.n	85378 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   852e8:	687b      	ldr	r3, [r7, #4]
   852ea:	f003 031f 	and.w	r3, r3, #31
   852ee:	2201      	movs	r2, #1
   852f0:	fa02 f303 	lsl.w	r3, r2, r3
   852f4:	461a      	mov	r2, r3
   852f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   852fa:	68f8      	ldr	r0, [r7, #12]
   852fc:	4b22      	ldr	r3, [pc, #136]	; (85388 <pio_configure_pin+0x120>)
   852fe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   85300:	687b      	ldr	r3, [r7, #4]
   85302:	f003 031f 	and.w	r3, r3, #31
   85306:	2201      	movs	r2, #1
   85308:	fa02 f303 	lsl.w	r3, r2, r3
   8530c:	4619      	mov	r1, r3
   8530e:	683b      	ldr	r3, [r7, #0]
   85310:	f003 0301 	and.w	r3, r3, #1
   85314:	461a      	mov	r2, r3
   85316:	68f8      	ldr	r0, [r7, #12]
   85318:	4b1c      	ldr	r3, [pc, #112]	; (8538c <pio_configure_pin+0x124>)
   8531a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8531c:	e02c      	b.n	85378 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8531e:	687b      	ldr	r3, [r7, #4]
   85320:	f003 031f 	and.w	r3, r3, #31
   85324:	2201      	movs	r2, #1
   85326:	fa02 f303 	lsl.w	r3, r2, r3
   8532a:	683a      	ldr	r2, [r7, #0]
   8532c:	4619      	mov	r1, r3
   8532e:	68f8      	ldr	r0, [r7, #12]
   85330:	4b17      	ldr	r3, [pc, #92]	; (85390 <pio_configure_pin+0x128>)
   85332:	4798      	blx	r3
		break;
   85334:	e020      	b.n	85378 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85336:	687b      	ldr	r3, [r7, #4]
   85338:	f003 031f 	and.w	r3, r3, #31
   8533c:	2201      	movs	r2, #1
   8533e:	fa02 f303 	lsl.w	r3, r2, r3
   85342:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85344:	683b      	ldr	r3, [r7, #0]
   85346:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8534a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8534e:	bf0c      	ite	eq
   85350:	2301      	moveq	r3, #1
   85352:	2300      	movne	r3, #0
   85354:	b2db      	uxtb	r3, r3
   85356:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   85358:	683b      	ldr	r3, [r7, #0]
   8535a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8535c:	f003 0201 	and.w	r2, r3, #1
   85360:	683b      	ldr	r3, [r7, #0]
   85362:	f003 0301 	and.w	r3, r3, #1
   85366:	9300      	str	r3, [sp, #0]
   85368:	4613      	mov	r3, r2
   8536a:	4602      	mov	r2, r0
   8536c:	68f8      	ldr	r0, [r7, #12]
   8536e:	4c09      	ldr	r4, [pc, #36]	; (85394 <pio_configure_pin+0x12c>)
   85370:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   85372:	e001      	b.n	85378 <pio_configure_pin+0x110>

	default:
		return 0;
   85374:	2300      	movs	r3, #0
   85376:	e000      	b.n	8537a <pio_configure_pin+0x112>
	}

	return 1;
   85378:	2301      	movs	r3, #1
}
   8537a:	4618      	mov	r0, r3
   8537c:	3714      	adds	r7, #20
   8537e:	46bd      	mov	sp, r7
   85380:	bd90      	pop	{r4, r7, pc}
   85382:	bf00      	nop
   85384:	00085475 	.word	0x00085475
   85388:	00084ff3 	.word	0x00084ff3
   8538c:	00084fc9 	.word	0x00084fc9
   85390:	00085091 	.word	0x00085091
   85394:	00085111 	.word	0x00085111

00085398 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   85398:	b590      	push	{r4, r7, lr}
   8539a:	b087      	sub	sp, #28
   8539c:	af02      	add	r7, sp, #8
   8539e:	60f8      	str	r0, [r7, #12]
   853a0:	60b9      	str	r1, [r7, #8]
   853a2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   853a4:	687b      	ldr	r3, [r7, #4]
   853a6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   853aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   853ae:	d039      	beq.n	85424 <pio_configure_pin_group+0x8c>
   853b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   853b4:	d84f      	bhi.n	85456 <pio_configure_pin_group+0xbe>
   853b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   853ba:	d033      	beq.n	85424 <pio_configure_pin_group+0x8c>
   853bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   853c0:	d849      	bhi.n	85456 <pio_configure_pin_group+0xbe>
   853c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   853c6:	d027      	beq.n	85418 <pio_configure_pin_group+0x80>
   853c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   853cc:	d843      	bhi.n	85456 <pio_configure_pin_group+0xbe>
   853ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   853d2:	d003      	beq.n	853dc <pio_configure_pin_group+0x44>
   853d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   853d8:	d00f      	beq.n	853fa <pio_configure_pin_group+0x62>
   853da:	e03c      	b.n	85456 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   853dc:	68ba      	ldr	r2, [r7, #8]
   853de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   853e2:	68f8      	ldr	r0, [r7, #12]
   853e4:	4b1f      	ldr	r3, [pc, #124]	; (85464 <pio_configure_pin_group+0xcc>)
   853e6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   853e8:	687b      	ldr	r3, [r7, #4]
   853ea:	f003 0301 	and.w	r3, r3, #1
   853ee:	461a      	mov	r2, r3
   853f0:	68b9      	ldr	r1, [r7, #8]
   853f2:	68f8      	ldr	r0, [r7, #12]
   853f4:	4b1c      	ldr	r3, [pc, #112]	; (85468 <pio_configure_pin_group+0xd0>)
   853f6:	4798      	blx	r3
		break;
   853f8:	e02f      	b.n	8545a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   853fa:	68ba      	ldr	r2, [r7, #8]
   853fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85400:	68f8      	ldr	r0, [r7, #12]
   85402:	4b18      	ldr	r3, [pc, #96]	; (85464 <pio_configure_pin_group+0xcc>)
   85404:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   85406:	687b      	ldr	r3, [r7, #4]
   85408:	f003 0301 	and.w	r3, r3, #1
   8540c:	461a      	mov	r2, r3
   8540e:	68b9      	ldr	r1, [r7, #8]
   85410:	68f8      	ldr	r0, [r7, #12]
   85412:	4b15      	ldr	r3, [pc, #84]	; (85468 <pio_configure_pin_group+0xd0>)
   85414:	4798      	blx	r3
		break;
   85416:	e020      	b.n	8545a <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   85418:	687a      	ldr	r2, [r7, #4]
   8541a:	68b9      	ldr	r1, [r7, #8]
   8541c:	68f8      	ldr	r0, [r7, #12]
   8541e:	4b13      	ldr	r3, [pc, #76]	; (8546c <pio_configure_pin_group+0xd4>)
   85420:	4798      	blx	r3
		break;
   85422:	e01a      	b.n	8545a <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85424:	687b      	ldr	r3, [r7, #4]
   85426:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8542a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8542e:	bf0c      	ite	eq
   85430:	2301      	moveq	r3, #1
   85432:	2300      	movne	r3, #0
   85434:	b2db      	uxtb	r3, r3
   85436:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   85438:	687b      	ldr	r3, [r7, #4]
   8543a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   8543c:	f003 0201 	and.w	r2, r3, #1
   85440:	687b      	ldr	r3, [r7, #4]
   85442:	f003 0301 	and.w	r3, r3, #1
   85446:	9300      	str	r3, [sp, #0]
   85448:	4613      	mov	r3, r2
   8544a:	460a      	mov	r2, r1
   8544c:	68b9      	ldr	r1, [r7, #8]
   8544e:	68f8      	ldr	r0, [r7, #12]
   85450:	4c07      	ldr	r4, [pc, #28]	; (85470 <pio_configure_pin_group+0xd8>)
   85452:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   85454:	e001      	b.n	8545a <pio_configure_pin_group+0xc2>

	default:
		return 0;
   85456:	2300      	movs	r3, #0
   85458:	e000      	b.n	8545c <pio_configure_pin_group+0xc4>
	}

	return 1;
   8545a:	2301      	movs	r3, #1
}
   8545c:	4618      	mov	r0, r3
   8545e:	3714      	adds	r7, #20
   85460:	46bd      	mov	sp, r7
   85462:	bd90      	pop	{r4, r7, pc}
   85464:	00084ff3 	.word	0x00084ff3
   85468:	00084fc9 	.word	0x00084fc9
   8546c:	00085091 	.word	0x00085091
   85470:	00085111 	.word	0x00085111

00085474 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   85474:	b480      	push	{r7}
   85476:	b085      	sub	sp, #20
   85478:	af00      	add	r7, sp, #0
   8547a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8547c:	687b      	ldr	r3, [r7, #4]
   8547e:	095b      	lsrs	r3, r3, #5
   85480:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85484:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85488:	025b      	lsls	r3, r3, #9
   8548a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   8548c:	68fb      	ldr	r3, [r7, #12]
}
   8548e:	4618      	mov	r0, r3
   85490:	3714      	adds	r7, #20
   85492:	46bd      	mov	sp, r7
   85494:	bc80      	pop	{r7}
   85496:	4770      	bx	lr

00085498 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   85498:	b480      	push	{r7}
   8549a:	af00      	add	r7, sp, #0
	while (1) {
   8549c:	e7fe      	b.n	8549c <Dummy_Handler+0x4>
   8549e:	0000      	movs	r0, r0

000854a0 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   854a0:	b480      	push	{r7}
   854a2:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   854a4:	4b02      	ldr	r3, [pc, #8]	; (854b0 <udc_get_string_serial_name+0x10>)
	}
   854a6:	4618      	mov	r0, r3
   854a8:	46bd      	mov	sp, r7
   854aa:	bc80      	pop	{r7}
   854ac:	4770      	bx	lr
   854ae:	bf00      	nop
   854b0:	2000025c 	.word	0x2000025c

000854b4 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   854b4:	b480      	push	{r7}
   854b6:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   854b8:	4b02      	ldr	r3, [pc, #8]	; (854c4 <udc_get_interface_desc+0x10>)
   854ba:	681b      	ldr	r3, [r3, #0]
}
   854bc:	4618      	mov	r0, r3
   854be:	46bd      	mov	sp, r7
   854c0:	bc80      	pop	{r7}
   854c2:	4770      	bx	lr
   854c4:	20001364 	.word	0x20001364

000854c8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   854c8:	b480      	push	{r7}
   854ca:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   854cc:	4b06      	ldr	r3, [pc, #24]	; (854e8 <udc_get_eof_conf+0x20>)
   854ce:	681b      	ldr	r3, [r3, #0]
   854d0:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   854d2:	4a05      	ldr	r2, [pc, #20]	; (854e8 <udc_get_eof_conf+0x20>)
   854d4:	6812      	ldr	r2, [r2, #0]
   854d6:	6812      	ldr	r2, [r2, #0]
   854d8:	8852      	ldrh	r2, [r2, #2]
   854da:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   854dc:	4413      	add	r3, r2
}
   854de:	4618      	mov	r0, r3
   854e0:	46bd      	mov	sp, r7
   854e2:	bc80      	pop	{r7}
   854e4:	4770      	bx	lr
   854e6:	bf00      	nop
   854e8:	20001360 	.word	0x20001360

000854ec <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   854ec:	b580      	push	{r7, lr}
   854ee:	b084      	sub	sp, #16
   854f0:	af00      	add	r7, sp, #0
   854f2:	6078      	str	r0, [r7, #4]
   854f4:	460b      	mov	r3, r1
   854f6:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   854f8:	4b12      	ldr	r3, [pc, #72]	; (85544 <udc_next_desc_in_iface+0x58>)
   854fa:	4798      	blx	r3
   854fc:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   854fe:	687b      	ldr	r3, [r7, #4]
   85500:	781b      	ldrb	r3, [r3, #0]
   85502:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85504:	687b      	ldr	r3, [r7, #4]
   85506:	4413      	add	r3, r2
   85508:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8550a:	e010      	b.n	8552e <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8550c:	687b      	ldr	r3, [r7, #4]
   8550e:	785b      	ldrb	r3, [r3, #1]
   85510:	2b04      	cmp	r3, #4
   85512:	d011      	beq.n	85538 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   85514:	687b      	ldr	r3, [r7, #4]
   85516:	785b      	ldrb	r3, [r3, #1]
   85518:	78fa      	ldrb	r2, [r7, #3]
   8551a:	429a      	cmp	r2, r3
   8551c:	d101      	bne.n	85522 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   8551e:	687b      	ldr	r3, [r7, #4]
   85520:	e00c      	b.n	8553c <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   85522:	687b      	ldr	r3, [r7, #4]
   85524:	781b      	ldrb	r3, [r3, #0]
   85526:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85528:	687b      	ldr	r3, [r7, #4]
   8552a:	4413      	add	r3, r2
   8552c:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   8552e:	68fa      	ldr	r2, [r7, #12]
   85530:	687b      	ldr	r3, [r7, #4]
   85532:	429a      	cmp	r2, r3
   85534:	d8ea      	bhi.n	8550c <udc_next_desc_in_iface+0x20>
   85536:	e000      	b.n	8553a <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   85538:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   8553a:	2300      	movs	r3, #0
}
   8553c:	4618      	mov	r0, r3
   8553e:	3710      	adds	r7, #16
   85540:	46bd      	mov	sp, r7
   85542:	bd80      	pop	{r7, pc}
   85544:	000854c9 	.word	0x000854c9

00085548 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   85548:	b580      	push	{r7, lr}
   8554a:	b084      	sub	sp, #16
   8554c:	af00      	add	r7, sp, #0
   8554e:	4603      	mov	r3, r0
   85550:	460a      	mov	r2, r1
   85552:	71fb      	strb	r3, [r7, #7]
   85554:	4613      	mov	r3, r2
   85556:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   85558:	4b1e      	ldr	r3, [pc, #120]	; (855d4 <udc_update_iface_desc+0x8c>)
   8555a:	781b      	ldrb	r3, [r3, #0]
   8555c:	2b00      	cmp	r3, #0
   8555e:	d101      	bne.n	85564 <udc_update_iface_desc+0x1c>
		return false;
   85560:	2300      	movs	r3, #0
   85562:	e032      	b.n	855ca <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85564:	4b1c      	ldr	r3, [pc, #112]	; (855d8 <udc_update_iface_desc+0x90>)
   85566:	681b      	ldr	r3, [r3, #0]
   85568:	681b      	ldr	r3, [r3, #0]
   8556a:	791b      	ldrb	r3, [r3, #4]
   8556c:	79fa      	ldrb	r2, [r7, #7]
   8556e:	429a      	cmp	r2, r3
   85570:	d301      	bcc.n	85576 <udc_update_iface_desc+0x2e>
		return false;
   85572:	2300      	movs	r3, #0
   85574:	e029      	b.n	855ca <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   85576:	4b18      	ldr	r3, [pc, #96]	; (855d8 <udc_update_iface_desc+0x90>)
   85578:	681b      	ldr	r3, [r3, #0]
   8557a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   8557c:	4a17      	ldr	r2, [pc, #92]	; (855dc <udc_update_iface_desc+0x94>)
   8557e:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   85580:	4b17      	ldr	r3, [pc, #92]	; (855e0 <udc_update_iface_desc+0x98>)
   85582:	4798      	blx	r3
   85584:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   85586:	e01a      	b.n	855be <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   85588:	4b14      	ldr	r3, [pc, #80]	; (855dc <udc_update_iface_desc+0x94>)
   8558a:	681b      	ldr	r3, [r3, #0]
   8558c:	785b      	ldrb	r3, [r3, #1]
   8558e:	2b04      	cmp	r3, #4
   85590:	d10d      	bne.n	855ae <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   85592:	4b12      	ldr	r3, [pc, #72]	; (855dc <udc_update_iface_desc+0x94>)
   85594:	681b      	ldr	r3, [r3, #0]
   85596:	789b      	ldrb	r3, [r3, #2]
   85598:	79fa      	ldrb	r2, [r7, #7]
   8559a:	429a      	cmp	r2, r3
   8559c:	d107      	bne.n	855ae <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   8559e:	4b0f      	ldr	r3, [pc, #60]	; (855dc <udc_update_iface_desc+0x94>)
   855a0:	681b      	ldr	r3, [r3, #0]
   855a2:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   855a4:	79ba      	ldrb	r2, [r7, #6]
   855a6:	429a      	cmp	r2, r3
   855a8:	d101      	bne.n	855ae <udc_update_iface_desc+0x66>
				return true; // Interface found
   855aa:	2301      	movs	r3, #1
   855ac:	e00d      	b.n	855ca <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   855ae:	4b0b      	ldr	r3, [pc, #44]	; (855dc <udc_update_iface_desc+0x94>)
   855b0:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   855b2:	4a0a      	ldr	r2, [pc, #40]	; (855dc <udc_update_iface_desc+0x94>)
   855b4:	6812      	ldr	r2, [r2, #0]
   855b6:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   855b8:	4413      	add	r3, r2
   855ba:	4a08      	ldr	r2, [pc, #32]	; (855dc <udc_update_iface_desc+0x94>)
   855bc:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   855be:	4b07      	ldr	r3, [pc, #28]	; (855dc <udc_update_iface_desc+0x94>)
   855c0:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   855c2:	68fa      	ldr	r2, [r7, #12]
   855c4:	429a      	cmp	r2, r3
   855c6:	d8df      	bhi.n	85588 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   855c8:	2300      	movs	r3, #0
}
   855ca:	4618      	mov	r0, r3
   855cc:	3710      	adds	r7, #16
   855ce:	46bd      	mov	sp, r7
   855d0:	bd80      	pop	{r7, pc}
   855d2:	bf00      	nop
   855d4:	2000135c 	.word	0x2000135c
   855d8:	20001360 	.word	0x20001360
   855dc:	20001364 	.word	0x20001364
   855e0:	000854c9 	.word	0x000854c9

000855e4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   855e4:	b580      	push	{r7, lr}
   855e6:	b084      	sub	sp, #16
   855e8:	af00      	add	r7, sp, #0
   855ea:	4603      	mov	r3, r0
   855ec:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   855ee:	79fb      	ldrb	r3, [r7, #7]
   855f0:	2100      	movs	r1, #0
   855f2:	4618      	mov	r0, r3
   855f4:	4b1e      	ldr	r3, [pc, #120]	; (85670 <udc_iface_disable+0x8c>)
   855f6:	4798      	blx	r3
   855f8:	4603      	mov	r3, r0
   855fa:	f083 0301 	eor.w	r3, r3, #1
   855fe:	b2db      	uxtb	r3, r3
   85600:	2b00      	cmp	r3, #0
   85602:	d001      	beq.n	85608 <udc_iface_disable+0x24>
		return false;
   85604:	2300      	movs	r3, #0
   85606:	e02f      	b.n	85668 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85608:	4b1a      	ldr	r3, [pc, #104]	; (85674 <udc_iface_disable+0x90>)
   8560a:	681b      	ldr	r3, [r3, #0]
   8560c:	685a      	ldr	r2, [r3, #4]
   8560e:	79fb      	ldrb	r3, [r7, #7]
   85610:	009b      	lsls	r3, r3, #2
   85612:	4413      	add	r3, r2
   85614:	681b      	ldr	r3, [r3, #0]
   85616:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85618:	68bb      	ldr	r3, [r7, #8]
   8561a:	68db      	ldr	r3, [r3, #12]
   8561c:	4798      	blx	r3
   8561e:	4603      	mov	r3, r0
   85620:	461a      	mov	r2, r3
   85622:	79fb      	ldrb	r3, [r7, #7]
   85624:	4611      	mov	r1, r2
   85626:	4618      	mov	r0, r3
   85628:	4b11      	ldr	r3, [pc, #68]	; (85670 <udc_iface_disable+0x8c>)
   8562a:	4798      	blx	r3
   8562c:	4603      	mov	r3, r0
   8562e:	f083 0301 	eor.w	r3, r3, #1
   85632:	b2db      	uxtb	r3, r3
   85634:	2b00      	cmp	r3, #0
   85636:	d001      	beq.n	8563c <udc_iface_disable+0x58>
		return false;
   85638:	2300      	movs	r3, #0
   8563a:	e015      	b.n	85668 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8563c:	4b0e      	ldr	r3, [pc, #56]	; (85678 <udc_iface_disable+0x94>)
   8563e:	681b      	ldr	r3, [r3, #0]
   85640:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   85642:	2105      	movs	r1, #5
   85644:	68f8      	ldr	r0, [r7, #12]
   85646:	4b0d      	ldr	r3, [pc, #52]	; (8567c <udc_iface_disable+0x98>)
   85648:	4798      	blx	r3
   8564a:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   8564c:	68fb      	ldr	r3, [r7, #12]
   8564e:	2b00      	cmp	r3, #0
   85650:	d005      	beq.n	8565e <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85652:	68fb      	ldr	r3, [r7, #12]
   85654:	789b      	ldrb	r3, [r3, #2]
   85656:	4618      	mov	r0, r3
   85658:	4b09      	ldr	r3, [pc, #36]	; (85680 <udc_iface_disable+0x9c>)
   8565a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8565c:	e7f1      	b.n	85642 <udc_iface_disable+0x5e>
				break;
   8565e:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   85660:	68bb      	ldr	r3, [r7, #8]
   85662:	685b      	ldr	r3, [r3, #4]
   85664:	4798      	blx	r3
	return true;
   85666:	2301      	movs	r3, #1
}
   85668:	4618      	mov	r0, r3
   8566a:	3710      	adds	r7, #16
   8566c:	46bd      	mov	sp, r7
   8566e:	bd80      	pop	{r7, pc}
   85670:	00085549 	.word	0x00085549
   85674:	20001360 	.word	0x20001360
   85678:	20001364 	.word	0x20001364
   8567c:	000854ed 	.word	0x000854ed
   85680:	000830c5 	.word	0x000830c5

00085684 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   85684:	b580      	push	{r7, lr}
   85686:	b084      	sub	sp, #16
   85688:	af00      	add	r7, sp, #0
   8568a:	4603      	mov	r3, r0
   8568c:	460a      	mov	r2, r1
   8568e:	71fb      	strb	r3, [r7, #7]
   85690:	4613      	mov	r3, r2
   85692:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   85694:	79ba      	ldrb	r2, [r7, #6]
   85696:	79fb      	ldrb	r3, [r7, #7]
   85698:	4611      	mov	r1, r2
   8569a:	4618      	mov	r0, r3
   8569c:	4b1a      	ldr	r3, [pc, #104]	; (85708 <udc_iface_enable+0x84>)
   8569e:	4798      	blx	r3
   856a0:	4603      	mov	r3, r0
   856a2:	f083 0301 	eor.w	r3, r3, #1
   856a6:	b2db      	uxtb	r3, r3
   856a8:	2b00      	cmp	r3, #0
   856aa:	d001      	beq.n	856b0 <udc_iface_enable+0x2c>
		return false;
   856ac:	2300      	movs	r3, #0
   856ae:	e027      	b.n	85700 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   856b0:	4b16      	ldr	r3, [pc, #88]	; (8570c <udc_iface_enable+0x88>)
   856b2:	681b      	ldr	r3, [r3, #0]
   856b4:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   856b6:	2105      	movs	r1, #5
   856b8:	68f8      	ldr	r0, [r7, #12]
   856ba:	4b15      	ldr	r3, [pc, #84]	; (85710 <udc_iface_enable+0x8c>)
   856bc:	4798      	blx	r3
   856be:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   856c0:	68fb      	ldr	r3, [r7, #12]
   856c2:	2b00      	cmp	r3, #0
   856c4:	d011      	beq.n	856ea <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   856c6:	68fb      	ldr	r3, [r7, #12]
   856c8:	7898      	ldrb	r0, [r3, #2]
   856ca:	68fb      	ldr	r3, [r7, #12]
   856cc:	78d9      	ldrb	r1, [r3, #3]
   856ce:	68fb      	ldr	r3, [r7, #12]
   856d0:	889b      	ldrh	r3, [r3, #4]
   856d2:	b29b      	uxth	r3, r3
   856d4:	461a      	mov	r2, r3
   856d6:	4b0f      	ldr	r3, [pc, #60]	; (85714 <udc_iface_enable+0x90>)
   856d8:	4798      	blx	r3
   856da:	4603      	mov	r3, r0
   856dc:	f083 0301 	eor.w	r3, r3, #1
   856e0:	b2db      	uxtb	r3, r3
   856e2:	2b00      	cmp	r3, #0
   856e4:	d0e7      	beq.n	856b6 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   856e6:	2300      	movs	r3, #0
   856e8:	e00a      	b.n	85700 <udc_iface_enable+0x7c>
			break;
   856ea:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   856ec:	4b0a      	ldr	r3, [pc, #40]	; (85718 <udc_iface_enable+0x94>)
   856ee:	681b      	ldr	r3, [r3, #0]
   856f0:	685a      	ldr	r2, [r3, #4]
   856f2:	79fb      	ldrb	r3, [r7, #7]
   856f4:	009b      	lsls	r3, r3, #2
   856f6:	4413      	add	r3, r2
   856f8:	681b      	ldr	r3, [r3, #0]
   856fa:	681b      	ldr	r3, [r3, #0]
   856fc:	4798      	blx	r3
   856fe:	4603      	mov	r3, r0
}
   85700:	4618      	mov	r0, r3
   85702:	3710      	adds	r7, #16
   85704:	46bd      	mov	sp, r7
   85706:	bd80      	pop	{r7, pc}
   85708:	00085549 	.word	0x00085549
   8570c:	20001364 	.word	0x20001364
   85710:	000854ed 	.word	0x000854ed
   85714:	00082d0d 	.word	0x00082d0d
   85718:	20001360 	.word	0x20001360

0008571c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8571c:	b580      	push	{r7, lr}
   8571e:	af00      	add	r7, sp, #0
	udd_enable();
   85720:	4b01      	ldr	r3, [pc, #4]	; (85728 <udc_start+0xc>)
   85722:	4798      	blx	r3
}
   85724:	bf00      	nop
   85726:	bd80      	pop	{r7, pc}
   85728:	00082aa9 	.word	0x00082aa9

0008572c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   8572c:	b580      	push	{r7, lr}
   8572e:	b082      	sub	sp, #8
   85730:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   85732:	4b0f      	ldr	r3, [pc, #60]	; (85770 <udc_reset+0x44>)
   85734:	781b      	ldrb	r3, [r3, #0]
   85736:	2b00      	cmp	r3, #0
   85738:	d010      	beq.n	8575c <udc_reset+0x30>
		for (iface_num = 0;
   8573a:	2300      	movs	r3, #0
   8573c:	71fb      	strb	r3, [r7, #7]
   8573e:	e006      	b.n	8574e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   85740:	79fb      	ldrb	r3, [r7, #7]
   85742:	4618      	mov	r0, r3
   85744:	4b0b      	ldr	r3, [pc, #44]	; (85774 <udc_reset+0x48>)
   85746:	4798      	blx	r3
				iface_num++) {
   85748:	79fb      	ldrb	r3, [r7, #7]
   8574a:	3301      	adds	r3, #1
   8574c:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8574e:	4b0a      	ldr	r3, [pc, #40]	; (85778 <udc_reset+0x4c>)
   85750:	681b      	ldr	r3, [r3, #0]
   85752:	681b      	ldr	r3, [r3, #0]
   85754:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   85756:	79fa      	ldrb	r2, [r7, #7]
   85758:	429a      	cmp	r2, r3
   8575a:	d3f1      	bcc.n	85740 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   8575c:	4b04      	ldr	r3, [pc, #16]	; (85770 <udc_reset+0x44>)
   8575e:	2200      	movs	r2, #0
   85760:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   85762:	4b06      	ldr	r3, [pc, #24]	; (8577c <udc_reset+0x50>)
   85764:	2200      	movs	r2, #0
   85766:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   85768:	bf00      	nop
   8576a:	3708      	adds	r7, #8
   8576c:	46bd      	mov	sp, r7
   8576e:	bd80      	pop	{r7, pc}
   85770:	2000135c 	.word	0x2000135c
   85774:	000855e5 	.word	0x000855e5
   85778:	20001360 	.word	0x20001360
   8577c:	2000135a 	.word	0x2000135a

00085780 <udc_sof_notify>:

void udc_sof_notify(void)
{
   85780:	b580      	push	{r7, lr}
   85782:	b082      	sub	sp, #8
   85784:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   85786:	4b14      	ldr	r3, [pc, #80]	; (857d8 <udc_sof_notify+0x58>)
   85788:	781b      	ldrb	r3, [r3, #0]
   8578a:	2b00      	cmp	r3, #0
   8578c:	d01f      	beq.n	857ce <udc_sof_notify+0x4e>
		for (iface_num = 0;
   8578e:	2300      	movs	r3, #0
   85790:	71fb      	strb	r3, [r7, #7]
   85792:	e015      	b.n	857c0 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   85794:	4b11      	ldr	r3, [pc, #68]	; (857dc <udc_sof_notify+0x5c>)
   85796:	681b      	ldr	r3, [r3, #0]
   85798:	685a      	ldr	r2, [r3, #4]
   8579a:	79fb      	ldrb	r3, [r7, #7]
   8579c:	009b      	lsls	r3, r3, #2
   8579e:	4413      	add	r3, r2
   857a0:	681b      	ldr	r3, [r3, #0]
   857a2:	691b      	ldr	r3, [r3, #16]
   857a4:	2b00      	cmp	r3, #0
   857a6:	d008      	beq.n	857ba <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   857a8:	4b0c      	ldr	r3, [pc, #48]	; (857dc <udc_sof_notify+0x5c>)
   857aa:	681b      	ldr	r3, [r3, #0]
   857ac:	685a      	ldr	r2, [r3, #4]
   857ae:	79fb      	ldrb	r3, [r7, #7]
   857b0:	009b      	lsls	r3, r3, #2
   857b2:	4413      	add	r3, r2
   857b4:	681b      	ldr	r3, [r3, #0]
   857b6:	691b      	ldr	r3, [r3, #16]
   857b8:	4798      	blx	r3
				iface_num++) {
   857ba:	79fb      	ldrb	r3, [r7, #7]
   857bc:	3301      	adds	r3, #1
   857be:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   857c0:	4b06      	ldr	r3, [pc, #24]	; (857dc <udc_sof_notify+0x5c>)
   857c2:	681b      	ldr	r3, [r3, #0]
   857c4:	681b      	ldr	r3, [r3, #0]
   857c6:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   857c8:	79fa      	ldrb	r2, [r7, #7]
   857ca:	429a      	cmp	r2, r3
   857cc:	d3e2      	bcc.n	85794 <udc_sof_notify+0x14>
			}
		}
	}
}
   857ce:	bf00      	nop
   857d0:	3708      	adds	r7, #8
   857d2:	46bd      	mov	sp, r7
   857d4:	bd80      	pop	{r7, pc}
   857d6:	bf00      	nop
   857d8:	2000135c 	.word	0x2000135c
   857dc:	20001360 	.word	0x20001360

000857e0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   857e0:	b580      	push	{r7, lr}
   857e2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   857e4:	4b06      	ldr	r3, [pc, #24]	; (85800 <udc_req_std_dev_get_status+0x20>)
   857e6:	88db      	ldrh	r3, [r3, #6]
   857e8:	2b02      	cmp	r3, #2
   857ea:	d001      	beq.n	857f0 <udc_req_std_dev_get_status+0x10>
		return false;
   857ec:	2300      	movs	r3, #0
   857ee:	e004      	b.n	857fa <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   857f0:	2102      	movs	r1, #2
   857f2:	4804      	ldr	r0, [pc, #16]	; (85804 <udc_req_std_dev_get_status+0x24>)
   857f4:	4b04      	ldr	r3, [pc, #16]	; (85808 <udc_req_std_dev_get_status+0x28>)
   857f6:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   857f8:	2301      	movs	r3, #1
}
   857fa:	4618      	mov	r0, r3
   857fc:	bd80      	pop	{r7, pc}
   857fe:	bf00      	nop
   85800:	20001810 	.word	0x20001810
   85804:	2000135a 	.word	0x2000135a
   85808:	00082ce5 	.word	0x00082ce5

0008580c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   8580c:	b580      	push	{r7, lr}
   8580e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   85810:	4b0b      	ldr	r3, [pc, #44]	; (85840 <udc_req_std_ep_get_status+0x34>)
   85812:	88db      	ldrh	r3, [r3, #6]
   85814:	2b02      	cmp	r3, #2
   85816:	d001      	beq.n	8581c <udc_req_std_ep_get_status+0x10>
		return false;
   85818:	2300      	movs	r3, #0
   8581a:	e00e      	b.n	8583a <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8581c:	4b08      	ldr	r3, [pc, #32]	; (85840 <udc_req_std_ep_get_status+0x34>)
   8581e:	889b      	ldrh	r3, [r3, #4]
   85820:	b2db      	uxtb	r3, r3
   85822:	4618      	mov	r0, r3
   85824:	4b07      	ldr	r3, [pc, #28]	; (85844 <udc_req_std_ep_get_status+0x38>)
   85826:	4798      	blx	r3
   85828:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   8582a:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8582c:	4b06      	ldr	r3, [pc, #24]	; (85848 <udc_req_std_ep_get_status+0x3c>)
   8582e:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   85830:	2102      	movs	r1, #2
   85832:	4805      	ldr	r0, [pc, #20]	; (85848 <udc_req_std_ep_get_status+0x3c>)
   85834:	4b05      	ldr	r3, [pc, #20]	; (8584c <udc_req_std_ep_get_status+0x40>)
   85836:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   85838:	2301      	movs	r3, #1
}
   8583a:	4618      	mov	r0, r3
   8583c:	bd80      	pop	{r7, pc}
   8583e:	bf00      	nop
   85840:	20001810 	.word	0x20001810
   85844:	00083145 	.word	0x00083145
   85848:	20001368 	.word	0x20001368
   8584c:	00082ce5 	.word	0x00082ce5

00085850 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   85850:	b480      	push	{r7}
   85852:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   85854:	4b0b      	ldr	r3, [pc, #44]	; (85884 <udc_req_std_dev_clear_feature+0x34>)
   85856:	88db      	ldrh	r3, [r3, #6]
   85858:	2b00      	cmp	r3, #0
   8585a:	d001      	beq.n	85860 <udc_req_std_dev_clear_feature+0x10>
		return false;
   8585c:	2300      	movs	r3, #0
   8585e:	e00d      	b.n	8587c <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   85860:	4b08      	ldr	r3, [pc, #32]	; (85884 <udc_req_std_dev_clear_feature+0x34>)
   85862:	885b      	ldrh	r3, [r3, #2]
   85864:	2b01      	cmp	r3, #1
   85866:	d108      	bne.n	8587a <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   85868:	4b07      	ldr	r3, [pc, #28]	; (85888 <udc_req_std_dev_clear_feature+0x38>)
   8586a:	881b      	ldrh	r3, [r3, #0]
   8586c:	f023 0302 	bic.w	r3, r3, #2
   85870:	b29a      	uxth	r2, r3
   85872:	4b05      	ldr	r3, [pc, #20]	; (85888 <udc_req_std_dev_clear_feature+0x38>)
   85874:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   85876:	2301      	movs	r3, #1
   85878:	e000      	b.n	8587c <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   8587a:	2300      	movs	r3, #0
}
   8587c:	4618      	mov	r0, r3
   8587e:	46bd      	mov	sp, r7
   85880:	bc80      	pop	{r7}
   85882:	4770      	bx	lr
   85884:	20001810 	.word	0x20001810
   85888:	2000135a 	.word	0x2000135a

0008588c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   8588c:	b580      	push	{r7, lr}
   8588e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   85890:	4b0a      	ldr	r3, [pc, #40]	; (858bc <udc_req_std_ep_clear_feature+0x30>)
   85892:	88db      	ldrh	r3, [r3, #6]
   85894:	2b00      	cmp	r3, #0
   85896:	d001      	beq.n	8589c <udc_req_std_ep_clear_feature+0x10>
		return false;
   85898:	2300      	movs	r3, #0
   8589a:	e00c      	b.n	858b6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8589c:	4b07      	ldr	r3, [pc, #28]	; (858bc <udc_req_std_ep_clear_feature+0x30>)
   8589e:	885b      	ldrh	r3, [r3, #2]
   858a0:	2b00      	cmp	r3, #0
   858a2:	d107      	bne.n	858b4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   858a4:	4b05      	ldr	r3, [pc, #20]	; (858bc <udc_req_std_ep_clear_feature+0x30>)
   858a6:	889b      	ldrh	r3, [r3, #4]
   858a8:	b2db      	uxtb	r3, r3
   858aa:	4618      	mov	r0, r3
   858ac:	4b04      	ldr	r3, [pc, #16]	; (858c0 <udc_req_std_ep_clear_feature+0x34>)
   858ae:	4798      	blx	r3
   858b0:	4603      	mov	r3, r0
   858b2:	e000      	b.n	858b6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   858b4:	2300      	movs	r3, #0
}
   858b6:	4618      	mov	r0, r3
   858b8:	bd80      	pop	{r7, pc}
   858ba:	bf00      	nop
   858bc:	20001810 	.word	0x20001810
   858c0:	000832c1 	.word	0x000832c1

000858c4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   858c4:	b580      	push	{r7, lr}
   858c6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   858c8:	4b26      	ldr	r3, [pc, #152]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   858ca:	88db      	ldrh	r3, [r3, #6]
   858cc:	2b00      	cmp	r3, #0
   858ce:	d001      	beq.n	858d4 <udc_req_std_dev_set_feature+0x10>
		return false;
   858d0:	2300      	movs	r3, #0
   858d2:	e045      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   858d4:	4b23      	ldr	r3, [pc, #140]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   858d6:	885b      	ldrh	r3, [r3, #2]
   858d8:	2b01      	cmp	r3, #1
   858da:	d002      	beq.n	858e2 <udc_req_std_dev_set_feature+0x1e>
   858dc:	2b02      	cmp	r3, #2
   858de:	d002      	beq.n	858e6 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   858e0:	e03d      	b.n	8595e <udc_req_std_dev_set_feature+0x9a>
		return false;
   858e2:	2300      	movs	r3, #0
   858e4:	e03c      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   858e6:	4b20      	ldr	r3, [pc, #128]	; (85968 <udc_req_std_dev_set_feature+0xa4>)
   858e8:	4798      	blx	r3
   858ea:	4603      	mov	r3, r0
   858ec:	f083 0301 	eor.w	r3, r3, #1
   858f0:	b2db      	uxtb	r3, r3
   858f2:	2b00      	cmp	r3, #0
   858f4:	d130      	bne.n	85958 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   858f6:	4b1b      	ldr	r3, [pc, #108]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   858f8:	889b      	ldrh	r3, [r3, #4]
   858fa:	b2db      	uxtb	r3, r3
   858fc:	2b00      	cmp	r3, #0
   858fe:	d12d      	bne.n	8595c <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   85900:	4b1a      	ldr	r3, [pc, #104]	; (8596c <udc_req_std_dev_set_feature+0xa8>)
   85902:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   85904:	4b17      	ldr	r3, [pc, #92]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   85906:	889b      	ldrh	r3, [r3, #4]
   85908:	0a1b      	lsrs	r3, r3, #8
   8590a:	b29b      	uxth	r3, r3
   8590c:	b2db      	uxtb	r3, r3
   8590e:	3b01      	subs	r3, #1
   85910:	2b03      	cmp	r3, #3
   85912:	d81f      	bhi.n	85954 <udc_req_std_dev_set_feature+0x90>
   85914:	a201      	add	r2, pc, #4	; (adr r2, 8591c <udc_req_std_dev_set_feature+0x58>)
   85916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8591a:	bf00      	nop
   8591c:	0008592d 	.word	0x0008592d
   85920:	00085937 	.word	0x00085937
   85924:	00085941 	.word	0x00085941
   85928:	0008594b 	.word	0x0008594b
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8592c:	4b0d      	ldr	r3, [pc, #52]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   8592e:	4a10      	ldr	r2, [pc, #64]	; (85970 <udc_req_std_dev_set_feature+0xac>)
   85930:	611a      	str	r2, [r3, #16]
			return true;
   85932:	2301      	movs	r3, #1
   85934:	e014      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   85936:	4b0b      	ldr	r3, [pc, #44]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   85938:	4a0e      	ldr	r2, [pc, #56]	; (85974 <udc_req_std_dev_set_feature+0xb0>)
   8593a:	611a      	str	r2, [r3, #16]
			return true;
   8593c:	2301      	movs	r3, #1
   8593e:	e00f      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   85940:	4b08      	ldr	r3, [pc, #32]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   85942:	4a0d      	ldr	r2, [pc, #52]	; (85978 <udc_req_std_dev_set_feature+0xb4>)
   85944:	611a      	str	r2, [r3, #16]
			return true;
   85946:	2301      	movs	r3, #1
   85948:	e00a      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8594a:	4b06      	ldr	r3, [pc, #24]	; (85964 <udc_req_std_dev_set_feature+0xa0>)
   8594c:	4a0b      	ldr	r2, [pc, #44]	; (8597c <udc_req_std_dev_set_feature+0xb8>)
   8594e:	611a      	str	r2, [r3, #16]
			return true;
   85950:	2301      	movs	r3, #1
   85952:	e005      	b.n	85960 <udc_req_std_dev_set_feature+0x9c>
			break;
   85954:	bf00      	nop
		break;
   85956:	e002      	b.n	8595e <udc_req_std_dev_set_feature+0x9a>
			break;
   85958:	bf00      	nop
   8595a:	e000      	b.n	8595e <udc_req_std_dev_set_feature+0x9a>
			break;
   8595c:	bf00      	nop
	}
	return false;
   8595e:	2300      	movs	r3, #0
}
   85960:	4618      	mov	r0, r3
   85962:	bd80      	pop	{r7, pc}
   85964:	20001810 	.word	0x20001810
   85968:	00082c41 	.word	0x00082c41
   8596c:	0008572d 	.word	0x0008572d
   85970:	00083581 	.word	0x00083581
   85974:	000835b5 	.word	0x000835b5
   85978:	000835e9 	.word	0x000835e9
   8597c:	0008360d 	.word	0x0008360d

00085980 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   85980:	b580      	push	{r7, lr}
   85982:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   85984:	4b0d      	ldr	r3, [pc, #52]	; (859bc <udc_req_std_ep_set_feature+0x3c>)
   85986:	88db      	ldrh	r3, [r3, #6]
   85988:	2b00      	cmp	r3, #0
   8598a:	d001      	beq.n	85990 <udc_req_std_ep_set_feature+0x10>
		return false;
   8598c:	2300      	movs	r3, #0
   8598e:	e012      	b.n	859b6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   85990:	4b0a      	ldr	r3, [pc, #40]	; (859bc <udc_req_std_ep_set_feature+0x3c>)
   85992:	885b      	ldrh	r3, [r3, #2]
   85994:	2b00      	cmp	r3, #0
   85996:	d10d      	bne.n	859b4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   85998:	4b08      	ldr	r3, [pc, #32]	; (859bc <udc_req_std_ep_set_feature+0x3c>)
   8599a:	889b      	ldrh	r3, [r3, #4]
   8599c:	b2db      	uxtb	r3, r3
   8599e:	4618      	mov	r0, r3
   859a0:	4b07      	ldr	r3, [pc, #28]	; (859c0 <udc_req_std_ep_set_feature+0x40>)
   859a2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   859a4:	4b05      	ldr	r3, [pc, #20]	; (859bc <udc_req_std_ep_set_feature+0x3c>)
   859a6:	889b      	ldrh	r3, [r3, #4]
   859a8:	b2db      	uxtb	r3, r3
   859aa:	4618      	mov	r0, r3
   859ac:	4b05      	ldr	r3, [pc, #20]	; (859c4 <udc_req_std_ep_set_feature+0x44>)
   859ae:	4798      	blx	r3
   859b0:	4603      	mov	r3, r0
   859b2:	e000      	b.n	859b6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   859b4:	2300      	movs	r3, #0
}
   859b6:	4618      	mov	r0, r3
   859b8:	bd80      	pop	{r7, pc}
   859ba:	bf00      	nop
   859bc:	20001810 	.word	0x20001810
   859c0:	000834f9 	.word	0x000834f9
   859c4:	000831ad 	.word	0x000831ad

000859c8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   859c8:	b580      	push	{r7, lr}
   859ca:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   859cc:	4b05      	ldr	r3, [pc, #20]	; (859e4 <udc_valid_address+0x1c>)
   859ce:	885b      	ldrh	r3, [r3, #2]
   859d0:	b2db      	uxtb	r3, r3
   859d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   859d6:	b2db      	uxtb	r3, r3
   859d8:	4618      	mov	r0, r3
   859da:	4b03      	ldr	r3, [pc, #12]	; (859e8 <udc_valid_address+0x20>)
   859dc:	4798      	blx	r3
}
   859de:	bf00      	nop
   859e0:	bd80      	pop	{r7, pc}
   859e2:	bf00      	nop
   859e4:	20001810 	.word	0x20001810
   859e8:	00082c65 	.word	0x00082c65

000859ec <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   859ec:	b480      	push	{r7}
   859ee:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   859f0:	4b06      	ldr	r3, [pc, #24]	; (85a0c <udc_req_std_dev_set_address+0x20>)
   859f2:	88db      	ldrh	r3, [r3, #6]
   859f4:	2b00      	cmp	r3, #0
   859f6:	d001      	beq.n	859fc <udc_req_std_dev_set_address+0x10>
		return false;
   859f8:	2300      	movs	r3, #0
   859fa:	e003      	b.n	85a04 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   859fc:	4b03      	ldr	r3, [pc, #12]	; (85a0c <udc_req_std_dev_set_address+0x20>)
   859fe:	4a04      	ldr	r2, [pc, #16]	; (85a10 <udc_req_std_dev_set_address+0x24>)
   85a00:	611a      	str	r2, [r3, #16]
	return true;
   85a02:	2301      	movs	r3, #1
}
   85a04:	4618      	mov	r0, r3
   85a06:	46bd      	mov	sp, r7
   85a08:	bc80      	pop	{r7}
   85a0a:	4770      	bx	lr
   85a0c:	20001810 	.word	0x20001810
   85a10:	000859c9 	.word	0x000859c9

00085a14 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   85a14:	b580      	push	{r7, lr}
   85a16:	b084      	sub	sp, #16
   85a18:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   85a1a:	2300      	movs	r3, #0
   85a1c:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   85a1e:	4b29      	ldr	r3, [pc, #164]	; (85ac4 <udc_req_std_dev_get_str_desc+0xb0>)
   85a20:	885b      	ldrh	r3, [r3, #2]
   85a22:	b2db      	uxtb	r3, r3
   85a24:	2b03      	cmp	r3, #3
   85a26:	d820      	bhi.n	85a6a <udc_req_std_dev_get_str_desc+0x56>
   85a28:	a201      	add	r2, pc, #4	; (adr r2, 85a30 <udc_req_std_dev_get_str_desc+0x1c>)
   85a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a2e:	bf00      	nop
   85a30:	00085a41 	.word	0x00085a41
   85a34:	00085a4b 	.word	0x00085a4b
   85a38:	00085a55 	.word	0x00085a55
   85a3c:	00085a5f 	.word	0x00085a5f
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   85a40:	2104      	movs	r1, #4
   85a42:	4821      	ldr	r0, [pc, #132]	; (85ac8 <udc_req_std_dev_get_str_desc+0xb4>)
   85a44:	4b21      	ldr	r3, [pc, #132]	; (85acc <udc_req_std_dev_get_str_desc+0xb8>)
   85a46:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   85a48:	e011      	b.n	85a6e <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   85a4a:	2315      	movs	r3, #21
   85a4c:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   85a4e:	4b20      	ldr	r3, [pc, #128]	; (85ad0 <udc_req_std_dev_get_str_desc+0xbc>)
   85a50:	60bb      	str	r3, [r7, #8]
		break;
   85a52:	e00c      	b.n	85a6e <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   85a54:	2313      	movs	r3, #19
   85a56:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   85a58:	4b1e      	ldr	r3, [pc, #120]	; (85ad4 <udc_req_std_dev_get_str_desc+0xc0>)
   85a5a:	60bb      	str	r3, [r7, #8]
		break;
   85a5c:	e007      	b.n	85a6e <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   85a5e:	2320      	movs	r3, #32
   85a60:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   85a62:	4b1d      	ldr	r3, [pc, #116]	; (85ad8 <udc_req_std_dev_get_str_desc+0xc4>)
   85a64:	4798      	blx	r3
   85a66:	60b8      	str	r0, [r7, #8]
		break;
   85a68:	e001      	b.n	85a6e <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   85a6a:	2300      	movs	r3, #0
   85a6c:	e026      	b.n	85abc <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   85a6e:	79fb      	ldrb	r3, [r7, #7]
   85a70:	2b00      	cmp	r3, #0
   85a72:	d022      	beq.n	85aba <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   85a74:	2300      	movs	r3, #0
   85a76:	73fb      	strb	r3, [r7, #15]
   85a78:	e00d      	b.n	85a96 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85a7a:	7bfb      	ldrb	r3, [r7, #15]
   85a7c:	68ba      	ldr	r2, [r7, #8]
   85a7e:	4413      	add	r3, r2
   85a80:	781a      	ldrb	r2, [r3, #0]
   85a82:	7bfb      	ldrb	r3, [r7, #15]
   85a84:	b291      	uxth	r1, r2
   85a86:	4a15      	ldr	r2, [pc, #84]	; (85adc <udc_req_std_dev_get_str_desc+0xc8>)
   85a88:	005b      	lsls	r3, r3, #1
   85a8a:	4413      	add	r3, r2
   85a8c:	460a      	mov	r2, r1
   85a8e:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   85a90:	7bfb      	ldrb	r3, [r7, #15]
   85a92:	3301      	adds	r3, #1
   85a94:	73fb      	strb	r3, [r7, #15]
   85a96:	7bfa      	ldrb	r2, [r7, #15]
   85a98:	79fb      	ldrb	r3, [r7, #7]
   85a9a:	429a      	cmp	r2, r3
   85a9c:	d3ed      	bcc.n	85a7a <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   85a9e:	79fb      	ldrb	r3, [r7, #7]
   85aa0:	3301      	adds	r3, #1
   85aa2:	b2db      	uxtb	r3, r3
   85aa4:	005b      	lsls	r3, r3, #1
   85aa6:	b2da      	uxtb	r2, r3
   85aa8:	4b0c      	ldr	r3, [pc, #48]	; (85adc <udc_req_std_dev_get_str_desc+0xc8>)
   85aaa:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   85aac:	4b0b      	ldr	r3, [pc, #44]	; (85adc <udc_req_std_dev_get_str_desc+0xc8>)
   85aae:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   85ab0:	b29b      	uxth	r3, r3
   85ab2:	4619      	mov	r1, r3
   85ab4:	4809      	ldr	r0, [pc, #36]	; (85adc <udc_req_std_dev_get_str_desc+0xc8>)
   85ab6:	4b05      	ldr	r3, [pc, #20]	; (85acc <udc_req_std_dev_get_str_desc+0xb8>)
   85ab8:	4798      	blx	r3
	}

	return true;
   85aba:	2301      	movs	r3, #1
}
   85abc:	4618      	mov	r0, r3
   85abe:	3710      	adds	r7, #16
   85ac0:	46bd      	mov	sp, r7
   85ac2:	bd80      	pop	{r7, pc}
   85ac4:	20001810 	.word	0x20001810
   85ac8:	20000298 	.word	0x20000298
   85acc:	00082ce5 	.word	0x00082ce5
   85ad0:	2000029c 	.word	0x2000029c
   85ad4:	200002b4 	.word	0x200002b4
   85ad8:	000854a1 	.word	0x000854a1
   85adc:	200002c8 	.word	0x200002c8

00085ae0 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   85ae0:	b580      	push	{r7, lr}
   85ae2:	b082      	sub	sp, #8
   85ae4:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   85ae6:	4b7f      	ldr	r3, [pc, #508]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85ae8:	885b      	ldrh	r3, [r3, #2]
   85aea:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   85aec:	4b7d      	ldr	r3, [pc, #500]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85aee:	885b      	ldrh	r3, [r3, #2]
   85af0:	0a1b      	lsrs	r3, r3, #8
   85af2:	b29b      	uxth	r3, r3
   85af4:	b2db      	uxtb	r3, r3
   85af6:	3b01      	subs	r3, #1
   85af8:	2b0e      	cmp	r3, #14
   85afa:	f200 80e0 	bhi.w	85cbe <udc_req_std_dev_get_descriptor+0x1de>
   85afe:	a201      	add	r2, pc, #4	; (adr r2, 85b04 <udc_req_std_dev_get_descriptor+0x24>)
   85b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85b04:	00085b41 	.word	0x00085b41
   85b08:	00085b91 	.word	0x00085b91
   85b0c:	00085cab 	.word	0x00085cab
   85b10:	00085cbf 	.word	0x00085cbf
   85b14:	00085cbf 	.word	0x00085cbf
   85b18:	00085c0b 	.word	0x00085c0b
   85b1c:	00085c21 	.word	0x00085c21
   85b20:	00085cbf 	.word	0x00085cbf
   85b24:	00085cbf 	.word	0x00085cbf
   85b28:	00085cbf 	.word	0x00085cbf
   85b2c:	00085cbf 	.word	0x00085cbf
   85b30:	00085cbf 	.word	0x00085cbf
   85b34:	00085cbf 	.word	0x00085cbf
   85b38:	00085cbf 	.word	0x00085cbf
   85b3c:	00085ca1 	.word	0x00085ca1
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   85b40:	4b69      	ldr	r3, [pc, #420]	; (85ce8 <udc_req_std_dev_get_descriptor+0x208>)
   85b42:	4798      	blx	r3
   85b44:	4603      	mov	r3, r0
   85b46:	f083 0301 	eor.w	r3, r3, #1
   85b4a:	b2db      	uxtb	r3, r3
   85b4c:	2b00      	cmp	r3, #0
   85b4e:	d00a      	beq.n	85b66 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   85b50:	4b66      	ldr	r3, [pc, #408]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b52:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   85b54:	4b65      	ldr	r3, [pc, #404]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b56:	689b      	ldr	r3, [r3, #8]
   85b58:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   85b5a:	b29b      	uxth	r3, r3
   85b5c:	4619      	mov	r1, r3
   85b5e:	4610      	mov	r0, r2
   85b60:	4b63      	ldr	r3, [pc, #396]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85b62:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   85b64:	e0ae      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   85b66:	4b61      	ldr	r3, [pc, #388]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b68:	681b      	ldr	r3, [r3, #0]
   85b6a:	2200      	movs	r2, #0
   85b6c:	f042 0210 	orr.w	r2, r2, #16
   85b70:	709a      	strb	r2, [r3, #2]
   85b72:	2200      	movs	r2, #0
   85b74:	f042 0202 	orr.w	r2, r2, #2
   85b78:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   85b7a:	4b5c      	ldr	r3, [pc, #368]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b7c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   85b7e:	4b5b      	ldr	r3, [pc, #364]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b80:	681b      	ldr	r3, [r3, #0]
   85b82:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   85b84:	b29b      	uxth	r3, r3
   85b86:	4619      	mov	r1, r3
   85b88:	4610      	mov	r0, r2
   85b8a:	4b59      	ldr	r3, [pc, #356]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85b8c:	4798      	blx	r3
		break;
   85b8e:	e099      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   85b90:	4b55      	ldr	r3, [pc, #340]	; (85ce8 <udc_req_std_dev_get_descriptor+0x208>)
   85b92:	4798      	blx	r3
   85b94:	4603      	mov	r3, r0
   85b96:	2b00      	cmp	r3, #0
   85b98:	d019      	beq.n	85bce <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   85b9a:	4b54      	ldr	r3, [pc, #336]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85b9c:	689b      	ldr	r3, [r3, #8]
   85b9e:	7c5b      	ldrb	r3, [r3, #17]
   85ba0:	79fa      	ldrb	r2, [r7, #7]
   85ba2:	429a      	cmp	r2, r3
   85ba4:	d301      	bcc.n	85baa <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   85ba6:	2300      	movs	r3, #0
   85ba8:	e097      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   85baa:	4b50      	ldr	r3, [pc, #320]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85bac:	691a      	ldr	r2, [r3, #16]
   85bae:	79fb      	ldrb	r3, [r7, #7]
   85bb0:	00db      	lsls	r3, r3, #3
   85bb2:	4413      	add	r3, r2
   85bb4:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85bb6:	4b4d      	ldr	r3, [pc, #308]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85bb8:	691a      	ldr	r2, [r3, #16]
   85bba:	79fb      	ldrb	r3, [r7, #7]
   85bbc:	00db      	lsls	r3, r3, #3
   85bbe:	4413      	add	r3, r2
   85bc0:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   85bc2:	885b      	ldrh	r3, [r3, #2]
   85bc4:	b29b      	uxth	r3, r3
   85bc6:	4619      	mov	r1, r3
   85bc8:	4b49      	ldr	r3, [pc, #292]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85bca:	4798      	blx	r3
   85bcc:	e018      	b.n	85c00 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   85bce:	4b47      	ldr	r3, [pc, #284]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85bd0:	681b      	ldr	r3, [r3, #0]
   85bd2:	7c5b      	ldrb	r3, [r3, #17]
   85bd4:	79fa      	ldrb	r2, [r7, #7]
   85bd6:	429a      	cmp	r2, r3
   85bd8:	d301      	bcc.n	85bde <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   85bda:	2300      	movs	r3, #0
   85bdc:	e07d      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   85bde:	4b43      	ldr	r3, [pc, #268]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85be0:	685a      	ldr	r2, [r3, #4]
   85be2:	79fb      	ldrb	r3, [r7, #7]
   85be4:	00db      	lsls	r3, r3, #3
   85be6:	4413      	add	r3, r2
   85be8:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   85bea:	4b40      	ldr	r3, [pc, #256]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85bec:	685a      	ldr	r2, [r3, #4]
   85bee:	79fb      	ldrb	r3, [r7, #7]
   85bf0:	00db      	lsls	r3, r3, #3
   85bf2:	4413      	add	r3, r2
   85bf4:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   85bf6:	885b      	ldrh	r3, [r3, #2]
   85bf8:	b29b      	uxth	r3, r3
   85bfa:	4619      	mov	r1, r3
   85bfc:	4b3c      	ldr	r3, [pc, #240]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85bfe:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   85c00:	4b38      	ldr	r3, [pc, #224]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85c02:	689b      	ldr	r3, [r3, #8]
   85c04:	2202      	movs	r2, #2
   85c06:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   85c08:	e05c      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85c0a:	4b38      	ldr	r3, [pc, #224]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c0c:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   85c0e:	4b37      	ldr	r3, [pc, #220]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c10:	68db      	ldr	r3, [r3, #12]
   85c12:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85c14:	b29b      	uxth	r3, r3
   85c16:	4619      	mov	r1, r3
   85c18:	4610      	mov	r0, r2
   85c1a:	4b35      	ldr	r3, [pc, #212]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85c1c:	4798      	blx	r3
		break;
   85c1e:	e051      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   85c20:	4b31      	ldr	r3, [pc, #196]	; (85ce8 <udc_req_std_dev_get_descriptor+0x208>)
   85c22:	4798      	blx	r3
   85c24:	4603      	mov	r3, r0
   85c26:	f083 0301 	eor.w	r3, r3, #1
   85c2a:	b2db      	uxtb	r3, r3
   85c2c:	2b00      	cmp	r3, #0
   85c2e:	d019      	beq.n	85c64 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   85c30:	4b2e      	ldr	r3, [pc, #184]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c32:	689b      	ldr	r3, [r3, #8]
   85c34:	7c5b      	ldrb	r3, [r3, #17]
   85c36:	79fa      	ldrb	r2, [r7, #7]
   85c38:	429a      	cmp	r2, r3
   85c3a:	d301      	bcc.n	85c40 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   85c3c:	2300      	movs	r3, #0
   85c3e:	e04c      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   85c40:	4b2a      	ldr	r3, [pc, #168]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c42:	691a      	ldr	r2, [r3, #16]
   85c44:	79fb      	ldrb	r3, [r7, #7]
   85c46:	00db      	lsls	r3, r3, #3
   85c48:	4413      	add	r3, r2
   85c4a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85c4c:	4b27      	ldr	r3, [pc, #156]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c4e:	691a      	ldr	r2, [r3, #16]
   85c50:	79fb      	ldrb	r3, [r7, #7]
   85c52:	00db      	lsls	r3, r3, #3
   85c54:	4413      	add	r3, r2
   85c56:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   85c58:	885b      	ldrh	r3, [r3, #2]
   85c5a:	b29b      	uxth	r3, r3
   85c5c:	4619      	mov	r1, r3
   85c5e:	4b24      	ldr	r3, [pc, #144]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85c60:	4798      	blx	r3
   85c62:	e018      	b.n	85c96 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   85c64:	4b21      	ldr	r3, [pc, #132]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c66:	681b      	ldr	r3, [r3, #0]
   85c68:	7c5b      	ldrb	r3, [r3, #17]
   85c6a:	79fa      	ldrb	r2, [r7, #7]
   85c6c:	429a      	cmp	r2, r3
   85c6e:	d301      	bcc.n	85c74 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   85c70:	2300      	movs	r3, #0
   85c72:	e032      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   85c74:	4b1d      	ldr	r3, [pc, #116]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c76:	685a      	ldr	r2, [r3, #4]
   85c78:	79fb      	ldrb	r3, [r7, #7]
   85c7a:	00db      	lsls	r3, r3, #3
   85c7c:	4413      	add	r3, r2
   85c7e:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   85c80:	4b1a      	ldr	r3, [pc, #104]	; (85cec <udc_req_std_dev_get_descriptor+0x20c>)
   85c82:	685a      	ldr	r2, [r3, #4]
   85c84:	79fb      	ldrb	r3, [r7, #7]
   85c86:	00db      	lsls	r3, r3, #3
   85c88:	4413      	add	r3, r2
   85c8a:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   85c8c:	885b      	ldrh	r3, [r3, #2]
   85c8e:	b29b      	uxth	r3, r3
   85c90:	4619      	mov	r1, r3
   85c92:	4b17      	ldr	r3, [pc, #92]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85c94:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   85c96:	4b13      	ldr	r3, [pc, #76]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85c98:	689b      	ldr	r3, [r3, #8]
   85c9a:	2207      	movs	r2, #7
   85c9c:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   85c9e:	e011      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   85ca0:	2121      	movs	r1, #33	; 0x21
   85ca2:	4814      	ldr	r0, [pc, #80]	; (85cf4 <udc_req_std_dev_get_descriptor+0x214>)
   85ca4:	4b12      	ldr	r3, [pc, #72]	; (85cf0 <udc_req_std_dev_get_descriptor+0x210>)
   85ca6:	4798      	blx	r3
			0x21);
		break;
   85ca8:	e00c      	b.n	85cc4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   85caa:	4b13      	ldr	r3, [pc, #76]	; (85cf8 <udc_req_std_dev_get_descriptor+0x218>)
   85cac:	4798      	blx	r3
   85cae:	4603      	mov	r3, r0
   85cb0:	f083 0301 	eor.w	r3, r3, #1
   85cb4:	b2db      	uxtb	r3, r3
   85cb6:	2b00      	cmp	r3, #0
   85cb8:	d003      	beq.n	85cc2 <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   85cba:	2300      	movs	r3, #0
   85cbc:	e00d      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   85cbe:	2300      	movs	r3, #0
   85cc0:	e00b      	b.n	85cda <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   85cc2:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   85cc4:	4b07      	ldr	r3, [pc, #28]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85cc6:	88da      	ldrh	r2, [r3, #6]
   85cc8:	4b06      	ldr	r3, [pc, #24]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85cca:	899b      	ldrh	r3, [r3, #12]
   85ccc:	429a      	cmp	r2, r3
   85cce:	d203      	bcs.n	85cd8 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   85cd0:	4b04      	ldr	r3, [pc, #16]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85cd2:	88da      	ldrh	r2, [r3, #6]
   85cd4:	4b03      	ldr	r3, [pc, #12]	; (85ce4 <udc_req_std_dev_get_descriptor+0x204>)
   85cd6:	819a      	strh	r2, [r3, #12]
	}
	return true;
   85cd8:	2301      	movs	r3, #1
}
   85cda:	4618      	mov	r0, r3
   85cdc:	3708      	adds	r7, #8
   85cde:	46bd      	mov	sp, r7
   85ce0:	bd80      	pop	{r7, pc}
   85ce2:	bf00      	nop
   85ce4:	20001810 	.word	0x20001810
   85ce8:	00082c41 	.word	0x00082c41
   85cec:	20000420 	.word	0x20000420
   85cf0:	00082ce5 	.word	0x00082ce5
   85cf4:	0008d9d8 	.word	0x0008d9d8
   85cf8:	00085a15 	.word	0x00085a15

00085cfc <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   85cfc:	b580      	push	{r7, lr}
   85cfe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   85d00:	4b06      	ldr	r3, [pc, #24]	; (85d1c <udc_req_std_dev_get_configuration+0x20>)
   85d02:	88db      	ldrh	r3, [r3, #6]
   85d04:	2b01      	cmp	r3, #1
   85d06:	d001      	beq.n	85d0c <udc_req_std_dev_get_configuration+0x10>
		return false;
   85d08:	2300      	movs	r3, #0
   85d0a:	e004      	b.n	85d16 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   85d0c:	2101      	movs	r1, #1
   85d0e:	4804      	ldr	r0, [pc, #16]	; (85d20 <udc_req_std_dev_get_configuration+0x24>)
   85d10:	4b04      	ldr	r3, [pc, #16]	; (85d24 <udc_req_std_dev_get_configuration+0x28>)
   85d12:	4798      	blx	r3
	return true;
   85d14:	2301      	movs	r3, #1
}
   85d16:	4618      	mov	r0, r3
   85d18:	bd80      	pop	{r7, pc}
   85d1a:	bf00      	nop
   85d1c:	20001810 	.word	0x20001810
   85d20:	2000135c 	.word	0x2000135c
   85d24:	00082ce5 	.word	0x00082ce5

00085d28 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   85d28:	b580      	push	{r7, lr}
   85d2a:	b082      	sub	sp, #8
   85d2c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   85d2e:	4b37      	ldr	r3, [pc, #220]	; (85e0c <udc_req_std_dev_set_configuration+0xe4>)
   85d30:	88db      	ldrh	r3, [r3, #6]
   85d32:	2b00      	cmp	r3, #0
   85d34:	d001      	beq.n	85d3a <udc_req_std_dev_set_configuration+0x12>
		return false;
   85d36:	2300      	movs	r3, #0
   85d38:	e063      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   85d3a:	4b35      	ldr	r3, [pc, #212]	; (85e10 <udc_req_std_dev_set_configuration+0xe8>)
   85d3c:	4798      	blx	r3
   85d3e:	4603      	mov	r3, r0
   85d40:	2b00      	cmp	r3, #0
   85d42:	d101      	bne.n	85d48 <udc_req_std_dev_set_configuration+0x20>
		return false;
   85d44:	2300      	movs	r3, #0
   85d46:	e05c      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   85d48:	4b32      	ldr	r3, [pc, #200]	; (85e14 <udc_req_std_dev_set_configuration+0xec>)
   85d4a:	4798      	blx	r3
   85d4c:	4603      	mov	r3, r0
   85d4e:	2b00      	cmp	r3, #0
   85d50:	d009      	beq.n	85d66 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85d52:	4b2e      	ldr	r3, [pc, #184]	; (85e0c <udc_req_std_dev_set_configuration+0xe4>)
   85d54:	885b      	ldrh	r3, [r3, #2]
   85d56:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   85d58:	4a2f      	ldr	r2, [pc, #188]	; (85e18 <udc_req_std_dev_set_configuration+0xf0>)
   85d5a:	6892      	ldr	r2, [r2, #8]
   85d5c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85d5e:	4293      	cmp	r3, r2
   85d60:	dd0b      	ble.n	85d7a <udc_req_std_dev_set_configuration+0x52>
			return false;
   85d62:	2300      	movs	r3, #0
   85d64:	e04d      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85d66:	4b29      	ldr	r3, [pc, #164]	; (85e0c <udc_req_std_dev_set_configuration+0xe4>)
   85d68:	885b      	ldrh	r3, [r3, #2]
   85d6a:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   85d6c:	4a2a      	ldr	r2, [pc, #168]	; (85e18 <udc_req_std_dev_set_configuration+0xf0>)
   85d6e:	6812      	ldr	r2, [r2, #0]
   85d70:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85d72:	4293      	cmp	r3, r2
   85d74:	dd01      	ble.n	85d7a <udc_req_std_dev_set_configuration+0x52>
			return false;
   85d76:	2300      	movs	r3, #0
   85d78:	e043      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   85d7a:	4b28      	ldr	r3, [pc, #160]	; (85e1c <udc_req_std_dev_set_configuration+0xf4>)
   85d7c:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   85d7e:	4b23      	ldr	r3, [pc, #140]	; (85e0c <udc_req_std_dev_set_configuration+0xe4>)
   85d80:	885b      	ldrh	r3, [r3, #2]
   85d82:	b2da      	uxtb	r2, r3
   85d84:	4b26      	ldr	r3, [pc, #152]	; (85e20 <udc_req_std_dev_set_configuration+0xf8>)
   85d86:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   85d88:	4b25      	ldr	r3, [pc, #148]	; (85e20 <udc_req_std_dev_set_configuration+0xf8>)
   85d8a:	781b      	ldrb	r3, [r3, #0]
   85d8c:	2b00      	cmp	r3, #0
   85d8e:	d101      	bne.n	85d94 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   85d90:	2301      	movs	r3, #1
   85d92:	e036      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   85d94:	4b1f      	ldr	r3, [pc, #124]	; (85e14 <udc_req_std_dev_set_configuration+0xec>)
   85d96:	4798      	blx	r3
   85d98:	4603      	mov	r3, r0
   85d9a:	2b00      	cmp	r3, #0
   85d9c:	d00b      	beq.n	85db6 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   85d9e:	4b1e      	ldr	r3, [pc, #120]	; (85e18 <udc_req_std_dev_set_configuration+0xf0>)
   85da0:	691a      	ldr	r2, [r3, #16]
   85da2:	4b1f      	ldr	r3, [pc, #124]	; (85e20 <udc_req_std_dev_set_configuration+0xf8>)
   85da4:	781b      	ldrb	r3, [r3, #0]
   85da6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   85daa:	3b01      	subs	r3, #1
   85dac:	00db      	lsls	r3, r3, #3
   85dae:	4413      	add	r3, r2
   85db0:	4a1c      	ldr	r2, [pc, #112]	; (85e24 <udc_req_std_dev_set_configuration+0xfc>)
   85db2:	6013      	str	r3, [r2, #0]
   85db4:	e00a      	b.n	85dcc <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   85db6:	4b18      	ldr	r3, [pc, #96]	; (85e18 <udc_req_std_dev_set_configuration+0xf0>)
   85db8:	685a      	ldr	r2, [r3, #4]
   85dba:	4b19      	ldr	r3, [pc, #100]	; (85e20 <udc_req_std_dev_set_configuration+0xf8>)
   85dbc:	781b      	ldrb	r3, [r3, #0]
   85dbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   85dc2:	3b01      	subs	r3, #1
   85dc4:	00db      	lsls	r3, r3, #3
   85dc6:	4413      	add	r3, r2
   85dc8:	4a16      	ldr	r2, [pc, #88]	; (85e24 <udc_req_std_dev_set_configuration+0xfc>)
   85dca:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85dcc:	2300      	movs	r3, #0
   85dce:	71fb      	strb	r3, [r7, #7]
   85dd0:	e00f      	b.n	85df2 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   85dd2:	79fb      	ldrb	r3, [r7, #7]
   85dd4:	2100      	movs	r1, #0
   85dd6:	4618      	mov	r0, r3
   85dd8:	4b13      	ldr	r3, [pc, #76]	; (85e28 <udc_req_std_dev_set_configuration+0x100>)
   85dda:	4798      	blx	r3
   85ddc:	4603      	mov	r3, r0
   85dde:	f083 0301 	eor.w	r3, r3, #1
   85de2:	b2db      	uxtb	r3, r3
   85de4:	2b00      	cmp	r3, #0
   85de6:	d001      	beq.n	85dec <udc_req_std_dev_set_configuration+0xc4>
			return false;
   85de8:	2300      	movs	r3, #0
   85dea:	e00a      	b.n	85e02 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   85dec:	79fb      	ldrb	r3, [r7, #7]
   85dee:	3301      	adds	r3, #1
   85df0:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85df2:	4b0c      	ldr	r3, [pc, #48]	; (85e24 <udc_req_std_dev_set_configuration+0xfc>)
   85df4:	681b      	ldr	r3, [r3, #0]
   85df6:	681b      	ldr	r3, [r3, #0]
   85df8:	791b      	ldrb	r3, [r3, #4]
   85dfa:	79fa      	ldrb	r2, [r7, #7]
   85dfc:	429a      	cmp	r2, r3
   85dfe:	d3e8      	bcc.n	85dd2 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   85e00:	2301      	movs	r3, #1
}
   85e02:	4618      	mov	r0, r3
   85e04:	3708      	adds	r7, #8
   85e06:	46bd      	mov	sp, r7
   85e08:	bd80      	pop	{r7, pc}
   85e0a:	bf00      	nop
   85e0c:	20001810 	.word	0x20001810
   85e10:	00082ca9 	.word	0x00082ca9
   85e14:	00082c41 	.word	0x00082c41
   85e18:	20000420 	.word	0x20000420
   85e1c:	0008572d 	.word	0x0008572d
   85e20:	2000135c 	.word	0x2000135c
   85e24:	20001360 	.word	0x20001360
   85e28:	00085685 	.word	0x00085685

00085e2c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   85e2c:	b580      	push	{r7, lr}
   85e2e:	b082      	sub	sp, #8
   85e30:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   85e32:	4b1e      	ldr	r3, [pc, #120]	; (85eac <udc_req_std_iface_get_setting+0x80>)
   85e34:	88db      	ldrh	r3, [r3, #6]
   85e36:	2b01      	cmp	r3, #1
   85e38:	d001      	beq.n	85e3e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   85e3a:	2300      	movs	r3, #0
   85e3c:	e032      	b.n	85ea4 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   85e3e:	4b1c      	ldr	r3, [pc, #112]	; (85eb0 <udc_req_std_iface_get_setting+0x84>)
   85e40:	781b      	ldrb	r3, [r3, #0]
   85e42:	2b00      	cmp	r3, #0
   85e44:	d101      	bne.n	85e4a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   85e46:	2300      	movs	r3, #0
   85e48:	e02c      	b.n	85ea4 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85e4a:	4b18      	ldr	r3, [pc, #96]	; (85eac <udc_req_std_iface_get_setting+0x80>)
   85e4c:	889b      	ldrh	r3, [r3, #4]
   85e4e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85e50:	4b18      	ldr	r3, [pc, #96]	; (85eb4 <udc_req_std_iface_get_setting+0x88>)
   85e52:	681b      	ldr	r3, [r3, #0]
   85e54:	681b      	ldr	r3, [r3, #0]
   85e56:	791b      	ldrb	r3, [r3, #4]
   85e58:	79fa      	ldrb	r2, [r7, #7]
   85e5a:	429a      	cmp	r2, r3
   85e5c:	d301      	bcc.n	85e62 <udc_req_std_iface_get_setting+0x36>
		return false;
   85e5e:	2300      	movs	r3, #0
   85e60:	e020      	b.n	85ea4 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85e62:	79fb      	ldrb	r3, [r7, #7]
   85e64:	2100      	movs	r1, #0
   85e66:	4618      	mov	r0, r3
   85e68:	4b13      	ldr	r3, [pc, #76]	; (85eb8 <udc_req_std_iface_get_setting+0x8c>)
   85e6a:	4798      	blx	r3
   85e6c:	4603      	mov	r3, r0
   85e6e:	f083 0301 	eor.w	r3, r3, #1
   85e72:	b2db      	uxtb	r3, r3
   85e74:	2b00      	cmp	r3, #0
   85e76:	d001      	beq.n	85e7c <udc_req_std_iface_get_setting+0x50>
		return false;
   85e78:	2300      	movs	r3, #0
   85e7a:	e013      	b.n	85ea4 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85e7c:	4b0d      	ldr	r3, [pc, #52]	; (85eb4 <udc_req_std_iface_get_setting+0x88>)
   85e7e:	681b      	ldr	r3, [r3, #0]
   85e80:	685a      	ldr	r2, [r3, #4]
   85e82:	79fb      	ldrb	r3, [r7, #7]
   85e84:	009b      	lsls	r3, r3, #2
   85e86:	4413      	add	r3, r2
   85e88:	681b      	ldr	r3, [r3, #0]
   85e8a:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   85e8c:	683b      	ldr	r3, [r7, #0]
   85e8e:	68db      	ldr	r3, [r3, #12]
   85e90:	4798      	blx	r3
   85e92:	4603      	mov	r3, r0
   85e94:	461a      	mov	r2, r3
   85e96:	4b09      	ldr	r3, [pc, #36]	; (85ebc <udc_req_std_iface_get_setting+0x90>)
   85e98:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   85e9a:	2101      	movs	r1, #1
   85e9c:	4807      	ldr	r0, [pc, #28]	; (85ebc <udc_req_std_iface_get_setting+0x90>)
   85e9e:	4b08      	ldr	r3, [pc, #32]	; (85ec0 <udc_req_std_iface_get_setting+0x94>)
   85ea0:	4798      	blx	r3
	return true;
   85ea2:	2301      	movs	r3, #1
}
   85ea4:	4618      	mov	r0, r3
   85ea6:	3708      	adds	r7, #8
   85ea8:	46bd      	mov	sp, r7
   85eaa:	bd80      	pop	{r7, pc}
   85eac:	20001810 	.word	0x20001810
   85eb0:	2000135c 	.word	0x2000135c
   85eb4:	20001360 	.word	0x20001360
   85eb8:	00085549 	.word	0x00085549
   85ebc:	2000136a 	.word	0x2000136a
   85ec0:	00082ce5 	.word	0x00082ce5

00085ec4 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   85ec4:	b580      	push	{r7, lr}
   85ec6:	b082      	sub	sp, #8
   85ec8:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   85eca:	4b14      	ldr	r3, [pc, #80]	; (85f1c <udc_req_std_iface_set_setting+0x58>)
   85ecc:	88db      	ldrh	r3, [r3, #6]
   85ece:	2b00      	cmp	r3, #0
   85ed0:	d001      	beq.n	85ed6 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   85ed2:	2300      	movs	r3, #0
   85ed4:	e01e      	b.n	85f14 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   85ed6:	4b12      	ldr	r3, [pc, #72]	; (85f20 <udc_req_std_iface_set_setting+0x5c>)
   85ed8:	781b      	ldrb	r3, [r3, #0]
   85eda:	2b00      	cmp	r3, #0
   85edc:	d101      	bne.n	85ee2 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   85ede:	2300      	movs	r3, #0
   85ee0:	e018      	b.n	85f14 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85ee2:	4b0e      	ldr	r3, [pc, #56]	; (85f1c <udc_req_std_iface_set_setting+0x58>)
   85ee4:	889b      	ldrh	r3, [r3, #4]
   85ee6:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   85ee8:	4b0c      	ldr	r3, [pc, #48]	; (85f1c <udc_req_std_iface_set_setting+0x58>)
   85eea:	885b      	ldrh	r3, [r3, #2]
   85eec:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   85eee:	79fb      	ldrb	r3, [r7, #7]
   85ef0:	4618      	mov	r0, r3
   85ef2:	4b0c      	ldr	r3, [pc, #48]	; (85f24 <udc_req_std_iface_set_setting+0x60>)
   85ef4:	4798      	blx	r3
   85ef6:	4603      	mov	r3, r0
   85ef8:	f083 0301 	eor.w	r3, r3, #1
   85efc:	b2db      	uxtb	r3, r3
   85efe:	2b00      	cmp	r3, #0
   85f00:	d001      	beq.n	85f06 <udc_req_std_iface_set_setting+0x42>
		return false;
   85f02:	2300      	movs	r3, #0
   85f04:	e006      	b.n	85f14 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   85f06:	79ba      	ldrb	r2, [r7, #6]
   85f08:	79fb      	ldrb	r3, [r7, #7]
   85f0a:	4611      	mov	r1, r2
   85f0c:	4618      	mov	r0, r3
   85f0e:	4b06      	ldr	r3, [pc, #24]	; (85f28 <udc_req_std_iface_set_setting+0x64>)
   85f10:	4798      	blx	r3
   85f12:	4603      	mov	r3, r0
}
   85f14:	4618      	mov	r0, r3
   85f16:	3708      	adds	r7, #8
   85f18:	46bd      	mov	sp, r7
   85f1a:	bd80      	pop	{r7, pc}
   85f1c:	20001810 	.word	0x20001810
   85f20:	2000135c 	.word	0x2000135c
   85f24:	000855e5 	.word	0x000855e5
   85f28:	00085685 	.word	0x00085685

00085f2c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   85f2c:	b580      	push	{r7, lr}
   85f2e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   85f30:	4b55      	ldr	r3, [pc, #340]	; (86088 <udc_reqstd+0x15c>)
   85f32:	781b      	ldrb	r3, [r3, #0]
   85f34:	b25b      	sxtb	r3, r3
   85f36:	2b00      	cmp	r3, #0
   85f38:	da44      	bge.n	85fc4 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   85f3a:	4b53      	ldr	r3, [pc, #332]	; (86088 <udc_reqstd+0x15c>)
   85f3c:	88db      	ldrh	r3, [r3, #6]
   85f3e:	2b00      	cmp	r3, #0
   85f40:	d101      	bne.n	85f46 <udc_reqstd+0x1a>
			return false; // Error for USB host
   85f42:	2300      	movs	r3, #0
   85f44:	e09d      	b.n	86082 <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85f46:	4b50      	ldr	r3, [pc, #320]	; (86088 <udc_reqstd+0x15c>)
   85f48:	781b      	ldrb	r3, [r3, #0]
   85f4a:	f003 031f 	and.w	r3, r3, #31
   85f4e:	2b00      	cmp	r3, #0
   85f50:	d116      	bne.n	85f80 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85f52:	4b4d      	ldr	r3, [pc, #308]	; (86088 <udc_reqstd+0x15c>)
   85f54:	785b      	ldrb	r3, [r3, #1]
   85f56:	2b08      	cmp	r3, #8
   85f58:	d00e      	beq.n	85f78 <udc_reqstd+0x4c>
   85f5a:	2b08      	cmp	r3, #8
   85f5c:	dc12      	bgt.n	85f84 <udc_reqstd+0x58>
   85f5e:	2b00      	cmp	r3, #0
   85f60:	d002      	beq.n	85f68 <udc_reqstd+0x3c>
   85f62:	2b06      	cmp	r3, #6
   85f64:	d004      	beq.n	85f70 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   85f66:	e00d      	b.n	85f84 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   85f68:	4b48      	ldr	r3, [pc, #288]	; (8608c <udc_reqstd+0x160>)
   85f6a:	4798      	blx	r3
   85f6c:	4603      	mov	r3, r0
   85f6e:	e088      	b.n	86082 <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   85f70:	4b47      	ldr	r3, [pc, #284]	; (86090 <udc_reqstd+0x164>)
   85f72:	4798      	blx	r3
   85f74:	4603      	mov	r3, r0
   85f76:	e084      	b.n	86082 <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   85f78:	4b46      	ldr	r3, [pc, #280]	; (86094 <udc_reqstd+0x168>)
   85f7a:	4798      	blx	r3
   85f7c:	4603      	mov	r3, r0
   85f7e:	e080      	b.n	86082 <udc_reqstd+0x156>
			}
		}
   85f80:	bf00      	nop
   85f82:	e000      	b.n	85f86 <udc_reqstd+0x5a>
				break;
   85f84:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85f86:	4b40      	ldr	r3, [pc, #256]	; (86088 <udc_reqstd+0x15c>)
   85f88:	781b      	ldrb	r3, [r3, #0]
   85f8a:	f003 031f 	and.w	r3, r3, #31
   85f8e:	2b01      	cmp	r3, #1
   85f90:	d107      	bne.n	85fa2 <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85f92:	4b3d      	ldr	r3, [pc, #244]	; (86088 <udc_reqstd+0x15c>)
   85f94:	785b      	ldrb	r3, [r3, #1]
   85f96:	2b0a      	cmp	r3, #10
   85f98:	d105      	bne.n	85fa6 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   85f9a:	4b3f      	ldr	r3, [pc, #252]	; (86098 <udc_reqstd+0x16c>)
   85f9c:	4798      	blx	r3
   85f9e:	4603      	mov	r3, r0
   85fa0:	e06f      	b.n	86082 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   85fa2:	bf00      	nop
   85fa4:	e000      	b.n	85fa8 <udc_reqstd+0x7c>
				break;
   85fa6:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85fa8:	4b37      	ldr	r3, [pc, #220]	; (86088 <udc_reqstd+0x15c>)
   85faa:	781b      	ldrb	r3, [r3, #0]
   85fac:	f003 031f 	and.w	r3, r3, #31
   85fb0:	2b02      	cmp	r3, #2
   85fb2:	d160      	bne.n	86076 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85fb4:	4b34      	ldr	r3, [pc, #208]	; (86088 <udc_reqstd+0x15c>)
   85fb6:	785b      	ldrb	r3, [r3, #1]
   85fb8:	2b00      	cmp	r3, #0
   85fba:	d15e      	bne.n	8607a <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   85fbc:	4b37      	ldr	r3, [pc, #220]	; (8609c <udc_reqstd+0x170>)
   85fbe:	4798      	blx	r3
   85fc0:	4603      	mov	r3, r0
   85fc2:	e05e      	b.n	86082 <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85fc4:	4b30      	ldr	r3, [pc, #192]	; (86088 <udc_reqstd+0x15c>)
   85fc6:	781b      	ldrb	r3, [r3, #0]
   85fc8:	f003 031f 	and.w	r3, r3, #31
   85fcc:	2b00      	cmp	r3, #0
   85fce:	d129      	bne.n	86024 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85fd0:	4b2d      	ldr	r3, [pc, #180]	; (86088 <udc_reqstd+0x15c>)
   85fd2:	785b      	ldrb	r3, [r3, #1]
   85fd4:	3b01      	subs	r3, #1
   85fd6:	2b08      	cmp	r3, #8
   85fd8:	d826      	bhi.n	86028 <udc_reqstd+0xfc>
   85fda:	a201      	add	r2, pc, #4	; (adr r2, 85fe0 <udc_reqstd+0xb4>)
   85fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85fe0:	0008600d 	.word	0x0008600d
   85fe4:	00086029 	.word	0x00086029
   85fe8:	00086015 	.word	0x00086015
   85fec:	00086029 	.word	0x00086029
   85ff0:	00086005 	.word	0x00086005
   85ff4:	00086029 	.word	0x00086029
   85ff8:	00086029 	.word	0x00086029
   85ffc:	00086029 	.word	0x00086029
   86000:	0008601d 	.word	0x0008601d
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   86004:	4b26      	ldr	r3, [pc, #152]	; (860a0 <udc_reqstd+0x174>)
   86006:	4798      	blx	r3
   86008:	4603      	mov	r3, r0
   8600a:	e03a      	b.n	86082 <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   8600c:	4b25      	ldr	r3, [pc, #148]	; (860a4 <udc_reqstd+0x178>)
   8600e:	4798      	blx	r3
   86010:	4603      	mov	r3, r0
   86012:	e036      	b.n	86082 <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   86014:	4b24      	ldr	r3, [pc, #144]	; (860a8 <udc_reqstd+0x17c>)
   86016:	4798      	blx	r3
   86018:	4603      	mov	r3, r0
   8601a:	e032      	b.n	86082 <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   8601c:	4b23      	ldr	r3, [pc, #140]	; (860ac <udc_reqstd+0x180>)
   8601e:	4798      	blx	r3
   86020:	4603      	mov	r3, r0
   86022:	e02e      	b.n	86082 <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   86024:	bf00      	nop
   86026:	e000      	b.n	8602a <udc_reqstd+0xfe>
				break;
   86028:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8602a:	4b17      	ldr	r3, [pc, #92]	; (86088 <udc_reqstd+0x15c>)
   8602c:	781b      	ldrb	r3, [r3, #0]
   8602e:	f003 031f 	and.w	r3, r3, #31
   86032:	2b01      	cmp	r3, #1
   86034:	d107      	bne.n	86046 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86036:	4b14      	ldr	r3, [pc, #80]	; (86088 <udc_reqstd+0x15c>)
   86038:	785b      	ldrb	r3, [r3, #1]
   8603a:	2b0b      	cmp	r3, #11
   8603c:	d105      	bne.n	8604a <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   8603e:	4b1c      	ldr	r3, [pc, #112]	; (860b0 <udc_reqstd+0x184>)
   86040:	4798      	blx	r3
   86042:	4603      	mov	r3, r0
   86044:	e01d      	b.n	86082 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   86046:	bf00      	nop
   86048:	e000      	b.n	8604c <udc_reqstd+0x120>
				break;
   8604a:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8604c:	4b0e      	ldr	r3, [pc, #56]	; (86088 <udc_reqstd+0x15c>)
   8604e:	781b      	ldrb	r3, [r3, #0]
   86050:	f003 031f 	and.w	r3, r3, #31
   86054:	2b02      	cmp	r3, #2
   86056:	d112      	bne.n	8607e <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   86058:	4b0b      	ldr	r3, [pc, #44]	; (86088 <udc_reqstd+0x15c>)
   8605a:	785b      	ldrb	r3, [r3, #1]
   8605c:	2b01      	cmp	r3, #1
   8605e:	d002      	beq.n	86066 <udc_reqstd+0x13a>
   86060:	2b03      	cmp	r3, #3
   86062:	d004      	beq.n	8606e <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   86064:	e00c      	b.n	86080 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   86066:	4b13      	ldr	r3, [pc, #76]	; (860b4 <udc_reqstd+0x188>)
   86068:	4798      	blx	r3
   8606a:	4603      	mov	r3, r0
   8606c:	e009      	b.n	86082 <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   8606e:	4b12      	ldr	r3, [pc, #72]	; (860b8 <udc_reqstd+0x18c>)
   86070:	4798      	blx	r3
   86072:	4603      	mov	r3, r0
   86074:	e005      	b.n	86082 <udc_reqstd+0x156>
		}
   86076:	bf00      	nop
   86078:	e002      	b.n	86080 <udc_reqstd+0x154>
				break;
   8607a:	bf00      	nop
   8607c:	e000      	b.n	86080 <udc_reqstd+0x154>
			}
		}
   8607e:	bf00      	nop
#endif
	}
	return false;
   86080:	2300      	movs	r3, #0
}
   86082:	4618      	mov	r0, r3
   86084:	bd80      	pop	{r7, pc}
   86086:	bf00      	nop
   86088:	20001810 	.word	0x20001810
   8608c:	000857e1 	.word	0x000857e1
   86090:	00085ae1 	.word	0x00085ae1
   86094:	00085cfd 	.word	0x00085cfd
   86098:	00085e2d 	.word	0x00085e2d
   8609c:	0008580d 	.word	0x0008580d
   860a0:	000859ed 	.word	0x000859ed
   860a4:	00085851 	.word	0x00085851
   860a8:	000858c5 	.word	0x000858c5
   860ac:	00085d29 	.word	0x00085d29
   860b0:	00085ec5 	.word	0x00085ec5
   860b4:	0008588d 	.word	0x0008588d
   860b8:	00085981 	.word	0x00085981

000860bc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   860bc:	b580      	push	{r7, lr}
   860be:	b082      	sub	sp, #8
   860c0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   860c2:	4b20      	ldr	r3, [pc, #128]	; (86144 <udc_req_iface+0x88>)
   860c4:	781b      	ldrb	r3, [r3, #0]
   860c6:	2b00      	cmp	r3, #0
   860c8:	d101      	bne.n	860ce <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   860ca:	2300      	movs	r3, #0
   860cc:	e036      	b.n	8613c <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   860ce:	4b1e      	ldr	r3, [pc, #120]	; (86148 <udc_req_iface+0x8c>)
   860d0:	889b      	ldrh	r3, [r3, #4]
   860d2:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   860d4:	4b1d      	ldr	r3, [pc, #116]	; (8614c <udc_req_iface+0x90>)
   860d6:	681b      	ldr	r3, [r3, #0]
   860d8:	681b      	ldr	r3, [r3, #0]
   860da:	791b      	ldrb	r3, [r3, #4]
   860dc:	79fa      	ldrb	r2, [r7, #7]
   860de:	429a      	cmp	r2, r3
   860e0:	d301      	bcc.n	860e6 <udc_req_iface+0x2a>
		return false;
   860e2:	2300      	movs	r3, #0
   860e4:	e02a      	b.n	8613c <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   860e6:	79fb      	ldrb	r3, [r7, #7]
   860e8:	2100      	movs	r1, #0
   860ea:	4618      	mov	r0, r3
   860ec:	4b18      	ldr	r3, [pc, #96]	; (86150 <udc_req_iface+0x94>)
   860ee:	4798      	blx	r3
   860f0:	4603      	mov	r3, r0
   860f2:	f083 0301 	eor.w	r3, r3, #1
   860f6:	b2db      	uxtb	r3, r3
   860f8:	2b00      	cmp	r3, #0
   860fa:	d001      	beq.n	86100 <udc_req_iface+0x44>
		return false;
   860fc:	2300      	movs	r3, #0
   860fe:	e01d      	b.n	8613c <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86100:	4b12      	ldr	r3, [pc, #72]	; (8614c <udc_req_iface+0x90>)
   86102:	681b      	ldr	r3, [r3, #0]
   86104:	685a      	ldr	r2, [r3, #4]
   86106:	79fb      	ldrb	r3, [r7, #7]
   86108:	009b      	lsls	r3, r3, #2
   8610a:	4413      	add	r3, r2
   8610c:	681b      	ldr	r3, [r3, #0]
   8610e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86110:	683b      	ldr	r3, [r7, #0]
   86112:	68db      	ldr	r3, [r3, #12]
   86114:	4798      	blx	r3
   86116:	4603      	mov	r3, r0
   86118:	461a      	mov	r2, r3
   8611a:	79fb      	ldrb	r3, [r7, #7]
   8611c:	4611      	mov	r1, r2
   8611e:	4618      	mov	r0, r3
   86120:	4b0b      	ldr	r3, [pc, #44]	; (86150 <udc_req_iface+0x94>)
   86122:	4798      	blx	r3
   86124:	4603      	mov	r3, r0
   86126:	f083 0301 	eor.w	r3, r3, #1
   8612a:	b2db      	uxtb	r3, r3
   8612c:	2b00      	cmp	r3, #0
   8612e:	d001      	beq.n	86134 <udc_req_iface+0x78>
		return false;
   86130:	2300      	movs	r3, #0
   86132:	e003      	b.n	8613c <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   86134:	683b      	ldr	r3, [r7, #0]
   86136:	689b      	ldr	r3, [r3, #8]
   86138:	4798      	blx	r3
   8613a:	4603      	mov	r3, r0
}
   8613c:	4618      	mov	r0, r3
   8613e:	3708      	adds	r7, #8
   86140:	46bd      	mov	sp, r7
   86142:	bd80      	pop	{r7, pc}
   86144:	2000135c 	.word	0x2000135c
   86148:	20001810 	.word	0x20001810
   8614c:	20001360 	.word	0x20001360
   86150:	00085549 	.word	0x00085549

00086154 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   86154:	b580      	push	{r7, lr}
   86156:	b082      	sub	sp, #8
   86158:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8615a:	4b1e      	ldr	r3, [pc, #120]	; (861d4 <udc_req_ep+0x80>)
   8615c:	781b      	ldrb	r3, [r3, #0]
   8615e:	2b00      	cmp	r3, #0
   86160:	d101      	bne.n	86166 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   86162:	2300      	movs	r3, #0
   86164:	e032      	b.n	861cc <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   86166:	4b1c      	ldr	r3, [pc, #112]	; (861d8 <udc_req_ep+0x84>)
   86168:	889b      	ldrh	r3, [r3, #4]
   8616a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8616c:	2300      	movs	r3, #0
   8616e:	71fb      	strb	r3, [r7, #7]
   86170:	e024      	b.n	861bc <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   86172:	4b1a      	ldr	r3, [pc, #104]	; (861dc <udc_req_ep+0x88>)
   86174:	681b      	ldr	r3, [r3, #0]
   86176:	685a      	ldr	r2, [r3, #4]
   86178:	79fb      	ldrb	r3, [r7, #7]
   8617a:	009b      	lsls	r3, r3, #2
   8617c:	4413      	add	r3, r2
   8617e:	681b      	ldr	r3, [r3, #0]
   86180:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86182:	683b      	ldr	r3, [r7, #0]
   86184:	68db      	ldr	r3, [r3, #12]
   86186:	4798      	blx	r3
   86188:	4603      	mov	r3, r0
   8618a:	461a      	mov	r2, r3
   8618c:	79fb      	ldrb	r3, [r7, #7]
   8618e:	4611      	mov	r1, r2
   86190:	4618      	mov	r0, r3
   86192:	4b13      	ldr	r3, [pc, #76]	; (861e0 <udc_req_ep+0x8c>)
   86194:	4798      	blx	r3
   86196:	4603      	mov	r3, r0
   86198:	f083 0301 	eor.w	r3, r3, #1
   8619c:	b2db      	uxtb	r3, r3
   8619e:	2b00      	cmp	r3, #0
   861a0:	d001      	beq.n	861a6 <udc_req_ep+0x52>
			return false;
   861a2:	2300      	movs	r3, #0
   861a4:	e012      	b.n	861cc <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   861a6:	683b      	ldr	r3, [r7, #0]
   861a8:	689b      	ldr	r3, [r3, #8]
   861aa:	4798      	blx	r3
   861ac:	4603      	mov	r3, r0
   861ae:	2b00      	cmp	r3, #0
   861b0:	d001      	beq.n	861b6 <udc_req_ep+0x62>
			return true;
   861b2:	2301      	movs	r3, #1
   861b4:	e00a      	b.n	861cc <udc_req_ep+0x78>
			iface_num++) {
   861b6:	79fb      	ldrb	r3, [r7, #7]
   861b8:	3301      	adds	r3, #1
   861ba:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   861bc:	4b07      	ldr	r3, [pc, #28]	; (861dc <udc_req_ep+0x88>)
   861be:	681b      	ldr	r3, [r3, #0]
   861c0:	681b      	ldr	r3, [r3, #0]
   861c2:	791b      	ldrb	r3, [r3, #4]
   861c4:	79fa      	ldrb	r2, [r7, #7]
   861c6:	429a      	cmp	r2, r3
   861c8:	d3d3      	bcc.n	86172 <udc_req_ep+0x1e>
		}
	}
	return false;
   861ca:	2300      	movs	r3, #0
}
   861cc:	4618      	mov	r0, r3
   861ce:	3708      	adds	r7, #8
   861d0:	46bd      	mov	sp, r7
   861d2:	bd80      	pop	{r7, pc}
   861d4:	2000135c 	.word	0x2000135c
   861d8:	20001810 	.word	0x20001810
   861dc:	20001360 	.word	0x20001360
   861e0:	00085549 	.word	0x00085549

000861e4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   861e4:	b580      	push	{r7, lr}
   861e6:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   861e8:	4b25      	ldr	r3, [pc, #148]	; (86280 <udc_process_setup+0x9c>)
   861ea:	2200      	movs	r2, #0
   861ec:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   861ee:	4b24      	ldr	r3, [pc, #144]	; (86280 <udc_process_setup+0x9c>)
   861f0:	2200      	movs	r2, #0
   861f2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   861f4:	4b22      	ldr	r3, [pc, #136]	; (86280 <udc_process_setup+0x9c>)
   861f6:	2200      	movs	r2, #0
   861f8:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   861fa:	4b21      	ldr	r3, [pc, #132]	; (86280 <udc_process_setup+0x9c>)
   861fc:	781b      	ldrb	r3, [r3, #0]
   861fe:	2bc0      	cmp	r3, #192	; 0xc0
   86200:	d109      	bne.n	86216 <udc_process_setup+0x32>
   86202:	4b1f      	ldr	r3, [pc, #124]	; (86280 <udc_process_setup+0x9c>)
   86204:	785b      	ldrb	r3, [r3, #1]
   86206:	2b01      	cmp	r3, #1
   86208:	d105      	bne.n	86216 <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8620a:	219e      	movs	r1, #158	; 0x9e
   8620c:	481d      	ldr	r0, [pc, #116]	; (86284 <udc_process_setup+0xa0>)
   8620e:	4b1e      	ldr	r3, [pc, #120]	; (86288 <udc_process_setup+0xa4>)
   86210:	4798      	blx	r3
		return true;
   86212:	2301      	movs	r3, #1
   86214:	e032      	b.n	8627c <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   86216:	4b1a      	ldr	r3, [pc, #104]	; (86280 <udc_process_setup+0x9c>)
   86218:	781b      	ldrb	r3, [r3, #0]
   8621a:	b25b      	sxtb	r3, r3
   8621c:	2b00      	cmp	r3, #0
   8621e:	da05      	bge.n	8622c <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   86220:	4b17      	ldr	r3, [pc, #92]	; (86280 <udc_process_setup+0x9c>)
   86222:	88db      	ldrh	r3, [r3, #6]
   86224:	2b00      	cmp	r3, #0
   86226:	d101      	bne.n	8622c <udc_process_setup+0x48>
			return false; // Error from USB host
   86228:	2300      	movs	r3, #0
   8622a:	e027      	b.n	8627c <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8622c:	4b14      	ldr	r3, [pc, #80]	; (86280 <udc_process_setup+0x9c>)
   8622e:	781b      	ldrb	r3, [r3, #0]
   86230:	f003 0360 	and.w	r3, r3, #96	; 0x60
   86234:	2b00      	cmp	r3, #0
   86236:	d106      	bne.n	86246 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   86238:	4b14      	ldr	r3, [pc, #80]	; (8628c <udc_process_setup+0xa8>)
   8623a:	4798      	blx	r3
   8623c:	4603      	mov	r3, r0
   8623e:	2b00      	cmp	r3, #0
   86240:	d001      	beq.n	86246 <udc_process_setup+0x62>
			return true;
   86242:	2301      	movs	r3, #1
   86244:	e01a      	b.n	8627c <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   86246:	4b0e      	ldr	r3, [pc, #56]	; (86280 <udc_process_setup+0x9c>)
   86248:	781b      	ldrb	r3, [r3, #0]
   8624a:	f003 031f 	and.w	r3, r3, #31
   8624e:	2b01      	cmp	r3, #1
   86250:	d106      	bne.n	86260 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   86252:	4b0f      	ldr	r3, [pc, #60]	; (86290 <udc_process_setup+0xac>)
   86254:	4798      	blx	r3
   86256:	4603      	mov	r3, r0
   86258:	2b00      	cmp	r3, #0
   8625a:	d001      	beq.n	86260 <udc_process_setup+0x7c>
			return true;
   8625c:	2301      	movs	r3, #1
   8625e:	e00d      	b.n	8627c <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   86260:	4b07      	ldr	r3, [pc, #28]	; (86280 <udc_process_setup+0x9c>)
   86262:	781b      	ldrb	r3, [r3, #0]
   86264:	f003 031f 	and.w	r3, r3, #31
   86268:	2b02      	cmp	r3, #2
   8626a:	d106      	bne.n	8627a <udc_process_setup+0x96>
		if (udc_req_ep()) {
   8626c:	4b09      	ldr	r3, [pc, #36]	; (86294 <udc_process_setup+0xb0>)
   8626e:	4798      	blx	r3
   86270:	4603      	mov	r3, r0
   86272:	2b00      	cmp	r3, #0
   86274:	d001      	beq.n	8627a <udc_process_setup+0x96>
			return true;
   86276:	2301      	movs	r3, #1
   86278:	e000      	b.n	8627c <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8627a:	2300      	movs	r3, #0
#endif
}
   8627c:	4618      	mov	r0, r3
   8627e:	bd80      	pop	{r7, pc}
   86280:	20001810 	.word	0x20001810
   86284:	2000030c 	.word	0x2000030c
   86288:	00082ce5 	.word	0x00082ce5
   8628c:	00085f2d 	.word	0x00085f2d
   86290:	000860bd 	.word	0x000860bd
   86294:	00086155 	.word	0x00086155

00086298 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   86298:	b5b0      	push	{r4, r5, r7, lr}
   8629a:	b09c      	sub	sp, #112	; 0x70
   8629c:	af00      	add	r7, sp, #0
   8629e:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   862a0:	687b      	ldr	r3, [r7, #4]
   862a2:	2b05      	cmp	r3, #5
   862a4:	f000 81e8 	beq.w	86678 <pmc_sleep+0x3e0>
   862a8:	687b      	ldr	r3, [r7, #4]
   862aa:	2b05      	cmp	r3, #5
   862ac:	f300 81f5 	bgt.w	8669a <pmc_sleep+0x402>
   862b0:	687b      	ldr	r3, [r7, #4]
   862b2:	2b02      	cmp	r3, #2
   862b4:	dc03      	bgt.n	862be <pmc_sleep+0x26>
   862b6:	687b      	ldr	r3, [r7, #4]
   862b8:	2b00      	cmp	r3, #0
   862ba:	dc06      	bgt.n	862ca <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   862bc:	e1ed      	b.n	8669a <pmc_sleep+0x402>
   862be:	687b      	ldr	r3, [r7, #4]
   862c0:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   862c2:	2b01      	cmp	r3, #1
   862c4:	f200 81e9 	bhi.w	8669a <pmc_sleep+0x402>
   862c8:	e01b      	b.n	86302 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   862ca:	4b88      	ldr	r3, [pc, #544]	; (864ec <pmc_sleep+0x254>)
   862cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   862ce:	4a87      	ldr	r2, [pc, #540]	; (864ec <pmc_sleep+0x254>)
   862d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   862d4:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   862d6:	4b86      	ldr	r3, [pc, #536]	; (864f0 <pmc_sleep+0x258>)
   862d8:	691b      	ldr	r3, [r3, #16]
   862da:	4a85      	ldr	r2, [pc, #532]	; (864f0 <pmc_sleep+0x258>)
   862dc:	f023 0304 	bic.w	r3, r3, #4
   862e0:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   862e2:	4b84      	ldr	r3, [pc, #528]	; (864f4 <pmc_sleep+0x25c>)
   862e4:	2201      	movs	r2, #1
   862e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   862e8:	f3bf 8f5f 	dmb	sy
}
   862ec:	bf00      	nop
  __ASM volatile ("cpsie i");
   862ee:	b662      	cpsie	i
}
   862f0:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   862f2:	687b      	ldr	r3, [r7, #4]
   862f4:	2b02      	cmp	r3, #2
   862f6:	d101      	bne.n	862fc <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   862f8:	bf30      	wfi
}
   862fa:	e001      	b.n	86300 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   862fc:	bf20      	wfe
}
   862fe:	bf00      	nop
		break;
   86300:	e1cb      	b.n	8669a <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   86302:	b672      	cpsid	i
}
   86304:	bf00      	nop
  __ASM volatile ("dmb");
   86306:	f3bf 8f5f 	dmb	sy
}
   8630a:	bf00      	nop
		cpu_irq_disable();
   8630c:	4b79      	ldr	r3, [pc, #484]	; (864f4 <pmc_sleep+0x25c>)
   8630e:	2200      	movs	r2, #0
   86310:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   86312:	4b79      	ldr	r3, [pc, #484]	; (864f8 <pmc_sleep+0x260>)
   86314:	2201      	movs	r2, #1
   86316:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   86318:	687b      	ldr	r3, [r7, #4]
   8631a:	2b04      	cmp	r3, #4
   8631c:	bf0c      	ite	eq
   8631e:	2301      	moveq	r3, #1
   86320:	2300      	movne	r3, #0
   86322:	b2da      	uxtb	r2, r3
   86324:	f107 0320 	add.w	r3, r7, #32
   86328:	64fb      	str	r3, [r7, #76]	; 0x4c
   8632a:	f107 031c 	add.w	r3, r7, #28
   8632e:	64bb      	str	r3, [r7, #72]	; 0x48
   86330:	f107 0318 	add.w	r3, r7, #24
   86334:	647b      	str	r3, [r7, #68]	; 0x44
   86336:	f107 0314 	add.w	r3, r7, #20
   8633a:	643b      	str	r3, [r7, #64]	; 0x40
   8633c:	f107 0310 	add.w	r3, r7, #16
   86340:	63fb      	str	r3, [r7, #60]	; 0x3c
   86342:	f107 030c 	add.w	r3, r7, #12
   86346:	63bb      	str	r3, [r7, #56]	; 0x38
   86348:	4613      	mov	r3, r2
   8634a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   8634e:	4b67      	ldr	r3, [pc, #412]	; (864ec <pmc_sleep+0x254>)
   86350:	6a1b      	ldr	r3, [r3, #32]
   86352:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   86354:	4b65      	ldr	r3, [pc, #404]	; (864ec <pmc_sleep+0x254>)
   86356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86358:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   8635a:	4b68      	ldr	r3, [pc, #416]	; (864fc <pmc_sleep+0x264>)
   8635c:	681b      	ldr	r3, [r3, #0]
   8635e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   86360:	4b67      	ldr	r3, [pc, #412]	; (86500 <pmc_sleep+0x268>)
   86362:	681b      	ldr	r3, [r3, #0]
   86364:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   86366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86368:	2b00      	cmp	r3, #0
   8636a:	d002      	beq.n	86372 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   8636c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   86370:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   86372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   86374:	2b00      	cmp	r3, #0
   86376:	d003      	beq.n	86380 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   86378:	4b5c      	ldr	r3, [pc, #368]	; (864ec <pmc_sleep+0x254>)
   8637a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   8637e:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   86380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   86382:	2b00      	cmp	r3, #0
   86384:	d003      	beq.n	8638e <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   86386:	4b59      	ldr	r3, [pc, #356]	; (864ec <pmc_sleep+0x254>)
   86388:	69da      	ldr	r2, [r3, #28]
   8638a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   8638c:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   8638e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   86390:	2b00      	cmp	r3, #0
   86392:	d002      	beq.n	8639a <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   86394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   86396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   86398:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   8639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8639c:	2b00      	cmp	r3, #0
   8639e:	d002      	beq.n	863a6 <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   863a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   863a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   863a4:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   863a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   863a8:	2b00      	cmp	r3, #0
   863aa:	d002      	beq.n	863b2 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   863ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   863ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   863b0:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   863b2:	4a4e      	ldr	r2, [pc, #312]	; (864ec <pmc_sleep+0x254>)
   863b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   863b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   863ba:	f043 0308 	orr.w	r3, r3, #8
   863be:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   863c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   863c2:	f003 0302 	and.w	r3, r3, #2
   863c6:	2b00      	cmp	r3, #0
   863c8:	d00f      	beq.n	863ea <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   863ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   863cc:	f023 0303 	bic.w	r3, r3, #3
   863d0:	f043 0301 	orr.w	r3, r3, #1
   863d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   863d6:	4a45      	ldr	r2, [pc, #276]	; (864ec <pmc_sleep+0x254>)
   863d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   863da:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   863dc:	bf00      	nop
   863de:	4b43      	ldr	r3, [pc, #268]	; (864ec <pmc_sleep+0x254>)
   863e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   863e2:	f003 0308 	and.w	r3, r3, #8
   863e6:	2b00      	cmp	r3, #0
   863e8:	d0f9      	beq.n	863de <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   863ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   863ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   863f0:	2b00      	cmp	r3, #0
   863f2:	d00d      	beq.n	86410 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   863f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   863f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   863fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   863fc:	4a3b      	ldr	r2, [pc, #236]	; (864ec <pmc_sleep+0x254>)
   863fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   86400:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   86402:	bf00      	nop
   86404:	4b39      	ldr	r3, [pc, #228]	; (864ec <pmc_sleep+0x254>)
   86406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86408:	f003 0308 	and.w	r3, r3, #8
   8640c:	2b00      	cmp	r3, #0
   8640e:	d0f9      	beq.n	86404 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   86410:	4b3c      	ldr	r3, [pc, #240]	; (86504 <pmc_sleep+0x26c>)
   86412:	4798      	blx	r3
	pmc_disable_upll_clock();
   86414:	4b3c      	ldr	r3, [pc, #240]	; (86508 <pmc_sleep+0x270>)
   86416:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   86418:	bf00      	nop
   8641a:	4b34      	ldr	r3, [pc, #208]	; (864ec <pmc_sleep+0x254>)
   8641c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   86422:	2b00      	cmp	r3, #0
   86424:	d0f9      	beq.n	8641a <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   86426:	4b31      	ldr	r3, [pc, #196]	; (864ec <pmc_sleep+0x254>)
   86428:	6a1b      	ldr	r3, [r3, #32]
   8642a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8642e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86432:	4a2e      	ldr	r2, [pc, #184]	; (864ec <pmc_sleep+0x254>)
   86434:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   86438:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8643a:	bf00      	nop
   8643c:	4b2b      	ldr	r3, [pc, #172]	; (864ec <pmc_sleep+0x254>)
   8643e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   86444:	2b00      	cmp	r3, #0
   86446:	d0f9      	beq.n	8643c <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   86448:	4a2c      	ldr	r2, [pc, #176]	; (864fc <pmc_sleep+0x264>)
   8644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8644c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   86450:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   86452:	4a2b      	ldr	r2, [pc, #172]	; (86500 <pmc_sleep+0x268>)
   86454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   86456:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8645a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   8645c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   86460:	2b00      	cmp	r3, #0
   86462:	d009      	beq.n	86478 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86464:	4b21      	ldr	r3, [pc, #132]	; (864ec <pmc_sleep+0x254>)
   86466:	6a1b      	ldr	r3, [r3, #32]
   86468:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8646c:	f023 0301 	bic.w	r3, r3, #1
   86470:	4a1e      	ldr	r2, [pc, #120]	; (864ec <pmc_sleep+0x254>)
   86472:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   86476:	6213      	str	r3, [r2, #32]
}
   86478:	bf00      	nop
		cpu_irq_enable();
   8647a:	4b1e      	ldr	r3, [pc, #120]	; (864f4 <pmc_sleep+0x25c>)
   8647c:	2201      	movs	r2, #1
   8647e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   86480:	f3bf 8f5f 	dmb	sy
}
   86484:	bf00      	nop
  __ASM volatile ("cpsie i");
   86486:	b662      	cpsie	i
}
   86488:	bf00      	nop
		pmc_enable_waitmode();
   8648a:	4b20      	ldr	r3, [pc, #128]	; (8650c <pmc_sleep+0x274>)
   8648c:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   8648e:	b672      	cpsid	i
}
   86490:	bf00      	nop
  __ASM volatile ("dmb");
   86492:	f3bf 8f5f 	dmb	sy
}
   86496:	bf00      	nop
		cpu_irq_disable();
   86498:	4b16      	ldr	r3, [pc, #88]	; (864f4 <pmc_sleep+0x25c>)
   8649a:	2200      	movs	r2, #0
   8649c:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   8649e:	6a3d      	ldr	r5, [r7, #32]
   864a0:	69fc      	ldr	r4, [r7, #28]
   864a2:	69b8      	ldr	r0, [r7, #24]
   864a4:	6979      	ldr	r1, [r7, #20]
   864a6:	693a      	ldr	r2, [r7, #16]
   864a8:	68fb      	ldr	r3, [r7, #12]
   864aa:	66fd      	str	r5, [r7, #108]	; 0x6c
   864ac:	66bc      	str	r4, [r7, #104]	; 0x68
   864ae:	6678      	str	r0, [r7, #100]	; 0x64
   864b0:	6639      	str	r1, [r7, #96]	; 0x60
   864b2:	65fa      	str	r2, [r7, #92]	; 0x5c
   864b4:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   864b6:	2300      	movs	r3, #0
   864b8:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   864ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   864bc:	f003 0302 	and.w	r3, r3, #2
   864c0:	2b00      	cmp	r3, #0
   864c2:	d029      	beq.n	86518 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   864c4:	4b09      	ldr	r3, [pc, #36]	; (864ec <pmc_sleep+0x254>)
   864c6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   864c8:	4a11      	ldr	r2, [pc, #68]	; (86510 <pmc_sleep+0x278>)
   864ca:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   864cc:	4907      	ldr	r1, [pc, #28]	; (864ec <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   864ce:	4b11      	ldr	r3, [pc, #68]	; (86514 <pmc_sleep+0x27c>)
   864d0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   864d2:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   864d4:	4b05      	ldr	r3, [pc, #20]	; (864ec <pmc_sleep+0x254>)
   864d6:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   864d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   864dc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   864e0:	4a02      	ldr	r2, [pc, #8]	; (864ec <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   864e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   864e6:	6213      	str	r3, [r2, #32]
   864e8:	e053      	b.n	86592 <pmc_sleep+0x2fa>
   864ea:	bf00      	nop
   864ec:	400e0400 	.word	0x400e0400
   864f0:	e000ed00 	.word	0xe000ed00
   864f4:	200003aa 	.word	0x200003aa
   864f8:	2000136b 	.word	0x2000136b
   864fc:	400e0800 	.word	0x400e0800
   86500:	400e0a00 	.word	0x400e0a00
   86504:	00084c15 	.word	0x00084c15
   86508:	00084c45 	.word	0x00084c45
   8650c:	00084d61 	.word	0x00084d61
   86510:	fec8fffc 	.word	0xfec8fffc
   86514:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   86518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8651a:	f003 0301 	and.w	r3, r3, #1
   8651e:	2b00      	cmp	r3, #0
   86520:	d037      	beq.n	86592 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   86522:	4b60      	ldr	r3, [pc, #384]	; (866a4 <pmc_sleep+0x40c>)
   86524:	6a1b      	ldr	r3, [r3, #32]
   86526:	f003 0301 	and.w	r3, r3, #1
   8652a:	2b00      	cmp	r3, #0
   8652c:	d112      	bne.n	86554 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8652e:	4b5d      	ldr	r3, [pc, #372]	; (866a4 <pmc_sleep+0x40c>)
   86530:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   86532:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   86536:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8653a:	4a5a      	ldr	r2, [pc, #360]	; (866a4 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8653c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   86540:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86544:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   86546:	bf00      	nop
   86548:	4b56      	ldr	r3, [pc, #344]	; (866a4 <pmc_sleep+0x40c>)
   8654a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8654c:	f003 0301 	and.w	r3, r3, #1
   86550:	2b00      	cmp	r3, #0
   86552:	d0f9      	beq.n	86548 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   86554:	4b53      	ldr	r3, [pc, #332]	; (866a4 <pmc_sleep+0x40c>)
   86556:	6a1b      	ldr	r3, [r3, #32]
   86558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8655c:	2b00      	cmp	r3, #0
   8655e:	d10e      	bne.n	8657e <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   86560:	4b50      	ldr	r3, [pc, #320]	; (866a4 <pmc_sleep+0x40c>)
   86562:	6a1b      	ldr	r3, [r3, #32]
   86564:	4a4f      	ldr	r2, [pc, #316]	; (866a4 <pmc_sleep+0x40c>)
   86566:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8656a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8656e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   86570:	bf00      	nop
   86572:	4b4c      	ldr	r3, [pc, #304]	; (866a4 <pmc_sleep+0x40c>)
   86574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8657a:	2b00      	cmp	r3, #0
   8657c:	d0f9      	beq.n	86572 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8657e:	4b49      	ldr	r3, [pc, #292]	; (866a4 <pmc_sleep+0x40c>)
   86580:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   86582:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   86586:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8658a:	4a46      	ldr	r2, [pc, #280]	; (866a4 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   8658c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   86590:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   86592:	6eba      	ldr	r2, [r7, #104]	; 0x68
   86594:	4b44      	ldr	r3, [pc, #272]	; (866a8 <pmc_sleep+0x410>)
   86596:	4013      	ands	r3, r2
   86598:	2b00      	cmp	r3, #0
   8659a:	d008      	beq.n	865ae <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   8659c:	4a41      	ldr	r2, [pc, #260]	; (866a4 <pmc_sleep+0x40c>)
   8659e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   865a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   865a4:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   865a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   865a8:	f043 0302 	orr.w	r3, r3, #2
   865ac:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   865ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   865b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   865b4:	2b00      	cmp	r3, #0
   865b6:	d006      	beq.n	865c6 <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   865b8:	4a3a      	ldr	r2, [pc, #232]	; (866a4 <pmc_sleep+0x40c>)
   865ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   865bc:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   865be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   865c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   865c4:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   865c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   865c8:	f003 0303 	and.w	r3, r3, #3
   865cc:	2b02      	cmp	r3, #2
   865ce:	d002      	beq.n	865d6 <pmc_sleep+0x33e>
   865d0:	2b03      	cmp	r3, #3
   865d2:	d008      	beq.n	865e6 <pmc_sleep+0x34e>
   865d4:	e00f      	b.n	865f6 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   865d6:	bf00      	nop
   865d8:	4b32      	ldr	r3, [pc, #200]	; (866a4 <pmc_sleep+0x40c>)
   865da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   865dc:	f003 0302 	and.w	r3, r3, #2
   865e0:	2b00      	cmp	r3, #0
   865e2:	d0f9      	beq.n	865d8 <pmc_sleep+0x340>
		break;
   865e4:	e007      	b.n	865f6 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   865e6:	bf00      	nop
   865e8:	4b2e      	ldr	r3, [pc, #184]	; (866a4 <pmc_sleep+0x40c>)
   865ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   865ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
   865f0:	2b00      	cmp	r3, #0
   865f2:	d0f9      	beq.n	865e8 <pmc_sleep+0x350>
		break;
   865f4:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   865f6:	4b2b      	ldr	r3, [pc, #172]	; (866a4 <pmc_sleep+0x40c>)
   865f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   865fa:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   865fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   865fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   86602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86604:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86608:	4926      	ldr	r1, [pc, #152]	; (866a4 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8660a:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8660c:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8660e:	bf00      	nop
   86610:	4b24      	ldr	r3, [pc, #144]	; (866a4 <pmc_sleep+0x40c>)
   86612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86614:	f003 0308 	and.w	r3, r3, #8
   86618:	2b00      	cmp	r3, #0
   8661a:	d0f9      	beq.n	86610 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   8661c:	4a23      	ldr	r2, [pc, #140]	; (866ac <pmc_sleep+0x414>)
   8661e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   86620:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   86622:	4a23      	ldr	r2, [pc, #140]	; (866b0 <pmc_sleep+0x418>)
   86624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   86626:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   86628:	4a1e      	ldr	r2, [pc, #120]	; (866a4 <pmc_sleep+0x40c>)
   8662a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8662c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8662e:	bf00      	nop
   86630:	4b1c      	ldr	r3, [pc, #112]	; (866a4 <pmc_sleep+0x40c>)
   86632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86634:	f003 0308 	and.w	r3, r3, #8
   86638:	2b00      	cmp	r3, #0
   8663a:	d0f9      	beq.n	86630 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   8663c:	bf00      	nop
   8663e:	4b19      	ldr	r3, [pc, #100]	; (866a4 <pmc_sleep+0x40c>)
   86640:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   86642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   86644:	4013      	ands	r3, r2
   86646:	2b00      	cmp	r3, #0
   86648:	d0f9      	beq.n	8663e <pmc_sleep+0x3a6>
}
   8664a:	bf00      	nop
		b_is_sleep_clock_used = false;
   8664c:	4b19      	ldr	r3, [pc, #100]	; (866b4 <pmc_sleep+0x41c>)
   8664e:	2200      	movs	r2, #0
   86650:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   86652:	4b19      	ldr	r3, [pc, #100]	; (866b8 <pmc_sleep+0x420>)
   86654:	681b      	ldr	r3, [r3, #0]
   86656:	2b00      	cmp	r3, #0
   86658:	d005      	beq.n	86666 <pmc_sleep+0x3ce>
			callback_clocks_restored();
   8665a:	4b17      	ldr	r3, [pc, #92]	; (866b8 <pmc_sleep+0x420>)
   8665c:	681b      	ldr	r3, [r3, #0]
   8665e:	4798      	blx	r3
			callback_clocks_restored = NULL;
   86660:	4b15      	ldr	r3, [pc, #84]	; (866b8 <pmc_sleep+0x420>)
   86662:	2200      	movs	r2, #0
   86664:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   86666:	4b15      	ldr	r3, [pc, #84]	; (866bc <pmc_sleep+0x424>)
   86668:	2201      	movs	r2, #1
   8666a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8666c:	f3bf 8f5f 	dmb	sy
}
   86670:	bf00      	nop
  __ASM volatile ("cpsie i");
   86672:	b662      	cpsie	i
}
   86674:	bf00      	nop
		break;
   86676:	e010      	b.n	8669a <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   86678:	4b11      	ldr	r3, [pc, #68]	; (866c0 <pmc_sleep+0x428>)
   8667a:	691b      	ldr	r3, [r3, #16]
   8667c:	4a10      	ldr	r2, [pc, #64]	; (866c0 <pmc_sleep+0x428>)
   8667e:	f043 0304 	orr.w	r3, r3, #4
   86682:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   86684:	4b0d      	ldr	r3, [pc, #52]	; (866bc <pmc_sleep+0x424>)
   86686:	2201      	movs	r2, #1
   86688:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8668a:	f3bf 8f5f 	dmb	sy
}
   8668e:	bf00      	nop
  __ASM volatile ("cpsie i");
   86690:	b662      	cpsie	i
}
   86692:	bf00      	nop
  __ASM volatile ("wfe");
   86694:	bf20      	wfe
}
   86696:	bf00      	nop
		break;
   86698:	bf00      	nop
}
   8669a:	bf00      	nop
   8669c:	3770      	adds	r7, #112	; 0x70
   8669e:	46bd      	mov	sp, r7
   866a0:	bdb0      	pop	{r4, r5, r7, pc}
   866a2:	bf00      	nop
   866a4:	400e0400 	.word	0x400e0400
   866a8:	07ff0000 	.word	0x07ff0000
   866ac:	400e0800 	.word	0x400e0800
   866b0:	400e0a00 	.word	0x400e0a00
   866b4:	2000136b 	.word	0x2000136b
   866b8:	2000136c 	.word	0x2000136c
   866bc:	200003aa 	.word	0x200003aa
   866c0:	e000ed00 	.word	0xe000ed00

000866c4 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   866c4:	b480      	push	{r7}
   866c6:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   866c8:	4b08      	ldr	r3, [pc, #32]	; (866ec <pmc_is_wakeup_clocks_restored+0x28>)
   866ca:	781b      	ldrb	r3, [r3, #0]
   866cc:	b2db      	uxtb	r3, r3
   866ce:	2b00      	cmp	r3, #0
   866d0:	bf14      	ite	ne
   866d2:	2301      	movne	r3, #1
   866d4:	2300      	moveq	r3, #0
   866d6:	b2db      	uxtb	r3, r3
   866d8:	f083 0301 	eor.w	r3, r3, #1
   866dc:	b2db      	uxtb	r3, r3
   866de:	f003 0301 	and.w	r3, r3, #1
   866e2:	b2db      	uxtb	r3, r3
}
   866e4:	4618      	mov	r0, r3
   866e6:	46bd      	mov	sp, r7
   866e8:	bc80      	pop	{r7}
   866ea:	4770      	bx	lr
   866ec:	2000136b 	.word	0x2000136b

000866f0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   866f0:	b480      	push	{r7}
   866f2:	b085      	sub	sp, #20
   866f4:	af00      	add	r7, sp, #0
   866f6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   866f8:	4b10      	ldr	r3, [pc, #64]	; (8673c <_sbrk+0x4c>)
   866fa:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   866fc:	4b10      	ldr	r3, [pc, #64]	; (86740 <_sbrk+0x50>)
   866fe:	681b      	ldr	r3, [r3, #0]
   86700:	2b00      	cmp	r3, #0
   86702:	d102      	bne.n	8670a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   86704:	4b0e      	ldr	r3, [pc, #56]	; (86740 <_sbrk+0x50>)
   86706:	4a0f      	ldr	r2, [pc, #60]	; (86744 <_sbrk+0x54>)
   86708:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8670a:	4b0d      	ldr	r3, [pc, #52]	; (86740 <_sbrk+0x50>)
   8670c:	681b      	ldr	r3, [r3, #0]
   8670e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   86710:	68ba      	ldr	r2, [r7, #8]
   86712:	687b      	ldr	r3, [r7, #4]
   86714:	4413      	add	r3, r2
   86716:	68fa      	ldr	r2, [r7, #12]
   86718:	429a      	cmp	r2, r3
   8671a:	da02      	bge.n	86722 <_sbrk+0x32>
		return (caddr_t) -1;	
   8671c:	f04f 33ff 	mov.w	r3, #4294967295
   86720:	e006      	b.n	86730 <_sbrk+0x40>
	}

	heap += incr;
   86722:	4b07      	ldr	r3, [pc, #28]	; (86740 <_sbrk+0x50>)
   86724:	681a      	ldr	r2, [r3, #0]
   86726:	687b      	ldr	r3, [r7, #4]
   86728:	4413      	add	r3, r2
   8672a:	4a05      	ldr	r2, [pc, #20]	; (86740 <_sbrk+0x50>)
   8672c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8672e:	68bb      	ldr	r3, [r7, #8]
}
   86730:	4618      	mov	r0, r3
   86732:	3714      	adds	r7, #20
   86734:	46bd      	mov	sp, r7
   86736:	bc80      	pop	{r7}
   86738:	4770      	bx	lr
   8673a:	bf00      	nop
   8673c:	20083ffc 	.word	0x20083ffc
   86740:	20001370 	.word	0x20001370
   86744:	20084000 	.word	0x20084000

00086748 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   86748:	b480      	push	{r7}
   8674a:	b083      	sub	sp, #12
   8674c:	af00      	add	r7, sp, #0
   8674e:	6078      	str	r0, [r7, #4]
	return -1;
   86750:	f04f 33ff 	mov.w	r3, #4294967295
}
   86754:	4618      	mov	r0, r3
   86756:	370c      	adds	r7, #12
   86758:	46bd      	mov	sp, r7
   8675a:	bc80      	pop	{r7}
   8675c:	4770      	bx	lr

0008675e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   8675e:	b480      	push	{r7}
   86760:	b083      	sub	sp, #12
   86762:	af00      	add	r7, sp, #0
   86764:	6078      	str	r0, [r7, #4]
   86766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   86768:	683b      	ldr	r3, [r7, #0]
   8676a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8676e:	605a      	str	r2, [r3, #4]

	return 0;
   86770:	2300      	movs	r3, #0
}
   86772:	4618      	mov	r0, r3
   86774:	370c      	adds	r7, #12
   86776:	46bd      	mov	sp, r7
   86778:	bc80      	pop	{r7}
   8677a:	4770      	bx	lr

0008677c <_isatty>:

extern int _isatty(int file)
{
   8677c:	b480      	push	{r7}
   8677e:	b083      	sub	sp, #12
   86780:	af00      	add	r7, sp, #0
   86782:	6078      	str	r0, [r7, #4]
	return 1;
   86784:	2301      	movs	r3, #1
}
   86786:	4618      	mov	r0, r3
   86788:	370c      	adds	r7, #12
   8678a:	46bd      	mov	sp, r7
   8678c:	bc80      	pop	{r7}
   8678e:	4770      	bx	lr

00086790 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   86790:	b480      	push	{r7}
   86792:	b085      	sub	sp, #20
   86794:	af00      	add	r7, sp, #0
   86796:	60f8      	str	r0, [r7, #12]
   86798:	60b9      	str	r1, [r7, #8]
   8679a:	607a      	str	r2, [r7, #4]
	return 0;
   8679c:	2300      	movs	r3, #0
}
   8679e:	4618      	mov	r0, r3
   867a0:	3714      	adds	r7, #20
   867a2:	46bd      	mov	sp, r7
   867a4:	bc80      	pop	{r7}
   867a6:	4770      	bx	lr

000867a8 <_exit>:

extern void _exit(int status)
{
   867a8:	b580      	push	{r7, lr}
   867aa:	b082      	sub	sp, #8
   867ac:	af00      	add	r7, sp, #0
   867ae:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   867b0:	6879      	ldr	r1, [r7, #4]
   867b2:	4802      	ldr	r0, [pc, #8]	; (867bc <_exit+0x14>)
   867b4:	4b02      	ldr	r3, [pc, #8]	; (867c0 <_exit+0x18>)
   867b6:	4798      	blx	r3

	for (;;);
   867b8:	e7fe      	b.n	867b8 <_exit+0x10>
   867ba:	bf00      	nop
   867bc:	0008d9fc 	.word	0x0008d9fc
   867c0:	00087025 	.word	0x00087025

000867c4 <_kill>:
}

extern void _kill(int pid, int sig)
{
   867c4:	b480      	push	{r7}
   867c6:	b083      	sub	sp, #12
   867c8:	af00      	add	r7, sp, #0
   867ca:	6078      	str	r0, [r7, #4]
   867cc:	6039      	str	r1, [r7, #0]
	return;
   867ce:	bf00      	nop
}
   867d0:	370c      	adds	r7, #12
   867d2:	46bd      	mov	sp, r7
   867d4:	bc80      	pop	{r7}
   867d6:	4770      	bx	lr

000867d8 <_getpid>:

extern int _getpid(void)
{
   867d8:	b480      	push	{r7}
   867da:	af00      	add	r7, sp, #0
	return -1;
   867dc:	f04f 33ff 	mov.w	r3, #4294967295
}
   867e0:	4618      	mov	r0, r3
   867e2:	46bd      	mov	sp, r7
   867e4:	bc80      	pop	{r7}
   867e6:	4770      	bx	lr

000867e8 <sysclk_enable_peripheral_clock>:
{
   867e8:	b580      	push	{r7, lr}
   867ea:	b082      	sub	sp, #8
   867ec:	af00      	add	r7, sp, #0
   867ee:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   867f0:	6878      	ldr	r0, [r7, #4]
   867f2:	4b03      	ldr	r3, [pc, #12]	; (86800 <sysclk_enable_peripheral_clock+0x18>)
   867f4:	4798      	blx	r3
}
   867f6:	bf00      	nop
   867f8:	3708      	adds	r7, #8
   867fa:	46bd      	mov	sp, r7
   867fc:	bd80      	pop	{r7, pc}
   867fe:	bf00      	nop
   86800:	00084c79 	.word	0x00084c79

00086804 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   86804:	b580      	push	{r7, lr}
   86806:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   86808:	200a      	movs	r0, #10
   8680a:	4b04      	ldr	r3, [pc, #16]	; (8681c <ioport_init+0x18>)
   8680c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   8680e:	200b      	movs	r0, #11
   86810:	4b02      	ldr	r3, [pc, #8]	; (8681c <ioport_init+0x18>)
   86812:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   86814:	bf00      	nop
	arch_ioport_init();
}
   86816:	bf00      	nop
   86818:	bd80      	pop	{r7, pc}
   8681a:	bf00      	nop
   8681c:	000867e9 	.word	0x000867e9

00086820 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   86820:	b580      	push	{r7, lr}
   86822:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   86824:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86828:	201d      	movs	r0, #29
   8682a:	4b0d      	ldr	r3, [pc, #52]	; (86860 <iopins_normal+0x40>)
   8682c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8682e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86832:	201f      	movs	r0, #31
   86834:	4b0a      	ldr	r3, [pc, #40]	; (86860 <iopins_normal+0x40>)
   86836:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   86838:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8683c:	201d      	movs	r0, #29
   8683e:	4b08      	ldr	r3, [pc, #32]	; (86860 <iopins_normal+0x40>)
   86840:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   86842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   86846:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8684a:	4806      	ldr	r0, [pc, #24]	; (86864 <iopins_normal+0x44>)
   8684c:	4b06      	ldr	r3, [pc, #24]	; (86868 <iopins_normal+0x48>)
   8684e:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   86850:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   86854:	2038      	movs	r0, #56	; 0x38
   86856:	4b02      	ldr	r3, [pc, #8]	; (86860 <iopins_normal+0x40>)
   86858:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8685a:	bf00      	nop
   8685c:	bd80      	pop	{r7, pc}
   8685e:	bf00      	nop
   86860:	00085269 	.word	0x00085269
   86864:	400e0c00 	.word	0x400e0c00
   86868:	00085399 	.word	0x00085399

0008686c <board_init>:

void board_init(void)
{
   8686c:	b580      	push	{r7, lr}
   8686e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   86870:	4b04      	ldr	r3, [pc, #16]	; (86884 <board_init+0x18>)
   86872:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86876:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   86878:	4b03      	ldr	r3, [pc, #12]	; (86888 <board_init+0x1c>)
   8687a:	4798      	blx	r3

	iopins_normal();
   8687c:	4b03      	ldr	r3, [pc, #12]	; (8688c <board_init+0x20>)
   8687e:	4798      	blx	r3

}
   86880:	bf00      	nop
   86882:	bd80      	pop	{r7, pc}
   86884:	400e1250 	.word	0x400e1250
   86888:	00086805 	.word	0x00086805
   8688c:	00086821 	.word	0x00086821

00086890 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   86890:	b480      	push	{r7}
   86892:	b083      	sub	sp, #12
   86894:	af00      	add	r7, sp, #0
   86896:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   86898:	2300      	movs	r3, #0
   8689a:	687a      	ldr	r2, [r7, #4]
   8689c:	6053      	str	r3, [r2, #4]
   8689e:	687a      	ldr	r2, [r7, #4]
   868a0:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   868a2:	687b      	ldr	r3, [r7, #4]
   868a4:	2200      	movs	r2, #0
   868a6:	609a      	str	r2, [r3, #8]
}
   868a8:	bf00      	nop
   868aa:	370c      	adds	r7, #12
   868ac:	46bd      	mov	sp, r7
   868ae:	bc80      	pop	{r7}
   868b0:	4770      	bx	lr

000868b2 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   868b2:	b480      	push	{r7}
   868b4:	b085      	sub	sp, #20
   868b6:	af00      	add	r7, sp, #0
   868b8:	6078      	str	r0, [r7, #4]
   868ba:	460b      	mov	r3, r1
   868bc:	70fb      	strb	r3, [r7, #3]
   868be:	4613      	mov	r3, r2
   868c0:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   868c2:	687b      	ldr	r3, [r7, #4]
   868c4:	681b      	ldr	r3, [r3, #0]
   868c6:	60fb      	str	r3, [r7, #12]
    newhead++;
   868c8:	68fb      	ldr	r3, [r7, #12]
   868ca:	3301      	adds	r3, #1
   868cc:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   868ce:	68fb      	ldr	r3, [r7, #12]
   868d0:	2b7f      	cmp	r3, #127	; 0x7f
   868d2:	d90e      	bls.n	868f2 <add_to_circ_buf+0x40>
        newhead = 0;
   868d4:	2300      	movs	r3, #0
   868d6:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   868d8:	e00b      	b.n	868f2 <add_to_circ_buf+0x40>
    {
        if (!block)
   868da:	78bb      	ldrb	r3, [r7, #2]
   868dc:	f083 0301 	eor.w	r3, r3, #1
   868e0:	b2db      	uxtb	r3, r3
   868e2:	2b00      	cmp	r3, #0
   868e4:	d005      	beq.n	868f2 <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   868e6:	687b      	ldr	r3, [r7, #4]
   868e8:	689b      	ldr	r3, [r3, #8]
   868ea:	1c5a      	adds	r2, r3, #1
   868ec:	687b      	ldr	r3, [r7, #4]
   868ee:	609a      	str	r2, [r3, #8]
            return;
   868f0:	e00d      	b.n	8690e <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   868f2:	687b      	ldr	r3, [r7, #4]
   868f4:	685b      	ldr	r3, [r3, #4]
   868f6:	68fa      	ldr	r2, [r7, #12]
   868f8:	429a      	cmp	r2, r3
   868fa:	d0ee      	beq.n	868da <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   868fc:	687b      	ldr	r3, [r7, #4]
   868fe:	681b      	ldr	r3, [r3, #0]
   86900:	687a      	ldr	r2, [r7, #4]
   86902:	4413      	add	r3, r2
   86904:	78fa      	ldrb	r2, [r7, #3]
   86906:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   86908:	687b      	ldr	r3, [r7, #4]
   8690a:	68fa      	ldr	r2, [r7, #12]
   8690c:	601a      	str	r2, [r3, #0]
}
   8690e:	3714      	adds	r7, #20
   86910:	46bd      	mov	sp, r7
   86912:	bc80      	pop	{r7}
   86914:	4770      	bx	lr

00086916 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   86916:	b480      	push	{r7}
   86918:	b085      	sub	sp, #20
   8691a:	af00      	add	r7, sp, #0
   8691c:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   8691e:	687b      	ldr	r3, [r7, #4]
   86920:	685b      	ldr	r3, [r3, #4]
   86922:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   86924:	687a      	ldr	r2, [r7, #4]
   86926:	68fb      	ldr	r3, [r7, #12]
   86928:	4413      	add	r3, r2
   8692a:	330c      	adds	r3, #12
   8692c:	781b      	ldrb	r3, [r3, #0]
   8692e:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   86930:	687b      	ldr	r3, [r7, #4]
   86932:	681b      	ldr	r3, [r3, #0]
   86934:	68fa      	ldr	r2, [r7, #12]
   86936:	429a      	cmp	r2, r3
   86938:	d101      	bne.n	8693e <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   8693a:	23ff      	movs	r3, #255	; 0xff
   8693c:	e00b      	b.n	86956 <get_from_circ_buf+0x40>

    newtail++;
   8693e:	68fb      	ldr	r3, [r7, #12]
   86940:	3301      	adds	r3, #1
   86942:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   86944:	68fb      	ldr	r3, [r7, #12]
   86946:	2b7f      	cmp	r3, #127	; 0x7f
   86948:	d901      	bls.n	8694e <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   8694a:	2300      	movs	r3, #0
   8694c:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   8694e:	687b      	ldr	r3, [r7, #4]
   86950:	68fa      	ldr	r2, [r7, #12]
   86952:	605a      	str	r2, [r3, #4]

    return retval;
   86954:	7afb      	ldrb	r3, [r7, #11]
}
   86956:	4618      	mov	r0, r3
   86958:	3714      	adds	r7, #20
   8695a:	46bd      	mov	sp, r7
   8695c:	bc80      	pop	{r7}
   8695e:	4770      	bx	lr

00086960 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   86960:	b480      	push	{r7}
   86962:	b085      	sub	sp, #20
   86964:	af00      	add	r7, sp, #0
   86966:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   86968:	687b      	ldr	r3, [r7, #4]
   8696a:	681b      	ldr	r3, [r3, #0]
   8696c:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   8696e:	687b      	ldr	r3, [r7, #4]
   86970:	685b      	ldr	r3, [r3, #4]
   86972:	68fa      	ldr	r2, [r7, #12]
   86974:	429a      	cmp	r2, r3
   86976:	bf14      	ite	ne
   86978:	2301      	movne	r3, #1
   8697a:	2300      	moveq	r3, #0
   8697c:	b2db      	uxtb	r3, r3
}
   8697e:	4618      	mov	r0, r3
   86980:	3714      	adds	r7, #20
   86982:	46bd      	mov	sp, r7
   86984:	bc80      	pop	{r7}
   86986:	4770      	bx	lr

00086988 <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   86988:	b480      	push	{r7}
   8698a:	b085      	sub	sp, #20
   8698c:	af00      	add	r7, sp, #0
   8698e:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   86990:	687b      	ldr	r3, [r7, #4]
   86992:	681b      	ldr	r3, [r3, #0]
   86994:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   86996:	687b      	ldr	r3, [r7, #4]
   86998:	685b      	ldr	r3, [r3, #4]
   8699a:	68fa      	ldr	r2, [r7, #12]
   8699c:	1ad3      	subs	r3, r2, r3
   8699e:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   869a0:	68fb      	ldr	r3, [r7, #12]
   869a2:	2b00      	cmp	r3, #0
   869a4:	da02      	bge.n	869ac <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   869a6:	68fb      	ldr	r3, [r7, #12]
   869a8:	3380      	adds	r3, #128	; 0x80
   869aa:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   869ac:	68fb      	ldr	r3, [r7, #12]
}
   869ae:	4618      	mov	r0, r3
   869b0:	3714      	adds	r7, #20
   869b2:	46bd      	mov	sp, r7
   869b4:	bc80      	pop	{r7}
   869b6:	4770      	bx	lr

000869b8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   869b8:	b480      	push	{r7}
   869ba:	b083      	sub	sp, #12
   869bc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   869be:	4b11      	ldr	r3, [pc, #68]	; (86a04 <cpu_irq_enter_critical+0x4c>)
   869c0:	681b      	ldr	r3, [r3, #0]
   869c2:	2b00      	cmp	r3, #0
   869c4:	d114      	bne.n	869f0 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   869c6:	f3ef 8310 	mrs	r3, PRIMASK
   869ca:	607b      	str	r3, [r7, #4]
  return(result);
   869cc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   869ce:	2b00      	cmp	r3, #0
   869d0:	d10b      	bne.n	869ea <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   869d2:	b672      	cpsid	i
}
   869d4:	bf00      	nop
  __ASM volatile ("dmb");
   869d6:	f3bf 8f5f 	dmb	sy
}
   869da:	bf00      	nop
			cpu_irq_disable();
   869dc:	4b0a      	ldr	r3, [pc, #40]	; (86a08 <cpu_irq_enter_critical+0x50>)
   869de:	2200      	movs	r2, #0
   869e0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   869e2:	4b0a      	ldr	r3, [pc, #40]	; (86a0c <cpu_irq_enter_critical+0x54>)
   869e4:	2201      	movs	r2, #1
   869e6:	701a      	strb	r2, [r3, #0]
   869e8:	e002      	b.n	869f0 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   869ea:	4b08      	ldr	r3, [pc, #32]	; (86a0c <cpu_irq_enter_critical+0x54>)
   869ec:	2200      	movs	r2, #0
   869ee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   869f0:	4b04      	ldr	r3, [pc, #16]	; (86a04 <cpu_irq_enter_critical+0x4c>)
   869f2:	681b      	ldr	r3, [r3, #0]
   869f4:	3301      	adds	r3, #1
   869f6:	4a03      	ldr	r2, [pc, #12]	; (86a04 <cpu_irq_enter_critical+0x4c>)
   869f8:	6013      	str	r3, [r2, #0]
}
   869fa:	bf00      	nop
   869fc:	370c      	adds	r7, #12
   869fe:	46bd      	mov	sp, r7
   86a00:	bc80      	pop	{r7}
   86a02:	4770      	bx	lr
   86a04:	20001374 	.word	0x20001374
   86a08:	200003aa 	.word	0x200003aa
   86a0c:	20001378 	.word	0x20001378

00086a10 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   86a10:	b480      	push	{r7}
   86a12:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   86a14:	4b0c      	ldr	r3, [pc, #48]	; (86a48 <cpu_irq_leave_critical+0x38>)
   86a16:	681b      	ldr	r3, [r3, #0]
   86a18:	3b01      	subs	r3, #1
   86a1a:	4a0b      	ldr	r2, [pc, #44]	; (86a48 <cpu_irq_leave_critical+0x38>)
   86a1c:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   86a1e:	4b0a      	ldr	r3, [pc, #40]	; (86a48 <cpu_irq_leave_critical+0x38>)
   86a20:	681b      	ldr	r3, [r3, #0]
   86a22:	2b00      	cmp	r3, #0
   86a24:	d10c      	bne.n	86a40 <cpu_irq_leave_critical+0x30>
   86a26:	4b09      	ldr	r3, [pc, #36]	; (86a4c <cpu_irq_leave_critical+0x3c>)
   86a28:	781b      	ldrb	r3, [r3, #0]
   86a2a:	b2db      	uxtb	r3, r3
   86a2c:	2b00      	cmp	r3, #0
   86a2e:	d007      	beq.n	86a40 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   86a30:	4b07      	ldr	r3, [pc, #28]	; (86a50 <cpu_irq_leave_critical+0x40>)
   86a32:	2201      	movs	r2, #1
   86a34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   86a36:	f3bf 8f5f 	dmb	sy
}
   86a3a:	bf00      	nop
  __ASM volatile ("cpsie i");
   86a3c:	b662      	cpsie	i
}
   86a3e:	bf00      	nop
	}
}
   86a40:	bf00      	nop
   86a42:	46bd      	mov	sp, r7
   86a44:	bc80      	pop	{r7}
   86a46:	4770      	bx	lr
   86a48:	20001374 	.word	0x20001374
   86a4c:	20001378 	.word	0x20001378
   86a50:	200003aa 	.word	0x200003aa

00086a54 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   86a54:	b580      	push	{r7, lr}
   86a56:	b086      	sub	sp, #24
   86a58:	af00      	add	r7, sp, #0
   86a5a:	60f8      	str	r0, [r7, #12]
   86a5c:	60b9      	str	r1, [r7, #8]
   86a5e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86a60:	2300      	movs	r3, #0
   86a62:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   86a64:	68fb      	ldr	r3, [r7, #12]
   86a66:	2b00      	cmp	r3, #0
   86a68:	d012      	beq.n	86a90 <_read+0x3c>
		return -1;
   86a6a:	f04f 33ff 	mov.w	r3, #4294967295
   86a6e:	e013      	b.n	86a98 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   86a70:	4b0b      	ldr	r3, [pc, #44]	; (86aa0 <_read+0x4c>)
   86a72:	681b      	ldr	r3, [r3, #0]
   86a74:	4a0b      	ldr	r2, [pc, #44]	; (86aa4 <_read+0x50>)
   86a76:	6812      	ldr	r2, [r2, #0]
   86a78:	68b9      	ldr	r1, [r7, #8]
   86a7a:	4610      	mov	r0, r2
   86a7c:	4798      	blx	r3
		ptr++;
   86a7e:	68bb      	ldr	r3, [r7, #8]
   86a80:	3301      	adds	r3, #1
   86a82:	60bb      	str	r3, [r7, #8]
		nChars++;
   86a84:	697b      	ldr	r3, [r7, #20]
   86a86:	3301      	adds	r3, #1
   86a88:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   86a8a:	687b      	ldr	r3, [r7, #4]
   86a8c:	3b01      	subs	r3, #1
   86a8e:	607b      	str	r3, [r7, #4]
   86a90:	687b      	ldr	r3, [r7, #4]
   86a92:	2b00      	cmp	r3, #0
   86a94:	dcec      	bgt.n	86a70 <_read+0x1c>
	}
	return nChars;
   86a96:	697b      	ldr	r3, [r7, #20]
}
   86a98:	4618      	mov	r0, r3
   86a9a:	3718      	adds	r7, #24
   86a9c:	46bd      	mov	sp, r7
   86a9e:	bd80      	pop	{r7, pc}
   86aa0:	20001830 	.word	0x20001830
   86aa4:	2000182c 	.word	0x2000182c

00086aa8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   86aa8:	b480      	push	{r7}
   86aaa:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86aac:	4b58      	ldr	r3, [pc, #352]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86ab0:	f003 0303 	and.w	r3, r3, #3
   86ab4:	2b03      	cmp	r3, #3
   86ab6:	f200 808c 	bhi.w	86bd2 <SystemCoreClockUpdate+0x12a>
   86aba:	2b02      	cmp	r3, #2
   86abc:	d23f      	bcs.n	86b3e <SystemCoreClockUpdate+0x96>
   86abe:	2b00      	cmp	r3, #0
   86ac0:	d002      	beq.n	86ac8 <SystemCoreClockUpdate+0x20>
   86ac2:	2b01      	cmp	r3, #1
   86ac4:	d010      	beq.n	86ae8 <SystemCoreClockUpdate+0x40>
   86ac6:	e084      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86ac8:	4b52      	ldr	r3, [pc, #328]	; (86c14 <SystemCoreClockUpdate+0x16c>)
   86aca:	695b      	ldr	r3, [r3, #20]
   86acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   86ad0:	2b00      	cmp	r3, #0
   86ad2:	d004      	beq.n	86ade <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   86ad4:	4b50      	ldr	r3, [pc, #320]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86ada:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   86adc:	e079      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   86ade:	4b4e      	ldr	r3, [pc, #312]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86ae0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   86ae4:	601a      	str	r2, [r3, #0]
		break;
   86ae6:	e074      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86ae8:	4b49      	ldr	r3, [pc, #292]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86aea:	6a1b      	ldr	r3, [r3, #32]
   86aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   86af0:	2b00      	cmp	r3, #0
   86af2:	d003      	beq.n	86afc <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86af4:	4b48      	ldr	r3, [pc, #288]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86af6:	4a49      	ldr	r2, [pc, #292]	; (86c1c <SystemCoreClockUpdate+0x174>)
   86af8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   86afa:	e06a      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86afc:	4b46      	ldr	r3, [pc, #280]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86afe:	4a48      	ldr	r2, [pc, #288]	; (86c20 <SystemCoreClockUpdate+0x178>)
   86b00:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86b02:	4b43      	ldr	r3, [pc, #268]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86b04:	6a1b      	ldr	r3, [r3, #32]
   86b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86b0a:	2b20      	cmp	r3, #32
   86b0c:	d00b      	beq.n	86b26 <SystemCoreClockUpdate+0x7e>
   86b0e:	2b20      	cmp	r3, #32
   86b10:	d811      	bhi.n	86b36 <SystemCoreClockUpdate+0x8e>
   86b12:	2b00      	cmp	r3, #0
   86b14:	d011      	beq.n	86b3a <SystemCoreClockUpdate+0x92>
   86b16:	2b10      	cmp	r3, #16
   86b18:	d10d      	bne.n	86b36 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   86b1a:	4b3f      	ldr	r3, [pc, #252]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b1c:	681b      	ldr	r3, [r3, #0]
   86b1e:	005b      	lsls	r3, r3, #1
   86b20:	4a3d      	ldr	r2, [pc, #244]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b22:	6013      	str	r3, [r2, #0]
				break;
   86b24:	e00a      	b.n	86b3c <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   86b26:	4b3c      	ldr	r3, [pc, #240]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b28:	681a      	ldr	r2, [r3, #0]
   86b2a:	4613      	mov	r3, r2
   86b2c:	005b      	lsls	r3, r3, #1
   86b2e:	4413      	add	r3, r2
   86b30:	4a39      	ldr	r2, [pc, #228]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b32:	6013      	str	r3, [r2, #0]
				break;
   86b34:	e002      	b.n	86b3c <SystemCoreClockUpdate+0x94>
				break;
   86b36:	bf00      	nop
   86b38:	e04b      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
				break;
   86b3a:	bf00      	nop
		break;
   86b3c:	e049      	b.n	86bd2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86b3e:	4b34      	ldr	r3, [pc, #208]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86b40:	6a1b      	ldr	r3, [r3, #32]
   86b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   86b46:	2b00      	cmp	r3, #0
   86b48:	d003      	beq.n	86b52 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86b4a:	4b33      	ldr	r3, [pc, #204]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b4c:	4a33      	ldr	r2, [pc, #204]	; (86c1c <SystemCoreClockUpdate+0x174>)
   86b4e:	601a      	str	r2, [r3, #0]
   86b50:	e01f      	b.n	86b92 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86b52:	4b31      	ldr	r3, [pc, #196]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b54:	4a32      	ldr	r2, [pc, #200]	; (86c20 <SystemCoreClockUpdate+0x178>)
   86b56:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86b58:	4b2d      	ldr	r3, [pc, #180]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86b5a:	6a1b      	ldr	r3, [r3, #32]
   86b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86b60:	2b20      	cmp	r3, #32
   86b62:	d00b      	beq.n	86b7c <SystemCoreClockUpdate+0xd4>
   86b64:	2b20      	cmp	r3, #32
   86b66:	d811      	bhi.n	86b8c <SystemCoreClockUpdate+0xe4>
   86b68:	2b00      	cmp	r3, #0
   86b6a:	d011      	beq.n	86b90 <SystemCoreClockUpdate+0xe8>
   86b6c:	2b10      	cmp	r3, #16
   86b6e:	d10d      	bne.n	86b8c <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   86b70:	4b29      	ldr	r3, [pc, #164]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b72:	681b      	ldr	r3, [r3, #0]
   86b74:	005b      	lsls	r3, r3, #1
   86b76:	4a28      	ldr	r2, [pc, #160]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b78:	6013      	str	r3, [r2, #0]
				break;
   86b7a:	e00a      	b.n	86b92 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   86b7c:	4b26      	ldr	r3, [pc, #152]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b7e:	681a      	ldr	r2, [r3, #0]
   86b80:	4613      	mov	r3, r2
   86b82:	005b      	lsls	r3, r3, #1
   86b84:	4413      	add	r3, r2
   86b86:	4a24      	ldr	r2, [pc, #144]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86b88:	6013      	str	r3, [r2, #0]
				break;
   86b8a:	e002      	b.n	86b92 <SystemCoreClockUpdate+0xea>
			default:
				break;
   86b8c:	bf00      	nop
   86b8e:	e000      	b.n	86b92 <SystemCoreClockUpdate+0xea>
				break;
   86b90:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   86b92:	4b1f      	ldr	r3, [pc, #124]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86b96:	f003 0303 	and.w	r3, r3, #3
   86b9a:	2b02      	cmp	r3, #2
   86b9c:	d115      	bne.n	86bca <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   86b9e:	4b1c      	ldr	r3, [pc, #112]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   86ba2:	0c1b      	lsrs	r3, r3, #16
   86ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   86ba8:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   86baa:	4a1b      	ldr	r2, [pc, #108]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bac:	6812      	ldr	r2, [r2, #0]
   86bae:	fb02 f303 	mul.w	r3, r2, r3
   86bb2:	4a19      	ldr	r2, [pc, #100]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bb4:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   86bb6:	4b16      	ldr	r3, [pc, #88]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   86bba:	b2db      	uxtb	r3, r3
   86bbc:	4a16      	ldr	r2, [pc, #88]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bbe:	6812      	ldr	r2, [r2, #0]
   86bc0:	fbb2 f3f3 	udiv	r3, r2, r3
   86bc4:	4a14      	ldr	r2, [pc, #80]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bc6:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   86bc8:	e002      	b.n	86bd0 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   86bca:	4b13      	ldr	r3, [pc, #76]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bcc:	4a15      	ldr	r2, [pc, #84]	; (86c24 <SystemCoreClockUpdate+0x17c>)
   86bce:	601a      	str	r2, [r3, #0]
		break;
   86bd0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   86bd2:	4b0f      	ldr	r3, [pc, #60]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86bda:	2b70      	cmp	r3, #112	; 0x70
   86bdc:	d108      	bne.n	86bf0 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   86bde:	4b0e      	ldr	r3, [pc, #56]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86be0:	681b      	ldr	r3, [r3, #0]
   86be2:	4a11      	ldr	r2, [pc, #68]	; (86c28 <SystemCoreClockUpdate+0x180>)
   86be4:	fba2 2303 	umull	r2, r3, r2, r3
   86be8:	085b      	lsrs	r3, r3, #1
   86bea:	4a0b      	ldr	r2, [pc, #44]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bec:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   86bee:	e00a      	b.n	86c06 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   86bf0:	4b07      	ldr	r3, [pc, #28]	; (86c10 <SystemCoreClockUpdate+0x168>)
   86bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86bf4:	091b      	lsrs	r3, r3, #4
   86bf6:	f003 0307 	and.w	r3, r3, #7
   86bfa:	4a07      	ldr	r2, [pc, #28]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86bfc:	6812      	ldr	r2, [r2, #0]
   86bfe:	fa22 f303 	lsr.w	r3, r2, r3
   86c02:	4a05      	ldr	r2, [pc, #20]	; (86c18 <SystemCoreClockUpdate+0x170>)
   86c04:	6013      	str	r3, [r2, #0]
}
   86c06:	bf00      	nop
   86c08:	46bd      	mov	sp, r7
   86c0a:	bc80      	pop	{r7}
   86c0c:	4770      	bx	lr
   86c0e:	bf00      	nop
   86c10:	400e0400 	.word	0x400e0400
   86c14:	400e1210 	.word	0x400e1210
   86c18:	20000438 	.word	0x20000438
   86c1c:	00b71b00 	.word	0x00b71b00
   86c20:	003d0900 	.word	0x003d0900
   86c24:	0e4e1c00 	.word	0x0e4e1c00
   86c28:	aaaaaaab 	.word	0xaaaaaaab

00086c2c <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   86c2c:	b580      	push	{r7, lr}
   86c2e:	af00      	add	r7, sp, #0
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   86c30:	201d      	movs	r0, #29
   86c32:	4b03      	ldr	r3, [pc, #12]	; (86c40 <ui_init+0x14>)
   86c34:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   86c36:	201f      	movs	r0, #31
   86c38:	4b01      	ldr	r3, [pc, #4]	; (86c40 <ui_init+0x14>)
   86c3a:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
}
   86c3c:	bf00      	nop
   86c3e:	bd80      	pop	{r7, pc}
   86c40:	000843f5 	.word	0x000843f5

00086c44 <ui_powerdown>:


void ui_powerdown(void)
{
   86c44:	b580      	push	{r7, lr}
   86c46:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   86c48:	201d      	movs	r0, #29
   86c4a:	4b03      	ldr	r3, [pc, #12]	; (86c58 <ui_powerdown+0x14>)
   86c4c:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   86c4e:	201f      	movs	r0, #31
   86c50:	4b01      	ldr	r3, [pc, #4]	; (86c58 <ui_powerdown+0x14>)
   86c52:	4798      	blx	r3
	
	// Power off FPGA
	//board_sram_pwroff();
}
   86c54:	bf00      	nop
   86c56:	bd80      	pop	{r7, pc}
   86c58:	000843f5 	.word	0x000843f5

00086c5c <ui_wakeup>:

void ui_wakeup(void)
{
   86c5c:	b580      	push	{r7, lr}
   86c5e:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   86c60:	201d      	movs	r0, #29
   86c62:	4b02      	ldr	r3, [pc, #8]	; (86c6c <ui_wakeup+0x10>)
   86c64:	4798      	blx	r3
	//board_sram_pwron();
}
   86c66:	bf00      	nop
   86c68:	bd80      	pop	{r7, pc}
   86c6a:	bf00      	nop
   86c6c:	00084451 	.word	0x00084451

00086c70 <ui_process>:

void ui_process(uint16_t framenumber)
{
   86c70:	b580      	push	{r7, lr}
   86c72:	b082      	sub	sp, #8
   86c74:	af00      	add	r7, sp, #0
   86c76:	4603      	mov	r3, r0
   86c78:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   86c7a:	88fb      	ldrh	r3, [r7, #6]
   86c7c:	4a16      	ldr	r2, [pc, #88]	; (86cd8 <ui_process+0x68>)
   86c7e:	fba2 1203 	umull	r1, r2, r2, r3
   86c82:	0992      	lsrs	r2, r2, #6
   86c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86c88:	fb01 f202 	mul.w	r2, r1, r2
   86c8c:	1a9b      	subs	r3, r3, r2
   86c8e:	b29b      	uxth	r3, r3
   86c90:	2b00      	cmp	r3, #0
   86c92:	d102      	bne.n	86c9a <ui_process+0x2a>
		LED_On(LED0_GPIO);
   86c94:	201d      	movs	r0, #29
   86c96:	4b11      	ldr	r3, [pc, #68]	; (86cdc <ui_process+0x6c>)
   86c98:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   86c9a:	88fb      	ldrh	r3, [r7, #6]
   86c9c:	4a0e      	ldr	r2, [pc, #56]	; (86cd8 <ui_process+0x68>)
   86c9e:	fba2 1203 	umull	r1, r2, r2, r3
   86ca2:	0992      	lsrs	r2, r2, #6
   86ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86ca8:	fb01 f202 	mul.w	r2, r1, r2
   86cac:	1a9b      	subs	r3, r3, r2
   86cae:	b29b      	uxth	r3, r3
   86cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   86cb4:	d102      	bne.n	86cbc <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   86cb6:	201d      	movs	r0, #29
   86cb8:	4b09      	ldr	r3, [pc, #36]	; (86ce0 <ui_process+0x70>)
   86cba:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   86cbc:	88fb      	ldrh	r3, [r7, #6]
   86cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86cc2:	b29b      	uxth	r3, r3
   86cc4:	2b00      	cmp	r3, #0
   86cc6:	d102      	bne.n	86cce <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   86cc8:	201f      	movs	r0, #31
   86cca:	4b05      	ldr	r3, [pc, #20]	; (86ce0 <ui_process+0x70>)
   86ccc:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   86cce:	bf00      	nop
   86cd0:	3708      	adds	r7, #8
   86cd2:	46bd      	mov	sp, r7
   86cd4:	bd80      	pop	{r7, pc}
   86cd6:	bf00      	nop
   86cd8:	10624dd3 	.word	0x10624dd3
   86cdc:	00084451 	.word	0x00084451
   86ce0:	000843f5 	.word	0x000843f5

00086ce4 <__aeabi_uldivmod>:
   86ce4:	b953      	cbnz	r3, 86cfc <__aeabi_uldivmod+0x18>
   86ce6:	b94a      	cbnz	r2, 86cfc <__aeabi_uldivmod+0x18>
   86ce8:	2900      	cmp	r1, #0
   86cea:	bf08      	it	eq
   86cec:	2800      	cmpeq	r0, #0
   86cee:	bf1c      	itt	ne
   86cf0:	f04f 31ff 	movne.w	r1, #4294967295
   86cf4:	f04f 30ff 	movne.w	r0, #4294967295
   86cf8:	f000 b96e 	b.w	86fd8 <__aeabi_idiv0>
   86cfc:	f1ad 0c08 	sub.w	ip, sp, #8
   86d00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86d04:	f000 f806 	bl	86d14 <__udivmoddi4>
   86d08:	f8dd e004 	ldr.w	lr, [sp, #4]
   86d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86d10:	b004      	add	sp, #16
   86d12:	4770      	bx	lr

00086d14 <__udivmoddi4>:
   86d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86d18:	9e08      	ldr	r6, [sp, #32]
   86d1a:	460d      	mov	r5, r1
   86d1c:	4604      	mov	r4, r0
   86d1e:	468e      	mov	lr, r1
   86d20:	2b00      	cmp	r3, #0
   86d22:	f040 8083 	bne.w	86e2c <__udivmoddi4+0x118>
   86d26:	428a      	cmp	r2, r1
   86d28:	4617      	mov	r7, r2
   86d2a:	d947      	bls.n	86dbc <__udivmoddi4+0xa8>
   86d2c:	fab2 f382 	clz	r3, r2
   86d30:	b14b      	cbz	r3, 86d46 <__udivmoddi4+0x32>
   86d32:	f1c3 0120 	rsb	r1, r3, #32
   86d36:	fa05 fe03 	lsl.w	lr, r5, r3
   86d3a:	fa20 f101 	lsr.w	r1, r0, r1
   86d3e:	409f      	lsls	r7, r3
   86d40:	ea41 0e0e 	orr.w	lr, r1, lr
   86d44:	409c      	lsls	r4, r3
   86d46:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86d4a:	fbbe fcf8 	udiv	ip, lr, r8
   86d4e:	fa1f f987 	uxth.w	r9, r7
   86d52:	fb08 e21c 	mls	r2, r8, ip, lr
   86d56:	fb0c f009 	mul.w	r0, ip, r9
   86d5a:	0c21      	lsrs	r1, r4, #16
   86d5c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   86d60:	4290      	cmp	r0, r2
   86d62:	d90a      	bls.n	86d7a <__udivmoddi4+0x66>
   86d64:	18ba      	adds	r2, r7, r2
   86d66:	f10c 31ff 	add.w	r1, ip, #4294967295
   86d6a:	f080 8118 	bcs.w	86f9e <__udivmoddi4+0x28a>
   86d6e:	4290      	cmp	r0, r2
   86d70:	f240 8115 	bls.w	86f9e <__udivmoddi4+0x28a>
   86d74:	f1ac 0c02 	sub.w	ip, ip, #2
   86d78:	443a      	add	r2, r7
   86d7a:	1a12      	subs	r2, r2, r0
   86d7c:	fbb2 f0f8 	udiv	r0, r2, r8
   86d80:	fb08 2210 	mls	r2, r8, r0, r2
   86d84:	fb00 f109 	mul.w	r1, r0, r9
   86d88:	b2a4      	uxth	r4, r4
   86d8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   86d8e:	42a1      	cmp	r1, r4
   86d90:	d909      	bls.n	86da6 <__udivmoddi4+0x92>
   86d92:	193c      	adds	r4, r7, r4
   86d94:	f100 32ff 	add.w	r2, r0, #4294967295
   86d98:	f080 8103 	bcs.w	86fa2 <__udivmoddi4+0x28e>
   86d9c:	42a1      	cmp	r1, r4
   86d9e:	f240 8100 	bls.w	86fa2 <__udivmoddi4+0x28e>
   86da2:	3802      	subs	r0, #2
   86da4:	443c      	add	r4, r7
   86da6:	1a64      	subs	r4, r4, r1
   86da8:	2100      	movs	r1, #0
   86daa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86dae:	b11e      	cbz	r6, 86db8 <__udivmoddi4+0xa4>
   86db0:	2200      	movs	r2, #0
   86db2:	40dc      	lsrs	r4, r3
   86db4:	e9c6 4200 	strd	r4, r2, [r6]
   86db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86dbc:	b902      	cbnz	r2, 86dc0 <__udivmoddi4+0xac>
   86dbe:	deff      	udf	#255	; 0xff
   86dc0:	fab2 f382 	clz	r3, r2
   86dc4:	2b00      	cmp	r3, #0
   86dc6:	d14f      	bne.n	86e68 <__udivmoddi4+0x154>
   86dc8:	1a8d      	subs	r5, r1, r2
   86dca:	2101      	movs	r1, #1
   86dcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   86dd0:	fa1f f882 	uxth.w	r8, r2
   86dd4:	fbb5 fcfe 	udiv	ip, r5, lr
   86dd8:	fb0e 551c 	mls	r5, lr, ip, r5
   86ddc:	fb08 f00c 	mul.w	r0, r8, ip
   86de0:	0c22      	lsrs	r2, r4, #16
   86de2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   86de6:	42a8      	cmp	r0, r5
   86de8:	d907      	bls.n	86dfa <__udivmoddi4+0xe6>
   86dea:	197d      	adds	r5, r7, r5
   86dec:	f10c 32ff 	add.w	r2, ip, #4294967295
   86df0:	d202      	bcs.n	86df8 <__udivmoddi4+0xe4>
   86df2:	42a8      	cmp	r0, r5
   86df4:	f200 80e9 	bhi.w	86fca <__udivmoddi4+0x2b6>
   86df8:	4694      	mov	ip, r2
   86dfa:	1a2d      	subs	r5, r5, r0
   86dfc:	fbb5 f0fe 	udiv	r0, r5, lr
   86e00:	fb0e 5510 	mls	r5, lr, r0, r5
   86e04:	fb08 f800 	mul.w	r8, r8, r0
   86e08:	b2a4      	uxth	r4, r4
   86e0a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   86e0e:	45a0      	cmp	r8, r4
   86e10:	d907      	bls.n	86e22 <__udivmoddi4+0x10e>
   86e12:	193c      	adds	r4, r7, r4
   86e14:	f100 32ff 	add.w	r2, r0, #4294967295
   86e18:	d202      	bcs.n	86e20 <__udivmoddi4+0x10c>
   86e1a:	45a0      	cmp	r8, r4
   86e1c:	f200 80d9 	bhi.w	86fd2 <__udivmoddi4+0x2be>
   86e20:	4610      	mov	r0, r2
   86e22:	eba4 0408 	sub.w	r4, r4, r8
   86e26:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86e2a:	e7c0      	b.n	86dae <__udivmoddi4+0x9a>
   86e2c:	428b      	cmp	r3, r1
   86e2e:	d908      	bls.n	86e42 <__udivmoddi4+0x12e>
   86e30:	2e00      	cmp	r6, #0
   86e32:	f000 80b1 	beq.w	86f98 <__udivmoddi4+0x284>
   86e36:	2100      	movs	r1, #0
   86e38:	e9c6 0500 	strd	r0, r5, [r6]
   86e3c:	4608      	mov	r0, r1
   86e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86e42:	fab3 f183 	clz	r1, r3
   86e46:	2900      	cmp	r1, #0
   86e48:	d14b      	bne.n	86ee2 <__udivmoddi4+0x1ce>
   86e4a:	42ab      	cmp	r3, r5
   86e4c:	d302      	bcc.n	86e54 <__udivmoddi4+0x140>
   86e4e:	4282      	cmp	r2, r0
   86e50:	f200 80b9 	bhi.w	86fc6 <__udivmoddi4+0x2b2>
   86e54:	1a84      	subs	r4, r0, r2
   86e56:	eb65 0303 	sbc.w	r3, r5, r3
   86e5a:	2001      	movs	r0, #1
   86e5c:	469e      	mov	lr, r3
   86e5e:	2e00      	cmp	r6, #0
   86e60:	d0aa      	beq.n	86db8 <__udivmoddi4+0xa4>
   86e62:	e9c6 4e00 	strd	r4, lr, [r6]
   86e66:	e7a7      	b.n	86db8 <__udivmoddi4+0xa4>
   86e68:	409f      	lsls	r7, r3
   86e6a:	f1c3 0220 	rsb	r2, r3, #32
   86e6e:	40d1      	lsrs	r1, r2
   86e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   86e74:	fbb1 f0fe 	udiv	r0, r1, lr
   86e78:	fa1f f887 	uxth.w	r8, r7
   86e7c:	fb0e 1110 	mls	r1, lr, r0, r1
   86e80:	fa24 f202 	lsr.w	r2, r4, r2
   86e84:	409d      	lsls	r5, r3
   86e86:	fb00 fc08 	mul.w	ip, r0, r8
   86e8a:	432a      	orrs	r2, r5
   86e8c:	0c15      	lsrs	r5, r2, #16
   86e8e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   86e92:	45ac      	cmp	ip, r5
   86e94:	fa04 f403 	lsl.w	r4, r4, r3
   86e98:	d909      	bls.n	86eae <__udivmoddi4+0x19a>
   86e9a:	197d      	adds	r5, r7, r5
   86e9c:	f100 31ff 	add.w	r1, r0, #4294967295
   86ea0:	f080 808f 	bcs.w	86fc2 <__udivmoddi4+0x2ae>
   86ea4:	45ac      	cmp	ip, r5
   86ea6:	f240 808c 	bls.w	86fc2 <__udivmoddi4+0x2ae>
   86eaa:	3802      	subs	r0, #2
   86eac:	443d      	add	r5, r7
   86eae:	eba5 050c 	sub.w	r5, r5, ip
   86eb2:	fbb5 f1fe 	udiv	r1, r5, lr
   86eb6:	fb0e 5c11 	mls	ip, lr, r1, r5
   86eba:	fb01 f908 	mul.w	r9, r1, r8
   86ebe:	b295      	uxth	r5, r2
   86ec0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   86ec4:	45a9      	cmp	r9, r5
   86ec6:	d907      	bls.n	86ed8 <__udivmoddi4+0x1c4>
   86ec8:	197d      	adds	r5, r7, r5
   86eca:	f101 32ff 	add.w	r2, r1, #4294967295
   86ece:	d274      	bcs.n	86fba <__udivmoddi4+0x2a6>
   86ed0:	45a9      	cmp	r9, r5
   86ed2:	d972      	bls.n	86fba <__udivmoddi4+0x2a6>
   86ed4:	3902      	subs	r1, #2
   86ed6:	443d      	add	r5, r7
   86ed8:	eba5 0509 	sub.w	r5, r5, r9
   86edc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   86ee0:	e778      	b.n	86dd4 <__udivmoddi4+0xc0>
   86ee2:	f1c1 0720 	rsb	r7, r1, #32
   86ee6:	408b      	lsls	r3, r1
   86ee8:	fa22 fc07 	lsr.w	ip, r2, r7
   86eec:	ea4c 0c03 	orr.w	ip, ip, r3
   86ef0:	fa25 f407 	lsr.w	r4, r5, r7
   86ef4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   86ef8:	fbb4 f9fe 	udiv	r9, r4, lr
   86efc:	fa1f f88c 	uxth.w	r8, ip
   86f00:	fb0e 4419 	mls	r4, lr, r9, r4
   86f04:	fa20 f307 	lsr.w	r3, r0, r7
   86f08:	fb09 fa08 	mul.w	sl, r9, r8
   86f0c:	408d      	lsls	r5, r1
   86f0e:	431d      	orrs	r5, r3
   86f10:	0c2b      	lsrs	r3, r5, #16
   86f12:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   86f16:	45a2      	cmp	sl, r4
   86f18:	fa02 f201 	lsl.w	r2, r2, r1
   86f1c:	fa00 f301 	lsl.w	r3, r0, r1
   86f20:	d909      	bls.n	86f36 <__udivmoddi4+0x222>
   86f22:	eb1c 0404 	adds.w	r4, ip, r4
   86f26:	f109 30ff 	add.w	r0, r9, #4294967295
   86f2a:	d248      	bcs.n	86fbe <__udivmoddi4+0x2aa>
   86f2c:	45a2      	cmp	sl, r4
   86f2e:	d946      	bls.n	86fbe <__udivmoddi4+0x2aa>
   86f30:	f1a9 0902 	sub.w	r9, r9, #2
   86f34:	4464      	add	r4, ip
   86f36:	eba4 040a 	sub.w	r4, r4, sl
   86f3a:	fbb4 f0fe 	udiv	r0, r4, lr
   86f3e:	fb0e 4410 	mls	r4, lr, r0, r4
   86f42:	fb00 fa08 	mul.w	sl, r0, r8
   86f46:	b2ad      	uxth	r5, r5
   86f48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   86f4c:	45a2      	cmp	sl, r4
   86f4e:	d908      	bls.n	86f62 <__udivmoddi4+0x24e>
   86f50:	eb1c 0404 	adds.w	r4, ip, r4
   86f54:	f100 35ff 	add.w	r5, r0, #4294967295
   86f58:	d22d      	bcs.n	86fb6 <__udivmoddi4+0x2a2>
   86f5a:	45a2      	cmp	sl, r4
   86f5c:	d92b      	bls.n	86fb6 <__udivmoddi4+0x2a2>
   86f5e:	3802      	subs	r0, #2
   86f60:	4464      	add	r4, ip
   86f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86f66:	fba0 8902 	umull	r8, r9, r0, r2
   86f6a:	eba4 040a 	sub.w	r4, r4, sl
   86f6e:	454c      	cmp	r4, r9
   86f70:	46c6      	mov	lr, r8
   86f72:	464d      	mov	r5, r9
   86f74:	d319      	bcc.n	86faa <__udivmoddi4+0x296>
   86f76:	d016      	beq.n	86fa6 <__udivmoddi4+0x292>
   86f78:	b15e      	cbz	r6, 86f92 <__udivmoddi4+0x27e>
   86f7a:	ebb3 020e 	subs.w	r2, r3, lr
   86f7e:	eb64 0405 	sbc.w	r4, r4, r5
   86f82:	fa04 f707 	lsl.w	r7, r4, r7
   86f86:	fa22 f301 	lsr.w	r3, r2, r1
   86f8a:	431f      	orrs	r7, r3
   86f8c:	40cc      	lsrs	r4, r1
   86f8e:	e9c6 7400 	strd	r7, r4, [r6]
   86f92:	2100      	movs	r1, #0
   86f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86f98:	4631      	mov	r1, r6
   86f9a:	4630      	mov	r0, r6
   86f9c:	e70c      	b.n	86db8 <__udivmoddi4+0xa4>
   86f9e:	468c      	mov	ip, r1
   86fa0:	e6eb      	b.n	86d7a <__udivmoddi4+0x66>
   86fa2:	4610      	mov	r0, r2
   86fa4:	e6ff      	b.n	86da6 <__udivmoddi4+0x92>
   86fa6:	4543      	cmp	r3, r8
   86fa8:	d2e6      	bcs.n	86f78 <__udivmoddi4+0x264>
   86faa:	ebb8 0e02 	subs.w	lr, r8, r2
   86fae:	eb69 050c 	sbc.w	r5, r9, ip
   86fb2:	3801      	subs	r0, #1
   86fb4:	e7e0      	b.n	86f78 <__udivmoddi4+0x264>
   86fb6:	4628      	mov	r0, r5
   86fb8:	e7d3      	b.n	86f62 <__udivmoddi4+0x24e>
   86fba:	4611      	mov	r1, r2
   86fbc:	e78c      	b.n	86ed8 <__udivmoddi4+0x1c4>
   86fbe:	4681      	mov	r9, r0
   86fc0:	e7b9      	b.n	86f36 <__udivmoddi4+0x222>
   86fc2:	4608      	mov	r0, r1
   86fc4:	e773      	b.n	86eae <__udivmoddi4+0x19a>
   86fc6:	4608      	mov	r0, r1
   86fc8:	e749      	b.n	86e5e <__udivmoddi4+0x14a>
   86fca:	f1ac 0c02 	sub.w	ip, ip, #2
   86fce:	443d      	add	r5, r7
   86fd0:	e713      	b.n	86dfa <__udivmoddi4+0xe6>
   86fd2:	3802      	subs	r0, #2
   86fd4:	443c      	add	r4, r7
   86fd6:	e724      	b.n	86e22 <__udivmoddi4+0x10e>

00086fd8 <__aeabi_idiv0>:
   86fd8:	4770      	bx	lr
   86fda:	bf00      	nop

00086fdc <__libc_init_array>:
   86fdc:	b570      	push	{r4, r5, r6, lr}
   86fde:	4e0d      	ldr	r6, [pc, #52]	; (87014 <__libc_init_array+0x38>)
   86fe0:	4d0d      	ldr	r5, [pc, #52]	; (87018 <__libc_init_array+0x3c>)
   86fe2:	1b76      	subs	r6, r6, r5
   86fe4:	10b6      	asrs	r6, r6, #2
   86fe6:	d006      	beq.n	86ff6 <__libc_init_array+0x1a>
   86fe8:	2400      	movs	r4, #0
   86fea:	f855 3b04 	ldr.w	r3, [r5], #4
   86fee:	3401      	adds	r4, #1
   86ff0:	4798      	blx	r3
   86ff2:	42a6      	cmp	r6, r4
   86ff4:	d1f9      	bne.n	86fea <__libc_init_array+0xe>
   86ff6:	4e09      	ldr	r6, [pc, #36]	; (8701c <__libc_init_array+0x40>)
   86ff8:	4d09      	ldr	r5, [pc, #36]	; (87020 <__libc_init_array+0x44>)
   86ffa:	f006 ff09 	bl	8de10 <_init>
   86ffe:	1b76      	subs	r6, r6, r5
   87000:	10b6      	asrs	r6, r6, #2
   87002:	d006      	beq.n	87012 <__libc_init_array+0x36>
   87004:	2400      	movs	r4, #0
   87006:	f855 3b04 	ldr.w	r3, [r5], #4
   8700a:	3401      	adds	r4, #1
   8700c:	4798      	blx	r3
   8700e:	42a6      	cmp	r6, r4
   87010:	d1f9      	bne.n	87006 <__libc_init_array+0x2a>
   87012:	bd70      	pop	{r4, r5, r6, pc}
   87014:	0008de1c 	.word	0x0008de1c
   87018:	0008de1c 	.word	0x0008de1c
   8701c:	0008de24 	.word	0x0008de24
   87020:	0008de1c 	.word	0x0008de1c

00087024 <iprintf>:
   87024:	b40f      	push	{r0, r1, r2, r3}
   87026:	b500      	push	{lr}
   87028:	4907      	ldr	r1, [pc, #28]	; (87048 <iprintf+0x24>)
   8702a:	b083      	sub	sp, #12
   8702c:	ab04      	add	r3, sp, #16
   8702e:	6808      	ldr	r0, [r1, #0]
   87030:	f853 2b04 	ldr.w	r2, [r3], #4
   87034:	6881      	ldr	r1, [r0, #8]
   87036:	9301      	str	r3, [sp, #4]
   87038:	f001 fed4 	bl	88de4 <_vfiprintf_r>
   8703c:	b003      	add	sp, #12
   8703e:	f85d eb04 	ldr.w	lr, [sp], #4
   87042:	b004      	add	sp, #16
   87044:	4770      	bx	lr
   87046:	bf00      	nop
   87048:	2000043c 	.word	0x2000043c

0008704c <memcpy>:
   8704c:	4684      	mov	ip, r0
   8704e:	ea41 0300 	orr.w	r3, r1, r0
   87052:	f013 0303 	ands.w	r3, r3, #3
   87056:	d149      	bne.n	870ec <memcpy+0xa0>
   87058:	3a40      	subs	r2, #64	; 0x40
   8705a:	d323      	bcc.n	870a4 <memcpy+0x58>
   8705c:	680b      	ldr	r3, [r1, #0]
   8705e:	6003      	str	r3, [r0, #0]
   87060:	684b      	ldr	r3, [r1, #4]
   87062:	6043      	str	r3, [r0, #4]
   87064:	688b      	ldr	r3, [r1, #8]
   87066:	6083      	str	r3, [r0, #8]
   87068:	68cb      	ldr	r3, [r1, #12]
   8706a:	60c3      	str	r3, [r0, #12]
   8706c:	690b      	ldr	r3, [r1, #16]
   8706e:	6103      	str	r3, [r0, #16]
   87070:	694b      	ldr	r3, [r1, #20]
   87072:	6143      	str	r3, [r0, #20]
   87074:	698b      	ldr	r3, [r1, #24]
   87076:	6183      	str	r3, [r0, #24]
   87078:	69cb      	ldr	r3, [r1, #28]
   8707a:	61c3      	str	r3, [r0, #28]
   8707c:	6a0b      	ldr	r3, [r1, #32]
   8707e:	6203      	str	r3, [r0, #32]
   87080:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87082:	6243      	str	r3, [r0, #36]	; 0x24
   87084:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87086:	6283      	str	r3, [r0, #40]	; 0x28
   87088:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8708a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8708c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8708e:	6303      	str	r3, [r0, #48]	; 0x30
   87090:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87092:	6343      	str	r3, [r0, #52]	; 0x34
   87094:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87096:	6383      	str	r3, [r0, #56]	; 0x38
   87098:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8709a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8709c:	3040      	adds	r0, #64	; 0x40
   8709e:	3140      	adds	r1, #64	; 0x40
   870a0:	3a40      	subs	r2, #64	; 0x40
   870a2:	d2db      	bcs.n	8705c <memcpy+0x10>
   870a4:	3230      	adds	r2, #48	; 0x30
   870a6:	d30b      	bcc.n	870c0 <memcpy+0x74>
   870a8:	680b      	ldr	r3, [r1, #0]
   870aa:	6003      	str	r3, [r0, #0]
   870ac:	684b      	ldr	r3, [r1, #4]
   870ae:	6043      	str	r3, [r0, #4]
   870b0:	688b      	ldr	r3, [r1, #8]
   870b2:	6083      	str	r3, [r0, #8]
   870b4:	68cb      	ldr	r3, [r1, #12]
   870b6:	60c3      	str	r3, [r0, #12]
   870b8:	3010      	adds	r0, #16
   870ba:	3110      	adds	r1, #16
   870bc:	3a10      	subs	r2, #16
   870be:	d2f3      	bcs.n	870a8 <memcpy+0x5c>
   870c0:	320c      	adds	r2, #12
   870c2:	d305      	bcc.n	870d0 <memcpy+0x84>
   870c4:	f851 3b04 	ldr.w	r3, [r1], #4
   870c8:	f840 3b04 	str.w	r3, [r0], #4
   870cc:	3a04      	subs	r2, #4
   870ce:	d2f9      	bcs.n	870c4 <memcpy+0x78>
   870d0:	3204      	adds	r2, #4
   870d2:	d008      	beq.n	870e6 <memcpy+0x9a>
   870d4:	07d2      	lsls	r2, r2, #31
   870d6:	bf1c      	itt	ne
   870d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   870dc:	f800 3b01 	strbne.w	r3, [r0], #1
   870e0:	d301      	bcc.n	870e6 <memcpy+0x9a>
   870e2:	880b      	ldrh	r3, [r1, #0]
   870e4:	8003      	strh	r3, [r0, #0]
   870e6:	4660      	mov	r0, ip
   870e8:	4770      	bx	lr
   870ea:	bf00      	nop
   870ec:	2a08      	cmp	r2, #8
   870ee:	d313      	bcc.n	87118 <memcpy+0xcc>
   870f0:	078b      	lsls	r3, r1, #30
   870f2:	d0b1      	beq.n	87058 <memcpy+0xc>
   870f4:	f010 0303 	ands.w	r3, r0, #3
   870f8:	d0ae      	beq.n	87058 <memcpy+0xc>
   870fa:	f1c3 0304 	rsb	r3, r3, #4
   870fe:	1ad2      	subs	r2, r2, r3
   87100:	07db      	lsls	r3, r3, #31
   87102:	bf1c      	itt	ne
   87104:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87108:	f800 3b01 	strbne.w	r3, [r0], #1
   8710c:	d3a4      	bcc.n	87058 <memcpy+0xc>
   8710e:	f831 3b02 	ldrh.w	r3, [r1], #2
   87112:	f820 3b02 	strh.w	r3, [r0], #2
   87116:	e79f      	b.n	87058 <memcpy+0xc>
   87118:	3a04      	subs	r2, #4
   8711a:	d3d9      	bcc.n	870d0 <memcpy+0x84>
   8711c:	3a01      	subs	r2, #1
   8711e:	f811 3b01 	ldrb.w	r3, [r1], #1
   87122:	f800 3b01 	strb.w	r3, [r0], #1
   87126:	d2f9      	bcs.n	8711c <memcpy+0xd0>
   87128:	780b      	ldrb	r3, [r1, #0]
   8712a:	7003      	strb	r3, [r0, #0]
   8712c:	784b      	ldrb	r3, [r1, #1]
   8712e:	7043      	strb	r3, [r0, #1]
   87130:	788b      	ldrb	r3, [r1, #2]
   87132:	7083      	strb	r3, [r0, #2]
   87134:	4660      	mov	r0, ip
   87136:	4770      	bx	lr

00087138 <memset>:
   87138:	b4f0      	push	{r4, r5, r6, r7}
   8713a:	0786      	lsls	r6, r0, #30
   8713c:	d046      	beq.n	871cc <memset+0x94>
   8713e:	1e54      	subs	r4, r2, #1
   87140:	2a00      	cmp	r2, #0
   87142:	d03c      	beq.n	871be <memset+0x86>
   87144:	4603      	mov	r3, r0
   87146:	b2ca      	uxtb	r2, r1
   87148:	e001      	b.n	8714e <memset+0x16>
   8714a:	3c01      	subs	r4, #1
   8714c:	d337      	bcc.n	871be <memset+0x86>
   8714e:	f803 2b01 	strb.w	r2, [r3], #1
   87152:	079d      	lsls	r5, r3, #30
   87154:	d1f9      	bne.n	8714a <memset+0x12>
   87156:	2c03      	cmp	r4, #3
   87158:	d92a      	bls.n	871b0 <memset+0x78>
   8715a:	b2cd      	uxtb	r5, r1
   8715c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87160:	2c0f      	cmp	r4, #15
   87162:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   87166:	d934      	bls.n	871d2 <memset+0x9a>
   87168:	f1a4 0210 	sub.w	r2, r4, #16
   8716c:	f022 0c0f 	bic.w	ip, r2, #15
   87170:	f103 0720 	add.w	r7, r3, #32
   87174:	0916      	lsrs	r6, r2, #4
   87176:	4467      	add	r7, ip
   87178:	f103 0210 	add.w	r2, r3, #16
   8717c:	e942 5504 	strd	r5, r5, [r2, #-16]
   87180:	e942 5502 	strd	r5, r5, [r2, #-8]
   87184:	3210      	adds	r2, #16
   87186:	42ba      	cmp	r2, r7
   87188:	d1f8      	bne.n	8717c <memset+0x44>
   8718a:	1c72      	adds	r2, r6, #1
   8718c:	f014 0f0c 	tst.w	r4, #12
   87190:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   87194:	f004 060f 	and.w	r6, r4, #15
   87198:	d013      	beq.n	871c2 <memset+0x8a>
   8719a:	1f33      	subs	r3, r6, #4
   8719c:	f023 0303 	bic.w	r3, r3, #3
   871a0:	3304      	adds	r3, #4
   871a2:	4413      	add	r3, r2
   871a4:	f842 5b04 	str.w	r5, [r2], #4
   871a8:	4293      	cmp	r3, r2
   871aa:	d1fb      	bne.n	871a4 <memset+0x6c>
   871ac:	f006 0403 	and.w	r4, r6, #3
   871b0:	b12c      	cbz	r4, 871be <memset+0x86>
   871b2:	b2ca      	uxtb	r2, r1
   871b4:	441c      	add	r4, r3
   871b6:	f803 2b01 	strb.w	r2, [r3], #1
   871ba:	429c      	cmp	r4, r3
   871bc:	d1fb      	bne.n	871b6 <memset+0x7e>
   871be:	bcf0      	pop	{r4, r5, r6, r7}
   871c0:	4770      	bx	lr
   871c2:	4634      	mov	r4, r6
   871c4:	4613      	mov	r3, r2
   871c6:	2c00      	cmp	r4, #0
   871c8:	d1f3      	bne.n	871b2 <memset+0x7a>
   871ca:	e7f8      	b.n	871be <memset+0x86>
   871cc:	4614      	mov	r4, r2
   871ce:	4603      	mov	r3, r0
   871d0:	e7c1      	b.n	87156 <memset+0x1e>
   871d2:	461a      	mov	r2, r3
   871d4:	4626      	mov	r6, r4
   871d6:	e7e0      	b.n	8719a <memset+0x62>

000871d8 <sprintf>:
   871d8:	b40e      	push	{r1, r2, r3}
   871da:	4601      	mov	r1, r0
   871dc:	b530      	push	{r4, r5, lr}
   871de:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   871e2:	b09c      	sub	sp, #112	; 0x70
   871e4:	ab1f      	add	r3, sp, #124	; 0x7c
   871e6:	480b      	ldr	r0, [pc, #44]	; (87214 <sprintf+0x3c>)
   871e8:	f853 2b04 	ldr.w	r2, [r3], #4
   871ec:	4d0a      	ldr	r5, [pc, #40]	; (87218 <sprintf+0x40>)
   871ee:	9102      	str	r1, [sp, #8]
   871f0:	9106      	str	r1, [sp, #24]
   871f2:	6800      	ldr	r0, [r0, #0]
   871f4:	a902      	add	r1, sp, #8
   871f6:	9301      	str	r3, [sp, #4]
   871f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   871fc:	9407      	str	r4, [sp, #28]
   871fe:	f000 f80d 	bl	8721c <_svfprintf_r>
   87202:	2200      	movs	r2, #0
   87204:	9b02      	ldr	r3, [sp, #8]
   87206:	701a      	strb	r2, [r3, #0]
   87208:	b01c      	add	sp, #112	; 0x70
   8720a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8720e:	b003      	add	sp, #12
   87210:	4770      	bx	lr
   87212:	bf00      	nop
   87214:	2000043c 	.word	0x2000043c
   87218:	ffff0208 	.word	0xffff0208

0008721c <_svfprintf_r>:
   8721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87220:	b0d7      	sub	sp, #348	; 0x15c
   87222:	468b      	mov	fp, r1
   87224:	4617      	mov	r7, r2
   87226:	930e      	str	r3, [sp, #56]	; 0x38
   87228:	4681      	mov	r9, r0
   8722a:	f004 f9df 	bl	8b5ec <_localeconv_r>
   8722e:	6803      	ldr	r3, [r0, #0]
   87230:	4618      	mov	r0, r3
   87232:	9318      	str	r3, [sp, #96]	; 0x60
   87234:	f005 fbd4 	bl	8c9e0 <strlen>
   87238:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8723c:	9017      	str	r0, [sp, #92]	; 0x5c
   8723e:	061d      	lsls	r5, r3, #24
   87240:	d504      	bpl.n	8724c <_svfprintf_r+0x30>
   87242:	f8db 3010 	ldr.w	r3, [fp, #16]
   87246:	2b00      	cmp	r3, #0
   87248:	f000 87df 	beq.w	8820a <_svfprintf_r+0xfee>
   8724c:	2300      	movs	r3, #0
   8724e:	2100      	movs	r1, #0
   87250:	2200      	movs	r2, #0
   87252:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   87256:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   8725a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   8725e:	9313      	str	r3, [sp, #76]	; 0x4c
   87260:	9319      	str	r3, [sp, #100]	; 0x64
   87262:	930a      	str	r3, [sp, #40]	; 0x28
   87264:	ab2d      	add	r3, sp, #180	; 0xb4
   87266:	4698      	mov	r8, r3
   87268:	932a      	str	r3, [sp, #168]	; 0xa8
   8726a:	783b      	ldrb	r3, [r7, #0]
   8726c:	46da      	mov	sl, fp
   8726e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   87272:	2b00      	cmp	r3, #0
   87274:	f000 81a4 	beq.w	875c0 <_svfprintf_r+0x3a4>
   87278:	463c      	mov	r4, r7
   8727a:	e004      	b.n	87286 <_svfprintf_r+0x6a>
   8727c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87280:	2b00      	cmp	r3, #0
   87282:	f000 80fd 	beq.w	87480 <_svfprintf_r+0x264>
   87286:	2b25      	cmp	r3, #37	; 0x25
   87288:	d1f8      	bne.n	8727c <_svfprintf_r+0x60>
   8728a:	1be5      	subs	r5, r4, r7
   8728c:	f040 80fb 	bne.w	87486 <_svfprintf_r+0x26a>
   87290:	7823      	ldrb	r3, [r4, #0]
   87292:	2b00      	cmp	r3, #0
   87294:	f000 8194 	beq.w	875c0 <_svfprintf_r+0x3a4>
   87298:	2300      	movs	r3, #0
   8729a:	930b      	str	r3, [sp, #44]	; 0x2c
   8729c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   872a0:	9307      	str	r3, [sp, #28]
   872a2:	f04f 33ff 	mov.w	r3, #4294967295
   872a6:	7866      	ldrb	r6, [r4, #1]
   872a8:	f104 0b01 	add.w	fp, r4, #1
   872ac:	2120      	movs	r1, #32
   872ae:	242b      	movs	r4, #43	; 0x2b
   872b0:	9309      	str	r3, [sp, #36]	; 0x24
   872b2:	f10b 0b01 	add.w	fp, fp, #1
   872b6:	f1a6 0320 	sub.w	r3, r6, #32
   872ba:	2b5a      	cmp	r3, #90	; 0x5a
   872bc:	f200 80ff 	bhi.w	874be <_svfprintf_r+0x2a2>
   872c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   872c4:	00fd02bc 	.word	0x00fd02bc
   872c8:	02b500fd 	.word	0x02b500fd
   872cc:	00fd00fd 	.word	0x00fd00fd
   872d0:	029100fd 	.word	0x029100fd
   872d4:	00fd00fd 	.word	0x00fd00fd
   872d8:	02e7006a 	.word	0x02e7006a
   872dc:	023400fd 	.word	0x023400fd
   872e0:	00fd02cd 	.word	0x00fd02cd
   872e4:	005b02c6 	.word	0x005b02c6
   872e8:	005b005b 	.word	0x005b005b
   872ec:	005b005b 	.word	0x005b005b
   872f0:	005b005b 	.word	0x005b005b
   872f4:	005b005b 	.word	0x005b005b
   872f8:	00fd00fd 	.word	0x00fd00fd
   872fc:	00fd00fd 	.word	0x00fd00fd
   87300:	00fd00fd 	.word	0x00fd00fd
   87304:	019000fd 	.word	0x019000fd
   87308:	01f700fd 	.word	0x01f700fd
   8730c:	0190007c 	.word	0x0190007c
   87310:	01900190 	.word	0x01900190
   87314:	00fd00fd 	.word	0x00fd00fd
   87318:	00fd00fd 	.word	0x00fd00fd
   8731c:	00fd028a 	.word	0x00fd028a
   87320:	00a900fd 	.word	0x00a900fd
   87324:	00fd00fd 	.word	0x00fd00fd
   87328:	020b00fd 	.word	0x020b00fd
   8732c:	023b00fd 	.word	0x023b00fd
   87330:	00fd00fd 	.word	0x00fd00fd
   87334:	00fd0781 	.word	0x00fd0781
   87338:	00fd00fd 	.word	0x00fd00fd
   8733c:	00fd00fd 	.word	0x00fd00fd
   87340:	00fd00fd 	.word	0x00fd00fd
   87344:	019000fd 	.word	0x019000fd
   87348:	01f700fd 	.word	0x01f700fd
   8734c:	01900080 	.word	0x01900080
   87350:	01900190 	.word	0x01900190
   87354:	00800280 	.word	0x00800280
   87358:	00fd0075 	.word	0x00fd0075
   8735c:	00fd0276 	.word	0x00fd0276
   87360:	00ad025e 	.word	0x00ad025e
   87364:	0075024c 	.word	0x0075024c
   87368:	020b00fd 	.word	0x020b00fd
   8736c:	075b0072 	.word	0x075b0072
   87370:	00fd00fd 	.word	0x00fd00fd
   87374:	00fd075f 	.word	0x00fd075f
   87378:	0072      	.short	0x0072
   8737a:	2200      	movs	r2, #0
   8737c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87380:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87384:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87388:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8738c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87390:	2b09      	cmp	r3, #9
   87392:	d9f5      	bls.n	87380 <_svfprintf_r+0x164>
   87394:	920b      	str	r2, [sp, #44]	; 0x2c
   87396:	e78e      	b.n	872b6 <_svfprintf_r+0x9a>
   87398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8739a:	f853 2b04 	ldr.w	r2, [r3], #4
   8739e:	2a00      	cmp	r2, #0
   873a0:	920b      	str	r2, [sp, #44]	; 0x2c
   873a2:	930e      	str	r3, [sp, #56]	; 0x38
   873a4:	f2c0 81bf 	blt.w	87726 <_svfprintf_r+0x50a>
   873a8:	f89b 6000 	ldrb.w	r6, [fp]
   873ac:	e781      	b.n	872b2 <_svfprintf_r+0x96>
   873ae:	9b07      	ldr	r3, [sp, #28]
   873b0:	f89b 6000 	ldrb.w	r6, [fp]
   873b4:	f043 0320 	orr.w	r3, r3, #32
   873b8:	9307      	str	r3, [sp, #28]
   873ba:	e77a      	b.n	872b2 <_svfprintf_r+0x96>
   873bc:	9b07      	ldr	r3, [sp, #28]
   873be:	f043 0310 	orr.w	r3, r3, #16
   873c2:	9307      	str	r3, [sp, #28]
   873c4:	9b07      	ldr	r3, [sp, #28]
   873c6:	069c      	lsls	r4, r3, #26
   873c8:	f140 8162 	bpl.w	87690 <_svfprintf_r+0x474>
   873cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873ce:	3307      	adds	r3, #7
   873d0:	f023 0307 	bic.w	r3, r3, #7
   873d4:	4619      	mov	r1, r3
   873d6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   873da:	4614      	mov	r4, r2
   873dc:	461d      	mov	r5, r3
   873de:	910e      	str	r1, [sp, #56]	; 0x38
   873e0:	2a00      	cmp	r2, #0
   873e2:	f173 0300 	sbcs.w	r3, r3, #0
   873e6:	f2c0 85ab 	blt.w	87f40 <_svfprintf_r+0xd24>
   873ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   873ec:	3301      	adds	r3, #1
   873ee:	9b07      	ldr	r3, [sp, #28]
   873f0:	f000 8414 	beq.w	87c1c <_svfprintf_r+0xa00>
   873f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   873f8:	ea54 0205 	orrs.w	r2, r4, r5
   873fc:	9308      	str	r3, [sp, #32]
   873fe:	f040 840e 	bne.w	87c1e <_svfprintf_r+0xa02>
   87402:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87404:	2a00      	cmp	r2, #0
   87406:	f040 840f 	bne.w	87c28 <_svfprintf_r+0xa0c>
   8740a:	9307      	str	r3, [sp, #28]
   8740c:	2300      	movs	r3, #0
   8740e:	af56      	add	r7, sp, #344	; 0x158
   87410:	9309      	str	r3, [sp, #36]	; 0x24
   87412:	930c      	str	r3, [sp, #48]	; 0x30
   87414:	e26b      	b.n	878ee <_svfprintf_r+0x6d2>
   87416:	9b07      	ldr	r3, [sp, #28]
   87418:	f043 0310 	orr.w	r3, r3, #16
   8741c:	9307      	str	r3, [sp, #28]
   8741e:	9b07      	ldr	r3, [sp, #28]
   87420:	069a      	lsls	r2, r3, #26
   87422:	f140 8126 	bpl.w	87672 <_svfprintf_r+0x456>
   87426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87428:	3307      	adds	r3, #7
   8742a:	f023 0307 	bic.w	r3, r3, #7
   8742e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87432:	930e      	str	r3, [sp, #56]	; 0x38
   87434:	9b07      	ldr	r3, [sp, #28]
   87436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   8743a:	9308      	str	r3, [sp, #32]
   8743c:	2300      	movs	r3, #0
   8743e:	2200      	movs	r2, #0
   87440:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87444:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87446:	4611      	mov	r1, r2
   87448:	3101      	adds	r1, #1
   8744a:	f000 8231 	beq.w	878b0 <_svfprintf_r+0x694>
   8744e:	9908      	ldr	r1, [sp, #32]
   87450:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   87454:	9107      	str	r1, [sp, #28]
   87456:	ea54 0105 	orrs.w	r1, r4, r5
   8745a:	f040 8227 	bne.w	878ac <_svfprintf_r+0x690>
   8745e:	2a00      	cmp	r2, #0
   87460:	f040 837d 	bne.w	87b5e <_svfprintf_r+0x942>
   87464:	2b00      	cmp	r3, #0
   87466:	d1d1      	bne.n	8740c <_svfprintf_r+0x1f0>
   87468:	9b08      	ldr	r3, [sp, #32]
   8746a:	f013 0301 	ands.w	r3, r3, #1
   8746e:	930c      	str	r3, [sp, #48]	; 0x30
   87470:	f000 8590 	beq.w	87f94 <_svfprintf_r+0xd78>
   87474:	2330      	movs	r3, #48	; 0x30
   87476:	f20d 1757 	addw	r7, sp, #343	; 0x157
   8747a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   8747e:	e236      	b.n	878ee <_svfprintf_r+0x6d2>
   87480:	1be5      	subs	r5, r4, r7
   87482:	f000 809d 	beq.w	875c0 <_svfprintf_r+0x3a4>
   87486:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   8748a:	3301      	adds	r3, #1
   8748c:	442a      	add	r2, r5
   8748e:	2b07      	cmp	r3, #7
   87490:	e9c8 7500 	strd	r7, r5, [r8]
   87494:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   87498:	dc06      	bgt.n	874a8 <_svfprintf_r+0x28c>
   8749a:	f108 0808 	add.w	r8, r8, #8
   8749e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   874a0:	7823      	ldrb	r3, [r4, #0]
   874a2:	442a      	add	r2, r5
   874a4:	920a      	str	r2, [sp, #40]	; 0x28
   874a6:	e6f4      	b.n	87292 <_svfprintf_r+0x76>
   874a8:	4651      	mov	r1, sl
   874aa:	4648      	mov	r0, r9
   874ac:	aa2a      	add	r2, sp, #168	; 0xa8
   874ae:	f005 faf9 	bl	8caa4 <__ssprint_r>
   874b2:	2800      	cmp	r0, #0
   874b4:	f041 83ce 	bne.w	88c54 <_svfprintf_r+0x1a38>
   874b8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874bc:	e7ef      	b.n	8749e <_svfprintf_r+0x282>
   874be:	2e00      	cmp	r6, #0
   874c0:	d07e      	beq.n	875c0 <_svfprintf_r+0x3a4>
   874c2:	2300      	movs	r3, #0
   874c4:	2101      	movs	r1, #1
   874c6:	461a      	mov	r2, r3
   874c8:	9108      	str	r1, [sp, #32]
   874ca:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   874ce:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   874d2:	930d      	str	r3, [sp, #52]	; 0x34
   874d4:	9309      	str	r3, [sp, #36]	; 0x24
   874d6:	9312      	str	r3, [sp, #72]	; 0x48
   874d8:	9316      	str	r3, [sp, #88]	; 0x58
   874da:	9310      	str	r3, [sp, #64]	; 0x40
   874dc:	910c      	str	r1, [sp, #48]	; 0x30
   874de:	af3d      	add	r7, sp, #244	; 0xf4
   874e0:	9b07      	ldr	r3, [sp, #28]
   874e2:	f013 0302 	ands.w	r3, r3, #2
   874e6:	d002      	beq.n	874ee <_svfprintf_r+0x2d2>
   874e8:	9908      	ldr	r1, [sp, #32]
   874ea:	3102      	adds	r1, #2
   874ec:	9108      	str	r1, [sp, #32]
   874ee:	9907      	ldr	r1, [sp, #28]
   874f0:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   874f4:	910f      	str	r1, [sp, #60]	; 0x3c
   874f6:	d105      	bne.n	87504 <_svfprintf_r+0x2e8>
   874f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874fa:	9808      	ldr	r0, [sp, #32]
   874fc:	1a0d      	subs	r5, r1, r0
   874fe:	2d00      	cmp	r5, #0
   87500:	f300 834b 	bgt.w	87b9a <_svfprintf_r+0x97e>
   87504:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87506:	b172      	cbz	r2, 87526 <_svfprintf_r+0x30a>
   87508:	2001      	movs	r0, #1
   8750a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8750c:	4404      	add	r4, r0
   8750e:	4402      	add	r2, r0
   87510:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   87514:	2a07      	cmp	r2, #7
   87516:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8751a:	e9c8 1000 	strd	r1, r0, [r8]
   8751e:	f300 83cd 	bgt.w	87cbc <_svfprintf_r+0xaa0>
   87522:	f108 0808 	add.w	r8, r8, #8
   87526:	b16b      	cbz	r3, 87544 <_svfprintf_r+0x328>
   87528:	2102      	movs	r1, #2
   8752a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8752c:	440c      	add	r4, r1
   8752e:	3301      	adds	r3, #1
   87530:	aa23      	add	r2, sp, #140	; 0x8c
   87532:	2b07      	cmp	r3, #7
   87534:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87538:	e9c8 2100 	strd	r2, r1, [r8]
   8753c:	f300 83cc 	bgt.w	87cd8 <_svfprintf_r+0xabc>
   87540:	f108 0808 	add.w	r8, r8, #8
   87544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87546:	2b80      	cmp	r3, #128	; 0x80
   87548:	f000 8234 	beq.w	879b4 <_svfprintf_r+0x798>
   8754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8754e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87550:	1a9d      	subs	r5, r3, r2
   87552:	2d00      	cmp	r5, #0
   87554:	f300 826e 	bgt.w	87a34 <_svfprintf_r+0x818>
   87558:	9b07      	ldr	r3, [sp, #28]
   8755a:	05d9      	lsls	r1, r3, #23
   8755c:	f100 81d5 	bmi.w	8790a <_svfprintf_r+0x6ee>
   87560:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87564:	3301      	adds	r3, #1
   87566:	4414      	add	r4, r2
   87568:	2b07      	cmp	r3, #7
   8756a:	e9c8 7200 	strd	r7, r2, [r8]
   8756e:	942c      	str	r4, [sp, #176]	; 0xb0
   87570:	932b      	str	r3, [sp, #172]	; 0xac
   87572:	f300 8397 	bgt.w	87ca4 <_svfprintf_r+0xa88>
   87576:	f108 0808 	add.w	r8, r8, #8
   8757a:	9b07      	ldr	r3, [sp, #28]
   8757c:	0759      	lsls	r1, r3, #29
   8757e:	d505      	bpl.n	8758c <_svfprintf_r+0x370>
   87580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87582:	9a08      	ldr	r2, [sp, #32]
   87584:	1a9d      	subs	r5, r3, r2
   87586:	2d00      	cmp	r5, #0
   87588:	f300 83b2 	bgt.w	87cf0 <_svfprintf_r+0xad4>
   8758c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   87590:	9908      	ldr	r1, [sp, #32]
   87592:	428a      	cmp	r2, r1
   87594:	bfac      	ite	ge
   87596:	189b      	addge	r3, r3, r2
   87598:	185b      	addlt	r3, r3, r1
   8759a:	930a      	str	r3, [sp, #40]	; 0x28
   8759c:	2c00      	cmp	r4, #0
   8759e:	f040 827d 	bne.w	87a9c <_svfprintf_r+0x880>
   875a2:	2300      	movs	r3, #0
   875a4:	932b      	str	r3, [sp, #172]	; 0xac
   875a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   875a8:	b11b      	cbz	r3, 875b2 <_svfprintf_r+0x396>
   875aa:	4648      	mov	r0, r9
   875ac:	990d      	ldr	r1, [sp, #52]	; 0x34
   875ae:	f003 fd77 	bl	8b0a0 <_free_r>
   875b2:	465f      	mov	r7, fp
   875b4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875b8:	783b      	ldrb	r3, [r7, #0]
   875ba:	2b00      	cmp	r3, #0
   875bc:	f47f ae5c 	bne.w	87278 <_svfprintf_r+0x5c>
   875c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   875c2:	46d3      	mov	fp, sl
   875c4:	2b00      	cmp	r3, #0
   875c6:	f041 824b 	bne.w	88a60 <_svfprintf_r+0x1844>
   875ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   875ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   875d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875d4:	bf18      	it	ne
   875d6:	f04f 33ff 	movne.w	r3, #4294967295
   875da:	930a      	str	r3, [sp, #40]	; 0x28
   875dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   875de:	b057      	add	sp, #348	; 0x15c
   875e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875e6:	3307      	adds	r3, #7
   875e8:	f023 0307 	bic.w	r3, r3, #7
   875ec:	4619      	mov	r1, r3
   875ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   875f2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   875f6:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   875fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   875fe:	461d      	mov	r5, r3
   87600:	4618      	mov	r0, r3
   87602:	910e      	str	r1, [sp, #56]	; 0x38
   87604:	f04f 32ff 	mov.w	r2, #4294967295
   87608:	4621      	mov	r1, r4
   8760a:	4ba4      	ldr	r3, [pc, #656]	; (8789c <_svfprintf_r+0x680>)
   8760c:	f006 f97e 	bl	8d90c <__aeabi_dcmpun>
   87610:	2800      	cmp	r0, #0
   87612:	f040 84d9 	bne.w	87fc8 <_svfprintf_r+0xdac>
   87616:	4628      	mov	r0, r5
   87618:	4621      	mov	r1, r4
   8761a:	f04f 32ff 	mov.w	r2, #4294967295
   8761e:	4b9f      	ldr	r3, [pc, #636]	; (8789c <_svfprintf_r+0x680>)
   87620:	f006 f956 	bl	8d8d0 <__aeabi_dcmple>
   87624:	2800      	cmp	r0, #0
   87626:	f040 84cf 	bne.w	87fc8 <_svfprintf_r+0xdac>
   8762a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8762e:	2200      	movs	r2, #0
   87630:	2300      	movs	r3, #0
   87632:	f006 f943 	bl	8d8bc <__aeabi_dcmplt>
   87636:	2800      	cmp	r0, #0
   87638:	f041 800e 	bne.w	88658 <_svfprintf_r+0x143c>
   8763c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87640:	2003      	movs	r0, #3
   87642:	2100      	movs	r1, #0
   87644:	4f96      	ldr	r7, [pc, #600]	; (878a0 <_svfprintf_r+0x684>)
   87646:	4b97      	ldr	r3, [pc, #604]	; (878a4 <_svfprintf_r+0x688>)
   87648:	9008      	str	r0, [sp, #32]
   8764a:	910d      	str	r1, [sp, #52]	; 0x34
   8764c:	2e47      	cmp	r6, #71	; 0x47
   8764e:	bfc8      	it	gt
   87650:	461f      	movgt	r7, r3
   87652:	9c07      	ldr	r4, [sp, #28]
   87654:	900c      	str	r0, [sp, #48]	; 0x30
   87656:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   8765a:	9407      	str	r4, [sp, #28]
   8765c:	9109      	str	r1, [sp, #36]	; 0x24
   8765e:	9112      	str	r1, [sp, #72]	; 0x48
   87660:	9116      	str	r1, [sp, #88]	; 0x58
   87662:	9110      	str	r1, [sp, #64]	; 0x40
   87664:	2a00      	cmp	r2, #0
   87666:	f43f af3b 	beq.w	874e0 <_svfprintf_r+0x2c4>
   8766a:	9b08      	ldr	r3, [sp, #32]
   8766c:	3301      	adds	r3, #1
   8766e:	9308      	str	r3, [sp, #32]
   87670:	e736      	b.n	874e0 <_svfprintf_r+0x2c4>
   87672:	9b07      	ldr	r3, [sp, #28]
   87674:	06db      	lsls	r3, r3, #27
   87676:	f100 849c 	bmi.w	87fb2 <_svfprintf_r+0xd96>
   8767a:	9b07      	ldr	r3, [sp, #28]
   8767c:	065f      	lsls	r7, r3, #25
   8767e:	f140 87b2 	bpl.w	885e6 <_svfprintf_r+0x13ca>
   87682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87684:	2500      	movs	r5, #0
   87686:	f853 4b04 	ldr.w	r4, [r3], #4
   8768a:	930e      	str	r3, [sp, #56]	; 0x38
   8768c:	b2a4      	uxth	r4, r4
   8768e:	e6d1      	b.n	87434 <_svfprintf_r+0x218>
   87690:	9b07      	ldr	r3, [sp, #28]
   87692:	06d8      	lsls	r0, r3, #27
   87694:	f100 8568 	bmi.w	88168 <_svfprintf_r+0xf4c>
   87698:	9b07      	ldr	r3, [sp, #28]
   8769a:	0659      	lsls	r1, r3, #25
   8769c:	f140 87be 	bpl.w	8861c <_svfprintf_r+0x1400>
   876a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876a2:	f853 4b04 	ldr.w	r4, [r3], #4
   876a6:	b224      	sxth	r4, r4
   876a8:	17e5      	asrs	r5, r4, #31
   876aa:	930e      	str	r3, [sp, #56]	; 0x38
   876ac:	4622      	mov	r2, r4
   876ae:	462b      	mov	r3, r5
   876b0:	e696      	b.n	873e0 <_svfprintf_r+0x1c4>
   876b2:	2100      	movs	r1, #0
   876b4:	2401      	movs	r4, #1
   876b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876b8:	460a      	mov	r2, r1
   876ba:	f853 0b04 	ldr.w	r0, [r3], #4
   876be:	9408      	str	r4, [sp, #32]
   876c0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   876c4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   876c8:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   876cc:	9109      	str	r1, [sp, #36]	; 0x24
   876ce:	9112      	str	r1, [sp, #72]	; 0x48
   876d0:	9116      	str	r1, [sp, #88]	; 0x58
   876d2:	9110      	str	r1, [sp, #64]	; 0x40
   876d4:	940c      	str	r4, [sp, #48]	; 0x30
   876d6:	af3d      	add	r7, sp, #244	; 0xf4
   876d8:	e702      	b.n	874e0 <_svfprintf_r+0x2c4>
   876da:	2500      	movs	r5, #0
   876dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   876de:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   876e2:	f854 7b04 	ldr.w	r7, [r4], #4
   876e6:	2f00      	cmp	r7, #0
   876e8:	f000 859f 	beq.w	8822a <_svfprintf_r+0x100e>
   876ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   876ee:	4613      	mov	r3, r2
   876f0:	3301      	adds	r3, #1
   876f2:	f000 8770 	beq.w	885d6 <_svfprintf_r+0x13ba>
   876f6:	4629      	mov	r1, r5
   876f8:	4638      	mov	r0, r7
   876fa:	f004 fabf 	bl	8bc7c <memchr>
   876fe:	900d      	str	r0, [sp, #52]	; 0x34
   87700:	2800      	cmp	r0, #0
   87702:	f001 80b9 	beq.w	88878 <_svfprintf_r+0x165c>
   87706:	462b      	mov	r3, r5
   87708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8770a:	9509      	str	r5, [sp, #36]	; 0x24
   8770c:	1bd2      	subs	r2, r2, r7
   8770e:	920c      	str	r2, [sp, #48]	; 0x30
   87710:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   87714:	9208      	str	r2, [sp, #32]
   87716:	940e      	str	r4, [sp, #56]	; 0x38
   87718:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8771c:	930d      	str	r3, [sp, #52]	; 0x34
   8771e:	9312      	str	r3, [sp, #72]	; 0x48
   87720:	9316      	str	r3, [sp, #88]	; 0x58
   87722:	9310      	str	r3, [sp, #64]	; 0x40
   87724:	e79e      	b.n	87664 <_svfprintf_r+0x448>
   87726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87728:	425b      	negs	r3, r3
   8772a:	930b      	str	r3, [sp, #44]	; 0x2c
   8772c:	9b07      	ldr	r3, [sp, #28]
   8772e:	f89b 6000 	ldrb.w	r6, [fp]
   87732:	f043 0304 	orr.w	r3, r3, #4
   87736:	9307      	str	r3, [sp, #28]
   87738:	e5bb      	b.n	872b2 <_svfprintf_r+0x96>
   8773a:	9b07      	ldr	r3, [sp, #28]
   8773c:	f043 0310 	orr.w	r3, r3, #16
   87740:	9308      	str	r3, [sp, #32]
   87742:	9b08      	ldr	r3, [sp, #32]
   87744:	069d      	lsls	r5, r3, #26
   87746:	f140 83ea 	bpl.w	87f1e <_svfprintf_r+0xd02>
   8774a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8774c:	3307      	adds	r3, #7
   8774e:	f023 0307 	bic.w	r3, r3, #7
   87752:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87756:	930e      	str	r3, [sp, #56]	; 0x38
   87758:	2301      	movs	r3, #1
   8775a:	e670      	b.n	8743e <_svfprintf_r+0x222>
   8775c:	f647 0230 	movw	r2, #30768	; 0x7830
   87760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87762:	9907      	ldr	r1, [sp, #28]
   87764:	f853 4b04 	ldr.w	r4, [r3], #4
   87768:	f041 0102 	orr.w	r1, r1, #2
   8776c:	930e      	str	r3, [sp, #56]	; 0x38
   8776e:	4b4e      	ldr	r3, [pc, #312]	; (878a8 <_svfprintf_r+0x68c>)
   87770:	2500      	movs	r5, #0
   87772:	9319      	str	r3, [sp, #100]	; 0x64
   87774:	2678      	movs	r6, #120	; 0x78
   87776:	2302      	movs	r3, #2
   87778:	9108      	str	r1, [sp, #32]
   8777a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   8777e:	e65e      	b.n	8743e <_svfprintf_r+0x222>
   87780:	9b07      	ldr	r3, [sp, #28]
   87782:	069d      	lsls	r5, r3, #26
   87784:	f100 8408 	bmi.w	87f98 <_svfprintf_r+0xd7c>
   87788:	9b07      	ldr	r3, [sp, #28]
   8778a:	06dc      	lsls	r4, r3, #27
   8778c:	f100 86e1 	bmi.w	88552 <_svfprintf_r+0x1336>
   87790:	9b07      	ldr	r3, [sp, #28]
   87792:	0658      	lsls	r0, r3, #25
   87794:	f100 8795 	bmi.w	886c2 <_svfprintf_r+0x14a6>
   87798:	9b07      	ldr	r3, [sp, #28]
   8779a:	0599      	lsls	r1, r3, #22
   8779c:	f140 86d9 	bpl.w	88552 <_svfprintf_r+0x1336>
   877a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877a2:	990a      	ldr	r1, [sp, #40]	; 0x28
   877a4:	f853 2b04 	ldr.w	r2, [r3], #4
   877a8:	465f      	mov	r7, fp
   877aa:	7011      	strb	r1, [r2, #0]
   877ac:	930e      	str	r3, [sp, #56]	; 0x38
   877ae:	e703      	b.n	875b8 <_svfprintf_r+0x39c>
   877b0:	f89b 6000 	ldrb.w	r6, [fp]
   877b4:	9b07      	ldr	r3, [sp, #28]
   877b6:	2e6c      	cmp	r6, #108	; 0x6c
   877b8:	f000 8508 	beq.w	881cc <_svfprintf_r+0xfb0>
   877bc:	f043 0310 	orr.w	r3, r3, #16
   877c0:	9307      	str	r3, [sp, #28]
   877c2:	e576      	b.n	872b2 <_svfprintf_r+0x96>
   877c4:	f89b 6000 	ldrb.w	r6, [fp]
   877c8:	9b07      	ldr	r3, [sp, #28]
   877ca:	2e68      	cmp	r6, #104	; 0x68
   877cc:	f000 8507 	beq.w	881de <_svfprintf_r+0xfc2>
   877d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   877d4:	9307      	str	r3, [sp, #28]
   877d6:	e56c      	b.n	872b2 <_svfprintf_r+0x96>
   877d8:	9b07      	ldr	r3, [sp, #28]
   877da:	f89b 6000 	ldrb.w	r6, [fp]
   877de:	f043 0308 	orr.w	r3, r3, #8
   877e2:	9307      	str	r3, [sp, #28]
   877e4:	e565      	b.n	872b2 <_svfprintf_r+0x96>
   877e6:	4648      	mov	r0, r9
   877e8:	f003 ff00 	bl	8b5ec <_localeconv_r>
   877ec:	6843      	ldr	r3, [r0, #4]
   877ee:	4618      	mov	r0, r3
   877f0:	931c      	str	r3, [sp, #112]	; 0x70
   877f2:	f005 f8f5 	bl	8c9e0 <strlen>
   877f6:	4603      	mov	r3, r0
   877f8:	4648      	mov	r0, r9
   877fa:	461d      	mov	r5, r3
   877fc:	931d      	str	r3, [sp, #116]	; 0x74
   877fe:	f003 fef5 	bl	8b5ec <_localeconv_r>
   87802:	6882      	ldr	r2, [r0, #8]
   87804:	2120      	movs	r1, #32
   87806:	921a      	str	r2, [sp, #104]	; 0x68
   87808:	2d00      	cmp	r5, #0
   8780a:	f43f adcd 	beq.w	873a8 <_svfprintf_r+0x18c>
   8780e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87810:	2b00      	cmp	r3, #0
   87812:	f43f adc9 	beq.w	873a8 <_svfprintf_r+0x18c>
   87816:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87818:	781b      	ldrb	r3, [r3, #0]
   8781a:	2b00      	cmp	r3, #0
   8781c:	f43f adc4 	beq.w	873a8 <_svfprintf_r+0x18c>
   87820:	9b07      	ldr	r3, [sp, #28]
   87822:	f89b 6000 	ldrb.w	r6, [fp]
   87826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8782a:	9307      	str	r3, [sp, #28]
   8782c:	e541      	b.n	872b2 <_svfprintf_r+0x96>
   8782e:	9b07      	ldr	r3, [sp, #28]
   87830:	f89b 6000 	ldrb.w	r6, [fp]
   87834:	f043 0301 	orr.w	r3, r3, #1
   87838:	9307      	str	r3, [sp, #28]
   8783a:	e53a      	b.n	872b2 <_svfprintf_r+0x96>
   8783c:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   87840:	2b00      	cmp	r3, #0
   87842:	f47f adb1 	bne.w	873a8 <_svfprintf_r+0x18c>
   87846:	f89b 6000 	ldrb.w	r6, [fp]
   8784a:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   8784e:	e530      	b.n	872b2 <_svfprintf_r+0x96>
   87850:	9b07      	ldr	r3, [sp, #28]
   87852:	f89b 6000 	ldrb.w	r6, [fp]
   87856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8785a:	9307      	str	r3, [sp, #28]
   8785c:	e529      	b.n	872b2 <_svfprintf_r+0x96>
   8785e:	465a      	mov	r2, fp
   87860:	f812 6b01 	ldrb.w	r6, [r2], #1
   87864:	2e2a      	cmp	r6, #42	; 0x2a
   87866:	f001 8251 	beq.w	88d0c <_svfprintf_r+0x1af0>
   8786a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8786e:	2b09      	cmp	r3, #9
   87870:	4693      	mov	fp, r2
   87872:	bf98      	it	ls
   87874:	2200      	movls	r2, #0
   87876:	f201 80ef 	bhi.w	88a58 <_svfprintf_r+0x183c>
   8787a:	f81b 6b01 	ldrb.w	r6, [fp], #1
   8787e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87882:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87886:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8788a:	2b09      	cmp	r3, #9
   8788c:	d9f5      	bls.n	8787a <_svfprintf_r+0x65e>
   8788e:	9209      	str	r2, [sp, #36]	; 0x24
   87890:	e511      	b.n	872b6 <_svfprintf_r+0x9a>
   87892:	f89b 6000 	ldrb.w	r6, [fp]
   87896:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   8789a:	e50a      	b.n	872b2 <_svfprintf_r+0x96>
   8789c:	7fefffff 	.word	0x7fefffff
   878a0:	0008da1c 	.word	0x0008da1c
   878a4:	0008da20 	.word	0x0008da20
   878a8:	0008da2c 	.word	0x0008da2c
   878ac:	9a07      	ldr	r2, [sp, #28]
   878ae:	9208      	str	r2, [sp, #32]
   878b0:	2b01      	cmp	r3, #1
   878b2:	f000 81b4 	beq.w	87c1e <_svfprintf_r+0xa02>
   878b6:	2b02      	cmp	r3, #2
   878b8:	f000 8159 	beq.w	87b6e <_svfprintf_r+0x952>
   878bc:	af56      	add	r7, sp, #344	; 0x158
   878be:	08e2      	lsrs	r2, r4, #3
   878c0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   878c4:	08e9      	lsrs	r1, r5, #3
   878c6:	f004 0307 	and.w	r3, r4, #7
   878ca:	460d      	mov	r5, r1
   878cc:	4614      	mov	r4, r2
   878ce:	3330      	adds	r3, #48	; 0x30
   878d0:	ea54 0105 	orrs.w	r1, r4, r5
   878d4:	463a      	mov	r2, r7
   878d6:	f807 3d01 	strb.w	r3, [r7, #-1]!
   878da:	d1f0      	bne.n	878be <_svfprintf_r+0x6a2>
   878dc:	9908      	ldr	r1, [sp, #32]
   878de:	4608      	mov	r0, r1
   878e0:	07c0      	lsls	r0, r0, #31
   878e2:	f100 82b8 	bmi.w	87e56 <_svfprintf_r+0xc3a>
   878e6:	ab56      	add	r3, sp, #344	; 0x158
   878e8:	1bdb      	subs	r3, r3, r7
   878ea:	9107      	str	r1, [sp, #28]
   878ec:	930c      	str	r3, [sp, #48]	; 0x30
   878ee:	2300      	movs	r3, #0
   878f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   878f2:	930d      	str	r3, [sp, #52]	; 0x34
   878f4:	9312      	str	r3, [sp, #72]	; 0x48
   878f6:	9316      	str	r3, [sp, #88]	; 0x58
   878f8:	9310      	str	r3, [sp, #64]	; 0x40
   878fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   878fc:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87900:	428b      	cmp	r3, r1
   87902:	bfb8      	it	lt
   87904:	460b      	movlt	r3, r1
   87906:	9308      	str	r3, [sp, #32]
   87908:	e6ac      	b.n	87664 <_svfprintf_r+0x448>
   8790a:	2e65      	cmp	r6, #101	; 0x65
   8790c:	f340 80d8 	ble.w	87ac0 <_svfprintf_r+0x8a4>
   87910:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87914:	2200      	movs	r2, #0
   87916:	2300      	movs	r3, #0
   87918:	f005 ffc6 	bl	8d8a8 <__aeabi_dcmpeq>
   8791c:	2800      	cmp	r0, #0
   8791e:	f000 821e 	beq.w	87d5e <_svfprintf_r+0xb42>
   87922:	2101      	movs	r1, #1
   87924:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87926:	4ac5      	ldr	r2, [pc, #788]	; (87c3c <_svfprintf_r+0xa20>)
   87928:	440b      	add	r3, r1
   8792a:	440c      	add	r4, r1
   8792c:	2b07      	cmp	r3, #7
   8792e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87932:	e9c8 2100 	strd	r2, r1, [r8]
   87936:	f300 85bb 	bgt.w	884b0 <_svfprintf_r+0x1294>
   8793a:	f108 0808 	add.w	r8, r8, #8
   8793e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87942:	4293      	cmp	r3, r2
   87944:	f280 8321 	bge.w	87f8a <_svfprintf_r+0xd6e>
   87948:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8794a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8794c:	3301      	adds	r3, #1
   8794e:	9918      	ldr	r1, [sp, #96]	; 0x60
   87950:	4414      	add	r4, r2
   87952:	2b07      	cmp	r3, #7
   87954:	e9c8 1200 	strd	r1, r2, [r8]
   87958:	942c      	str	r4, [sp, #176]	; 0xb0
   8795a:	932b      	str	r3, [sp, #172]	; 0xac
   8795c:	f300 8448 	bgt.w	881f0 <_svfprintf_r+0xfd4>
   87960:	f108 0808 	add.w	r8, r8, #8
   87964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87966:	1e5d      	subs	r5, r3, #1
   87968:	2d00      	cmp	r5, #0
   8796a:	f77f ae06 	ble.w	8757a <_svfprintf_r+0x35e>
   8796e:	2d10      	cmp	r5, #16
   87970:	f340 85c7 	ble.w	88502 <_svfprintf_r+0x12e6>
   87974:	4fb2      	ldr	r7, [pc, #712]	; (87c40 <_svfprintf_r+0xa24>)
   87976:	2610      	movs	r6, #16
   87978:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8797a:	970f      	str	r7, [sp, #60]	; 0x3c
   8797c:	e005      	b.n	8798a <_svfprintf_r+0x76e>
   8797e:	f108 0808 	add.w	r8, r8, #8
   87982:	3d10      	subs	r5, #16
   87984:	2d10      	cmp	r5, #16
   87986:	f340 85bf 	ble.w	88508 <_svfprintf_r+0x12ec>
   8798a:	3301      	adds	r3, #1
   8798c:	3410      	adds	r4, #16
   8798e:	2b07      	cmp	r3, #7
   87990:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87994:	e9c8 7600 	strd	r7, r6, [r8]
   87998:	ddf1      	ble.n	8797e <_svfprintf_r+0x762>
   8799a:	4651      	mov	r1, sl
   8799c:	4648      	mov	r0, r9
   8799e:	aa2a      	add	r2, sp, #168	; 0xa8
   879a0:	f005 f880 	bl	8caa4 <__ssprint_r>
   879a4:	2800      	cmp	r0, #0
   879a6:	f040 8081 	bne.w	87aac <_svfprintf_r+0x890>
   879aa:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   879ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879b2:	e7e6      	b.n	87982 <_svfprintf_r+0x766>
   879b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   879b6:	9a08      	ldr	r2, [sp, #32]
   879b8:	1a9d      	subs	r5, r3, r2
   879ba:	2d00      	cmp	r5, #0
   879bc:	f77f adc6 	ble.w	8754c <_svfprintf_r+0x330>
   879c0:	2d10      	cmp	r5, #16
   879c2:	f341 8069 	ble.w	88a98 <_svfprintf_r+0x187c>
   879c6:	489e      	ldr	r0, [pc, #632]	; (87c40 <_svfprintf_r+0xa24>)
   879c8:	4621      	mov	r1, r4
   879ca:	2310      	movs	r3, #16
   879cc:	4604      	mov	r4, r0
   879ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   879d0:	900f      	str	r0, [sp, #60]	; 0x3c
   879d2:	e004      	b.n	879de <_svfprintf_r+0x7c2>
   879d4:	3d10      	subs	r5, #16
   879d6:	2d10      	cmp	r5, #16
   879d8:	f108 0808 	add.w	r8, r8, #8
   879dc:	dd17      	ble.n	87a0e <_svfprintf_r+0x7f2>
   879de:	3201      	adds	r2, #1
   879e0:	3110      	adds	r1, #16
   879e2:	2a07      	cmp	r2, #7
   879e4:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   879e8:	e9c8 4300 	strd	r4, r3, [r8]
   879ec:	ddf2      	ble.n	879d4 <_svfprintf_r+0x7b8>
   879ee:	4651      	mov	r1, sl
   879f0:	4648      	mov	r0, r9
   879f2:	aa2a      	add	r2, sp, #168	; 0xa8
   879f4:	f005 f856 	bl	8caa4 <__ssprint_r>
   879f8:	2800      	cmp	r0, #0
   879fa:	d157      	bne.n	87aac <_svfprintf_r+0x890>
   879fc:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a00:	3d10      	subs	r5, #16
   87a02:	2d10      	cmp	r5, #16
   87a04:	f04f 0310 	mov.w	r3, #16
   87a08:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a0c:	dce7      	bgt.n	879de <_svfprintf_r+0x7c2>
   87a0e:	460c      	mov	r4, r1
   87a10:	3201      	adds	r2, #1
   87a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a14:	442c      	add	r4, r5
   87a16:	2a07      	cmp	r2, #7
   87a18:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87a1c:	e9c8 3500 	strd	r3, r5, [r8]
   87a20:	f300 858a 	bgt.w	88538 <_svfprintf_r+0x131c>
   87a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a28:	f108 0808 	add.w	r8, r8, #8
   87a2c:	1a9d      	subs	r5, r3, r2
   87a2e:	2d00      	cmp	r5, #0
   87a30:	f77f ad92 	ble.w	87558 <_svfprintf_r+0x33c>
   87a34:	2d10      	cmp	r5, #16
   87a36:	f340 860a 	ble.w	8864e <_svfprintf_r+0x1432>
   87a3a:	4881      	ldr	r0, [pc, #516]	; (87c40 <_svfprintf_r+0xa24>)
   87a3c:	4621      	mov	r1, r4
   87a3e:	2310      	movs	r3, #16
   87a40:	4604      	mov	r4, r0
   87a42:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87a44:	900f      	str	r0, [sp, #60]	; 0x3c
   87a46:	e004      	b.n	87a52 <_svfprintf_r+0x836>
   87a48:	3d10      	subs	r5, #16
   87a4a:	2d10      	cmp	r5, #16
   87a4c:	f108 0808 	add.w	r8, r8, #8
   87a50:	dd16      	ble.n	87a80 <_svfprintf_r+0x864>
   87a52:	3201      	adds	r2, #1
   87a54:	3110      	adds	r1, #16
   87a56:	2a07      	cmp	r2, #7
   87a58:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87a5c:	e9c8 4300 	strd	r4, r3, [r8]
   87a60:	ddf2      	ble.n	87a48 <_svfprintf_r+0x82c>
   87a62:	4651      	mov	r1, sl
   87a64:	4648      	mov	r0, r9
   87a66:	aa2a      	add	r2, sp, #168	; 0xa8
   87a68:	f005 f81c 	bl	8caa4 <__ssprint_r>
   87a6c:	b9f0      	cbnz	r0, 87aac <_svfprintf_r+0x890>
   87a6e:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a72:	3d10      	subs	r5, #16
   87a74:	2d10      	cmp	r5, #16
   87a76:	f04f 0310 	mov.w	r3, #16
   87a7a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a7e:	dce8      	bgt.n	87a52 <_svfprintf_r+0x836>
   87a80:	460c      	mov	r4, r1
   87a82:	3201      	adds	r2, #1
   87a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a86:	442c      	add	r4, r5
   87a88:	2a07      	cmp	r2, #7
   87a8a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87a8e:	e9c8 3500 	strd	r3, r5, [r8]
   87a92:	f300 8237 	bgt.w	87f04 <_svfprintf_r+0xce8>
   87a96:	f108 0808 	add.w	r8, r8, #8
   87a9a:	e55d      	b.n	87558 <_svfprintf_r+0x33c>
   87a9c:	4651      	mov	r1, sl
   87a9e:	4648      	mov	r0, r9
   87aa0:	aa2a      	add	r2, sp, #168	; 0xa8
   87aa2:	f004 ffff 	bl	8caa4 <__ssprint_r>
   87aa6:	2800      	cmp	r0, #0
   87aa8:	f43f ad7b 	beq.w	875a2 <_svfprintf_r+0x386>
   87aac:	46d3      	mov	fp, sl
   87aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87ab0:	2b00      	cmp	r3, #0
   87ab2:	f43f ad8a 	beq.w	875ca <_svfprintf_r+0x3ae>
   87ab6:	4648      	mov	r0, r9
   87ab8:	990d      	ldr	r1, [sp, #52]	; 0x34
   87aba:	f003 faf1 	bl	8b0a0 <_free_r>
   87abe:	e584      	b.n	875ca <_svfprintf_r+0x3ae>
   87ac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87ac2:	2b01      	cmp	r3, #1
   87ac4:	f340 81d5 	ble.w	87e72 <_svfprintf_r+0xc56>
   87ac8:	2301      	movs	r3, #1
   87aca:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87acc:	441c      	add	r4, r3
   87ace:	441d      	add	r5, r3
   87ad0:	2d07      	cmp	r5, #7
   87ad2:	942c      	str	r4, [sp, #176]	; 0xb0
   87ad4:	f8c8 7000 	str.w	r7, [r8]
   87ad8:	952b      	str	r5, [sp, #172]	; 0xac
   87ada:	f8c8 3004 	str.w	r3, [r8, #4]
   87ade:	f300 823a 	bgt.w	87f56 <_svfprintf_r+0xd3a>
   87ae2:	f108 0808 	add.w	r8, r8, #8
   87ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87ae8:	3501      	adds	r5, #1
   87aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87aec:	441c      	add	r4, r3
   87aee:	2d07      	cmp	r5, #7
   87af0:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87af4:	e9c8 2300 	strd	r2, r3, [r8]
   87af8:	f300 823a 	bgt.w	87f70 <_svfprintf_r+0xd54>
   87afc:	f108 0808 	add.w	r8, r8, #8
   87b00:	2300      	movs	r3, #0
   87b02:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87b06:	2200      	movs	r2, #0
   87b08:	f005 fece 	bl	8d8a8 <__aeabi_dcmpeq>
   87b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b0e:	2800      	cmp	r0, #0
   87b10:	f040 81cd 	bne.w	87eae <_svfprintf_r+0xc92>
   87b14:	3b01      	subs	r3, #1
   87b16:	3501      	adds	r5, #1
   87b18:	3701      	adds	r7, #1
   87b1a:	441c      	add	r4, r3
   87b1c:	2d07      	cmp	r5, #7
   87b1e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b22:	f8c8 7000 	str.w	r7, [r8]
   87b26:	f8c8 3004 	str.w	r3, [r8, #4]
   87b2a:	f300 84dc 	bgt.w	884e6 <_svfprintf_r+0x12ca>
   87b2e:	f108 0808 	add.w	r8, r8, #8
   87b32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87b34:	3501      	adds	r5, #1
   87b36:	4414      	add	r4, r2
   87b38:	ab26      	add	r3, sp, #152	; 0x98
   87b3a:	2d07      	cmp	r5, #7
   87b3c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b40:	e9c8 3200 	strd	r3, r2, [r8]
   87b44:	f77f ad17 	ble.w	87576 <_svfprintf_r+0x35a>
   87b48:	4651      	mov	r1, sl
   87b4a:	4648      	mov	r0, r9
   87b4c:	aa2a      	add	r2, sp, #168	; 0xa8
   87b4e:	f004 ffa9 	bl	8caa4 <__ssprint_r>
   87b52:	2800      	cmp	r0, #0
   87b54:	d1aa      	bne.n	87aac <_svfprintf_r+0x890>
   87b56:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b58:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b5c:	e50d      	b.n	8757a <_svfprintf_r+0x35e>
   87b5e:	2b01      	cmp	r3, #1
   87b60:	f000 87ca 	beq.w	88af8 <_svfprintf_r+0x18dc>
   87b64:	2b02      	cmp	r3, #2
   87b66:	9b07      	ldr	r3, [sp, #28]
   87b68:	9308      	str	r3, [sp, #32]
   87b6a:	f47f aea7 	bne.w	878bc <_svfprintf_r+0x6a0>
   87b6e:	9819      	ldr	r0, [sp, #100]	; 0x64
   87b70:	af56      	add	r7, sp, #344	; 0x158
   87b72:	0923      	lsrs	r3, r4, #4
   87b74:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87b78:	0929      	lsrs	r1, r5, #4
   87b7a:	f004 020f 	and.w	r2, r4, #15
   87b7e:	460d      	mov	r5, r1
   87b80:	461c      	mov	r4, r3
   87b82:	5c83      	ldrb	r3, [r0, r2]
   87b84:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87b88:	ea54 0305 	orrs.w	r3, r4, r5
   87b8c:	d1f1      	bne.n	87b72 <_svfprintf_r+0x956>
   87b8e:	9b08      	ldr	r3, [sp, #32]
   87b90:	9307      	str	r3, [sp, #28]
   87b92:	ab56      	add	r3, sp, #344	; 0x158
   87b94:	1bdb      	subs	r3, r3, r7
   87b96:	930c      	str	r3, [sp, #48]	; 0x30
   87b98:	e6a9      	b.n	878ee <_svfprintf_r+0x6d2>
   87b9a:	2d10      	cmp	r5, #16
   87b9c:	f340 8668 	ble.w	88870 <_svfprintf_r+0x1654>
   87ba0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87ba4:	931e      	str	r3, [sp, #120]	; 0x78
   87ba6:	460b      	mov	r3, r1
   87ba8:	4639      	mov	r1, r7
   87baa:	2410      	movs	r4, #16
   87bac:	4637      	mov	r7, r6
   87bae:	4656      	mov	r6, sl
   87bb0:	46ca      	mov	sl, r9
   87bb2:	4689      	mov	r9, r1
   87bb4:	e004      	b.n	87bc0 <_svfprintf_r+0x9a4>
   87bb6:	3d10      	subs	r5, #16
   87bb8:	2d10      	cmp	r5, #16
   87bba:	f108 0808 	add.w	r8, r8, #8
   87bbe:	dd17      	ble.n	87bf0 <_svfprintf_r+0x9d4>
   87bc0:	3201      	adds	r2, #1
   87bc2:	4920      	ldr	r1, [pc, #128]	; (87c44 <_svfprintf_r+0xa28>)
   87bc4:	3310      	adds	r3, #16
   87bc6:	2a07      	cmp	r2, #7
   87bc8:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87bcc:	e9c8 1400 	strd	r1, r4, [r8]
   87bd0:	ddf1      	ble.n	87bb6 <_svfprintf_r+0x99a>
   87bd2:	4631      	mov	r1, r6
   87bd4:	4650      	mov	r0, sl
   87bd6:	aa2a      	add	r2, sp, #168	; 0xa8
   87bd8:	f004 ff64 	bl	8caa4 <__ssprint_r>
   87bdc:	2800      	cmp	r0, #0
   87bde:	f040 8458 	bne.w	88492 <_svfprintf_r+0x1276>
   87be2:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   87be6:	3d10      	subs	r5, #16
   87be8:	2d10      	cmp	r5, #16
   87bea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87bee:	dce7      	bgt.n	87bc0 <_svfprintf_r+0x9a4>
   87bf0:	4648      	mov	r0, r9
   87bf2:	46d1      	mov	r9, sl
   87bf4:	46b2      	mov	sl, r6
   87bf6:	463e      	mov	r6, r7
   87bf8:	4607      	mov	r7, r0
   87bfa:	4619      	mov	r1, r3
   87bfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87bfe:	194c      	adds	r4, r1, r5
   87c00:	3201      	adds	r2, #1
   87c02:	4910      	ldr	r1, [pc, #64]	; (87c44 <_svfprintf_r+0xa28>)
   87c04:	2a07      	cmp	r2, #7
   87c06:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87c0a:	e9c8 1500 	strd	r1, r5, [r8]
   87c0e:	f300 841f 	bgt.w	88450 <_svfprintf_r+0x1234>
   87c12:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87c16:	f108 0808 	add.w	r8, r8, #8
   87c1a:	e474      	b.n	87506 <_svfprintf_r+0x2ea>
   87c1c:	9308      	str	r3, [sp, #32]
   87c1e:	2d00      	cmp	r5, #0
   87c20:	bf08      	it	eq
   87c22:	2c0a      	cmpeq	r4, #10
   87c24:	f080 83d0 	bcs.w	883c8 <_svfprintf_r+0x11ac>
   87c28:	9b08      	ldr	r3, [sp, #32]
   87c2a:	3430      	adds	r4, #48	; 0x30
   87c2c:	9307      	str	r3, [sp, #28]
   87c2e:	2301      	movs	r3, #1
   87c30:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   87c34:	930c      	str	r3, [sp, #48]	; 0x30
   87c36:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87c3a:	e658      	b.n	878ee <_svfprintf_r+0x6d2>
   87c3c:	0008da5c 	.word	0x0008da5c
   87c40:	0008da70 	.word	0x0008da70
   87c44:	0008da60 	.word	0x0008da60
   87c48:	4651      	mov	r1, sl
   87c4a:	4648      	mov	r0, r9
   87c4c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c4e:	f004 ff29 	bl	8caa4 <__ssprint_r>
   87c52:	2800      	cmp	r0, #0
   87c54:	f47f af2a 	bne.w	87aac <_svfprintf_r+0x890>
   87c58:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c5a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c5c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c60:	2a00      	cmp	r2, #0
   87c62:	f040 847f 	bne.w	88564 <_svfprintf_r+0x1348>
   87c66:	9b07      	ldr	r3, [sp, #28]
   87c68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87c6a:	f003 0301 	and.w	r3, r3, #1
   87c6e:	4313      	orrs	r3, r2
   87c70:	f43f ac83 	beq.w	8757a <_svfprintf_r+0x35e>
   87c74:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87c78:	3301      	adds	r3, #1
   87c7a:	9918      	ldr	r1, [sp, #96]	; 0x60
   87c7c:	4414      	add	r4, r2
   87c7e:	2b07      	cmp	r3, #7
   87c80:	e9c8 1200 	strd	r1, r2, [r8]
   87c84:	942c      	str	r4, [sp, #176]	; 0xb0
   87c86:	932b      	str	r3, [sp, #172]	; 0xac
   87c88:	f300 8524 	bgt.w	886d4 <_svfprintf_r+0x14b8>
   87c8c:	f108 0808 	add.w	r8, r8, #8
   87c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87c92:	3301      	adds	r3, #1
   87c94:	4414      	add	r4, r2
   87c96:	2b07      	cmp	r3, #7
   87c98:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c9c:	e9c8 7200 	strd	r7, r2, [r8]
   87ca0:	f77f ac69 	ble.w	87576 <_svfprintf_r+0x35a>
   87ca4:	4651      	mov	r1, sl
   87ca6:	4648      	mov	r0, r9
   87ca8:	aa2a      	add	r2, sp, #168	; 0xa8
   87caa:	f004 fefb 	bl	8caa4 <__ssprint_r>
   87cae:	2800      	cmp	r0, #0
   87cb0:	f47f aefc 	bne.w	87aac <_svfprintf_r+0x890>
   87cb4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cb6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cba:	e45e      	b.n	8757a <_svfprintf_r+0x35e>
   87cbc:	4651      	mov	r1, sl
   87cbe:	4648      	mov	r0, r9
   87cc0:	aa2a      	add	r2, sp, #168	; 0xa8
   87cc2:	931e      	str	r3, [sp, #120]	; 0x78
   87cc4:	f004 feee 	bl	8caa4 <__ssprint_r>
   87cc8:	2800      	cmp	r0, #0
   87cca:	f47f aeef 	bne.w	87aac <_svfprintf_r+0x890>
   87cce:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87cd2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cd6:	e426      	b.n	87526 <_svfprintf_r+0x30a>
   87cd8:	4651      	mov	r1, sl
   87cda:	4648      	mov	r0, r9
   87cdc:	aa2a      	add	r2, sp, #168	; 0xa8
   87cde:	f004 fee1 	bl	8caa4 <__ssprint_r>
   87ce2:	2800      	cmp	r0, #0
   87ce4:	f47f aee2 	bne.w	87aac <_svfprintf_r+0x890>
   87ce8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cee:	e429      	b.n	87544 <_svfprintf_r+0x328>
   87cf0:	2d10      	cmp	r5, #16
   87cf2:	f340 86be 	ble.w	88a72 <_svfprintf_r+0x1856>
   87cf6:	2610      	movs	r6, #16
   87cf8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87cfa:	e004      	b.n	87d06 <_svfprintf_r+0xaea>
   87cfc:	3d10      	subs	r5, #16
   87cfe:	2d10      	cmp	r5, #16
   87d00:	f108 0808 	add.w	r8, r8, #8
   87d04:	dd17      	ble.n	87d36 <_svfprintf_r+0xb1a>
   87d06:	3301      	adds	r3, #1
   87d08:	4aad      	ldr	r2, [pc, #692]	; (87fc0 <_svfprintf_r+0xda4>)
   87d0a:	3410      	adds	r4, #16
   87d0c:	2b07      	cmp	r3, #7
   87d0e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d12:	e9c8 2600 	strd	r2, r6, [r8]
   87d16:	ddf1      	ble.n	87cfc <_svfprintf_r+0xae0>
   87d18:	4651      	mov	r1, sl
   87d1a:	4648      	mov	r0, r9
   87d1c:	aa2a      	add	r2, sp, #168	; 0xa8
   87d1e:	f004 fec1 	bl	8caa4 <__ssprint_r>
   87d22:	2800      	cmp	r0, #0
   87d24:	f47f aec2 	bne.w	87aac <_svfprintf_r+0x890>
   87d28:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d2c:	3d10      	subs	r5, #16
   87d2e:	2d10      	cmp	r5, #16
   87d30:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d34:	dce7      	bgt.n	87d06 <_svfprintf_r+0xaea>
   87d36:	3301      	adds	r3, #1
   87d38:	4aa1      	ldr	r2, [pc, #644]	; (87fc0 <_svfprintf_r+0xda4>)
   87d3a:	442c      	add	r4, r5
   87d3c:	2b07      	cmp	r3, #7
   87d3e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d42:	e9c8 2500 	strd	r2, r5, [r8]
   87d46:	f77f ac21 	ble.w	8758c <_svfprintf_r+0x370>
   87d4a:	4651      	mov	r1, sl
   87d4c:	4648      	mov	r0, r9
   87d4e:	aa2a      	add	r2, sp, #168	; 0xa8
   87d50:	f004 fea8 	bl	8caa4 <__ssprint_r>
   87d54:	2800      	cmp	r0, #0
   87d56:	f47f aea9 	bne.w	87aac <_svfprintf_r+0x890>
   87d5a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87d5c:	e416      	b.n	8758c <_svfprintf_r+0x370>
   87d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87d60:	2a00      	cmp	r2, #0
   87d62:	f340 8386 	ble.w	88472 <_svfprintf_r+0x1256>
   87d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87d6a:	4293      	cmp	r3, r2
   87d6c:	bfa8      	it	ge
   87d6e:	4613      	movge	r3, r2
   87d70:	2b00      	cmp	r3, #0
   87d72:	461d      	mov	r5, r3
   87d74:	dd0b      	ble.n	87d8e <_svfprintf_r+0xb72>
   87d76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d78:	442c      	add	r4, r5
   87d7a:	3301      	adds	r3, #1
   87d7c:	2b07      	cmp	r3, #7
   87d7e:	e9c8 7500 	strd	r7, r5, [r8]
   87d82:	942c      	str	r4, [sp, #176]	; 0xb0
   87d84:	932b      	str	r3, [sp, #172]	; 0xac
   87d86:	f300 851e 	bgt.w	887c6 <_svfprintf_r+0x15aa>
   87d8a:	f108 0808 	add.w	r8, r8, #8
   87d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d90:	2d00      	cmp	r5, #0
   87d92:	bfa8      	it	ge
   87d94:	1b5b      	subge	r3, r3, r5
   87d96:	2b00      	cmp	r3, #0
   87d98:	461d      	mov	r5, r3
   87d9a:	f300 8256 	bgt.w	8824a <_svfprintf_r+0x102e>
   87d9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87da0:	443b      	add	r3, r7
   87da2:	461e      	mov	r6, r3
   87da4:	9b07      	ldr	r3, [sp, #28]
   87da6:	055b      	lsls	r3, r3, #21
   87da8:	f100 8277 	bmi.w	8829a <_svfprintf_r+0x107e>
   87dac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87dae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87db0:	4293      	cmp	r3, r2
   87db2:	db03      	blt.n	87dbc <_svfprintf_r+0xba0>
   87db4:	9a07      	ldr	r2, [sp, #28]
   87db6:	07d5      	lsls	r5, r2, #31
   87db8:	f140 847a 	bpl.w	886b0 <_svfprintf_r+0x1494>
   87dbc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87dbe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87dc0:	3201      	adds	r2, #1
   87dc2:	9818      	ldr	r0, [sp, #96]	; 0x60
   87dc4:	440c      	add	r4, r1
   87dc6:	2a07      	cmp	r2, #7
   87dc8:	e9c8 0100 	strd	r0, r1, [r8]
   87dcc:	942c      	str	r4, [sp, #176]	; 0xb0
   87dce:	922b      	str	r2, [sp, #172]	; 0xac
   87dd0:	f300 8506 	bgt.w	887e0 <_svfprintf_r+0x15c4>
   87dd4:	f108 0808 	add.w	r8, r8, #8
   87dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87dda:	18bd      	adds	r5, r7, r2
   87ddc:	1bad      	subs	r5, r5, r6
   87dde:	1ad3      	subs	r3, r2, r3
   87de0:	429d      	cmp	r5, r3
   87de2:	bfa8      	it	ge
   87de4:	461d      	movge	r5, r3
   87de6:	2d00      	cmp	r5, #0
   87de8:	dd0b      	ble.n	87e02 <_svfprintf_r+0xbe6>
   87dea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87dec:	442c      	add	r4, r5
   87dee:	3201      	adds	r2, #1
   87df0:	2a07      	cmp	r2, #7
   87df2:	e9c8 6500 	strd	r6, r5, [r8]
   87df6:	942c      	str	r4, [sp, #176]	; 0xb0
   87df8:	922b      	str	r2, [sp, #172]	; 0xac
   87dfa:	f300 855f 	bgt.w	888bc <_svfprintf_r+0x16a0>
   87dfe:	f108 0808 	add.w	r8, r8, #8
   87e02:	2d00      	cmp	r5, #0
   87e04:	bfb4      	ite	lt
   87e06:	461d      	movlt	r5, r3
   87e08:	1b5d      	subge	r5, r3, r5
   87e0a:	2d00      	cmp	r5, #0
   87e0c:	f77f abb5 	ble.w	8757a <_svfprintf_r+0x35e>
   87e10:	2d10      	cmp	r5, #16
   87e12:	f340 8376 	ble.w	88502 <_svfprintf_r+0x12e6>
   87e16:	4f6b      	ldr	r7, [pc, #428]	; (87fc4 <_svfprintf_r+0xda8>)
   87e18:	2610      	movs	r6, #16
   87e1a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e1c:	970f      	str	r7, [sp, #60]	; 0x3c
   87e1e:	e005      	b.n	87e2c <_svfprintf_r+0xc10>
   87e20:	f108 0808 	add.w	r8, r8, #8
   87e24:	3d10      	subs	r5, #16
   87e26:	2d10      	cmp	r5, #16
   87e28:	f340 836e 	ble.w	88508 <_svfprintf_r+0x12ec>
   87e2c:	3301      	adds	r3, #1
   87e2e:	3410      	adds	r4, #16
   87e30:	2b07      	cmp	r3, #7
   87e32:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e36:	e9c8 7600 	strd	r7, r6, [r8]
   87e3a:	ddf1      	ble.n	87e20 <_svfprintf_r+0xc04>
   87e3c:	4651      	mov	r1, sl
   87e3e:	4648      	mov	r0, r9
   87e40:	aa2a      	add	r2, sp, #168	; 0xa8
   87e42:	f004 fe2f 	bl	8caa4 <__ssprint_r>
   87e46:	2800      	cmp	r0, #0
   87e48:	f47f ae30 	bne.w	87aac <_svfprintf_r+0x890>
   87e4c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87e50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e54:	e7e6      	b.n	87e24 <_svfprintf_r+0xc08>
   87e56:	2b30      	cmp	r3, #48	; 0x30
   87e58:	f43f ae99 	beq.w	87b8e <_svfprintf_r+0x972>
   87e5c:	2330      	movs	r3, #48	; 0x30
   87e5e:	3a02      	subs	r2, #2
   87e60:	f807 3c01 	strb.w	r3, [r7, #-1]
   87e64:	9908      	ldr	r1, [sp, #32]
   87e66:	ab56      	add	r3, sp, #344	; 0x158
   87e68:	1a9b      	subs	r3, r3, r2
   87e6a:	4617      	mov	r7, r2
   87e6c:	9107      	str	r1, [sp, #28]
   87e6e:	930c      	str	r3, [sp, #48]	; 0x30
   87e70:	e53d      	b.n	878ee <_svfprintf_r+0x6d2>
   87e72:	9b07      	ldr	r3, [sp, #28]
   87e74:	07d8      	lsls	r0, r3, #31
   87e76:	f53f ae27 	bmi.w	87ac8 <_svfprintf_r+0x8ac>
   87e7a:	2301      	movs	r3, #1
   87e7c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87e7e:	441c      	add	r4, r3
   87e80:	441d      	add	r5, r3
   87e82:	2d07      	cmp	r5, #7
   87e84:	942c      	str	r4, [sp, #176]	; 0xb0
   87e86:	f8c8 7000 	str.w	r7, [r8]
   87e8a:	952b      	str	r5, [sp, #172]	; 0xac
   87e8c:	f8c8 3004 	str.w	r3, [r8, #4]
   87e90:	f77f ae4d 	ble.w	87b2e <_svfprintf_r+0x912>
   87e94:	4651      	mov	r1, sl
   87e96:	4648      	mov	r0, r9
   87e98:	aa2a      	add	r2, sp, #168	; 0xa8
   87e9a:	f004 fe03 	bl	8caa4 <__ssprint_r>
   87e9e:	2800      	cmp	r0, #0
   87ea0:	f47f ae04 	bne.w	87aac <_svfprintf_r+0x890>
   87ea4:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87ea8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87eac:	e641      	b.n	87b32 <_svfprintf_r+0x916>
   87eae:	1e5e      	subs	r6, r3, #1
   87eb0:	2e00      	cmp	r6, #0
   87eb2:	f77f ae3e 	ble.w	87b32 <_svfprintf_r+0x916>
   87eb6:	2e10      	cmp	r6, #16
   87eb8:	f340 871e 	ble.w	88cf8 <_svfprintf_r+0x1adc>
   87ebc:	4b41      	ldr	r3, [pc, #260]	; (87fc4 <_svfprintf_r+0xda8>)
   87ebe:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   87ec2:	2710      	movs	r7, #16
   87ec4:	46d3      	mov	fp, sl
   87ec6:	930f      	str	r3, [sp, #60]	; 0x3c
   87ec8:	46ca      	mov	sl, r9
   87eca:	4699      	mov	r9, r3
   87ecc:	e005      	b.n	87eda <_svfprintf_r+0xcbe>
   87ece:	f108 0808 	add.w	r8, r8, #8
   87ed2:	3e10      	subs	r6, #16
   87ed4:	2e10      	cmp	r6, #16
   87ed6:	f340 82f8 	ble.w	884ca <_svfprintf_r+0x12ae>
   87eda:	3501      	adds	r5, #1
   87edc:	3410      	adds	r4, #16
   87ede:	2d07      	cmp	r5, #7
   87ee0:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87ee4:	e9c8 9700 	strd	r9, r7, [r8]
   87ee8:	ddf1      	ble.n	87ece <_svfprintf_r+0xcb2>
   87eea:	4659      	mov	r1, fp
   87eec:	4650      	mov	r0, sl
   87eee:	aa2a      	add	r2, sp, #168	; 0xa8
   87ef0:	f004 fdd8 	bl	8caa4 <__ssprint_r>
   87ef4:	2800      	cmp	r0, #0
   87ef6:	f040 85cc 	bne.w	88a92 <_svfprintf_r+0x1876>
   87efa:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87efe:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f02:	e7e6      	b.n	87ed2 <_svfprintf_r+0xcb6>
   87f04:	4651      	mov	r1, sl
   87f06:	4648      	mov	r0, r9
   87f08:	aa2a      	add	r2, sp, #168	; 0xa8
   87f0a:	f004 fdcb 	bl	8caa4 <__ssprint_r>
   87f0e:	2800      	cmp	r0, #0
   87f10:	f47f adcc 	bne.w	87aac <_svfprintf_r+0x890>
   87f14:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f16:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f1a:	f7ff bb1d 	b.w	87558 <_svfprintf_r+0x33c>
   87f1e:	9b08      	ldr	r3, [sp, #32]
   87f20:	06dc      	lsls	r4, r3, #27
   87f22:	f100 8119 	bmi.w	88158 <_svfprintf_r+0xf3c>
   87f26:	9b08      	ldr	r3, [sp, #32]
   87f28:	0658      	lsls	r0, r3, #25
   87f2a:	f140 8368 	bpl.w	885fe <_svfprintf_r+0x13e2>
   87f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87f30:	2301      	movs	r3, #1
   87f32:	f852 4b04 	ldr.w	r4, [r2], #4
   87f36:	2500      	movs	r5, #0
   87f38:	920e      	str	r2, [sp, #56]	; 0x38
   87f3a:	b2a4      	uxth	r4, r4
   87f3c:	f7ff ba7f 	b.w	8743e <_svfprintf_r+0x222>
   87f40:	232d      	movs	r3, #45	; 0x2d
   87f42:	9a07      	ldr	r2, [sp, #28]
   87f44:	4264      	negs	r4, r4
   87f46:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87f4a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87f4e:	2301      	movs	r3, #1
   87f50:	9208      	str	r2, [sp, #32]
   87f52:	f7ff ba77 	b.w	87444 <_svfprintf_r+0x228>
   87f56:	4651      	mov	r1, sl
   87f58:	4648      	mov	r0, r9
   87f5a:	aa2a      	add	r2, sp, #168	; 0xa8
   87f5c:	f004 fda2 	bl	8caa4 <__ssprint_r>
   87f60:	2800      	cmp	r0, #0
   87f62:	f47f ada3 	bne.w	87aac <_svfprintf_r+0x890>
   87f66:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f6a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f6e:	e5ba      	b.n	87ae6 <_svfprintf_r+0x8ca>
   87f70:	4651      	mov	r1, sl
   87f72:	4648      	mov	r0, r9
   87f74:	aa2a      	add	r2, sp, #168	; 0xa8
   87f76:	f004 fd95 	bl	8caa4 <__ssprint_r>
   87f7a:	2800      	cmp	r0, #0
   87f7c:	f47f ad96 	bne.w	87aac <_svfprintf_r+0x890>
   87f80:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f88:	e5ba      	b.n	87b00 <_svfprintf_r+0x8e4>
   87f8a:	9b07      	ldr	r3, [sp, #28]
   87f8c:	07da      	lsls	r2, r3, #31
   87f8e:	f57f aaf4 	bpl.w	8757a <_svfprintf_r+0x35e>
   87f92:	e4d9      	b.n	87948 <_svfprintf_r+0x72c>
   87f94:	af56      	add	r7, sp, #344	; 0x158
   87f96:	e4aa      	b.n	878ee <_svfprintf_r+0x6d2>
   87f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87f9a:	465f      	mov	r7, fp
   87f9c:	f853 1b04 	ldr.w	r1, [r3], #4
   87fa0:	930e      	str	r3, [sp, #56]	; 0x38
   87fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fa4:	17dd      	asrs	r5, r3, #31
   87fa6:	461a      	mov	r2, r3
   87fa8:	462b      	mov	r3, r5
   87faa:	e9c1 2300 	strd	r2, r3, [r1]
   87fae:	f7ff bb03 	b.w	875b8 <_svfprintf_r+0x39c>
   87fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fb4:	2500      	movs	r5, #0
   87fb6:	f853 4b04 	ldr.w	r4, [r3], #4
   87fba:	930e      	str	r3, [sp, #56]	; 0x38
   87fbc:	f7ff ba3a 	b.w	87434 <_svfprintf_r+0x218>
   87fc0:	0008da60 	.word	0x0008da60
   87fc4:	0008da70 	.word	0x0008da70
   87fc8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87fcc:	460b      	mov	r3, r1
   87fce:	4602      	mov	r2, r0
   87fd0:	f005 fc9c 	bl	8d90c <__aeabi_dcmpun>
   87fd4:	4601      	mov	r1, r0
   87fd6:	2800      	cmp	r0, #0
   87fd8:	f040 8643 	bne.w	88c62 <_svfprintf_r+0x1a46>
   87fdc:	2e61      	cmp	r6, #97	; 0x61
   87fde:	f000 8586 	beq.w	88aee <_svfprintf_r+0x18d2>
   87fe2:	2e41      	cmp	r6, #65	; 0x41
   87fe4:	f000 847a 	beq.w	888dc <_svfprintf_r+0x16c0>
   87fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87fea:	f026 0520 	bic.w	r5, r6, #32
   87fee:	1c5a      	adds	r2, r3, #1
   87ff0:	9508      	str	r5, [sp, #32]
   87ff2:	f000 837d 	beq.w	886f0 <_svfprintf_r+0x14d4>
   87ff6:	2d47      	cmp	r5, #71	; 0x47
   87ff8:	f000 859e 	beq.w	88b38 <_svfprintf_r+0x191c>
   87ffc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88000:	9b07      	ldr	r3, [sp, #28]
   88002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88006:	9312      	str	r3, [sp, #72]	; 0x48
   88008:	460b      	mov	r3, r1
   8800a:	2b00      	cmp	r3, #0
   8800c:	f2c0 85ba 	blt.w	88b84 <_svfprintf_r+0x1968>
   88010:	2200      	movs	r2, #0
   88012:	930f      	str	r3, [sp, #60]	; 0x3c
   88014:	921e      	str	r2, [sp, #120]	; 0x78
   88016:	920d      	str	r2, [sp, #52]	; 0x34
   88018:	900c      	str	r0, [sp, #48]	; 0x30
   8801a:	2d46      	cmp	r5, #70	; 0x46
   8801c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8801e:	f000 8407 	beq.w	88830 <_svfprintf_r+0x1614>
   88022:	2d45      	cmp	r5, #69	; 0x45
   88024:	f04f 0002 	mov.w	r0, #2
   88028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8802a:	f040 83e7 	bne.w	887fc <_svfprintf_r+0x15e0>
   8802e:	9909      	ldr	r1, [sp, #36]	; 0x24
   88030:	9000      	str	r0, [sp, #0]
   88032:	1c4c      	adds	r4, r1, #1
   88034:	a928      	add	r1, sp, #160	; 0xa0
   88036:	a825      	add	r0, sp, #148	; 0x94
   88038:	9104      	str	r1, [sp, #16]
   8803a:	a924      	add	r1, sp, #144	; 0x90
   8803c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88040:	9401      	str	r4, [sp, #4]
   88042:	4648      	mov	r0, r9
   88044:	f001 feb0 	bl	89da8 <_dtoa_r>
   88048:	4607      	mov	r7, r0
   8804a:	4404      	add	r4, r0
   8804c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8804e:	9d07      	ldr	r5, [sp, #28]
   88050:	9307      	str	r3, [sp, #28]
   88052:	2200      	movs	r2, #0
   88054:	2300      	movs	r3, #0
   88056:	980c      	ldr	r0, [sp, #48]	; 0x30
   88058:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8805a:	f005 fc25 	bl	8d8a8 <__aeabi_dcmpeq>
   8805e:	2800      	cmp	r0, #0
   88060:	f000 8398 	beq.w	88794 <_svfprintf_r+0x1578>
   88064:	4623      	mov	r3, r4
   88066:	1bdb      	subs	r3, r3, r7
   88068:	9313      	str	r3, [sp, #76]	; 0x4c
   8806a:	9b08      	ldr	r3, [sp, #32]
   8806c:	2b47      	cmp	r3, #71	; 0x47
   8806e:	f000 835e 	beq.w	8872e <_svfprintf_r+0x1512>
   88072:	9b08      	ldr	r3, [sp, #32]
   88074:	2b46      	cmp	r3, #70	; 0x46
   88076:	f000 840b 	beq.w	88890 <_svfprintf_r+0x1674>
   8807a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8807c:	9310      	str	r3, [sp, #64]	; 0x40
   8807e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88080:	9a08      	ldr	r2, [sp, #32]
   88082:	3b01      	subs	r3, #1
   88084:	2a41      	cmp	r2, #65	; 0x41
   88086:	9324      	str	r3, [sp, #144]	; 0x90
   88088:	f000 85ad 	beq.w	88be6 <_svfprintf_r+0x19ca>
   8808c:	2100      	movs	r1, #0
   8808e:	b2f2      	uxtb	r2, r6
   88090:	2b00      	cmp	r3, #0
   88092:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   88096:	bfb6      	itet	lt
   88098:	222d      	movlt	r2, #45	; 0x2d
   8809a:	222b      	movge	r2, #43	; 0x2b
   8809c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8809e:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   880a2:	bfb8      	it	lt
   880a4:	f1c3 0301 	rsblt	r3, r3, #1
   880a8:	2b09      	cmp	r3, #9
   880aa:	f340 85a2 	ble.w	88bf2 <_svfprintf_r+0x19d6>
   880ae:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   880b2:	4672      	mov	r2, lr
   880b4:	469c      	mov	ip, r3
   880b6:	4cbf      	ldr	r4, [pc, #764]	; (883b4 <_svfprintf_r+0x1198>)
   880b8:	4660      	mov	r0, ip
   880ba:	4611      	mov	r1, r2
   880bc:	fb84 230c 	smull	r2, r3, r4, ip
   880c0:	ea4f 72ec 	mov.w	r2, ip, asr #31
   880c4:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   880c8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   880cc:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   880d0:	3330      	adds	r3, #48	; 0x30
   880d2:	2863      	cmp	r0, #99	; 0x63
   880d4:	4694      	mov	ip, r2
   880d6:	f801 3c01 	strb.w	r3, [r1, #-1]
   880da:	f101 32ff 	add.w	r2, r1, #4294967295
   880de:	dceb      	bgt.n	880b8 <_svfprintf_r+0xe9c>
   880e0:	4663      	mov	r3, ip
   880e2:	3330      	adds	r3, #48	; 0x30
   880e4:	b2d8      	uxtb	r0, r3
   880e6:	1e8b      	subs	r3, r1, #2
   880e8:	459e      	cmp	lr, r3
   880ea:	f802 0c01 	strb.w	r0, [r2, #-1]
   880ee:	f240 862c 	bls.w	88d4a <_svfprintf_r+0x1b2e>
   880f2:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   880f6:	e001      	b.n	880fc <_svfprintf_r+0xee0>
   880f8:	f812 0b01 	ldrb.w	r0, [r2], #1
   880fc:	4596      	cmp	lr, r2
   880fe:	f803 0b01 	strb.w	r0, [r3], #1
   88102:	d1f9      	bne.n	880f8 <_svfprintf_r+0xedc>
   88104:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   88108:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8810c:	1a5b      	subs	r3, r3, r1
   8810e:	4413      	add	r3, r2
   88110:	aa26      	add	r2, sp, #152	; 0x98
   88112:	1a9b      	subs	r3, r3, r2
   88114:	931b      	str	r3, [sp, #108]	; 0x6c
   88116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88118:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8811a:	2b01      	cmp	r3, #1
   8811c:	441a      	add	r2, r3
   8811e:	920c      	str	r2, [sp, #48]	; 0x30
   88120:	f340 85cc 	ble.w	88cbc <_svfprintf_r+0x1aa0>
   88124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88126:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88128:	4413      	add	r3, r2
   8812a:	930c      	str	r3, [sp, #48]	; 0x30
   8812c:	2300      	movs	r3, #0
   8812e:	9312      	str	r3, [sp, #72]	; 0x48
   88130:	9316      	str	r3, [sp, #88]	; 0x58
   88132:	9310      	str	r3, [sp, #64]	; 0x40
   88134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88136:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   8813a:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   8813e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88142:	9207      	str	r2, [sp, #28]
   88144:	9308      	str	r3, [sp, #32]
   88146:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88148:	2b00      	cmp	r3, #0
   8814a:	f040 8317 	bne.w	8877c <_svfprintf_r+0x1560>
   8814e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88152:	9309      	str	r3, [sp, #36]	; 0x24
   88154:	f7ff ba86 	b.w	87664 <_svfprintf_r+0x448>
   88158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8815a:	2301      	movs	r3, #1
   8815c:	f852 4b04 	ldr.w	r4, [r2], #4
   88160:	2500      	movs	r5, #0
   88162:	920e      	str	r2, [sp, #56]	; 0x38
   88164:	f7ff b96b 	b.w	8743e <_svfprintf_r+0x222>
   88168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8816a:	f853 4b04 	ldr.w	r4, [r3], #4
   8816e:	17e5      	asrs	r5, r4, #31
   88170:	930e      	str	r3, [sp, #56]	; 0x38
   88172:	4622      	mov	r2, r4
   88174:	462b      	mov	r3, r5
   88176:	f7ff b933 	b.w	873e0 <_svfprintf_r+0x1c4>
   8817a:	9b07      	ldr	r3, [sp, #28]
   8817c:	9308      	str	r3, [sp, #32]
   8817e:	f7ff bae0 	b.w	87742 <_svfprintf_r+0x526>
   88182:	4b8d      	ldr	r3, [pc, #564]	; (883b8 <_svfprintf_r+0x119c>)
   88184:	9319      	str	r3, [sp, #100]	; 0x64
   88186:	9b07      	ldr	r3, [sp, #28]
   88188:	0699      	lsls	r1, r3, #26
   8818a:	f140 80fe 	bpl.w	8838a <_svfprintf_r+0x116e>
   8818e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88190:	3307      	adds	r3, #7
   88192:	f023 0307 	bic.w	r3, r3, #7
   88196:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8819a:	930e      	str	r3, [sp, #56]	; 0x38
   8819c:	9a07      	ldr	r2, [sp, #28]
   8819e:	07d7      	lsls	r7, r2, #31
   881a0:	d50a      	bpl.n	881b8 <_svfprintf_r+0xf9c>
   881a2:	ea54 0305 	orrs.w	r3, r4, r5
   881a6:	d007      	beq.n	881b8 <_svfprintf_r+0xf9c>
   881a8:	2330      	movs	r3, #48	; 0x30
   881aa:	f042 0202 	orr.w	r2, r2, #2
   881ae:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   881b2:	9207      	str	r2, [sp, #28]
   881b4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   881b8:	9a07      	ldr	r2, [sp, #28]
   881ba:	2302      	movs	r3, #2
   881bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   881c0:	9208      	str	r2, [sp, #32]
   881c2:	f7ff b93c 	b.w	8743e <_svfprintf_r+0x222>
   881c6:	4b7d      	ldr	r3, [pc, #500]	; (883bc <_svfprintf_r+0x11a0>)
   881c8:	9319      	str	r3, [sp, #100]	; 0x64
   881ca:	e7dc      	b.n	88186 <_svfprintf_r+0xf6a>
   881cc:	f043 0320 	orr.w	r3, r3, #32
   881d0:	f89b 6001 	ldrb.w	r6, [fp, #1]
   881d4:	9307      	str	r3, [sp, #28]
   881d6:	f10b 0b01 	add.w	fp, fp, #1
   881da:	f7ff b86a 	b.w	872b2 <_svfprintf_r+0x96>
   881de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   881e2:	f89b 6001 	ldrb.w	r6, [fp, #1]
   881e6:	9307      	str	r3, [sp, #28]
   881e8:	f10b 0b01 	add.w	fp, fp, #1
   881ec:	f7ff b861 	b.w	872b2 <_svfprintf_r+0x96>
   881f0:	4651      	mov	r1, sl
   881f2:	4648      	mov	r0, r9
   881f4:	aa2a      	add	r2, sp, #168	; 0xa8
   881f6:	f004 fc55 	bl	8caa4 <__ssprint_r>
   881fa:	2800      	cmp	r0, #0
   881fc:	f47f ac56 	bne.w	87aac <_svfprintf_r+0x890>
   88200:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88202:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88206:	f7ff bbad 	b.w	87964 <_svfprintf_r+0x748>
   8820a:	2140      	movs	r1, #64	; 0x40
   8820c:	4648      	mov	r0, r9
   8820e:	f003 fa71 	bl	8b6f4 <_malloc_r>
   88212:	f8cb 0000 	str.w	r0, [fp]
   88216:	f8cb 0010 	str.w	r0, [fp, #16]
   8821a:	2800      	cmp	r0, #0
   8821c:	f000 858d 	beq.w	88d3a <_svfprintf_r+0x1b1e>
   88220:	2340      	movs	r3, #64	; 0x40
   88222:	f8cb 3014 	str.w	r3, [fp, #20]
   88226:	f7ff b811 	b.w	8724c <_svfprintf_r+0x30>
   8822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8822c:	463a      	mov	r2, r7
   8822e:	2b06      	cmp	r3, #6
   88230:	bf28      	it	cs
   88232:	2306      	movcs	r3, #6
   88234:	9709      	str	r7, [sp, #36]	; 0x24
   88236:	9712      	str	r7, [sp, #72]	; 0x48
   88238:	9716      	str	r7, [sp, #88]	; 0x58
   8823a:	9710      	str	r7, [sp, #64]	; 0x40
   8823c:	970d      	str	r7, [sp, #52]	; 0x34
   8823e:	9308      	str	r3, [sp, #32]
   88240:	4f5f      	ldr	r7, [pc, #380]	; (883c0 <_svfprintf_r+0x11a4>)
   88242:	940e      	str	r4, [sp, #56]	; 0x38
   88244:	930c      	str	r3, [sp, #48]	; 0x30
   88246:	f7ff ba0d 	b.w	87664 <_svfprintf_r+0x448>
   8824a:	2b10      	cmp	r3, #16
   8824c:	f340 8558 	ble.w	88d00 <_svfprintf_r+0x1ae4>
   88250:	4651      	mov	r1, sl
   88252:	4a5c      	ldr	r2, [pc, #368]	; (883c4 <_svfprintf_r+0x11a8>)
   88254:	46ca      	mov	sl, r9
   88256:	9709      	str	r7, [sp, #36]	; 0x24
   88258:	2610      	movs	r6, #16
   8825a:	4617      	mov	r7, r2
   8825c:	4689      	mov	r9, r1
   8825e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88260:	920f      	str	r2, [sp, #60]	; 0x3c
   88262:	e005      	b.n	88270 <_svfprintf_r+0x1054>
   88264:	f108 0808 	add.w	r8, r8, #8
   88268:	3d10      	subs	r5, #16
   8826a:	2d10      	cmp	r5, #16
   8826c:	f340 81fa 	ble.w	88664 <_svfprintf_r+0x1448>
   88270:	3301      	adds	r3, #1
   88272:	3410      	adds	r4, #16
   88274:	2b07      	cmp	r3, #7
   88276:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8827a:	e9c8 7600 	strd	r7, r6, [r8]
   8827e:	ddf1      	ble.n	88264 <_svfprintf_r+0x1048>
   88280:	4649      	mov	r1, r9
   88282:	4650      	mov	r0, sl
   88284:	aa2a      	add	r2, sp, #168	; 0xa8
   88286:	f004 fc0d 	bl	8caa4 <__ssprint_r>
   8828a:	2800      	cmp	r0, #0
   8828c:	f040 83fd 	bne.w	88a8a <_svfprintf_r+0x186e>
   88290:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88294:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88298:	e7e6      	b.n	88268 <_svfprintf_r+0x104c>
   8829a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8829c:	4642      	mov	r2, r8
   8829e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   882a2:	18fb      	adds	r3, r7, r3
   882a4:	9309      	str	r3, [sp, #36]	; 0x24
   882a6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   882aa:	970f      	str	r7, [sp, #60]	; 0x3c
   882ac:	4620      	mov	r0, r4
   882ae:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   882b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   882b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   882b6:	f1b8 0f00 	cmp.w	r8, #0
   882ba:	d02d      	beq.n	88318 <_svfprintf_r+0x10fc>
   882bc:	bb7b      	cbnz	r3, 8831e <_svfprintf_r+0x1102>
   882be:	3f01      	subs	r7, #1
   882c0:	f108 38ff 	add.w	r8, r8, #4294967295
   882c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882c6:	991c      	ldr	r1, [sp, #112]	; 0x70
   882c8:	3301      	adds	r3, #1
   882ca:	4458      	add	r0, fp
   882cc:	2b07      	cmp	r3, #7
   882ce:	e9c2 1b00 	strd	r1, fp, [r2]
   882d2:	902c      	str	r0, [sp, #176]	; 0xb0
   882d4:	932b      	str	r3, [sp, #172]	; 0xac
   882d6:	dc62      	bgt.n	8839e <_svfprintf_r+0x1182>
   882d8:	3208      	adds	r2, #8
   882da:	9909      	ldr	r1, [sp, #36]	; 0x24
   882dc:	783b      	ldrb	r3, [r7, #0]
   882de:	1b8d      	subs	r5, r1, r6
   882e0:	429d      	cmp	r5, r3
   882e2:	bfa8      	it	ge
   882e4:	461d      	movge	r5, r3
   882e6:	2d00      	cmp	r5, #0
   882e8:	dd0b      	ble.n	88302 <_svfprintf_r+0x10e6>
   882ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882ec:	4428      	add	r0, r5
   882ee:	3301      	adds	r3, #1
   882f0:	2b07      	cmp	r3, #7
   882f2:	e9c2 6500 	strd	r6, r5, [r2]
   882f6:	902c      	str	r0, [sp, #176]	; 0xb0
   882f8:	932b      	str	r3, [sp, #172]	; 0xac
   882fa:	f300 8111 	bgt.w	88520 <_svfprintf_r+0x1304>
   882fe:	783b      	ldrb	r3, [r7, #0]
   88300:	3208      	adds	r2, #8
   88302:	2d00      	cmp	r5, #0
   88304:	bfb4      	ite	lt
   88306:	461d      	movlt	r5, r3
   88308:	1b5d      	subge	r5, r3, r5
   8830a:	2d00      	cmp	r5, #0
   8830c:	dc0b      	bgt.n	88326 <_svfprintf_r+0x110a>
   8830e:	441e      	add	r6, r3
   88310:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88312:	f1b8 0f00 	cmp.w	r8, #0
   88316:	d1d1      	bne.n	882bc <_svfprintf_r+0x10a0>
   88318:	2b00      	cmp	r3, #0
   8831a:	f000 81f9 	beq.w	88710 <_svfprintf_r+0x14f4>
   8831e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88320:	3b01      	subs	r3, #1
   88322:	9312      	str	r3, [sp, #72]	; 0x48
   88324:	e7ce      	b.n	882c4 <_svfprintf_r+0x10a8>
   88326:	2d10      	cmp	r5, #16
   88328:	f340 84c5 	ble.w	88cb6 <_svfprintf_r+0x1a9a>
   8832c:	992b      	ldr	r1, [sp, #172]	; 0xac
   8832e:	2410      	movs	r4, #16
   88330:	460b      	mov	r3, r1
   88332:	e004      	b.n	8833e <_svfprintf_r+0x1122>
   88334:	3d10      	subs	r5, #16
   88336:	2d10      	cmp	r5, #16
   88338:	f102 0208 	add.w	r2, r2, #8
   8833c:	dd16      	ble.n	8836c <_svfprintf_r+0x1150>
   8833e:	3301      	adds	r3, #1
   88340:	4920      	ldr	r1, [pc, #128]	; (883c4 <_svfprintf_r+0x11a8>)
   88342:	3010      	adds	r0, #16
   88344:	2b07      	cmp	r3, #7
   88346:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8834a:	e9c2 1400 	strd	r1, r4, [r2]
   8834e:	ddf1      	ble.n	88334 <_svfprintf_r+0x1118>
   88350:	4651      	mov	r1, sl
   88352:	4648      	mov	r0, r9
   88354:	aa2a      	add	r2, sp, #168	; 0xa8
   88356:	f004 fba5 	bl	8caa4 <__ssprint_r>
   8835a:	2800      	cmp	r0, #0
   8835c:	f47f aba6 	bne.w	87aac <_svfprintf_r+0x890>
   88360:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   88364:	3d10      	subs	r5, #16
   88366:	2d10      	cmp	r5, #16
   88368:	aa2d      	add	r2, sp, #180	; 0xb4
   8836a:	dce8      	bgt.n	8833e <_svfprintf_r+0x1122>
   8836c:	4619      	mov	r1, r3
   8836e:	1c4b      	adds	r3, r1, #1
   88370:	4914      	ldr	r1, [pc, #80]	; (883c4 <_svfprintf_r+0x11a8>)
   88372:	4428      	add	r0, r5
   88374:	2b07      	cmp	r3, #7
   88376:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8837a:	e9c2 1500 	strd	r1, r5, [r2]
   8837e:	f300 8215 	bgt.w	887ac <_svfprintf_r+0x1590>
   88382:	783b      	ldrb	r3, [r7, #0]
   88384:	3208      	adds	r2, #8
   88386:	441e      	add	r6, r3
   88388:	e7c2      	b.n	88310 <_svfprintf_r+0x10f4>
   8838a:	9b07      	ldr	r3, [sp, #28]
   8838c:	06da      	lsls	r2, r3, #27
   8838e:	f140 8084 	bpl.w	8849a <_svfprintf_r+0x127e>
   88392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88394:	2500      	movs	r5, #0
   88396:	f853 4b04 	ldr.w	r4, [r3], #4
   8839a:	930e      	str	r3, [sp, #56]	; 0x38
   8839c:	e6fe      	b.n	8819c <_svfprintf_r+0xf80>
   8839e:	4651      	mov	r1, sl
   883a0:	4648      	mov	r0, r9
   883a2:	aa2a      	add	r2, sp, #168	; 0xa8
   883a4:	f004 fb7e 	bl	8caa4 <__ssprint_r>
   883a8:	2800      	cmp	r0, #0
   883aa:	f47f ab7f 	bne.w	87aac <_svfprintf_r+0x890>
   883ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
   883b0:	aa2d      	add	r2, sp, #180	; 0xb4
   883b2:	e792      	b.n	882da <_svfprintf_r+0x10be>
   883b4:	66666667 	.word	0x66666667
   883b8:	0008da2c 	.word	0x0008da2c
   883bc:	0008da40 	.word	0x0008da40
   883c0:	0008da54 	.word	0x0008da54
   883c4:	0008da70 	.word	0x0008da70
   883c8:	2200      	movs	r2, #0
   883ca:	9b08      	ldr	r3, [sp, #32]
   883cc:	f8cd b01c 	str.w	fp, [sp, #28]
   883d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   883d4:	960c      	str	r6, [sp, #48]	; 0x30
   883d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   883da:	4693      	mov	fp, r2
   883dc:	46ca      	mov	sl, r9
   883de:	461e      	mov	r6, r3
   883e0:	46c1      	mov	r9, r8
   883e2:	af56      	add	r7, sp, #344	; 0x158
   883e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   883e8:	e00b      	b.n	88402 <_svfprintf_r+0x11e6>
   883ea:	220a      	movs	r2, #10
   883ec:	2300      	movs	r3, #0
   883ee:	4620      	mov	r0, r4
   883f0:	4629      	mov	r1, r5
   883f2:	f7fe fc77 	bl	86ce4 <__aeabi_uldivmod>
   883f6:	2d00      	cmp	r5, #0
   883f8:	bf08      	it	eq
   883fa:	2c0a      	cmpeq	r4, #10
   883fc:	d31b      	bcc.n	88436 <_svfprintf_r+0x121a>
   883fe:	4604      	mov	r4, r0
   88400:	460d      	mov	r5, r1
   88402:	220a      	movs	r2, #10
   88404:	2300      	movs	r3, #0
   88406:	4620      	mov	r0, r4
   88408:	4629      	mov	r1, r5
   8840a:	f7fe fc6b 	bl	86ce4 <__aeabi_uldivmod>
   8840e:	3230      	adds	r2, #48	; 0x30
   88410:	f807 2c01 	strb.w	r2, [r7, #-1]
   88414:	f10b 0b01 	add.w	fp, fp, #1
   88418:	3f01      	subs	r7, #1
   8841a:	2e00      	cmp	r6, #0
   8841c:	d0e5      	beq.n	883ea <_svfprintf_r+0x11ce>
   8841e:	f898 3000 	ldrb.w	r3, [r8]
   88422:	459b      	cmp	fp, r3
   88424:	d1e1      	bne.n	883ea <_svfprintf_r+0x11ce>
   88426:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   8842a:	d0de      	beq.n	883ea <_svfprintf_r+0x11ce>
   8842c:	2d00      	cmp	r5, #0
   8842e:	bf08      	it	eq
   88430:	2c0a      	cmpeq	r4, #10
   88432:	f080 8128 	bcs.w	88686 <_svfprintf_r+0x146a>
   88436:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   8843a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   8843e:	46c8      	mov	r8, r9
   88440:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88442:	46d1      	mov	r9, sl
   88444:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88448:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   8844c:	f7ff bb9f 	b.w	87b8e <_svfprintf_r+0x972>
   88450:	4651      	mov	r1, sl
   88452:	4648      	mov	r0, r9
   88454:	aa2a      	add	r2, sp, #168	; 0xa8
   88456:	931e      	str	r3, [sp, #120]	; 0x78
   88458:	f004 fb24 	bl	8caa4 <__ssprint_r>
   8845c:	2800      	cmp	r0, #0
   8845e:	f47f ab25 	bne.w	87aac <_svfprintf_r+0x890>
   88462:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88466:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88468:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8846a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8846e:	f7ff b84a 	b.w	87506 <_svfprintf_r+0x2ea>
   88472:	2001      	movs	r0, #1
   88474:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88476:	49c5      	ldr	r1, [pc, #788]	; (8878c <_svfprintf_r+0x1570>)
   88478:	4403      	add	r3, r0
   8847a:	4404      	add	r4, r0
   8847c:	2b07      	cmp	r3, #7
   8847e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88482:	e9c8 1000 	strd	r1, r0, [r8]
   88486:	f73f abdf 	bgt.w	87c48 <_svfprintf_r+0xa2c>
   8848a:	f108 0808 	add.w	r8, r8, #8
   8848e:	f7ff bbe7 	b.w	87c60 <_svfprintf_r+0xa44>
   88492:	46d1      	mov	r9, sl
   88494:	46b3      	mov	fp, r6
   88496:	f7ff bb0a 	b.w	87aae <_svfprintf_r+0x892>
   8849a:	9b07      	ldr	r3, [sp, #28]
   8849c:	065b      	lsls	r3, r3, #25
   8849e:	f140 80cb 	bpl.w	88638 <_svfprintf_r+0x141c>
   884a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   884a4:	2500      	movs	r5, #0
   884a6:	f853 4b04 	ldr.w	r4, [r3], #4
   884aa:	930e      	str	r3, [sp, #56]	; 0x38
   884ac:	b2a4      	uxth	r4, r4
   884ae:	e675      	b.n	8819c <_svfprintf_r+0xf80>
   884b0:	4651      	mov	r1, sl
   884b2:	4648      	mov	r0, r9
   884b4:	aa2a      	add	r2, sp, #168	; 0xa8
   884b6:	f004 faf5 	bl	8caa4 <__ssprint_r>
   884ba:	2800      	cmp	r0, #0
   884bc:	f47f aaf6 	bne.w	87aac <_svfprintf_r+0x890>
   884c0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   884c2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884c6:	f7ff ba3a 	b.w	8793e <_svfprintf_r+0x722>
   884ca:	46d1      	mov	r9, sl
   884cc:	46da      	mov	sl, fp
   884ce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   884d2:	3501      	adds	r5, #1
   884d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   884d6:	4434      	add	r4, r6
   884d8:	2d07      	cmp	r5, #7
   884da:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   884de:	e9c8 3600 	strd	r3, r6, [r8]
   884e2:	f77f ab24 	ble.w	87b2e <_svfprintf_r+0x912>
   884e6:	4651      	mov	r1, sl
   884e8:	4648      	mov	r0, r9
   884ea:	aa2a      	add	r2, sp, #168	; 0xa8
   884ec:	f004 fada 	bl	8caa4 <__ssprint_r>
   884f0:	2800      	cmp	r0, #0
   884f2:	f47f aadb 	bne.w	87aac <_svfprintf_r+0x890>
   884f6:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   884fa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884fe:	f7ff bb18 	b.w	87b32 <_svfprintf_r+0x916>
   88502:	4aa3      	ldr	r2, [pc, #652]	; (88790 <_svfprintf_r+0x1574>)
   88504:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88506:	920f      	str	r2, [sp, #60]	; 0x3c
   88508:	3301      	adds	r3, #1
   8850a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8850c:	442c      	add	r4, r5
   8850e:	2b07      	cmp	r3, #7
   88510:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88514:	e9c8 2500 	strd	r2, r5, [r8]
   88518:	f77f a82d 	ble.w	87576 <_svfprintf_r+0x35a>
   8851c:	f7ff bbc2 	b.w	87ca4 <_svfprintf_r+0xa88>
   88520:	4651      	mov	r1, sl
   88522:	4648      	mov	r0, r9
   88524:	aa2a      	add	r2, sp, #168	; 0xa8
   88526:	f004 fabd 	bl	8caa4 <__ssprint_r>
   8852a:	2800      	cmp	r0, #0
   8852c:	f47f aabe 	bne.w	87aac <_svfprintf_r+0x890>
   88530:	783b      	ldrb	r3, [r7, #0]
   88532:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88534:	aa2d      	add	r2, sp, #180	; 0xb4
   88536:	e6e4      	b.n	88302 <_svfprintf_r+0x10e6>
   88538:	4651      	mov	r1, sl
   8853a:	4648      	mov	r0, r9
   8853c:	aa2a      	add	r2, sp, #168	; 0xa8
   8853e:	f004 fab1 	bl	8caa4 <__ssprint_r>
   88542:	2800      	cmp	r0, #0
   88544:	f47f aab2 	bne.w	87aac <_svfprintf_r+0x890>
   88548:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8854a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8854e:	f7fe bffd 	b.w	8754c <_svfprintf_r+0x330>
   88552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88554:	990a      	ldr	r1, [sp, #40]	; 0x28
   88556:	f853 2b04 	ldr.w	r2, [r3], #4
   8855a:	465f      	mov	r7, fp
   8855c:	6011      	str	r1, [r2, #0]
   8855e:	930e      	str	r3, [sp, #56]	; 0x38
   88560:	f7ff b82a 	b.w	875b8 <_svfprintf_r+0x39c>
   88564:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88566:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88568:	3301      	adds	r3, #1
   8856a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8856c:	440c      	add	r4, r1
   8856e:	2b07      	cmp	r3, #7
   88570:	e9c8 0100 	strd	r0, r1, [r8]
   88574:	942c      	str	r4, [sp, #176]	; 0xb0
   88576:	932b      	str	r3, [sp, #172]	; 0xac
   88578:	f300 80ac 	bgt.w	886d4 <_svfprintf_r+0x14b8>
   8857c:	f108 0808 	add.w	r8, r8, #8
   88580:	2a00      	cmp	r2, #0
   88582:	f6bf ab85 	bge.w	87c90 <_svfprintf_r+0xa74>
   88586:	4255      	negs	r5, r2
   88588:	3210      	adds	r2, #16
   8858a:	f280 83d3 	bge.w	88d34 <_svfprintf_r+0x1b18>
   8858e:	4651      	mov	r1, sl
   88590:	4a7f      	ldr	r2, [pc, #508]	; (88790 <_svfprintf_r+0x1574>)
   88592:	46ca      	mov	sl, r9
   88594:	9709      	str	r7, [sp, #36]	; 0x24
   88596:	2610      	movs	r6, #16
   88598:	4617      	mov	r7, r2
   8859a:	4689      	mov	r9, r1
   8859c:	920f      	str	r2, [sp, #60]	; 0x3c
   8859e:	e005      	b.n	885ac <_svfprintf_r+0x1390>
   885a0:	f108 0808 	add.w	r8, r8, #8
   885a4:	3d10      	subs	r5, #16
   885a6:	2d10      	cmp	r5, #16
   885a8:	f340 82aa 	ble.w	88b00 <_svfprintf_r+0x18e4>
   885ac:	3301      	adds	r3, #1
   885ae:	3410      	adds	r4, #16
   885b0:	2b07      	cmp	r3, #7
   885b2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   885b6:	e9c8 7600 	strd	r7, r6, [r8]
   885ba:	ddf1      	ble.n	885a0 <_svfprintf_r+0x1384>
   885bc:	4649      	mov	r1, r9
   885be:	4650      	mov	r0, sl
   885c0:	aa2a      	add	r2, sp, #168	; 0xa8
   885c2:	f004 fa6f 	bl	8caa4 <__ssprint_r>
   885c6:	2800      	cmp	r0, #0
   885c8:	f040 825f 	bne.w	88a8a <_svfprintf_r+0x186e>
   885cc:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   885d0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   885d4:	e7e6      	b.n	885a4 <_svfprintf_r+0x1388>
   885d6:	4638      	mov	r0, r7
   885d8:	f004 fa02 	bl	8c9e0 <strlen>
   885dc:	462b      	mov	r3, r5
   885de:	4602      	mov	r2, r0
   885e0:	9509      	str	r5, [sp, #36]	; 0x24
   885e2:	f7ff b894 	b.w	8770e <_svfprintf_r+0x4f2>
   885e6:	9b07      	ldr	r3, [sp, #28]
   885e8:	2500      	movs	r5, #0
   885ea:	f413 7f00 	tst.w	r3, #512	; 0x200
   885ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   885f0:	f853 4b04 	ldr.w	r4, [r3], #4
   885f4:	930e      	str	r3, [sp, #56]	; 0x38
   885f6:	bf18      	it	ne
   885f8:	b2e4      	uxtbne	r4, r4
   885fa:	f7fe bf1b 	b.w	87434 <_svfprintf_r+0x218>
   885fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88600:	9b08      	ldr	r3, [sp, #32]
   88602:	f852 4b04 	ldr.w	r4, [r2], #4
   88606:	f413 7f00 	tst.w	r3, #512	; 0x200
   8860a:	f04f 0500 	mov.w	r5, #0
   8860e:	f04f 0301 	mov.w	r3, #1
   88612:	920e      	str	r2, [sp, #56]	; 0x38
   88614:	bf18      	it	ne
   88616:	b2e4      	uxtbne	r4, r4
   88618:	f7fe bf11 	b.w	8743e <_svfprintf_r+0x222>
   8861c:	9b07      	ldr	r3, [sp, #28]
   8861e:	f413 7f00 	tst.w	r3, #512	; 0x200
   88622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88624:	f853 4b04 	ldr.w	r4, [r3], #4
   88628:	bf18      	it	ne
   8862a:	b264      	sxtbne	r4, r4
   8862c:	17e5      	asrs	r5, r4, #31
   8862e:	930e      	str	r3, [sp, #56]	; 0x38
   88630:	4622      	mov	r2, r4
   88632:	462b      	mov	r3, r5
   88634:	f7fe bed4 	b.w	873e0 <_svfprintf_r+0x1c4>
   88638:	9b07      	ldr	r3, [sp, #28]
   8863a:	2500      	movs	r5, #0
   8863c:	f413 7f00 	tst.w	r3, #512	; 0x200
   88640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88642:	f853 4b04 	ldr.w	r4, [r3], #4
   88646:	930e      	str	r3, [sp, #56]	; 0x38
   88648:	bf18      	it	ne
   8864a:	b2e4      	uxtbne	r4, r4
   8864c:	e5a6      	b.n	8819c <_svfprintf_r+0xf80>
   8864e:	4b50      	ldr	r3, [pc, #320]	; (88790 <_svfprintf_r+0x1574>)
   88650:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88652:	930f      	str	r3, [sp, #60]	; 0x3c
   88654:	f7ff ba15 	b.w	87a82 <_svfprintf_r+0x866>
   88658:	232d      	movs	r3, #45	; 0x2d
   8865a:	461a      	mov	r2, r3
   8865c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88660:	f7fe bfee 	b.w	87640 <_svfprintf_r+0x424>
   88664:	464a      	mov	r2, r9
   88666:	46d1      	mov	r9, sl
   88668:	4692      	mov	sl, r2
   8866a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8866c:	3301      	adds	r3, #1
   8866e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88670:	442c      	add	r4, r5
   88672:	2b07      	cmp	r3, #7
   88674:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88678:	e9c8 2500 	strd	r2, r5, [r8]
   8867c:	dc3b      	bgt.n	886f6 <_svfprintf_r+0x14da>
   8867e:	f108 0808 	add.w	r8, r8, #8
   88682:	f7ff bb8c 	b.w	87d9e <_svfprintf_r+0xb82>
   88686:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   88688:	991c      	ldr	r1, [sp, #112]	; 0x70
   8868a:	1aff      	subs	r7, r7, r3
   8868c:	461a      	mov	r2, r3
   8868e:	4638      	mov	r0, r7
   88690:	f004 f9d4 	bl	8ca3c <strncpy>
   88694:	f898 3001 	ldrb.w	r3, [r8, #1]
   88698:	b10b      	cbz	r3, 8869e <_svfprintf_r+0x1482>
   8869a:	f108 0801 	add.w	r8, r8, #1
   8869e:	220a      	movs	r2, #10
   886a0:	2300      	movs	r3, #0
   886a2:	4620      	mov	r0, r4
   886a4:	4629      	mov	r1, r5
   886a6:	f7fe fb1d 	bl	86ce4 <__aeabi_uldivmod>
   886aa:	f04f 0b00 	mov.w	fp, #0
   886ae:	e6a6      	b.n	883fe <_svfprintf_r+0x11e2>
   886b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886b2:	18bd      	adds	r5, r7, r2
   886b4:	1bad      	subs	r5, r5, r6
   886b6:	1ad3      	subs	r3, r2, r3
   886b8:	429d      	cmp	r5, r3
   886ba:	bfa8      	it	ge
   886bc:	461d      	movge	r5, r3
   886be:	f7ff bba0 	b.w	87e02 <_svfprintf_r+0xbe6>
   886c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   886c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   886c6:	f853 2b04 	ldr.w	r2, [r3], #4
   886ca:	465f      	mov	r7, fp
   886cc:	8011      	strh	r1, [r2, #0]
   886ce:	930e      	str	r3, [sp, #56]	; 0x38
   886d0:	f7fe bf72 	b.w	875b8 <_svfprintf_r+0x39c>
   886d4:	4651      	mov	r1, sl
   886d6:	4648      	mov	r0, r9
   886d8:	aa2a      	add	r2, sp, #168	; 0xa8
   886da:	f004 f9e3 	bl	8caa4 <__ssprint_r>
   886de:	2800      	cmp	r0, #0
   886e0:	f47f a9e4 	bne.w	87aac <_svfprintf_r+0x890>
   886e4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   886e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   886ea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886ee:	e747      	b.n	88580 <_svfprintf_r+0x1364>
   886f0:	2306      	movs	r3, #6
   886f2:	9309      	str	r3, [sp, #36]	; 0x24
   886f4:	e482      	b.n	87ffc <_svfprintf_r+0xde0>
   886f6:	4651      	mov	r1, sl
   886f8:	4648      	mov	r0, r9
   886fa:	aa2a      	add	r2, sp, #168	; 0xa8
   886fc:	f004 f9d2 	bl	8caa4 <__ssprint_r>
   88700:	2800      	cmp	r0, #0
   88702:	f47f a9d3 	bne.w	87aac <_svfprintf_r+0x890>
   88706:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88708:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8870c:	f7ff bb47 	b.w	87d9e <_svfprintf_r+0xb82>
   88710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88712:	971a      	str	r7, [sp, #104]	; 0x68
   88714:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   88716:	4690      	mov	r8, r2
   88718:	18fb      	adds	r3, r7, r3
   8871a:	429e      	cmp	r6, r3
   8871c:	4632      	mov	r2, r6
   8871e:	bf28      	it	cs
   88720:	461a      	movcs	r2, r3
   88722:	4604      	mov	r4, r0
   88724:	4616      	mov	r6, r2
   88726:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8872a:	f7ff bb3f 	b.w	87dac <_svfprintf_r+0xb90>
   8872e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88730:	1cd8      	adds	r0, r3, #3
   88732:	9310      	str	r3, [sp, #64]	; 0x40
   88734:	db02      	blt.n	8873c <_svfprintf_r+0x1520>
   88736:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88738:	4293      	cmp	r3, r2
   8873a:	dd04      	ble.n	88746 <_svfprintf_r+0x152a>
   8873c:	3e02      	subs	r6, #2
   8873e:	f026 0320 	bic.w	r3, r6, #32
   88742:	9308      	str	r3, [sp, #32]
   88744:	e49b      	b.n	8807e <_svfprintf_r+0xe62>
   88746:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88748:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8874a:	428b      	cmp	r3, r1
   8874c:	f2c0 817a 	blt.w	88a44 <_svfprintf_r+0x1828>
   88750:	07ea      	lsls	r2, r5, #31
   88752:	f140 8283 	bpl.w	88c5c <_svfprintf_r+0x1a40>
   88756:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88758:	4413      	add	r3, r2
   8875a:	930c      	str	r3, [sp, #48]	; 0x30
   8875c:	056e      	lsls	r6, r5, #21
   8875e:	f140 8277 	bpl.w	88c50 <_svfprintf_r+0x1a34>
   88762:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88764:	2b00      	cmp	r3, #0
   88766:	f300 8210 	bgt.w	88b8a <_svfprintf_r+0x196e>
   8876a:	2667      	movs	r6, #103	; 0x67
   8876c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8876e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88772:	9308      	str	r3, [sp, #32]
   88774:	2300      	movs	r3, #0
   88776:	9312      	str	r3, [sp, #72]	; 0x48
   88778:	9316      	str	r3, [sp, #88]	; 0x58
   8877a:	e4e4      	b.n	88146 <_svfprintf_r+0xf2a>
   8877c:	222d      	movs	r2, #45	; 0x2d
   8877e:	2300      	movs	r3, #0
   88780:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   88784:	9309      	str	r3, [sp, #36]	; 0x24
   88786:	f7fe bf70 	b.w	8766a <_svfprintf_r+0x44e>
   8878a:	bf00      	nop
   8878c:	0008da5c 	.word	0x0008da5c
   88790:	0008da70 	.word	0x0008da70
   88794:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88796:	42a3      	cmp	r3, r4
   88798:	f4bf ac65 	bcs.w	88066 <_svfprintf_r+0xe4a>
   8879c:	2130      	movs	r1, #48	; 0x30
   8879e:	1c5a      	adds	r2, r3, #1
   887a0:	9228      	str	r2, [sp, #160]	; 0xa0
   887a2:	7019      	strb	r1, [r3, #0]
   887a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887a6:	429c      	cmp	r4, r3
   887a8:	d8f9      	bhi.n	8879e <_svfprintf_r+0x1582>
   887aa:	e45c      	b.n	88066 <_svfprintf_r+0xe4a>
   887ac:	4651      	mov	r1, sl
   887ae:	4648      	mov	r0, r9
   887b0:	aa2a      	add	r2, sp, #168	; 0xa8
   887b2:	f004 f977 	bl	8caa4 <__ssprint_r>
   887b6:	2800      	cmp	r0, #0
   887b8:	f47f a978 	bne.w	87aac <_svfprintf_r+0x890>
   887bc:	783b      	ldrb	r3, [r7, #0]
   887be:	982c      	ldr	r0, [sp, #176]	; 0xb0
   887c0:	aa2d      	add	r2, sp, #180	; 0xb4
   887c2:	441e      	add	r6, r3
   887c4:	e5a4      	b.n	88310 <_svfprintf_r+0x10f4>
   887c6:	4651      	mov	r1, sl
   887c8:	4648      	mov	r0, r9
   887ca:	aa2a      	add	r2, sp, #168	; 0xa8
   887cc:	f004 f96a 	bl	8caa4 <__ssprint_r>
   887d0:	2800      	cmp	r0, #0
   887d2:	f47f a96b 	bne.w	87aac <_svfprintf_r+0x890>
   887d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   887d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   887dc:	f7ff bad7 	b.w	87d8e <_svfprintf_r+0xb72>
   887e0:	4651      	mov	r1, sl
   887e2:	4648      	mov	r0, r9
   887e4:	aa2a      	add	r2, sp, #168	; 0xa8
   887e6:	f004 f95d 	bl	8caa4 <__ssprint_r>
   887ea:	2800      	cmp	r0, #0
   887ec:	f47f a95e 	bne.w	87aac <_svfprintf_r+0x890>
   887f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   887f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   887f4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   887f8:	f7ff baee 	b.w	87dd8 <_svfprintf_r+0xbbc>
   887fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   887fe:	a928      	add	r1, sp, #160	; 0xa0
   88800:	e9cd 0400 	strd	r0, r4, [sp]
   88804:	9104      	str	r1, [sp, #16]
   88806:	a825      	add	r0, sp, #148	; 0x94
   88808:	a924      	add	r1, sp, #144	; 0x90
   8880a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8880e:	4648      	mov	r0, r9
   88810:	f001 faca 	bl	89da8 <_dtoa_r>
   88814:	2d47      	cmp	r5, #71	; 0x47
   88816:	4607      	mov	r7, r0
   88818:	d119      	bne.n	8884e <_svfprintf_r+0x1632>
   8881a:	9d07      	ldr	r5, [sp, #28]
   8881c:	462b      	mov	r3, r5
   8881e:	07db      	lsls	r3, r3, #31
   88820:	f100 812a 	bmi.w	88a78 <_svfprintf_r+0x185c>
   88824:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88828:	9207      	str	r2, [sp, #28]
   8882a:	2247      	movs	r2, #71	; 0x47
   8882c:	9208      	str	r2, [sp, #32]
   8882e:	e41a      	b.n	88066 <_svfprintf_r+0xe4a>
   88830:	2003      	movs	r0, #3
   88832:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88834:	a928      	add	r1, sp, #160	; 0xa0
   88836:	e9cd 0400 	strd	r0, r4, [sp]
   8883a:	9104      	str	r1, [sp, #16]
   8883c:	a825      	add	r0, sp, #148	; 0x94
   8883e:	a924      	add	r1, sp, #144	; 0x90
   88840:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88846:	4648      	mov	r0, r9
   88848:	f001 faae 	bl	89da8 <_dtoa_r>
   8884c:	4607      	mov	r7, r0
   8884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88850:	2d46      	cmp	r5, #70	; 0x46
   88852:	eb07 0403 	add.w	r4, r7, r3
   88856:	f47f abf9 	bne.w	8804c <_svfprintf_r+0xe30>
   8885a:	783b      	ldrb	r3, [r7, #0]
   8885c:	2b30      	cmp	r3, #48	; 0x30
   8885e:	f000 821c 	beq.w	88c9a <_svfprintf_r+0x1a7e>
   88862:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88864:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88866:	9d07      	ldr	r5, [sp, #28]
   88868:	441c      	add	r4, r3
   8886a:	9207      	str	r2, [sp, #28]
   8886c:	f7ff bbf1 	b.w	88052 <_svfprintf_r+0xe36>
   88870:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88874:	f7ff b9c3 	b.w	87bfe <_svfprintf_r+0x9e2>
   88878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8887a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8887e:	9308      	str	r3, [sp, #32]
   88880:	930c      	str	r3, [sp, #48]	; 0x30
   88882:	9009      	str	r0, [sp, #36]	; 0x24
   88884:	940e      	str	r4, [sp, #56]	; 0x38
   88886:	9012      	str	r0, [sp, #72]	; 0x48
   88888:	9016      	str	r0, [sp, #88]	; 0x58
   8888a:	9010      	str	r0, [sp, #64]	; 0x40
   8888c:	f7fe beea 	b.w	87664 <_svfprintf_r+0x448>
   88890:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88892:	2a00      	cmp	r2, #0
   88894:	9210      	str	r2, [sp, #64]	; 0x40
   88896:	f340 821b 	ble.w	88cd0 <_svfprintf_r+0x1ab4>
   8889a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8889c:	f005 0301 	and.w	r3, r5, #1
   888a0:	430b      	orrs	r3, r1
   888a2:	f040 819a 	bne.w	88bda <_svfprintf_r+0x19be>
   888a6:	2666      	movs	r6, #102	; 0x66
   888a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   888aa:	930c      	str	r3, [sp, #48]	; 0x30
   888ac:	056a      	lsls	r2, r5, #21
   888ae:	f100 816d 	bmi.w	88b8c <_svfprintf_r+0x1970>
   888b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   888b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   888b8:	9308      	str	r3, [sp, #32]
   888ba:	e75b      	b.n	88774 <_svfprintf_r+0x1558>
   888bc:	4651      	mov	r1, sl
   888be:	4648      	mov	r0, r9
   888c0:	aa2a      	add	r2, sp, #168	; 0xa8
   888c2:	f004 f8ef 	bl	8caa4 <__ssprint_r>
   888c6:	2800      	cmp	r0, #0
   888c8:	f47f a8f0 	bne.w	87aac <_svfprintf_r+0x890>
   888cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   888ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   888d0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   888d2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   888d6:	1ad3      	subs	r3, r2, r3
   888d8:	f7ff ba93 	b.w	87e02 <_svfprintf_r+0xbe6>
   888dc:	2330      	movs	r3, #48	; 0x30
   888de:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   888e2:	2358      	movs	r3, #88	; 0x58
   888e4:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   888e8:	9b07      	ldr	r3, [sp, #28]
   888ea:	f043 0402 	orr.w	r4, r3, #2
   888ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888f0:	2b63      	cmp	r3, #99	; 0x63
   888f2:	f300 80f2 	bgt.w	88ada <_svfprintf_r+0x18be>
   888f6:	2300      	movs	r3, #0
   888f8:	af3d      	add	r7, sp, #244	; 0xf4
   888fa:	930d      	str	r3, [sp, #52]	; 0x34
   888fc:	9b07      	ldr	r3, [sp, #28]
   888fe:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88902:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   88906:	9312      	str	r3, [sp, #72]	; 0x48
   88908:	4613      	mov	r3, r2
   8890a:	2b00      	cmp	r3, #0
   8890c:	f026 0520 	bic.w	r5, r6, #32
   88910:	9407      	str	r4, [sp, #28]
   88912:	f2c0 808d 	blt.w	88a30 <_svfprintf_r+0x1814>
   88916:	930f      	str	r3, [sp, #60]	; 0x3c
   88918:	2300      	movs	r3, #0
   8891a:	9508      	str	r5, [sp, #32]
   8891c:	910c      	str	r1, [sp, #48]	; 0x30
   8891e:	931e      	str	r3, [sp, #120]	; 0x78
   88920:	2e61      	cmp	r6, #97	; 0x61
   88922:	f000 817d 	beq.w	88c20 <_svfprintf_r+0x1a04>
   88926:	2e41      	cmp	r6, #65	; 0x41
   88928:	f47f ab77 	bne.w	8801a <_svfprintf_r+0xdfe>
   8892c:	aa24      	add	r2, sp, #144	; 0x90
   8892e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88930:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88932:	f003 ffc5 	bl	8c8c0 <frexp>
   88936:	2200      	movs	r2, #0
   88938:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   8893c:	f004 fd4c 	bl	8d3d8 <__aeabi_dmul>
   88940:	4604      	mov	r4, r0
   88942:	460d      	mov	r5, r1
   88944:	2200      	movs	r2, #0
   88946:	2300      	movs	r3, #0
   88948:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   8894c:	f004 ffac 	bl	8d8a8 <__aeabi_dcmpeq>
   88950:	b108      	cbz	r0, 88956 <_svfprintf_r+0x173a>
   88952:	2301      	movs	r3, #1
   88954:	9324      	str	r3, [sp, #144]	; 0x90
   88956:	4bae      	ldr	r3, [pc, #696]	; (88c10 <_svfprintf_r+0x19f4>)
   88958:	930c      	str	r3, [sp, #48]	; 0x30
   8895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8895c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   88960:	3b01      	subs	r3, #1
   88962:	9613      	str	r6, [sp, #76]	; 0x4c
   88964:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   88968:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   8896c:	9721      	str	r7, [sp, #132]	; 0x84
   8896e:	46ba      	mov	sl, r7
   88970:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88974:	4699      	mov	r9, r3
   88976:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8897a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   8897e:	e006      	b.n	8898e <_svfprintf_r+0x1772>
   88980:	2200      	movs	r2, #0
   88982:	2300      	movs	r3, #0
   88984:	f004 ff90 	bl	8d8a8 <__aeabi_dcmpeq>
   88988:	f109 39ff 	add.w	r9, r9, #4294967295
   8898c:	b9e8      	cbnz	r0, 889ca <_svfprintf_r+0x17ae>
   8898e:	2200      	movs	r2, #0
   88990:	4ba0      	ldr	r3, [pc, #640]	; (88c14 <_svfprintf_r+0x19f8>)
   88992:	4630      	mov	r0, r6
   88994:	4639      	mov	r1, r7
   88996:	f004 fd1f 	bl	8d3d8 <__aeabi_dmul>
   8899a:	460d      	mov	r5, r1
   8899c:	4604      	mov	r4, r0
   8899e:	f004 ffcb 	bl	8d938 <__aeabi_d2iz>
   889a2:	4680      	mov	r8, r0
   889a4:	f004 fcae 	bl	8d304 <__aeabi_i2d>
   889a8:	460b      	mov	r3, r1
   889aa:	4602      	mov	r2, r0
   889ac:	4629      	mov	r1, r5
   889ae:	4620      	mov	r0, r4
   889b0:	f004 fb5a 	bl	8d068 <__aeabi_dsub>
   889b4:	f81b 3008 	ldrb.w	r3, [fp, r8]
   889b8:	f1b9 3fff 	cmp.w	r9, #4294967295
   889bc:	4655      	mov	r5, sl
   889be:	4606      	mov	r6, r0
   889c0:	460f      	mov	r7, r1
   889c2:	464c      	mov	r4, r9
   889c4:	f80a 3b01 	strb.w	r3, [sl], #1
   889c8:	d1da      	bne.n	88980 <_svfprintf_r+0x1764>
   889ca:	4630      	mov	r0, r6
   889cc:	4639      	mov	r1, r7
   889ce:	2200      	movs	r2, #0
   889d0:	4b91      	ldr	r3, [pc, #580]	; (88c18 <_svfprintf_r+0x19fc>)
   889d2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   889d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   889d8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   889dc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   889e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   889e4:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   889e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   889ec:	9f21      	ldr	r7, [sp, #132]	; 0x84
   889ee:	f004 ff83 	bl	8d8f8 <__aeabi_dcmpgt>
   889f2:	2800      	cmp	r0, #0
   889f4:	d155      	bne.n	88aa2 <_svfprintf_r+0x1886>
   889f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   889fa:	2200      	movs	r2, #0
   889fc:	4b86      	ldr	r3, [pc, #536]	; (88c18 <_svfprintf_r+0x19fc>)
   889fe:	f004 ff53 	bl	8d8a8 <__aeabi_dcmpeq>
   88a02:	b110      	cbz	r0, 88a0a <_svfprintf_r+0x17ee>
   88a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a06:	07db      	lsls	r3, r3, #31
   88a08:	d44b      	bmi.n	88aa2 <_svfprintf_r+0x1886>
   88a0a:	2c00      	cmp	r4, #0
   88a0c:	db08      	blt.n	88a20 <_svfprintf_r+0x1804>
   88a0e:	2230      	movs	r2, #48	; 0x30
   88a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a12:	1c63      	adds	r3, r4, #1
   88a14:	440b      	add	r3, r1
   88a16:	f801 2b01 	strb.w	r2, [r1], #1
   88a1a:	428b      	cmp	r3, r1
   88a1c:	d1fb      	bne.n	88a16 <_svfprintf_r+0x17fa>
   88a1e:	910f      	str	r1, [sp, #60]	; 0x3c
   88a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88a22:	9d07      	ldr	r5, [sp, #28]
   88a24:	1bdb      	subs	r3, r3, r7
   88a26:	9313      	str	r3, [sp, #76]	; 0x4c
   88a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a2a:	9307      	str	r3, [sp, #28]
   88a2c:	f7ff bb1d 	b.w	8806a <_svfprintf_r+0xe4e>
   88a30:	9508      	str	r5, [sp, #32]
   88a32:	232d      	movs	r3, #45	; 0x2d
   88a34:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88a38:	931e      	str	r3, [sp, #120]	; 0x78
   88a3a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   88a3e:	910c      	str	r1, [sp, #48]	; 0x30
   88a40:	930f      	str	r3, [sp, #60]	; 0x3c
   88a42:	e76d      	b.n	88920 <_svfprintf_r+0x1704>
   88a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88a48:	189a      	adds	r2, r3, r2
   88a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88a4c:	920c      	str	r2, [sp, #48]	; 0x30
   88a4e:	2b00      	cmp	r3, #0
   88a50:	f340 811a 	ble.w	88c88 <_svfprintf_r+0x1a6c>
   88a54:	2667      	movs	r6, #103	; 0x67
   88a56:	e729      	b.n	888ac <_svfprintf_r+0x1690>
   88a58:	2300      	movs	r3, #0
   88a5a:	9309      	str	r3, [sp, #36]	; 0x24
   88a5c:	f7fe bc2b 	b.w	872b6 <_svfprintf_r+0x9a>
   88a60:	4648      	mov	r0, r9
   88a62:	4651      	mov	r1, sl
   88a64:	aa2a      	add	r2, sp, #168	; 0xa8
   88a66:	f004 f81d 	bl	8caa4 <__ssprint_r>
   88a6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88a6e:	f7fe bdae 	b.w	875ce <_svfprintf_r+0x3b2>
   88a72:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88a74:	f7ff b95f 	b.w	87d36 <_svfprintf_r+0xb1a>
   88a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a7a:	9d07      	ldr	r5, [sp, #28]
   88a7c:	18fc      	adds	r4, r7, r3
   88a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a80:	9307      	str	r3, [sp, #28]
   88a82:	2347      	movs	r3, #71	; 0x47
   88a84:	9308      	str	r3, [sp, #32]
   88a86:	f7ff bae4 	b.w	88052 <_svfprintf_r+0xe36>
   88a8a:	46cb      	mov	fp, r9
   88a8c:	46d1      	mov	r9, sl
   88a8e:	f7ff b80e 	b.w	87aae <_svfprintf_r+0x892>
   88a92:	46d1      	mov	r9, sl
   88a94:	f7ff b80b 	b.w	87aae <_svfprintf_r+0x892>
   88a98:	4b60      	ldr	r3, [pc, #384]	; (88c1c <_svfprintf_r+0x1a00>)
   88a9a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88a9c:	930f      	str	r3, [sp, #60]	; 0x3c
   88a9e:	f7fe bfb7 	b.w	87a10 <_svfprintf_r+0x7f4>
   88aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
   88aa6:	9528      	str	r5, [sp, #160]	; 0xa0
   88aa8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88aac:	7bc9      	ldrb	r1, [r1, #15]
   88aae:	428a      	cmp	r2, r1
   88ab0:	f040 812a 	bne.w	88d08 <_svfprintf_r+0x1aec>
   88ab4:	2030      	movs	r0, #48	; 0x30
   88ab6:	f803 0c01 	strb.w	r0, [r3, #-1]
   88aba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88abc:	1e5a      	subs	r2, r3, #1
   88abe:	9228      	str	r2, [sp, #160]	; 0xa0
   88ac0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88ac4:	4291      	cmp	r1, r2
   88ac6:	d0f6      	beq.n	88ab6 <_svfprintf_r+0x189a>
   88ac8:	2a39      	cmp	r2, #57	; 0x39
   88aca:	bf0b      	itete	eq
   88acc:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   88ace:	3201      	addne	r2, #1
   88ad0:	7a92      	ldrbeq	r2, [r2, #10]
   88ad2:	b2d2      	uxtbne	r2, r2
   88ad4:	f803 2c01 	strb.w	r2, [r3, #-1]
   88ad8:	e7a2      	b.n	88a20 <_svfprintf_r+0x1804>
   88ada:	4648      	mov	r0, r9
   88adc:	1c59      	adds	r1, r3, #1
   88ade:	f002 fe09 	bl	8b6f4 <_malloc_r>
   88ae2:	4607      	mov	r7, r0
   88ae4:	2800      	cmp	r0, #0
   88ae6:	f000 811d 	beq.w	88d24 <_svfprintf_r+0x1b08>
   88aea:	900d      	str	r0, [sp, #52]	; 0x34
   88aec:	e706      	b.n	888fc <_svfprintf_r+0x16e0>
   88aee:	2330      	movs	r3, #48	; 0x30
   88af0:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88af4:	2378      	movs	r3, #120	; 0x78
   88af6:	e6f5      	b.n	888e4 <_svfprintf_r+0x16c8>
   88af8:	9b07      	ldr	r3, [sp, #28]
   88afa:	9308      	str	r3, [sp, #32]
   88afc:	f7ff b894 	b.w	87c28 <_svfprintf_r+0xa0c>
   88b00:	464a      	mov	r2, r9
   88b02:	46d1      	mov	r9, sl
   88b04:	4692      	mov	sl, r2
   88b06:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88b08:	3301      	adds	r3, #1
   88b0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88b0c:	442c      	add	r4, r5
   88b0e:	2b07      	cmp	r3, #7
   88b10:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88b14:	e9c8 2500 	strd	r2, r5, [r8]
   88b18:	f77f a8b8 	ble.w	87c8c <_svfprintf_r+0xa70>
   88b1c:	4651      	mov	r1, sl
   88b1e:	4648      	mov	r0, r9
   88b20:	aa2a      	add	r2, sp, #168	; 0xa8
   88b22:	f003 ffbf 	bl	8caa4 <__ssprint_r>
   88b26:	2800      	cmp	r0, #0
   88b28:	f47e afc0 	bne.w	87aac <_svfprintf_r+0x890>
   88b2c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88b30:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88b34:	f7ff b8ac 	b.w	87c90 <_svfprintf_r+0xa74>
   88b38:	2b00      	cmp	r3, #0
   88b3a:	bf08      	it	eq
   88b3c:	2301      	moveq	r3, #1
   88b3e:	9309      	str	r3, [sp, #36]	; 0x24
   88b40:	9b07      	ldr	r3, [sp, #28]
   88b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88b46:	9312      	str	r3, [sp, #72]	; 0x48
   88b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88b4a:	2b00      	cmp	r3, #0
   88b4c:	930c      	str	r3, [sp, #48]	; 0x30
   88b4e:	f2c0 80bd 	blt.w	88ccc <_svfprintf_r+0x1ab0>
   88b52:	2402      	movs	r4, #2
   88b54:	9d09      	ldr	r5, [sp, #36]	; 0x24
   88b56:	a828      	add	r0, sp, #160	; 0xa0
   88b58:	aa25      	add	r2, sp, #148	; 0x94
   88b5a:	ab24      	add	r3, sp, #144	; 0x90
   88b5c:	e9cd 2003 	strd	r2, r0, [sp, #12]
   88b60:	e9cd 4500 	strd	r4, r5, [sp]
   88b64:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88b68:	9302      	str	r3, [sp, #8]
   88b6a:	4622      	mov	r2, r4
   88b6c:	462b      	mov	r3, r5
   88b6e:	4648      	mov	r0, r9
   88b70:	911e      	str	r1, [sp, #120]	; 0x78
   88b72:	f001 f919 	bl	89da8 <_dtoa_r>
   88b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b78:	4607      	mov	r7, r0
   88b7a:	930f      	str	r3, [sp, #60]	; 0x3c
   88b7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88b7e:	940c      	str	r4, [sp, #48]	; 0x30
   88b80:	930d      	str	r3, [sp, #52]	; 0x34
   88b82:	e64a      	b.n	8881a <_svfprintf_r+0x15fe>
   88b84:	2300      	movs	r3, #0
   88b86:	930d      	str	r3, [sp, #52]	; 0x34
   88b88:	e753      	b.n	88a32 <_svfprintf_r+0x1816>
   88b8a:	2667      	movs	r6, #103	; 0x67
   88b8c:	991a      	ldr	r1, [sp, #104]	; 0x68
   88b8e:	780b      	ldrb	r3, [r1, #0]
   88b90:	2bff      	cmp	r3, #255	; 0xff
   88b92:	f000 80de 	beq.w	88d52 <_svfprintf_r+0x1b36>
   88b96:	2400      	movs	r4, #0
   88b98:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88b9a:	4620      	mov	r0, r4
   88b9c:	e003      	b.n	88ba6 <_svfprintf_r+0x198a>
   88b9e:	3001      	adds	r0, #1
   88ba0:	3101      	adds	r1, #1
   88ba2:	2bff      	cmp	r3, #255	; 0xff
   88ba4:	d008      	beq.n	88bb8 <_svfprintf_r+0x199c>
   88ba6:	4293      	cmp	r3, r2
   88ba8:	da06      	bge.n	88bb8 <_svfprintf_r+0x199c>
   88baa:	1ad2      	subs	r2, r2, r3
   88bac:	784b      	ldrb	r3, [r1, #1]
   88bae:	2b00      	cmp	r3, #0
   88bb0:	d1f5      	bne.n	88b9e <_svfprintf_r+0x1982>
   88bb2:	780b      	ldrb	r3, [r1, #0]
   88bb4:	3401      	adds	r4, #1
   88bb6:	e7f4      	b.n	88ba2 <_svfprintf_r+0x1986>
   88bb8:	911a      	str	r1, [sp, #104]	; 0x68
   88bba:	9210      	str	r2, [sp, #64]	; 0x40
   88bbc:	9016      	str	r0, [sp, #88]	; 0x58
   88bbe:	9412      	str	r4, [sp, #72]	; 0x48
   88bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88bc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   88bc6:	4413      	add	r3, r2
   88bc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88bca:	fb02 1303 	mla	r3, r2, r3, r1
   88bce:	930c      	str	r3, [sp, #48]	; 0x30
   88bd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88bd4:	9308      	str	r3, [sp, #32]
   88bd6:	f7ff bab6 	b.w	88146 <_svfprintf_r+0xf2a>
   88bda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88bdc:	2666      	movs	r6, #102	; 0x66
   88bde:	18d3      	adds	r3, r2, r3
   88be0:	4419      	add	r1, r3
   88be2:	910c      	str	r1, [sp, #48]	; 0x30
   88be4:	e662      	b.n	888ac <_svfprintf_r+0x1690>
   88be6:	f106 020f 	add.w	r2, r6, #15
   88bea:	2101      	movs	r1, #1
   88bec:	b2d2      	uxtb	r2, r2
   88bee:	f7ff ba4f 	b.w	88090 <_svfprintf_r+0xe74>
   88bf2:	2900      	cmp	r1, #0
   88bf4:	d167      	bne.n	88cc6 <_svfprintf_r+0x1aaa>
   88bf6:	2230      	movs	r2, #48	; 0x30
   88bf8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   88bfc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   88c00:	3330      	adds	r3, #48	; 0x30
   88c02:	f802 3b01 	strb.w	r3, [r2], #1
   88c06:	ab26      	add	r3, sp, #152	; 0x98
   88c08:	1ad3      	subs	r3, r2, r3
   88c0a:	931b      	str	r3, [sp, #108]	; 0x6c
   88c0c:	f7ff ba83 	b.w	88116 <_svfprintf_r+0xefa>
   88c10:	0008da40 	.word	0x0008da40
   88c14:	40300000 	.word	0x40300000
   88c18:	3fe00000 	.word	0x3fe00000
   88c1c:	0008da70 	.word	0x0008da70
   88c20:	aa24      	add	r2, sp, #144	; 0x90
   88c22:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c24:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88c26:	f003 fe4b 	bl	8c8c0 <frexp>
   88c2a:	2200      	movs	r2, #0
   88c2c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88c30:	f004 fbd2 	bl	8d3d8 <__aeabi_dmul>
   88c34:	4604      	mov	r4, r0
   88c36:	460d      	mov	r5, r1
   88c38:	2200      	movs	r2, #0
   88c3a:	2300      	movs	r3, #0
   88c3c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88c40:	f004 fe32 	bl	8d8a8 <__aeabi_dcmpeq>
   88c44:	b108      	cbz	r0, 88c4a <_svfprintf_r+0x1a2e>
   88c46:	2301      	movs	r3, #1
   88c48:	9324      	str	r3, [sp, #144]	; 0x90
   88c4a:	4b44      	ldr	r3, [pc, #272]	; (88d5c <_svfprintf_r+0x1b40>)
   88c4c:	930c      	str	r3, [sp, #48]	; 0x30
   88c4e:	e684      	b.n	8895a <_svfprintf_r+0x173e>
   88c50:	2667      	movs	r6, #103	; 0x67
   88c52:	e62e      	b.n	888b2 <_svfprintf_r+0x1696>
   88c54:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88c58:	f7fe bcb9 	b.w	875ce <_svfprintf_r+0x3b2>
   88c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88c5e:	930c      	str	r3, [sp, #48]	; 0x30
   88c60:	e57c      	b.n	8875c <_svfprintf_r+0x1540>
   88c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88c64:	2003      	movs	r0, #3
   88c66:	2b00      	cmp	r3, #0
   88c68:	bfb8      	it	lt
   88c6a:	232d      	movlt	r3, #45	; 0x2d
   88c6c:	f04f 0100 	mov.w	r1, #0
   88c70:	bfba      	itte	lt
   88c72:	461a      	movlt	r2, r3
   88c74:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88c78:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88c7c:	4f38      	ldr	r7, [pc, #224]	; (88d60 <_svfprintf_r+0x1b44>)
   88c7e:	4b39      	ldr	r3, [pc, #228]	; (88d64 <_svfprintf_r+0x1b48>)
   88c80:	9008      	str	r0, [sp, #32]
   88c82:	910d      	str	r1, [sp, #52]	; 0x34
   88c84:	f7fe bce2 	b.w	8764c <_svfprintf_r+0x430>
   88c88:	f1c3 0301 	rsb	r3, r3, #1
   88c8c:	441a      	add	r2, r3
   88c8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88c92:	2667      	movs	r6, #103	; 0x67
   88c94:	920c      	str	r2, [sp, #48]	; 0x30
   88c96:	9308      	str	r3, [sp, #32]
   88c98:	e56c      	b.n	88774 <_svfprintf_r+0x1558>
   88c9a:	2200      	movs	r2, #0
   88c9c:	2300      	movs	r3, #0
   88c9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88ca2:	f004 fe01 	bl	8d8a8 <__aeabi_dcmpeq>
   88ca6:	2800      	cmp	r0, #0
   88ca8:	f47f addb 	bne.w	88862 <_svfprintf_r+0x1646>
   88cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88cae:	f1c3 0301 	rsb	r3, r3, #1
   88cb2:	9324      	str	r3, [sp, #144]	; 0x90
   88cb4:	e5d6      	b.n	88864 <_svfprintf_r+0x1648>
   88cb6:	992b      	ldr	r1, [sp, #172]	; 0xac
   88cb8:	f7ff bb59 	b.w	8836e <_svfprintf_r+0x1152>
   88cbc:	07e9      	lsls	r1, r5, #31
   88cbe:	f57f aa35 	bpl.w	8812c <_svfprintf_r+0xf10>
   88cc2:	f7ff ba2f 	b.w	88124 <_svfprintf_r+0xf08>
   88cc6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88cca:	e799      	b.n	88c00 <_svfprintf_r+0x19e4>
   88ccc:	900d      	str	r0, [sp, #52]	; 0x34
   88cce:	e6b0      	b.n	88a32 <_svfprintf_r+0x1816>
   88cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88cd2:	f005 0501 	and.w	r5, r5, #1
   88cd6:	4613      	mov	r3, r2
   88cd8:	432b      	orrs	r3, r5
   88cda:	d104      	bne.n	88ce6 <_svfprintf_r+0x1aca>
   88cdc:	2301      	movs	r3, #1
   88cde:	2666      	movs	r6, #102	; 0x66
   88ce0:	9308      	str	r3, [sp, #32]
   88ce2:	930c      	str	r3, [sp, #48]	; 0x30
   88ce4:	e546      	b.n	88774 <_svfprintf_r+0x1558>
   88ce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88ce8:	2666      	movs	r6, #102	; 0x66
   88cea:	3301      	adds	r3, #1
   88cec:	441a      	add	r2, r3
   88cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88cf2:	920c      	str	r2, [sp, #48]	; 0x30
   88cf4:	9308      	str	r3, [sp, #32]
   88cf6:	e53d      	b.n	88774 <_svfprintf_r+0x1558>
   88cf8:	4b1b      	ldr	r3, [pc, #108]	; (88d68 <_svfprintf_r+0x1b4c>)
   88cfa:	930f      	str	r3, [sp, #60]	; 0x3c
   88cfc:	f7ff bbe9 	b.w	884d2 <_svfprintf_r+0x12b6>
   88d00:	4a19      	ldr	r2, [pc, #100]	; (88d68 <_svfprintf_r+0x1b4c>)
   88d02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d04:	920f      	str	r2, [sp, #60]	; 0x3c
   88d06:	e4b1      	b.n	8866c <_svfprintf_r+0x1450>
   88d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88d0a:	e6dd      	b.n	88ac8 <_svfprintf_r+0x18ac>
   88d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88d0e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88d12:	f853 0b04 	ldr.w	r0, [r3], #4
   88d16:	4693      	mov	fp, r2
   88d18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88d1c:	9009      	str	r0, [sp, #36]	; 0x24
   88d1e:	930e      	str	r3, [sp, #56]	; 0x38
   88d20:	f7fe bac7 	b.w	872b2 <_svfprintf_r+0x96>
   88d24:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d2c:	f8aa 300c 	strh.w	r3, [sl, #12]
   88d30:	f7fe bc4d 	b.w	875ce <_svfprintf_r+0x3b2>
   88d34:	4a0c      	ldr	r2, [pc, #48]	; (88d68 <_svfprintf_r+0x1b4c>)
   88d36:	920f      	str	r2, [sp, #60]	; 0x3c
   88d38:	e6e6      	b.n	88b08 <_svfprintf_r+0x18ec>
   88d3a:	230c      	movs	r3, #12
   88d3c:	f04f 32ff 	mov.w	r2, #4294967295
   88d40:	f8c9 3000 	str.w	r3, [r9]
   88d44:	920a      	str	r2, [sp, #40]	; 0x28
   88d46:	f7fe bc49 	b.w	875dc <_svfprintf_r+0x3c0>
   88d4a:	2302      	movs	r3, #2
   88d4c:	931b      	str	r3, [sp, #108]	; 0x6c
   88d4e:	f7ff b9e2 	b.w	88116 <_svfprintf_r+0xefa>
   88d52:	2300      	movs	r3, #0
   88d54:	9312      	str	r3, [sp, #72]	; 0x48
   88d56:	9316      	str	r3, [sp, #88]	; 0x58
   88d58:	e732      	b.n	88bc0 <_svfprintf_r+0x19a4>
   88d5a:	bf00      	nop
   88d5c:	0008da2c 	.word	0x0008da2c
   88d60:	0008da24 	.word	0x0008da24
   88d64:	0008da28 	.word	0x0008da28
   88d68:	0008da70 	.word	0x0008da70

00088d6c <__sprint_r.part.0>:
   88d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88d72:	4690      	mov	r8, r2
   88d74:	049c      	lsls	r4, r3, #18
   88d76:	d52d      	bpl.n	88dd4 <__sprint_r.part.0+0x68>
   88d78:	6893      	ldr	r3, [r2, #8]
   88d7a:	6812      	ldr	r2, [r2, #0]
   88d7c:	b343      	cbz	r3, 88dd0 <__sprint_r.part.0+0x64>
   88d7e:	468b      	mov	fp, r1
   88d80:	4606      	mov	r6, r0
   88d82:	f102 0908 	add.w	r9, r2, #8
   88d86:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88d8a:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88d8e:	d015      	beq.n	88dbc <__sprint_r.part.0+0x50>
   88d90:	2400      	movs	r4, #0
   88d92:	3d04      	subs	r5, #4
   88d94:	e001      	b.n	88d9a <__sprint_r.part.0+0x2e>
   88d96:	42a7      	cmp	r7, r4
   88d98:	d00e      	beq.n	88db8 <__sprint_r.part.0+0x4c>
   88d9a:	465a      	mov	r2, fp
   88d9c:	4630      	mov	r0, r6
   88d9e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   88da2:	f002 f8f9 	bl	8af98 <_fputwc_r>
   88da6:	1c43      	adds	r3, r0, #1
   88da8:	f104 0401 	add.w	r4, r4, #1
   88dac:	d1f3      	bne.n	88d96 <__sprint_r.part.0+0x2a>
   88dae:	2300      	movs	r3, #0
   88db0:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88db8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88dbc:	f02a 0a03 	bic.w	sl, sl, #3
   88dc0:	eba3 030a 	sub.w	r3, r3, sl
   88dc4:	f8c8 3008 	str.w	r3, [r8, #8]
   88dc8:	f109 0908 	add.w	r9, r9, #8
   88dcc:	2b00      	cmp	r3, #0
   88dce:	d1da      	bne.n	88d86 <__sprint_r.part.0+0x1a>
   88dd0:	2000      	movs	r0, #0
   88dd2:	e7ec      	b.n	88dae <__sprint_r.part.0+0x42>
   88dd4:	f002 fa6a 	bl	8b2ac <__sfvwrite_r>
   88dd8:	2300      	movs	r3, #0
   88dda:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88de2:	bf00      	nop

00088de4 <_vfiprintf_r>:
   88de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88de8:	b0bb      	sub	sp, #236	; 0xec
   88dea:	461c      	mov	r4, r3
   88dec:	4689      	mov	r9, r1
   88dee:	4690      	mov	r8, r2
   88df0:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88df4:	b118      	cbz	r0, 88dfe <_vfiprintf_r+0x1a>
   88df6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88df8:	2b00      	cmp	r3, #0
   88dfa:	f000 827a 	beq.w	892f2 <_vfiprintf_r+0x50e>
   88dfe:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e02:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88e06:	07de      	lsls	r6, r3, #31
   88e08:	b28a      	uxth	r2, r1
   88e0a:	d402      	bmi.n	88e12 <_vfiprintf_r+0x2e>
   88e0c:	058d      	lsls	r5, r1, #22
   88e0e:	f140 851a 	bpl.w	89846 <_vfiprintf_r+0xa62>
   88e12:	0490      	lsls	r0, r2, #18
   88e14:	d40a      	bmi.n	88e2c <_vfiprintf_r+0x48>
   88e16:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e1a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   88e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   88e22:	f8a9 200c 	strh.w	r2, [r9, #12]
   88e26:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   88e2a:	b292      	uxth	r2, r2
   88e2c:	0711      	lsls	r1, r2, #28
   88e2e:	f140 80f6 	bpl.w	8901e <_vfiprintf_r+0x23a>
   88e32:	f8d9 3010 	ldr.w	r3, [r9, #16]
   88e36:	2b00      	cmp	r3, #0
   88e38:	f000 80f1 	beq.w	8901e <_vfiprintf_r+0x23a>
   88e3c:	f002 031a 	and.w	r3, r2, #26
   88e40:	2b0a      	cmp	r3, #10
   88e42:	f000 80fa 	beq.w	8903a <_vfiprintf_r+0x256>
   88e46:	2300      	movs	r3, #0
   88e48:	46cb      	mov	fp, r9
   88e4a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   88e4e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   88e52:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   88e56:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e5a:	9303      	str	r3, [sp, #12]
   88e5c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   88e60:	f898 3000 	ldrb.w	r3, [r8]
   88e64:	2b00      	cmp	r3, #0
   88e66:	f000 81ed 	beq.w	89244 <_vfiprintf_r+0x460>
   88e6a:	4644      	mov	r4, r8
   88e6c:	e004      	b.n	88e78 <_vfiprintf_r+0x94>
   88e6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88e72:	2b00      	cmp	r3, #0
   88e74:	f000 8127 	beq.w	890c6 <_vfiprintf_r+0x2e2>
   88e78:	2b25      	cmp	r3, #37	; 0x25
   88e7a:	d1f8      	bne.n	88e6e <_vfiprintf_r+0x8a>
   88e7c:	ebb4 0508 	subs.w	r5, r4, r8
   88e80:	f040 8125 	bne.w	890ce <_vfiprintf_r+0x2ea>
   88e84:	7823      	ldrb	r3, [r4, #0]
   88e86:	2b00      	cmp	r3, #0
   88e88:	f000 81dc 	beq.w	89244 <_vfiprintf_r+0x460>
   88e8c:	f04f 0200 	mov.w	r2, #0
   88e90:	2300      	movs	r3, #0
   88e92:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88e96:	f04f 32ff 	mov.w	r2, #4294967295
   88e9a:	252b      	movs	r5, #43	; 0x2b
   88e9c:	461f      	mov	r7, r3
   88e9e:	9302      	str	r3, [sp, #8]
   88ea0:	7863      	ldrb	r3, [r4, #1]
   88ea2:	f104 0801 	add.w	r8, r4, #1
   88ea6:	9200      	str	r2, [sp, #0]
   88ea8:	f108 0801 	add.w	r8, r8, #1
   88eac:	f1a3 0220 	sub.w	r2, r3, #32
   88eb0:	2a5a      	cmp	r2, #90	; 0x5a
   88eb2:	f200 8141 	bhi.w	89138 <_vfiprintf_r+0x354>
   88eb6:	e8df f012 	tbh	[pc, r2, lsl #1]
   88eba:	0272      	.short	0x0272
   88ebc:	013f013f 	.word	0x013f013f
   88ec0:	013f026d 	.word	0x013f026d
   88ec4:	013f013f 	.word	0x013f013f
   88ec8:	013f024b 	.word	0x013f024b
   88ecc:	006a013f 	.word	0x006a013f
   88ed0:	013f0227 	.word	0x013f0227
   88ed4:	02310222 	.word	0x02310222
   88ed8:	022c013f 	.word	0x022c013f
   88edc:	005b005b 	.word	0x005b005b
   88ee0:	005b005b 	.word	0x005b005b
   88ee4:	005b005b 	.word	0x005b005b
   88ee8:	005b005b 	.word	0x005b005b
   88eec:	013f005b 	.word	0x013f005b
   88ef0:	013f013f 	.word	0x013f013f
   88ef4:	013f013f 	.word	0x013f013f
   88ef8:	013f013f 	.word	0x013f013f
   88efc:	013f013f 	.word	0x013f013f
   88f00:	007a020e 	.word	0x007a020e
   88f04:	013f013f 	.word	0x013f013f
   88f08:	013f013f 	.word	0x013f013f
   88f0c:	013f013f 	.word	0x013f013f
   88f10:	013f013f 	.word	0x013f013f
   88f14:	013f013f 	.word	0x013f013f
   88f18:	013f00d7 	.word	0x013f00d7
   88f1c:	013f013f 	.word	0x013f013f
   88f20:	013f01f2 	.word	0x013f01f2
   88f24:	013f0297 	.word	0x013f0297
   88f28:	0500013f 	.word	0x0500013f
   88f2c:	013f013f 	.word	0x013f013f
   88f30:	013f013f 	.word	0x013f013f
   88f34:	013f013f 	.word	0x013f013f
   88f38:	013f013f 	.word	0x013f013f
   88f3c:	013f013f 	.word	0x013f013f
   88f40:	007c020e 	.word	0x007c020e
   88f44:	013f013f 	.word	0x013f013f
   88f48:	028a013f 	.word	0x028a013f
   88f4c:	0075007c 	.word	0x0075007c
   88f50:	027d013f 	.word	0x027d013f
   88f54:	02b6013f 	.word	0x02b6013f
   88f58:	02a600d9 	.word	0x02a600d9
   88f5c:	013f0075 	.word	0x013f0075
   88f60:	007201f2 	.word	0x007201f2
   88f64:	013f04fe 	.word	0x013f04fe
   88f68:	051c013f 	.word	0x051c013f
   88f6c:	0072013f 	.word	0x0072013f
   88f70:	2100      	movs	r1, #0
   88f72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88f76:	f818 3b01 	ldrb.w	r3, [r8], #1
   88f7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88f7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88f82:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88f86:	2a09      	cmp	r2, #9
   88f88:	d9f5      	bls.n	88f76 <_vfiprintf_r+0x192>
   88f8a:	9102      	str	r1, [sp, #8]
   88f8c:	e78e      	b.n	88eac <_vfiprintf_r+0xc8>
   88f8e:	9b04      	ldr	r3, [sp, #16]
   88f90:	f853 2b04 	ldr.w	r2, [r3], #4
   88f94:	2a00      	cmp	r2, #0
   88f96:	9202      	str	r2, [sp, #8]
   88f98:	9304      	str	r3, [sp, #16]
   88f9a:	f2c0 81ad 	blt.w	892f8 <_vfiprintf_r+0x514>
   88f9e:	f898 3000 	ldrb.w	r3, [r8]
   88fa2:	e781      	b.n	88ea8 <_vfiprintf_r+0xc4>
   88fa4:	f898 3000 	ldrb.w	r3, [r8]
   88fa8:	f047 0720 	orr.w	r7, r7, #32
   88fac:	e77c      	b.n	88ea8 <_vfiprintf_r+0xc4>
   88fae:	f047 0710 	orr.w	r7, r7, #16
   88fb2:	06bc      	lsls	r4, r7, #26
   88fb4:	f140 8158 	bpl.w	89268 <_vfiprintf_r+0x484>
   88fb8:	9c04      	ldr	r4, [sp, #16]
   88fba:	3407      	adds	r4, #7
   88fbc:	f024 0307 	bic.w	r3, r4, #7
   88fc0:	4619      	mov	r1, r3
   88fc2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88fc6:	4614      	mov	r4, r2
   88fc8:	461d      	mov	r5, r3
   88fca:	9104      	str	r1, [sp, #16]
   88fcc:	2a00      	cmp	r2, #0
   88fce:	f173 0300 	sbcs.w	r3, r3, #0
   88fd2:	f2c0 841e 	blt.w	89812 <_vfiprintf_r+0xa2e>
   88fd6:	9b00      	ldr	r3, [sp, #0]
   88fd8:	3301      	adds	r3, #1
   88fda:	f000 84f0 	beq.w	899be <_vfiprintf_r+0xbda>
   88fde:	ea54 0305 	orrs.w	r3, r4, r5
   88fe2:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88fe6:	f000 83fc 	beq.w	897e2 <_vfiprintf_r+0x9fe>
   88fea:	2d00      	cmp	r5, #0
   88fec:	bf08      	it	eq
   88fee:	2c0a      	cmpeq	r4, #10
   88ff0:	f080 84a9 	bcs.w	89946 <_vfiprintf_r+0xb62>
   88ff4:	2301      	movs	r3, #1
   88ff6:	464f      	mov	r7, r9
   88ff8:	3430      	adds	r4, #48	; 0x30
   88ffa:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   88ffe:	9301      	str	r3, [sp, #4]
   89000:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89004:	e9dd 2100 	ldrd	r2, r1, [sp]
   89008:	428a      	cmp	r2, r1
   8900a:	bfb8      	it	lt
   8900c:	460a      	movlt	r2, r1
   8900e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89012:	4615      	mov	r5, r2
   89014:	2b00      	cmp	r3, #0
   89016:	f000 809d 	beq.w	89154 <_vfiprintf_r+0x370>
   8901a:	3501      	adds	r5, #1
   8901c:	e09a      	b.n	89154 <_vfiprintf_r+0x370>
   8901e:	4649      	mov	r1, r9
   89020:	9805      	ldr	r0, [sp, #20]
   89022:	f000 fdb9 	bl	89b98 <__swsetup_r>
   89026:	2800      	cmp	r0, #0
   89028:	f040 854a 	bne.w	89ac0 <_vfiprintf_r+0xcdc>
   8902c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89030:	f002 031a 	and.w	r3, r2, #26
   89034:	2b0a      	cmp	r3, #10
   89036:	f47f af06 	bne.w	88e46 <_vfiprintf_r+0x62>
   8903a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8903e:	2b00      	cmp	r3, #0
   89040:	f6ff af01 	blt.w	88e46 <_vfiprintf_r+0x62>
   89044:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89048:	07de      	lsls	r6, r3, #31
   8904a:	d402      	bmi.n	89052 <_vfiprintf_r+0x26e>
   8904c:	0595      	lsls	r5, r2, #22
   8904e:	f140 850e 	bpl.w	89a6e <_vfiprintf_r+0xc8a>
   89052:	4623      	mov	r3, r4
   89054:	4642      	mov	r2, r8
   89056:	4649      	mov	r1, r9
   89058:	9805      	ldr	r0, [sp, #20]
   8905a:	f000 fd59 	bl	89b10 <__sbprintf>
   8905e:	9003      	str	r0, [sp, #12]
   89060:	9803      	ldr	r0, [sp, #12]
   89062:	b03b      	add	sp, #236	; 0xec
   89064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89068:	f047 0710 	orr.w	r7, r7, #16
   8906c:	06b8      	lsls	r0, r7, #26
   8906e:	9c04      	ldr	r4, [sp, #16]
   89070:	f140 8109 	bpl.w	89286 <_vfiprintf_r+0x4a2>
   89074:	3407      	adds	r4, #7
   89076:	f024 0307 	bic.w	r3, r4, #7
   8907a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8907e:	9304      	str	r3, [sp, #16]
   89080:	2300      	movs	r3, #0
   89082:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89086:	f04f 0200 	mov.w	r2, #0
   8908a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8908e:	9a00      	ldr	r2, [sp, #0]
   89090:	4611      	mov	r1, r2
   89092:	3101      	adds	r1, #1
   89094:	f000 81db 	beq.w	8944e <_vfiprintf_r+0x66a>
   89098:	ea54 0105 	orrs.w	r1, r4, r5
   8909c:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   890a0:	f040 81d4 	bne.w	8944c <_vfiprintf_r+0x668>
   890a4:	2a00      	cmp	r2, #0
   890a6:	f040 848d 	bne.w	899c4 <_vfiprintf_r+0xbe0>
   890aa:	2b00      	cmp	r3, #0
   890ac:	f040 839e 	bne.w	897ec <_vfiprintf_r+0xa08>
   890b0:	f019 0301 	ands.w	r3, r9, #1
   890b4:	9301      	str	r3, [sp, #4]
   890b6:	f000 83c3 	beq.w	89840 <_vfiprintf_r+0xa5c>
   890ba:	2330      	movs	r3, #48	; 0x30
   890bc:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   890c0:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   890c4:	e79e      	b.n	89004 <_vfiprintf_r+0x220>
   890c6:	ebb4 0508 	subs.w	r5, r4, r8
   890ca:	f000 80bb 	beq.w	89244 <_vfiprintf_r+0x460>
   890ce:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   890d2:	3301      	adds	r3, #1
   890d4:	442a      	add	r2, r5
   890d6:	2b07      	cmp	r3, #7
   890d8:	e9ca 8500 	strd	r8, r5, [sl]
   890dc:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   890e0:	dc06      	bgt.n	890f0 <_vfiprintf_r+0x30c>
   890e2:	f10a 0a08 	add.w	sl, sl, #8
   890e6:	9a03      	ldr	r2, [sp, #12]
   890e8:	7823      	ldrb	r3, [r4, #0]
   890ea:	442a      	add	r2, r5
   890ec:	9203      	str	r2, [sp, #12]
   890ee:	e6ca      	b.n	88e86 <_vfiprintf_r+0xa2>
   890f0:	2a00      	cmp	r2, #0
   890f2:	f000 8372 	beq.w	897da <_vfiprintf_r+0x9f6>
   890f6:	4659      	mov	r1, fp
   890f8:	9805      	ldr	r0, [sp, #20]
   890fa:	aa0e      	add	r2, sp, #56	; 0x38
   890fc:	f7ff fe36 	bl	88d6c <__sprint_r.part.0>
   89100:	b950      	cbnz	r0, 89118 <_vfiprintf_r+0x334>
   89102:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89106:	e7ee      	b.n	890e6 <_vfiprintf_r+0x302>
   89108:	4659      	mov	r1, fp
   8910a:	9805      	ldr	r0, [sp, #20]
   8910c:	aa0e      	add	r2, sp, #56	; 0x38
   8910e:	f7ff fe2d 	bl	88d6c <__sprint_r.part.0>
   89112:	2800      	cmp	r0, #0
   89114:	f000 808d 	beq.w	89232 <_vfiprintf_r+0x44e>
   89118:	46d9      	mov	r9, fp
   8911a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8911e:	f013 0f01 	tst.w	r3, #1
   89122:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89126:	f000 8095 	beq.w	89254 <_vfiprintf_r+0x470>
   8912a:	065b      	lsls	r3, r3, #25
   8912c:	f100 84d4 	bmi.w	89ad8 <_vfiprintf_r+0xcf4>
   89130:	9803      	ldr	r0, [sp, #12]
   89132:	b03b      	add	sp, #236	; 0xec
   89134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89138:	2b00      	cmp	r3, #0
   8913a:	f000 8083 	beq.w	89244 <_vfiprintf_r+0x460>
   8913e:	2501      	movs	r5, #1
   89140:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89144:	f04f 0300 	mov.w	r3, #0
   89148:	9501      	str	r5, [sp, #4]
   8914a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8914e:	ae21      	add	r6, sp, #132	; 0x84
   89150:	2300      	movs	r3, #0
   89152:	9300      	str	r3, [sp, #0]
   89154:	f017 0302 	ands.w	r3, r7, #2
   89158:	9307      	str	r3, [sp, #28]
   8915a:	bf18      	it	ne
   8915c:	3502      	addne	r5, #2
   8915e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   89162:	9306      	str	r3, [sp, #24]
   89164:	d104      	bne.n	89170 <_vfiprintf_r+0x38c>
   89166:	9b02      	ldr	r3, [sp, #8]
   89168:	1b5c      	subs	r4, r3, r5
   8916a:	2c00      	cmp	r4, #0
   8916c:	f300 8274 	bgt.w	89658 <_vfiprintf_r+0x874>
   89170:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89174:	1c48      	adds	r0, r1, #1
   89176:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   8917a:	b174      	cbz	r4, 8919a <_vfiprintf_r+0x3b6>
   8917c:	2101      	movs	r1, #1
   8917e:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   89182:	440a      	add	r2, r1
   89184:	2807      	cmp	r0, #7
   89186:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8918a:	e9ca 4100 	strd	r4, r1, [sl]
   8918e:	f300 8246 	bgt.w	8961e <_vfiprintf_r+0x83a>
   89192:	4601      	mov	r1, r0
   89194:	f10a 0a08 	add.w	sl, sl, #8
   89198:	3001      	adds	r0, #1
   8919a:	9b07      	ldr	r3, [sp, #28]
   8919c:	b1c3      	cbz	r3, 891d0 <_vfiprintf_r+0x3ec>
   8919e:	2102      	movs	r1, #2
   891a0:	ab0d      	add	r3, sp, #52	; 0x34
   891a2:	440a      	add	r2, r1
   891a4:	2807      	cmp	r0, #7
   891a6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   891aa:	e9ca 3100 	strd	r3, r1, [sl]
   891ae:	f340 824e 	ble.w	8964e <_vfiprintf_r+0x86a>
   891b2:	2a00      	cmp	r2, #0
   891b4:	f000 830c 	beq.w	897d0 <_vfiprintf_r+0x9ec>
   891b8:	4659      	mov	r1, fp
   891ba:	9805      	ldr	r0, [sp, #20]
   891bc:	aa0e      	add	r2, sp, #56	; 0x38
   891be:	f7ff fdd5 	bl	88d6c <__sprint_r.part.0>
   891c2:	2800      	cmp	r0, #0
   891c4:	d1a8      	bne.n	89118 <_vfiprintf_r+0x334>
   891c6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   891ca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891ce:	1c48      	adds	r0, r1, #1
   891d0:	9b06      	ldr	r3, [sp, #24]
   891d2:	2b80      	cmp	r3, #128	; 0x80
   891d4:	f000 817e 	beq.w	894d4 <_vfiprintf_r+0x6f0>
   891d8:	e9dd 3400 	ldrd	r3, r4, [sp]
   891dc:	1b1c      	subs	r4, r3, r4
   891de:	2c00      	cmp	r4, #0
   891e0:	f300 81d3 	bgt.w	8958a <_vfiprintf_r+0x7a6>
   891e4:	9b01      	ldr	r3, [sp, #4]
   891e6:	2807      	cmp	r0, #7
   891e8:	441a      	add	r2, r3
   891ea:	e9ca 6300 	strd	r6, r3, [sl]
   891ee:	9210      	str	r2, [sp, #64]	; 0x40
   891f0:	900f      	str	r0, [sp, #60]	; 0x3c
   891f2:	f340 816c 	ble.w	894ce <_vfiprintf_r+0x6ea>
   891f6:	2a00      	cmp	r2, #0
   891f8:	f000 8276 	beq.w	896e8 <_vfiprintf_r+0x904>
   891fc:	4659      	mov	r1, fp
   891fe:	9805      	ldr	r0, [sp, #20]
   89200:	aa0e      	add	r2, sp, #56	; 0x38
   89202:	f7ff fdb3 	bl	88d6c <__sprint_r.part.0>
   89206:	2800      	cmp	r0, #0
   89208:	d186      	bne.n	89118 <_vfiprintf_r+0x334>
   8920a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8920c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89210:	0779      	lsls	r1, r7, #29
   89212:	d504      	bpl.n	8921e <_vfiprintf_r+0x43a>
   89214:	9b02      	ldr	r3, [sp, #8]
   89216:	1b5c      	subs	r4, r3, r5
   89218:	2c00      	cmp	r4, #0
   8921a:	f300 826e 	bgt.w	896fa <_vfiprintf_r+0x916>
   8921e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   89222:	42a9      	cmp	r1, r5
   89224:	bfac      	ite	ge
   89226:	185b      	addge	r3, r3, r1
   89228:	195b      	addlt	r3, r3, r5
   8922a:	9303      	str	r3, [sp, #12]
   8922c:	2a00      	cmp	r2, #0
   8922e:	f47f af6b 	bne.w	89108 <_vfiprintf_r+0x324>
   89232:	2300      	movs	r3, #0
   89234:	930f      	str	r3, [sp, #60]	; 0x3c
   89236:	f898 3000 	ldrb.w	r3, [r8]
   8923a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8923e:	2b00      	cmp	r3, #0
   89240:	f47f ae13 	bne.w	88e6a <_vfiprintf_r+0x86>
   89244:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89246:	46d9      	mov	r9, fp
   89248:	2b00      	cmp	r3, #0
   8924a:	f040 8426 	bne.w	89a9a <_vfiprintf_r+0xcb6>
   8924e:	2300      	movs	r3, #0
   89250:	930f      	str	r3, [sp, #60]	; 0x3c
   89252:	e762      	b.n	8911a <_vfiprintf_r+0x336>
   89254:	059a      	lsls	r2, r3, #22
   89256:	f53f af68 	bmi.w	8912a <_vfiprintf_r+0x346>
   8925a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8925e:	f002 f9cf 	bl	8b600 <__retarget_lock_release_recursive>
   89262:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89266:	e760      	b.n	8912a <_vfiprintf_r+0x346>
   89268:	9b04      	ldr	r3, [sp, #16]
   8926a:	06f8      	lsls	r0, r7, #27
   8926c:	f853 4b04 	ldr.w	r4, [r3], #4
   89270:	f100 8308 	bmi.w	89884 <_vfiprintf_r+0xaa0>
   89274:	0679      	lsls	r1, r7, #25
   89276:	f140 8302 	bpl.w	8987e <_vfiprintf_r+0xa9a>
   8927a:	b224      	sxth	r4, r4
   8927c:	17e5      	asrs	r5, r4, #31
   8927e:	9304      	str	r3, [sp, #16]
   89280:	4622      	mov	r2, r4
   89282:	462b      	mov	r3, r5
   89284:	e6a2      	b.n	88fcc <_vfiprintf_r+0x1e8>
   89286:	f854 3b04 	ldr.w	r3, [r4], #4
   8928a:	06f9      	lsls	r1, r7, #27
   8928c:	9404      	str	r4, [sp, #16]
   8928e:	f100 82f3 	bmi.w	89878 <_vfiprintf_r+0xa94>
   89292:	067a      	lsls	r2, r7, #25
   89294:	f140 82ed 	bpl.w	89872 <_vfiprintf_r+0xa8e>
   89298:	2500      	movs	r5, #0
   8929a:	b29c      	uxth	r4, r3
   8929c:	e6f0      	b.n	89080 <_vfiprintf_r+0x29c>
   8929e:	f04f 0300 	mov.w	r3, #0
   892a2:	9c04      	ldr	r4, [sp, #16]
   892a4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   892a8:	f854 6b04 	ldr.w	r6, [r4], #4
   892ac:	2e00      	cmp	r6, #0
   892ae:	f000 8397 	beq.w	899e0 <_vfiprintf_r+0xbfc>
   892b2:	9a00      	ldr	r2, [sp, #0]
   892b4:	4613      	mov	r3, r2
   892b6:	3301      	adds	r3, #1
   892b8:	f000 831e 	beq.w	898f8 <_vfiprintf_r+0xb14>
   892bc:	2100      	movs	r1, #0
   892be:	4630      	mov	r0, r6
   892c0:	f002 fcdc 	bl	8bc7c <memchr>
   892c4:	2800      	cmp	r0, #0
   892c6:	f000 83d8 	beq.w	89a7a <_vfiprintf_r+0xc96>
   892ca:	1b83      	subs	r3, r0, r6
   892cc:	9301      	str	r3, [sp, #4]
   892ce:	2300      	movs	r3, #0
   892d0:	9404      	str	r4, [sp, #16]
   892d2:	9300      	str	r3, [sp, #0]
   892d4:	e696      	b.n	89004 <_vfiprintf_r+0x220>
   892d6:	2501      	movs	r5, #1
   892d8:	f04f 0200 	mov.w	r2, #0
   892dc:	9c04      	ldr	r4, [sp, #16]
   892de:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   892e2:	f854 3b04 	ldr.w	r3, [r4], #4
   892e6:	9501      	str	r5, [sp, #4]
   892e8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   892ec:	9404      	str	r4, [sp, #16]
   892ee:	ae21      	add	r6, sp, #132	; 0x84
   892f0:	e72e      	b.n	89150 <_vfiprintf_r+0x36c>
   892f2:	f001 fdb1 	bl	8ae58 <__sinit>
   892f6:	e582      	b.n	88dfe <_vfiprintf_r+0x1a>
   892f8:	9b02      	ldr	r3, [sp, #8]
   892fa:	425b      	negs	r3, r3
   892fc:	9302      	str	r3, [sp, #8]
   892fe:	f898 3000 	ldrb.w	r3, [r8]
   89302:	f047 0704 	orr.w	r7, r7, #4
   89306:	e5cf      	b.n	88ea8 <_vfiprintf_r+0xc4>
   89308:	f898 3000 	ldrb.w	r3, [r8]
   8930c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89310:	e5ca      	b.n	88ea8 <_vfiprintf_r+0xc4>
   89312:	f898 3000 	ldrb.w	r3, [r8]
   89316:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8931a:	e5c5      	b.n	88ea8 <_vfiprintf_r+0xc4>
   8931c:	4641      	mov	r1, r8
   8931e:	f811 3b01 	ldrb.w	r3, [r1], #1
   89322:	2b2a      	cmp	r3, #42	; 0x2a
   89324:	f000 83dd 	beq.w	89ae2 <_vfiprintf_r+0xcfe>
   89328:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8932c:	2a09      	cmp	r2, #9
   8932e:	4688      	mov	r8, r1
   89330:	bf98      	it	ls
   89332:	2100      	movls	r1, #0
   89334:	f200 83ad 	bhi.w	89a92 <_vfiprintf_r+0xcae>
   89338:	f818 3b01 	ldrb.w	r3, [r8], #1
   8933c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89340:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   89344:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89348:	2a09      	cmp	r2, #9
   8934a:	d9f5      	bls.n	89338 <_vfiprintf_r+0x554>
   8934c:	9100      	str	r1, [sp, #0]
   8934e:	e5ad      	b.n	88eac <_vfiprintf_r+0xc8>
   89350:	9c05      	ldr	r4, [sp, #20]
   89352:	4620      	mov	r0, r4
   89354:	f002 f94a 	bl	8b5ec <_localeconv_r>
   89358:	6843      	ldr	r3, [r0, #4]
   8935a:	4618      	mov	r0, r3
   8935c:	930a      	str	r3, [sp, #40]	; 0x28
   8935e:	f003 fb3f 	bl	8c9e0 <strlen>
   89362:	4603      	mov	r3, r0
   89364:	4620      	mov	r0, r4
   89366:	930b      	str	r3, [sp, #44]	; 0x2c
   89368:	461c      	mov	r4, r3
   8936a:	f002 f93f 	bl	8b5ec <_localeconv_r>
   8936e:	6882      	ldr	r2, [r0, #8]
   89370:	9209      	str	r2, [sp, #36]	; 0x24
   89372:	2c00      	cmp	r4, #0
   89374:	f43f ae13 	beq.w	88f9e <_vfiprintf_r+0x1ba>
   89378:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8937a:	2b00      	cmp	r3, #0
   8937c:	f43f ae0f 	beq.w	88f9e <_vfiprintf_r+0x1ba>
   89380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89382:	781b      	ldrb	r3, [r3, #0]
   89384:	2b00      	cmp	r3, #0
   89386:	f43f ae0a 	beq.w	88f9e <_vfiprintf_r+0x1ba>
   8938a:	f898 3000 	ldrb.w	r3, [r8]
   8938e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   89392:	e589      	b.n	88ea8 <_vfiprintf_r+0xc4>
   89394:	f898 3000 	ldrb.w	r3, [r8]
   89398:	f047 0701 	orr.w	r7, r7, #1
   8939c:	e584      	b.n	88ea8 <_vfiprintf_r+0xc4>
   8939e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   893a2:	2b00      	cmp	r3, #0
   893a4:	f47f adfb 	bne.w	88f9e <_vfiprintf_r+0x1ba>
   893a8:	2320      	movs	r3, #32
   893aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   893ae:	f898 3000 	ldrb.w	r3, [r8]
   893b2:	e579      	b.n	88ea8 <_vfiprintf_r+0xc4>
   893b4:	f898 3000 	ldrb.w	r3, [r8]
   893b8:	2b6c      	cmp	r3, #108	; 0x6c
   893ba:	bf03      	ittte	eq
   893bc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   893c0:	f047 0720 	orreq.w	r7, r7, #32
   893c4:	f108 0801 	addeq.w	r8, r8, #1
   893c8:	f047 0710 	orrne.w	r7, r7, #16
   893cc:	e56c      	b.n	88ea8 <_vfiprintf_r+0xc4>
   893ce:	f898 3000 	ldrb.w	r3, [r8]
   893d2:	2b68      	cmp	r3, #104	; 0x68
   893d4:	bf03      	ittte	eq
   893d6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   893da:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   893de:	f108 0801 	addeq.w	r8, r8, #1
   893e2:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   893e6:	e55f      	b.n	88ea8 <_vfiprintf_r+0xc4>
   893e8:	f047 0910 	orr.w	r9, r7, #16
   893ec:	f019 0f20 	tst.w	r9, #32
   893f0:	9c04      	ldr	r4, [sp, #16]
   893f2:	f000 8200 	beq.w	897f6 <_vfiprintf_r+0xa12>
   893f6:	3407      	adds	r4, #7
   893f8:	f024 0307 	bic.w	r3, r4, #7
   893fc:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89400:	9304      	str	r3, [sp, #16]
   89402:	2301      	movs	r3, #1
   89404:	e63f      	b.n	89086 <_vfiprintf_r+0x2a2>
   89406:	f647 0330 	movw	r3, #30768	; 0x7830
   8940a:	9c04      	ldr	r4, [sp, #16]
   8940c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89410:	f854 2b04 	ldr.w	r2, [r4], #4
   89414:	4bbf      	ldr	r3, [pc, #764]	; (89714 <_vfiprintf_r+0x930>)
   89416:	9404      	str	r4, [sp, #16]
   89418:	9308      	str	r3, [sp, #32]
   8941a:	4614      	mov	r4, r2
   8941c:	2500      	movs	r5, #0
   8941e:	2302      	movs	r3, #2
   89420:	f047 0902 	orr.w	r9, r7, #2
   89424:	e62f      	b.n	89086 <_vfiprintf_r+0x2a2>
   89426:	06bb      	lsls	r3, r7, #26
   89428:	f100 8232 	bmi.w	89890 <_vfiprintf_r+0xaac>
   8942c:	06fe      	lsls	r6, r7, #27
   8942e:	f100 82cf 	bmi.w	899d0 <_vfiprintf_r+0xbec>
   89432:	067d      	lsls	r5, r7, #25
   89434:	f100 8301 	bmi.w	89a3a <_vfiprintf_r+0xc56>
   89438:	05bc      	lsls	r4, r7, #22
   8943a:	f140 82c9 	bpl.w	899d0 <_vfiprintf_r+0xbec>
   8943e:	9c04      	ldr	r4, [sp, #16]
   89440:	9a03      	ldr	r2, [sp, #12]
   89442:	f854 3b04 	ldr.w	r3, [r4], #4
   89446:	701a      	strb	r2, [r3, #0]
   89448:	9404      	str	r4, [sp, #16]
   8944a:	e509      	b.n	88e60 <_vfiprintf_r+0x7c>
   8944c:	46b9      	mov	r9, r7
   8944e:	2b01      	cmp	r3, #1
   89450:	f43f adcb 	beq.w	88fea <_vfiprintf_r+0x206>
   89454:	2b02      	cmp	r3, #2
   89456:	ae3a      	add	r6, sp, #232	; 0xe8
   89458:	d113      	bne.n	89482 <_vfiprintf_r+0x69e>
   8945a:	9808      	ldr	r0, [sp, #32]
   8945c:	0923      	lsrs	r3, r4, #4
   8945e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   89462:	0929      	lsrs	r1, r5, #4
   89464:	f004 020f 	and.w	r2, r4, #15
   89468:	460d      	mov	r5, r1
   8946a:	461c      	mov	r4, r3
   8946c:	5c83      	ldrb	r3, [r0, r2]
   8946e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89472:	ea54 0305 	orrs.w	r3, r4, r5
   89476:	d1f1      	bne.n	8945c <_vfiprintf_r+0x678>
   89478:	ab3a      	add	r3, sp, #232	; 0xe8
   8947a:	1b9b      	subs	r3, r3, r6
   8947c:	464f      	mov	r7, r9
   8947e:	9301      	str	r3, [sp, #4]
   89480:	e5c0      	b.n	89004 <_vfiprintf_r+0x220>
   89482:	08e2      	lsrs	r2, r4, #3
   89484:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   89488:	08e9      	lsrs	r1, r5, #3
   8948a:	f004 0307 	and.w	r3, r4, #7
   8948e:	460d      	mov	r5, r1
   89490:	4614      	mov	r4, r2
   89492:	3330      	adds	r3, #48	; 0x30
   89494:	ea54 0105 	orrs.w	r1, r4, r5
   89498:	4632      	mov	r2, r6
   8949a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8949e:	d1f0      	bne.n	89482 <_vfiprintf_r+0x69e>
   894a0:	f019 0f01 	tst.w	r9, #1
   894a4:	d0e8      	beq.n	89478 <_vfiprintf_r+0x694>
   894a6:	2b30      	cmp	r3, #48	; 0x30
   894a8:	d0e6      	beq.n	89478 <_vfiprintf_r+0x694>
   894aa:	2330      	movs	r3, #48	; 0x30
   894ac:	3a02      	subs	r2, #2
   894ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   894b2:	ab3a      	add	r3, sp, #232	; 0xe8
   894b4:	1a9b      	subs	r3, r3, r2
   894b6:	464f      	mov	r7, r9
   894b8:	4616      	mov	r6, r2
   894ba:	9301      	str	r3, [sp, #4]
   894bc:	e5a2      	b.n	89004 <_vfiprintf_r+0x220>
   894be:	2301      	movs	r3, #1
   894c0:	9a01      	ldr	r2, [sp, #4]
   894c2:	930f      	str	r3, [sp, #60]	; 0x3c
   894c4:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   894c8:	9212      	str	r2, [sp, #72]	; 0x48
   894ca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   894ce:	f10a 0a08 	add.w	sl, sl, #8
   894d2:	e69d      	b.n	89210 <_vfiprintf_r+0x42c>
   894d4:	9b02      	ldr	r3, [sp, #8]
   894d6:	1b5c      	subs	r4, r3, r5
   894d8:	2c00      	cmp	r4, #0
   894da:	f77f ae7d 	ble.w	891d8 <_vfiprintf_r+0x3f4>
   894de:	2c10      	cmp	r4, #16
   894e0:	f340 82ea 	ble.w	89ab8 <_vfiprintf_r+0xcd4>
   894e4:	f8df 9230 	ldr.w	r9, [pc, #560]	; 89718 <_vfiprintf_r+0x934>
   894e8:	4650      	mov	r0, sl
   894ea:	9706      	str	r7, [sp, #24]
   894ec:	46b2      	mov	sl, r6
   894ee:	464e      	mov	r6, r9
   894f0:	46c1      	mov	r9, r8
   894f2:	46a8      	mov	r8, r5
   894f4:	9d05      	ldr	r5, [sp, #20]
   894f6:	e006      	b.n	89506 <_vfiprintf_r+0x722>
   894f8:	f101 0c02 	add.w	ip, r1, #2
   894fc:	4619      	mov	r1, r3
   894fe:	3008      	adds	r0, #8
   89500:	3c10      	subs	r4, #16
   89502:	2c10      	cmp	r4, #16
   89504:	dd1a      	ble.n	8953c <_vfiprintf_r+0x758>
   89506:	2710      	movs	r7, #16
   89508:	1c4b      	adds	r3, r1, #1
   8950a:	3210      	adds	r2, #16
   8950c:	2b07      	cmp	r3, #7
   8950e:	9210      	str	r2, [sp, #64]	; 0x40
   89510:	6006      	str	r6, [r0, #0]
   89512:	6047      	str	r7, [r0, #4]
   89514:	930f      	str	r3, [sp, #60]	; 0x3c
   89516:	ddef      	ble.n	894f8 <_vfiprintf_r+0x714>
   89518:	2a00      	cmp	r2, #0
   8951a:	d07b      	beq.n	89614 <_vfiprintf_r+0x830>
   8951c:	4659      	mov	r1, fp
   8951e:	4628      	mov	r0, r5
   89520:	aa0e      	add	r2, sp, #56	; 0x38
   89522:	f7ff fc23 	bl	88d6c <__sprint_r.part.0>
   89526:	2800      	cmp	r0, #0
   89528:	f47f adf6 	bne.w	89118 <_vfiprintf_r+0x334>
   8952c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89530:	3c10      	subs	r4, #16
   89532:	2c10      	cmp	r4, #16
   89534:	a811      	add	r0, sp, #68	; 0x44
   89536:	f101 0c01 	add.w	ip, r1, #1
   8953a:	dce4      	bgt.n	89506 <_vfiprintf_r+0x722>
   8953c:	4645      	mov	r5, r8
   8953e:	46c8      	mov	r8, r9
   89540:	46b1      	mov	r9, r6
   89542:	4656      	mov	r6, sl
   89544:	4682      	mov	sl, r0
   89546:	9f06      	ldr	r7, [sp, #24]
   89548:	4422      	add	r2, r4
   8954a:	f1bc 0f07 	cmp.w	ip, #7
   8954e:	e9ca 9400 	strd	r9, r4, [sl]
   89552:	9210      	str	r2, [sp, #64]	; 0x40
   89554:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   89558:	f340 817e 	ble.w	89858 <_vfiprintf_r+0xa74>
   8955c:	2a00      	cmp	r2, #0
   8955e:	f000 825c 	beq.w	89a1a <_vfiprintf_r+0xc36>
   89562:	4659      	mov	r1, fp
   89564:	9805      	ldr	r0, [sp, #20]
   89566:	aa0e      	add	r2, sp, #56	; 0x38
   89568:	f7ff fc00 	bl	88d6c <__sprint_r.part.0>
   8956c:	2800      	cmp	r0, #0
   8956e:	f47f add3 	bne.w	89118 <_vfiprintf_r+0x334>
   89572:	e9dd 3400 	ldrd	r3, r4, [sp]
   89576:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8957a:	1b1c      	subs	r4, r3, r4
   8957c:	2c00      	cmp	r4, #0
   8957e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89582:	f101 0001 	add.w	r0, r1, #1
   89586:	f77f ae2d 	ble.w	891e4 <_vfiprintf_r+0x400>
   8958a:	2c10      	cmp	r4, #16
   8958c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 89718 <_vfiprintf_r+0x934>
   89590:	dd2f      	ble.n	895f2 <_vfiprintf_r+0x80e>
   89592:	46d4      	mov	ip, sl
   89594:	46b2      	mov	sl, r6
   89596:	464e      	mov	r6, r9
   89598:	46c1      	mov	r9, r8
   8959a:	46a8      	mov	r8, r5
   8959c:	9d05      	ldr	r5, [sp, #20]
   8959e:	e006      	b.n	895ae <_vfiprintf_r+0x7ca>
   895a0:	1c88      	adds	r0, r1, #2
   895a2:	4619      	mov	r1, r3
   895a4:	f10c 0c08 	add.w	ip, ip, #8
   895a8:	3c10      	subs	r4, #16
   895aa:	2c10      	cmp	r4, #16
   895ac:	dd1c      	ble.n	895e8 <_vfiprintf_r+0x804>
   895ae:	2010      	movs	r0, #16
   895b0:	1c4b      	adds	r3, r1, #1
   895b2:	3210      	adds	r2, #16
   895b4:	2b07      	cmp	r3, #7
   895b6:	9210      	str	r2, [sp, #64]	; 0x40
   895b8:	f8cc 6000 	str.w	r6, [ip]
   895bc:	f8cc 0004 	str.w	r0, [ip, #4]
   895c0:	930f      	str	r3, [sp, #60]	; 0x3c
   895c2:	dded      	ble.n	895a0 <_vfiprintf_r+0x7bc>
   895c4:	b30a      	cbz	r2, 8960a <_vfiprintf_r+0x826>
   895c6:	4659      	mov	r1, fp
   895c8:	4628      	mov	r0, r5
   895ca:	aa0e      	add	r2, sp, #56	; 0x38
   895cc:	f7ff fbce 	bl	88d6c <__sprint_r.part.0>
   895d0:	2800      	cmp	r0, #0
   895d2:	f47f ada1 	bne.w	89118 <_vfiprintf_r+0x334>
   895d6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   895da:	3c10      	subs	r4, #16
   895dc:	2c10      	cmp	r4, #16
   895de:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   895e2:	f101 0001 	add.w	r0, r1, #1
   895e6:	dce2      	bgt.n	895ae <_vfiprintf_r+0x7ca>
   895e8:	4645      	mov	r5, r8
   895ea:	46c8      	mov	r8, r9
   895ec:	46b1      	mov	r9, r6
   895ee:	4656      	mov	r6, sl
   895f0:	46e2      	mov	sl, ip
   895f2:	4422      	add	r2, r4
   895f4:	2807      	cmp	r0, #7
   895f6:	e9ca 9400 	strd	r9, r4, [sl]
   895fa:	9210      	str	r2, [sp, #64]	; 0x40
   895fc:	900f      	str	r0, [sp, #60]	; 0x3c
   895fe:	f300 80d3 	bgt.w	897a8 <_vfiprintf_r+0x9c4>
   89602:	f10a 0a08 	add.w	sl, sl, #8
   89606:	3001      	adds	r0, #1
   89608:	e5ec      	b.n	891e4 <_vfiprintf_r+0x400>
   8960a:	2001      	movs	r0, #1
   8960c:	4611      	mov	r1, r2
   8960e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89612:	e7c9      	b.n	895a8 <_vfiprintf_r+0x7c4>
   89614:	f04f 0c01 	mov.w	ip, #1
   89618:	4611      	mov	r1, r2
   8961a:	a811      	add	r0, sp, #68	; 0x44
   8961c:	e770      	b.n	89500 <_vfiprintf_r+0x71c>
   8961e:	2a00      	cmp	r2, #0
   89620:	f000 80d3 	beq.w	897ca <_vfiprintf_r+0x9e6>
   89624:	4659      	mov	r1, fp
   89626:	9805      	ldr	r0, [sp, #20]
   89628:	aa0e      	add	r2, sp, #56	; 0x38
   8962a:	f7ff fb9f 	bl	88d6c <__sprint_r.part.0>
   8962e:	2800      	cmp	r0, #0
   89630:	f47f ad72 	bne.w	89118 <_vfiprintf_r+0x334>
   89634:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89638:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8963c:	1c48      	adds	r0, r1, #1
   8963e:	e5ac      	b.n	8919a <_vfiprintf_r+0x3b6>
   89640:	2202      	movs	r2, #2
   89642:	2001      	movs	r0, #1
   89644:	ab0d      	add	r3, sp, #52	; 0x34
   89646:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8964a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8964e:	4601      	mov	r1, r0
   89650:	f10a 0a08 	add.w	sl, sl, #8
   89654:	1c48      	adds	r0, r1, #1
   89656:	e5bb      	b.n	891d0 <_vfiprintf_r+0x3ec>
   89658:	2c10      	cmp	r4, #16
   8965a:	f340 8214 	ble.w	89a86 <_vfiprintf_r+0xca2>
   8965e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89662:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8971c <_vfiprintf_r+0x938>
   89666:	46d4      	mov	ip, sl
   89668:	46b2      	mov	sl, r6
   8966a:	464e      	mov	r6, r9
   8966c:	46c1      	mov	r9, r8
   8966e:	46a8      	mov	r8, r5
   89670:	9d05      	ldr	r5, [sp, #20]
   89672:	e006      	b.n	89682 <_vfiprintf_r+0x89e>
   89674:	1c99      	adds	r1, r3, #2
   89676:	4603      	mov	r3, r0
   89678:	f10c 0c08 	add.w	ip, ip, #8
   8967c:	3c10      	subs	r4, #16
   8967e:	2c10      	cmp	r4, #16
   89680:	dd1c      	ble.n	896bc <_vfiprintf_r+0x8d8>
   89682:	2110      	movs	r1, #16
   89684:	1c58      	adds	r0, r3, #1
   89686:	3210      	adds	r2, #16
   89688:	2807      	cmp	r0, #7
   8968a:	9210      	str	r2, [sp, #64]	; 0x40
   8968c:	f8cc 6000 	str.w	r6, [ip]
   89690:	f8cc 1004 	str.w	r1, [ip, #4]
   89694:	900f      	str	r0, [sp, #60]	; 0x3c
   89696:	dded      	ble.n	89674 <_vfiprintf_r+0x890>
   89698:	b30a      	cbz	r2, 896de <_vfiprintf_r+0x8fa>
   8969a:	4659      	mov	r1, fp
   8969c:	4628      	mov	r0, r5
   8969e:	aa0e      	add	r2, sp, #56	; 0x38
   896a0:	f7ff fb64 	bl	88d6c <__sprint_r.part.0>
   896a4:	2800      	cmp	r0, #0
   896a6:	f47f ad37 	bne.w	89118 <_vfiprintf_r+0x334>
   896aa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   896ae:	3c10      	subs	r4, #16
   896b0:	2c10      	cmp	r4, #16
   896b2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   896b6:	f103 0101 	add.w	r1, r3, #1
   896ba:	dce2      	bgt.n	89682 <_vfiprintf_r+0x89e>
   896bc:	4645      	mov	r5, r8
   896be:	46c8      	mov	r8, r9
   896c0:	46b1      	mov	r9, r6
   896c2:	4656      	mov	r6, sl
   896c4:	46e2      	mov	sl, ip
   896c6:	4422      	add	r2, r4
   896c8:	2907      	cmp	r1, #7
   896ca:	e9ca 9400 	strd	r9, r4, [sl]
   896ce:	9210      	str	r2, [sp, #64]	; 0x40
   896d0:	910f      	str	r1, [sp, #60]	; 0x3c
   896d2:	f300 80a8 	bgt.w	89826 <_vfiprintf_r+0xa42>
   896d6:	f10a 0a08 	add.w	sl, sl, #8
   896da:	1c48      	adds	r0, r1, #1
   896dc:	e54b      	b.n	89176 <_vfiprintf_r+0x392>
   896de:	4613      	mov	r3, r2
   896e0:	2101      	movs	r1, #1
   896e2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   896e6:	e7c9      	b.n	8967c <_vfiprintf_r+0x898>
   896e8:	0778      	lsls	r0, r7, #29
   896ea:	920f      	str	r2, [sp, #60]	; 0x3c
   896ec:	d554      	bpl.n	89798 <_vfiprintf_r+0x9b4>
   896ee:	9b02      	ldr	r3, [sp, #8]
   896f0:	1b5c      	subs	r4, r3, r5
   896f2:	2c00      	cmp	r4, #0
   896f4:	dd50      	ble.n	89798 <_vfiprintf_r+0x9b4>
   896f6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   896fa:	2c10      	cmp	r4, #16
   896fc:	f340 81d7 	ble.w	89aae <_vfiprintf_r+0xcca>
   89700:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8971c <_vfiprintf_r+0x938>
   89704:	2610      	movs	r6, #16
   89706:	464b      	mov	r3, r9
   89708:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8970a:	46a9      	mov	r9, r5
   8970c:	9f05      	ldr	r7, [sp, #20]
   8970e:	461d      	mov	r5, r3
   89710:	e00d      	b.n	8972e <_vfiprintf_r+0x94a>
   89712:	bf00      	nop
   89714:	0008da2c 	.word	0x0008da2c
   89718:	0008da90 	.word	0x0008da90
   8971c:	0008da80 	.word	0x0008da80
   89720:	1c88      	adds	r0, r1, #2
   89722:	4619      	mov	r1, r3
   89724:	f10a 0a08 	add.w	sl, sl, #8
   89728:	3c10      	subs	r4, #16
   8972a:	2c10      	cmp	r4, #16
   8972c:	dd19      	ble.n	89762 <_vfiprintf_r+0x97e>
   8972e:	1c4b      	adds	r3, r1, #1
   89730:	3210      	adds	r2, #16
   89732:	2b07      	cmp	r3, #7
   89734:	e9ca 5600 	strd	r5, r6, [sl]
   89738:	9210      	str	r2, [sp, #64]	; 0x40
   8973a:	930f      	str	r3, [sp, #60]	; 0x3c
   8973c:	ddf0      	ble.n	89720 <_vfiprintf_r+0x93c>
   8973e:	b332      	cbz	r2, 8978e <_vfiprintf_r+0x9aa>
   89740:	4659      	mov	r1, fp
   89742:	4638      	mov	r0, r7
   89744:	aa0e      	add	r2, sp, #56	; 0x38
   89746:	f7ff fb11 	bl	88d6c <__sprint_r.part.0>
   8974a:	2800      	cmp	r0, #0
   8974c:	f47f ace4 	bne.w	89118 <_vfiprintf_r+0x334>
   89750:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89754:	3c10      	subs	r4, #16
   89756:	2c10      	cmp	r4, #16
   89758:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8975c:	f101 0001 	add.w	r0, r1, #1
   89760:	dce5      	bgt.n	8972e <_vfiprintf_r+0x94a>
   89762:	462b      	mov	r3, r5
   89764:	464d      	mov	r5, r9
   89766:	4699      	mov	r9, r3
   89768:	4422      	add	r2, r4
   8976a:	2807      	cmp	r0, #7
   8976c:	e9ca 9400 	strd	r9, r4, [sl]
   89770:	9210      	str	r2, [sp, #64]	; 0x40
   89772:	900f      	str	r0, [sp, #60]	; 0x3c
   89774:	f77f ad53 	ble.w	8921e <_vfiprintf_r+0x43a>
   89778:	b172      	cbz	r2, 89798 <_vfiprintf_r+0x9b4>
   8977a:	4659      	mov	r1, fp
   8977c:	9805      	ldr	r0, [sp, #20]
   8977e:	aa0e      	add	r2, sp, #56	; 0x38
   89780:	f7ff faf4 	bl	88d6c <__sprint_r.part.0>
   89784:	2800      	cmp	r0, #0
   89786:	f47f acc7 	bne.w	89118 <_vfiprintf_r+0x334>
   8978a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8978c:	e547      	b.n	8921e <_vfiprintf_r+0x43a>
   8978e:	2001      	movs	r0, #1
   89790:	4611      	mov	r1, r2
   89792:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89796:	e7c7      	b.n	89728 <_vfiprintf_r+0x944>
   89798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8979c:	42aa      	cmp	r2, r5
   8979e:	bfac      	ite	ge
   897a0:	189b      	addge	r3, r3, r2
   897a2:	195b      	addlt	r3, r3, r5
   897a4:	9303      	str	r3, [sp, #12]
   897a6:	e544      	b.n	89232 <_vfiprintf_r+0x44e>
   897a8:	2a00      	cmp	r2, #0
   897aa:	f43f ae88 	beq.w	894be <_vfiprintf_r+0x6da>
   897ae:	4659      	mov	r1, fp
   897b0:	9805      	ldr	r0, [sp, #20]
   897b2:	aa0e      	add	r2, sp, #56	; 0x38
   897b4:	f7ff fada 	bl	88d6c <__sprint_r.part.0>
   897b8:	2800      	cmp	r0, #0
   897ba:	f47f acad 	bne.w	89118 <_vfiprintf_r+0x334>
   897be:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   897c2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897c6:	3001      	adds	r0, #1
   897c8:	e50c      	b.n	891e4 <_vfiprintf_r+0x400>
   897ca:	9b07      	ldr	r3, [sp, #28]
   897cc:	2b00      	cmp	r3, #0
   897ce:	d16b      	bne.n	898a8 <_vfiprintf_r+0xac4>
   897d0:	2001      	movs	r0, #1
   897d2:	4611      	mov	r1, r2
   897d4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897d8:	e4fa      	b.n	891d0 <_vfiprintf_r+0x3ec>
   897da:	920f      	str	r2, [sp, #60]	; 0x3c
   897dc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897e0:	e481      	b.n	890e6 <_vfiprintf_r+0x302>
   897e2:	9b00      	ldr	r3, [sp, #0]
   897e4:	2b00      	cmp	r3, #0
   897e6:	f47f ac05 	bne.w	88ff4 <_vfiprintf_r+0x210>
   897ea:	464f      	mov	r7, r9
   897ec:	2300      	movs	r3, #0
   897ee:	ae3a      	add	r6, sp, #232	; 0xe8
   897f0:	9300      	str	r3, [sp, #0]
   897f2:	9301      	str	r3, [sp, #4]
   897f4:	e406      	b.n	89004 <_vfiprintf_r+0x220>
   897f6:	f854 2b04 	ldr.w	r2, [r4], #4
   897fa:	f019 0f10 	tst.w	r9, #16
   897fe:	f04f 0301 	mov.w	r3, #1
   89802:	9404      	str	r4, [sp, #16]
   89804:	d132      	bne.n	8986c <_vfiprintf_r+0xa88>
   89806:	f019 0f40 	tst.w	r9, #64	; 0x40
   8980a:	d02b      	beq.n	89864 <_vfiprintf_r+0xa80>
   8980c:	2500      	movs	r5, #0
   8980e:	b294      	uxth	r4, r2
   89810:	e439      	b.n	89086 <_vfiprintf_r+0x2a2>
   89812:	232d      	movs	r3, #45	; 0x2d
   89814:	4264      	negs	r4, r4
   89816:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8981a:	46b9      	mov	r9, r7
   8981c:	f04f 0301 	mov.w	r3, #1
   89820:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   89824:	e433      	b.n	8908e <_vfiprintf_r+0x2aa>
   89826:	2a00      	cmp	r2, #0
   89828:	d06f      	beq.n	8990a <_vfiprintf_r+0xb26>
   8982a:	4659      	mov	r1, fp
   8982c:	9805      	ldr	r0, [sp, #20]
   8982e:	aa0e      	add	r2, sp, #56	; 0x38
   89830:	f7ff fa9c 	bl	88d6c <__sprint_r.part.0>
   89834:	2800      	cmp	r0, #0
   89836:	f47f ac6f 	bne.w	89118 <_vfiprintf_r+0x334>
   8983a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8983e:	e497      	b.n	89170 <_vfiprintf_r+0x38c>
   89840:	ae3a      	add	r6, sp, #232	; 0xe8
   89842:	f7ff bbdf 	b.w	89004 <_vfiprintf_r+0x220>
   89846:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8984a:	f001 fed7 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8984e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   89852:	b28a      	uxth	r2, r1
   89854:	f7ff badd 	b.w	88e12 <_vfiprintf_r+0x2e>
   89858:	4661      	mov	r1, ip
   8985a:	f10a 0a08 	add.w	sl, sl, #8
   8985e:	f10c 0001 	add.w	r0, ip, #1
   89862:	e4b9      	b.n	891d8 <_vfiprintf_r+0x3f4>
   89864:	f419 7f00 	tst.w	r9, #512	; 0x200
   89868:	f040 80ef 	bne.w	89a4a <_vfiprintf_r+0xc66>
   8986c:	4614      	mov	r4, r2
   8986e:	2500      	movs	r5, #0
   89870:	e409      	b.n	89086 <_vfiprintf_r+0x2a2>
   89872:	05be      	lsls	r6, r7, #22
   89874:	f100 80f7 	bmi.w	89a66 <_vfiprintf_r+0xc82>
   89878:	461c      	mov	r4, r3
   8987a:	2500      	movs	r5, #0
   8987c:	e400      	b.n	89080 <_vfiprintf_r+0x29c>
   8987e:	05ba      	lsls	r2, r7, #22
   89880:	f100 80ea 	bmi.w	89a58 <_vfiprintf_r+0xc74>
   89884:	17e5      	asrs	r5, r4, #31
   89886:	9304      	str	r3, [sp, #16]
   89888:	4622      	mov	r2, r4
   8988a:	462b      	mov	r3, r5
   8988c:	f7ff bb9e 	b.w	88fcc <_vfiprintf_r+0x1e8>
   89890:	9b03      	ldr	r3, [sp, #12]
   89892:	9c04      	ldr	r4, [sp, #16]
   89894:	17dd      	asrs	r5, r3, #31
   89896:	461a      	mov	r2, r3
   89898:	462b      	mov	r3, r5
   8989a:	f854 1b04 	ldr.w	r1, [r4], #4
   8989e:	e9c1 2300 	strd	r2, r3, [r1]
   898a2:	9404      	str	r4, [sp, #16]
   898a4:	f7ff badc 	b.w	88e60 <_vfiprintf_r+0x7c>
   898a8:	2202      	movs	r2, #2
   898aa:	ab0d      	add	r3, sp, #52	; 0x34
   898ac:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   898b0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   898b4:	e6cc      	b.n	89650 <_vfiprintf_r+0x86c>
   898b6:	46b9      	mov	r9, r7
   898b8:	e598      	b.n	893ec <_vfiprintf_r+0x608>
   898ba:	4a90      	ldr	r2, [pc, #576]	; (89afc <_vfiprintf_r+0xd18>)
   898bc:	9208      	str	r2, [sp, #32]
   898be:	06bd      	lsls	r5, r7, #26
   898c0:	9c04      	ldr	r4, [sp, #16]
   898c2:	d530      	bpl.n	89926 <_vfiprintf_r+0xb42>
   898c4:	3407      	adds	r4, #7
   898c6:	f024 0207 	bic.w	r2, r4, #7
   898ca:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   898ce:	9204      	str	r2, [sp, #16]
   898d0:	07fe      	lsls	r6, r7, #31
   898d2:	d509      	bpl.n	898e8 <_vfiprintf_r+0xb04>
   898d4:	ea54 0205 	orrs.w	r2, r4, r5
   898d8:	d006      	beq.n	898e8 <_vfiprintf_r+0xb04>
   898da:	2230      	movs	r2, #48	; 0x30
   898dc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   898e0:	f047 0702 	orr.w	r7, r7, #2
   898e4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   898e8:	2302      	movs	r3, #2
   898ea:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   898ee:	f7ff bbca 	b.w	89086 <_vfiprintf_r+0x2a2>
   898f2:	4a83      	ldr	r2, [pc, #524]	; (89b00 <_vfiprintf_r+0xd1c>)
   898f4:	9208      	str	r2, [sp, #32]
   898f6:	e7e2      	b.n	898be <_vfiprintf_r+0xada>
   898f8:	4630      	mov	r0, r6
   898fa:	f003 f871 	bl	8c9e0 <strlen>
   898fe:	2300      	movs	r3, #0
   89900:	9404      	str	r4, [sp, #16]
   89902:	9001      	str	r0, [sp, #4]
   89904:	9300      	str	r3, [sp, #0]
   89906:	f7ff bb7d 	b.w	89004 <_vfiprintf_r+0x220>
   8990a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   8990e:	2900      	cmp	r1, #0
   89910:	f040 8089 	bne.w	89a26 <_vfiprintf_r+0xc42>
   89914:	9b07      	ldr	r3, [sp, #28]
   89916:	2b00      	cmp	r3, #0
   89918:	f47f ae92 	bne.w	89640 <_vfiprintf_r+0x85c>
   8991c:	4611      	mov	r1, r2
   8991e:	2001      	movs	r0, #1
   89920:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89924:	e458      	b.n	891d8 <_vfiprintf_r+0x3f4>
   89926:	f854 2b04 	ldr.w	r2, [r4], #4
   8992a:	9404      	str	r4, [sp, #16]
   8992c:	06fc      	lsls	r4, r7, #27
   8992e:	d407      	bmi.n	89940 <_vfiprintf_r+0xb5c>
   89930:	0678      	lsls	r0, r7, #25
   89932:	d502      	bpl.n	8993a <_vfiprintf_r+0xb56>
   89934:	2500      	movs	r5, #0
   89936:	b294      	uxth	r4, r2
   89938:	e7ca      	b.n	898d0 <_vfiprintf_r+0xaec>
   8993a:	05b9      	lsls	r1, r7, #22
   8993c:	f100 8089 	bmi.w	89a52 <_vfiprintf_r+0xc6e>
   89940:	4614      	mov	r4, r2
   89942:	2500      	movs	r5, #0
   89944:	e7c4      	b.n	898d0 <_vfiprintf_r+0xaec>
   89946:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8994a:	f8cd 9004 	str.w	r9, [sp, #4]
   8994e:	f8cd 8018 	str.w	r8, [sp, #24]
   89952:	2700      	movs	r7, #0
   89954:	4698      	mov	r8, r3
   89956:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8995a:	ae3a      	add	r6, sp, #232	; 0xe8
   8995c:	e00b      	b.n	89976 <_vfiprintf_r+0xb92>
   8995e:	220a      	movs	r2, #10
   89960:	2300      	movs	r3, #0
   89962:	4620      	mov	r0, r4
   89964:	4629      	mov	r1, r5
   89966:	f7fd f9bd 	bl	86ce4 <__aeabi_uldivmod>
   8996a:	2d00      	cmp	r5, #0
   8996c:	bf08      	it	eq
   8996e:	2c0a      	cmpeq	r4, #10
   89970:	d319      	bcc.n	899a6 <_vfiprintf_r+0xbc2>
   89972:	4604      	mov	r4, r0
   89974:	460d      	mov	r5, r1
   89976:	220a      	movs	r2, #10
   89978:	2300      	movs	r3, #0
   8997a:	4620      	mov	r0, r4
   8997c:	4629      	mov	r1, r5
   8997e:	f7fd f9b1 	bl	86ce4 <__aeabi_uldivmod>
   89982:	3230      	adds	r2, #48	; 0x30
   89984:	f806 2c01 	strb.w	r2, [r6, #-1]
   89988:	3701      	adds	r7, #1
   8998a:	3e01      	subs	r6, #1
   8998c:	f1b8 0f00 	cmp.w	r8, #0
   89990:	d0e5      	beq.n	8995e <_vfiprintf_r+0xb7a>
   89992:	f899 3000 	ldrb.w	r3, [r9]
   89996:	42bb      	cmp	r3, r7
   89998:	d1e1      	bne.n	8995e <_vfiprintf_r+0xb7a>
   8999a:	2fff      	cmp	r7, #255	; 0xff
   8999c:	d0df      	beq.n	8995e <_vfiprintf_r+0xb7a>
   8999e:	2d00      	cmp	r5, #0
   899a0:	bf08      	it	eq
   899a2:	2c0a      	cmpeq	r4, #10
   899a4:	d225      	bcs.n	899f2 <_vfiprintf_r+0xc0e>
   899a6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   899aa:	ab3a      	add	r3, sp, #232	; 0xe8
   899ac:	f8dd 9004 	ldr.w	r9, [sp, #4]
   899b0:	1b9b      	subs	r3, r3, r6
   899b2:	464f      	mov	r7, r9
   899b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   899b8:	9301      	str	r3, [sp, #4]
   899ba:	f7ff bb23 	b.w	89004 <_vfiprintf_r+0x220>
   899be:	46b9      	mov	r9, r7
   899c0:	f7ff bb13 	b.w	88fea <_vfiprintf_r+0x206>
   899c4:	2b01      	cmp	r3, #1
   899c6:	46b9      	mov	r9, r7
   899c8:	f47f ad44 	bne.w	89454 <_vfiprintf_r+0x670>
   899cc:	f7ff bb12 	b.w	88ff4 <_vfiprintf_r+0x210>
   899d0:	9c04      	ldr	r4, [sp, #16]
   899d2:	9a03      	ldr	r2, [sp, #12]
   899d4:	f854 3b04 	ldr.w	r3, [r4], #4
   899d8:	601a      	str	r2, [r3, #0]
   899da:	9404      	str	r4, [sp, #16]
   899dc:	f7ff ba40 	b.w	88e60 <_vfiprintf_r+0x7c>
   899e0:	9d00      	ldr	r5, [sp, #0]
   899e2:	4e48      	ldr	r6, [pc, #288]	; (89b04 <_vfiprintf_r+0xd20>)
   899e4:	2d06      	cmp	r5, #6
   899e6:	bf28      	it	cs
   899e8:	2506      	movcs	r5, #6
   899ea:	9404      	str	r4, [sp, #16]
   899ec:	9501      	str	r5, [sp, #4]
   899ee:	f7ff bbaf 	b.w	89150 <_vfiprintf_r+0x36c>
   899f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   899f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   899f6:	1af6      	subs	r6, r6, r3
   899f8:	461a      	mov	r2, r3
   899fa:	4630      	mov	r0, r6
   899fc:	f003 f81e 	bl	8ca3c <strncpy>
   89a00:	f899 3001 	ldrb.w	r3, [r9, #1]
   89a04:	b10b      	cbz	r3, 89a0a <_vfiprintf_r+0xc26>
   89a06:	f109 0901 	add.w	r9, r9, #1
   89a0a:	220a      	movs	r2, #10
   89a0c:	2300      	movs	r3, #0
   89a0e:	4620      	mov	r0, r4
   89a10:	4629      	mov	r1, r5
   89a12:	f7fd f967 	bl	86ce4 <__aeabi_uldivmod>
   89a16:	2700      	movs	r7, #0
   89a18:	e7ab      	b.n	89972 <_vfiprintf_r+0xb8e>
   89a1a:	2001      	movs	r0, #1
   89a1c:	4611      	mov	r1, r2
   89a1e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a22:	f7ff bbd9 	b.w	891d8 <_vfiprintf_r+0x3f4>
   89a26:	2201      	movs	r2, #1
   89a28:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   89a2c:	4610      	mov	r0, r2
   89a2e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   89a32:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a36:	f7ff bbac 	b.w	89192 <_vfiprintf_r+0x3ae>
   89a3a:	9c04      	ldr	r4, [sp, #16]
   89a3c:	9a03      	ldr	r2, [sp, #12]
   89a3e:	f854 3b04 	ldr.w	r3, [r4], #4
   89a42:	801a      	strh	r2, [r3, #0]
   89a44:	9404      	str	r4, [sp, #16]
   89a46:	f7ff ba0b 	b.w	88e60 <_vfiprintf_r+0x7c>
   89a4a:	2500      	movs	r5, #0
   89a4c:	b2d4      	uxtb	r4, r2
   89a4e:	f7ff bb1a 	b.w	89086 <_vfiprintf_r+0x2a2>
   89a52:	2500      	movs	r5, #0
   89a54:	b2d4      	uxtb	r4, r2
   89a56:	e73b      	b.n	898d0 <_vfiprintf_r+0xaec>
   89a58:	b264      	sxtb	r4, r4
   89a5a:	17e5      	asrs	r5, r4, #31
   89a5c:	9304      	str	r3, [sp, #16]
   89a5e:	4622      	mov	r2, r4
   89a60:	462b      	mov	r3, r5
   89a62:	f7ff bab3 	b.w	88fcc <_vfiprintf_r+0x1e8>
   89a66:	2500      	movs	r5, #0
   89a68:	b2dc      	uxtb	r4, r3
   89a6a:	f7ff bb09 	b.w	89080 <_vfiprintf_r+0x29c>
   89a6e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89a72:	f001 fdc5 	bl	8b600 <__retarget_lock_release_recursive>
   89a76:	f7ff baec 	b.w	89052 <_vfiprintf_r+0x26e>
   89a7a:	9b00      	ldr	r3, [sp, #0]
   89a7c:	9404      	str	r4, [sp, #16]
   89a7e:	9301      	str	r3, [sp, #4]
   89a80:	9000      	str	r0, [sp, #0]
   89a82:	f7ff babf 	b.w	89004 <_vfiprintf_r+0x220>
   89a86:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89a8a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 89b08 <_vfiprintf_r+0xd24>
   89a8e:	3101      	adds	r1, #1
   89a90:	e619      	b.n	896c6 <_vfiprintf_r+0x8e2>
   89a92:	2200      	movs	r2, #0
   89a94:	9200      	str	r2, [sp, #0]
   89a96:	f7ff ba09 	b.w	88eac <_vfiprintf_r+0xc8>
   89a9a:	4659      	mov	r1, fp
   89a9c:	9805      	ldr	r0, [sp, #20]
   89a9e:	aa0e      	add	r2, sp, #56	; 0x38
   89aa0:	f7ff f964 	bl	88d6c <__sprint_r.part.0>
   89aa4:	2800      	cmp	r0, #0
   89aa6:	f43f abd2 	beq.w	8924e <_vfiprintf_r+0x46a>
   89aaa:	f7ff bb36 	b.w	8911a <_vfiprintf_r+0x336>
   89aae:	980f      	ldr	r0, [sp, #60]	; 0x3c
   89ab0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 89b08 <_vfiprintf_r+0xd24>
   89ab4:	3001      	adds	r0, #1
   89ab6:	e657      	b.n	89768 <_vfiprintf_r+0x984>
   89ab8:	4684      	mov	ip, r0
   89aba:	f8df 9050 	ldr.w	r9, [pc, #80]	; 89b0c <_vfiprintf_r+0xd28>
   89abe:	e543      	b.n	89548 <_vfiprintf_r+0x764>
   89ac0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89ac4:	07db      	lsls	r3, r3, #31
   89ac6:	d407      	bmi.n	89ad8 <_vfiprintf_r+0xcf4>
   89ac8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89acc:	059f      	lsls	r7, r3, #22
   89ace:	d403      	bmi.n	89ad8 <_vfiprintf_r+0xcf4>
   89ad0:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89ad4:	f001 fd94 	bl	8b600 <__retarget_lock_release_recursive>
   89ad8:	f04f 33ff 	mov.w	r3, #4294967295
   89adc:	9303      	str	r3, [sp, #12]
   89ade:	f7ff bb27 	b.w	89130 <_vfiprintf_r+0x34c>
   89ae2:	9a04      	ldr	r2, [sp, #16]
   89ae4:	f898 3001 	ldrb.w	r3, [r8, #1]
   89ae8:	f852 0b04 	ldr.w	r0, [r2], #4
   89aec:	4688      	mov	r8, r1
   89aee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89af2:	9000      	str	r0, [sp, #0]
   89af4:	9204      	str	r2, [sp, #16]
   89af6:	f7ff b9d7 	b.w	88ea8 <_vfiprintf_r+0xc4>
   89afa:	bf00      	nop
   89afc:	0008da40 	.word	0x0008da40
   89b00:	0008da2c 	.word	0x0008da2c
   89b04:	0008da54 	.word	0x0008da54
   89b08:	0008da80 	.word	0x0008da80
   89b0c:	0008da90 	.word	0x0008da90

00089b10 <__sbprintf>:
   89b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   89b12:	460c      	mov	r4, r1
   89b14:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   89b18:	f04f 0e00 	mov.w	lr, #0
   89b1c:	4615      	mov	r5, r2
   89b1e:	4606      	mov	r6, r0
   89b20:	461f      	mov	r7, r3
   89b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89b24:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   89b28:	89e2      	ldrh	r2, [r4, #14]
   89b2a:	8989      	ldrh	r1, [r1, #12]
   89b2c:	9319      	str	r3, [sp, #100]	; 0x64
   89b2e:	69e3      	ldr	r3, [r4, #28]
   89b30:	f8ad 200e 	strh.w	r2, [sp, #14]
   89b34:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89b36:	f021 0102 	bic.w	r1, r1, #2
   89b3a:	9307      	str	r3, [sp, #28]
   89b3c:	a816      	add	r0, sp, #88	; 0x58
   89b3e:	ab1a      	add	r3, sp, #104	; 0x68
   89b40:	f8ad 100c 	strh.w	r1, [sp, #12]
   89b44:	f8cd e018 	str.w	lr, [sp, #24]
   89b48:	9209      	str	r2, [sp, #36]	; 0x24
   89b4a:	9300      	str	r3, [sp, #0]
   89b4c:	9304      	str	r3, [sp, #16]
   89b4e:	f8cd c008 	str.w	ip, [sp, #8]
   89b52:	f8cd c014 	str.w	ip, [sp, #20]
   89b56:	f001 fd4d 	bl	8b5f4 <__retarget_lock_init_recursive>
   89b5a:	462a      	mov	r2, r5
   89b5c:	463b      	mov	r3, r7
   89b5e:	4669      	mov	r1, sp
   89b60:	4630      	mov	r0, r6
   89b62:	f7ff f93f 	bl	88de4 <_vfiprintf_r>
   89b66:	1e05      	subs	r5, r0, #0
   89b68:	db07      	blt.n	89b7a <__sbprintf+0x6a>
   89b6a:	4630      	mov	r0, r6
   89b6c:	4669      	mov	r1, sp
   89b6e:	f001 f917 	bl	8ada0 <_fflush_r>
   89b72:	2800      	cmp	r0, #0
   89b74:	bf18      	it	ne
   89b76:	f04f 35ff 	movne.w	r5, #4294967295
   89b7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89b7e:	065b      	lsls	r3, r3, #25
   89b80:	d503      	bpl.n	89b8a <__sbprintf+0x7a>
   89b82:	89a3      	ldrh	r3, [r4, #12]
   89b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89b88:	81a3      	strh	r3, [r4, #12]
   89b8a:	9816      	ldr	r0, [sp, #88]	; 0x58
   89b8c:	f001 fd34 	bl	8b5f8 <__retarget_lock_close_recursive>
   89b90:	4628      	mov	r0, r5
   89b92:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089b98 <__swsetup_r>:
   89b98:	b538      	push	{r3, r4, r5, lr}
   89b9a:	4b32      	ldr	r3, [pc, #200]	; (89c64 <__swsetup_r+0xcc>)
   89b9c:	4605      	mov	r5, r0
   89b9e:	6818      	ldr	r0, [r3, #0]
   89ba0:	460c      	mov	r4, r1
   89ba2:	b110      	cbz	r0, 89baa <__swsetup_r+0x12>
   89ba4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89ba6:	2b00      	cmp	r3, #0
   89ba8:	d03c      	beq.n	89c24 <__swsetup_r+0x8c>
   89baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89bae:	0718      	lsls	r0, r3, #28
   89bb0:	b29a      	uxth	r2, r3
   89bb2:	d50c      	bpl.n	89bce <__swsetup_r+0x36>
   89bb4:	6921      	ldr	r1, [r4, #16]
   89bb6:	b1a9      	cbz	r1, 89be4 <__swsetup_r+0x4c>
   89bb8:	f012 0001 	ands.w	r0, r2, #1
   89bbc:	d022      	beq.n	89c04 <__swsetup_r+0x6c>
   89bbe:	2500      	movs	r5, #0
   89bc0:	6960      	ldr	r0, [r4, #20]
   89bc2:	60a5      	str	r5, [r4, #8]
   89bc4:	4240      	negs	r0, r0
   89bc6:	61a0      	str	r0, [r4, #24]
   89bc8:	b311      	cbz	r1, 89c10 <__swsetup_r+0x78>
   89bca:	2000      	movs	r0, #0
   89bcc:	bd38      	pop	{r3, r4, r5, pc}
   89bce:	06d1      	lsls	r1, r2, #27
   89bd0:	d53f      	bpl.n	89c52 <__swsetup_r+0xba>
   89bd2:	0752      	lsls	r2, r2, #29
   89bd4:	d429      	bmi.n	89c2a <__swsetup_r+0x92>
   89bd6:	6921      	ldr	r1, [r4, #16]
   89bd8:	f043 0308 	orr.w	r3, r3, #8
   89bdc:	81a3      	strh	r3, [r4, #12]
   89bde:	b29a      	uxth	r2, r3
   89be0:	2900      	cmp	r1, #0
   89be2:	d1e9      	bne.n	89bb8 <__swsetup_r+0x20>
   89be4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89be8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89bec:	d0e4      	beq.n	89bb8 <__swsetup_r+0x20>
   89bee:	4628      	mov	r0, r5
   89bf0:	4621      	mov	r1, r4
   89bf2:	f001 fd35 	bl	8b660 <__smakebuf_r>
   89bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89bfa:	6921      	ldr	r1, [r4, #16]
   89bfc:	b29a      	uxth	r2, r3
   89bfe:	f012 0001 	ands.w	r0, r2, #1
   89c02:	d1dc      	bne.n	89bbe <__swsetup_r+0x26>
   89c04:	0795      	lsls	r5, r2, #30
   89c06:	bf58      	it	pl
   89c08:	6960      	ldrpl	r0, [r4, #20]
   89c0a:	60a0      	str	r0, [r4, #8]
   89c0c:	2900      	cmp	r1, #0
   89c0e:	d1dc      	bne.n	89bca <__swsetup_r+0x32>
   89c10:	0612      	lsls	r2, r2, #24
   89c12:	bf58      	it	pl
   89c14:	4608      	movpl	r0, r1
   89c16:	d5d9      	bpl.n	89bcc <__swsetup_r+0x34>
   89c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c1c:	f04f 30ff 	mov.w	r0, #4294967295
   89c20:	81a3      	strh	r3, [r4, #12]
   89c22:	bd38      	pop	{r3, r4, r5, pc}
   89c24:	f001 f918 	bl	8ae58 <__sinit>
   89c28:	e7bf      	b.n	89baa <__swsetup_r+0x12>
   89c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89c2c:	b151      	cbz	r1, 89c44 <__swsetup_r+0xac>
   89c2e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   89c32:	4291      	cmp	r1, r2
   89c34:	d004      	beq.n	89c40 <__swsetup_r+0xa8>
   89c36:	4628      	mov	r0, r5
   89c38:	f001 fa32 	bl	8b0a0 <_free_r>
   89c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c40:	2200      	movs	r2, #0
   89c42:	6322      	str	r2, [r4, #48]	; 0x30
   89c44:	2200      	movs	r2, #0
   89c46:	6921      	ldr	r1, [r4, #16]
   89c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   89c4c:	e9c4 1200 	strd	r1, r2, [r4]
   89c50:	e7c2      	b.n	89bd8 <__swsetup_r+0x40>
   89c52:	2209      	movs	r2, #9
   89c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c58:	602a      	str	r2, [r5, #0]
   89c5a:	f04f 30ff 	mov.w	r0, #4294967295
   89c5e:	81a3      	strh	r3, [r4, #12]
   89c60:	bd38      	pop	{r3, r4, r5, pc}
   89c62:	bf00      	nop
   89c64:	2000043c 	.word	0x2000043c

00089c68 <register_fini>:
   89c68:	4b02      	ldr	r3, [pc, #8]	; (89c74 <register_fini+0xc>)
   89c6a:	b113      	cbz	r3, 89c72 <register_fini+0xa>
   89c6c:	4802      	ldr	r0, [pc, #8]	; (89c78 <register_fini+0x10>)
   89c6e:	f000 b805 	b.w	89c7c <atexit>
   89c72:	4770      	bx	lr
   89c74:	00000000 	.word	0x00000000
   89c78:	0008aecd 	.word	0x0008aecd

00089c7c <atexit>:
   89c7c:	2300      	movs	r3, #0
   89c7e:	4601      	mov	r1, r0
   89c80:	461a      	mov	r2, r3
   89c82:	4618      	mov	r0, r3
   89c84:	f003 b824 	b.w	8ccd0 <__register_exitproc>

00089c88 <quorem>:
   89c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89c8c:	6903      	ldr	r3, [r0, #16]
   89c8e:	690d      	ldr	r5, [r1, #16]
   89c90:	b083      	sub	sp, #12
   89c92:	42ab      	cmp	r3, r5
   89c94:	f2c0 8084 	blt.w	89da0 <quorem+0x118>
   89c98:	3d01      	subs	r5, #1
   89c9a:	f101 0614 	add.w	r6, r1, #20
   89c9e:	f100 0914 	add.w	r9, r0, #20
   89ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89ca6:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89caa:	3301      	adds	r3, #1
   89cac:	468e      	mov	lr, r1
   89cae:	00a9      	lsls	r1, r5, #2
   89cb0:	9100      	str	r1, [sp, #0]
   89cb2:	429a      	cmp	r2, r3
   89cb4:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89cb8:	4682      	mov	sl, r0
   89cba:	fbb2 f7f3 	udiv	r7, r2, r3
   89cbe:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   89cc2:	9101      	str	r1, [sp, #4]
   89cc4:	d337      	bcc.n	89d36 <quorem+0xae>
   89cc6:	2200      	movs	r2, #0
   89cc8:	46b4      	mov	ip, r6
   89cca:	4614      	mov	r4, r2
   89ccc:	4648      	mov	r0, r9
   89cce:	f85c 3b04 	ldr.w	r3, [ip], #4
   89cd2:	6801      	ldr	r1, [r0, #0]
   89cd4:	fa1f fb83 	uxth.w	fp, r3
   89cd8:	fb07 220b 	mla	r2, r7, fp, r2
   89cdc:	0c1b      	lsrs	r3, r3, #16
   89cde:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   89ce2:	fb07 bb03 	mla	fp, r7, r3, fp
   89ce6:	b293      	uxth	r3, r2
   89ce8:	1ae3      	subs	r3, r4, r3
   89cea:	b28a      	uxth	r2, r1
   89cec:	fa1f f48b 	uxth.w	r4, fp
   89cf0:	4413      	add	r3, r2
   89cf2:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89cf6:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89cfa:	b29b      	uxth	r3, r3
   89cfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   89d00:	45e0      	cmp	r8, ip
   89d02:	f840 3b04 	str.w	r3, [r0], #4
   89d06:	ea4f 4424 	mov.w	r4, r4, asr #16
   89d0a:	ea4f 421b 	mov.w	r2, fp, lsr #16
   89d0e:	d2de      	bcs.n	89cce <quorem+0x46>
   89d10:	9b00      	ldr	r3, [sp, #0]
   89d12:	f859 3003 	ldr.w	r3, [r9, r3]
   89d16:	b973      	cbnz	r3, 89d36 <quorem+0xae>
   89d18:	9b01      	ldr	r3, [sp, #4]
   89d1a:	3b04      	subs	r3, #4
   89d1c:	4599      	cmp	r9, r3
   89d1e:	d304      	bcc.n	89d2a <quorem+0xa2>
   89d20:	e007      	b.n	89d32 <quorem+0xaa>
   89d22:	4599      	cmp	r9, r3
   89d24:	f105 35ff 	add.w	r5, r5, #4294967295
   89d28:	d203      	bcs.n	89d32 <quorem+0xaa>
   89d2a:	f853 2904 	ldr.w	r2, [r3], #-4
   89d2e:	2a00      	cmp	r2, #0
   89d30:	d0f7      	beq.n	89d22 <quorem+0x9a>
   89d32:	f8ca 5010 	str.w	r5, [sl, #16]
   89d36:	4671      	mov	r1, lr
   89d38:	4650      	mov	r0, sl
   89d3a:	f002 faa9 	bl	8c290 <__mcmp>
   89d3e:	2800      	cmp	r0, #0
   89d40:	db2a      	blt.n	89d98 <quorem+0x110>
   89d42:	4648      	mov	r0, r9
   89d44:	2300      	movs	r3, #0
   89d46:	3701      	adds	r7, #1
   89d48:	f856 1b04 	ldr.w	r1, [r6], #4
   89d4c:	6804      	ldr	r4, [r0, #0]
   89d4e:	b28a      	uxth	r2, r1
   89d50:	1a9a      	subs	r2, r3, r2
   89d52:	0c0b      	lsrs	r3, r1, #16
   89d54:	b2a1      	uxth	r1, r4
   89d56:	440a      	add	r2, r1
   89d58:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   89d5c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89d60:	b292      	uxth	r2, r2
   89d62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89d66:	45b0      	cmp	r8, r6
   89d68:	f840 2b04 	str.w	r2, [r0], #4
   89d6c:	ea4f 4323 	mov.w	r3, r3, asr #16
   89d70:	d2ea      	bcs.n	89d48 <quorem+0xc0>
   89d72:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89d76:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89d7a:	b96a      	cbnz	r2, 89d98 <quorem+0x110>
   89d7c:	3b04      	subs	r3, #4
   89d7e:	4599      	cmp	r9, r3
   89d80:	d304      	bcc.n	89d8c <quorem+0x104>
   89d82:	e007      	b.n	89d94 <quorem+0x10c>
   89d84:	4599      	cmp	r9, r3
   89d86:	f105 35ff 	add.w	r5, r5, #4294967295
   89d8a:	d203      	bcs.n	89d94 <quorem+0x10c>
   89d8c:	f853 2904 	ldr.w	r2, [r3], #-4
   89d90:	2a00      	cmp	r2, #0
   89d92:	d0f7      	beq.n	89d84 <quorem+0xfc>
   89d94:	f8ca 5010 	str.w	r5, [sl, #16]
   89d98:	4638      	mov	r0, r7
   89d9a:	b003      	add	sp, #12
   89d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89da0:	2000      	movs	r0, #0
   89da2:	b003      	add	sp, #12
   89da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089da8 <_dtoa_r>:
   89da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89dac:	4616      	mov	r6, r2
   89dae:	461f      	mov	r7, r3
   89db0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89db2:	b09b      	sub	sp, #108	; 0x6c
   89db4:	4604      	mov	r4, r0
   89db6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   89dba:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   89dbc:	b141      	cbz	r1, 89dd0 <_dtoa_r+0x28>
   89dbe:	2301      	movs	r3, #1
   89dc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89dc2:	4093      	lsls	r3, r2
   89dc4:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89dc8:	f002 f834 	bl	8be34 <_Bfree>
   89dcc:	2300      	movs	r3, #0
   89dce:	6423      	str	r3, [r4, #64]	; 0x40
   89dd0:	f1b7 0900 	subs.w	r9, r7, #0
   89dd4:	bfb4      	ite	lt
   89dd6:	2301      	movlt	r3, #1
   89dd8:	2300      	movge	r3, #0
   89dda:	602b      	str	r3, [r5, #0]
   89ddc:	4b76      	ldr	r3, [pc, #472]	; (89fb8 <_dtoa_r+0x210>)
   89dde:	bfbc      	itt	lt
   89de0:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89de4:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89de8:	ea33 0309 	bics.w	r3, r3, r9
   89dec:	f000 80ab 	beq.w	89f46 <_dtoa_r+0x19e>
   89df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89df4:	4610      	mov	r0, r2
   89df6:	4619      	mov	r1, r3
   89df8:	2200      	movs	r2, #0
   89dfa:	2300      	movs	r3, #0
   89dfc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89e00:	f003 fd52 	bl	8d8a8 <__aeabi_dcmpeq>
   89e04:	4680      	mov	r8, r0
   89e06:	b170      	cbz	r0, 89e26 <_dtoa_r+0x7e>
   89e08:	2301      	movs	r3, #1
   89e0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89e0c:	6013      	str	r3, [r2, #0]
   89e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89e10:	2b00      	cmp	r3, #0
   89e12:	f000 82c2 	beq.w	8a39a <_dtoa_r+0x5f2>
   89e16:	4869      	ldr	r0, [pc, #420]	; (89fbc <_dtoa_r+0x214>)
   89e18:	6018      	str	r0, [r3, #0]
   89e1a:	1e43      	subs	r3, r0, #1
   89e1c:	9303      	str	r3, [sp, #12]
   89e1e:	9803      	ldr	r0, [sp, #12]
   89e20:	b01b      	add	sp, #108	; 0x6c
   89e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e26:	aa18      	add	r2, sp, #96	; 0x60
   89e28:	ab19      	add	r3, sp, #100	; 0x64
   89e2a:	e9cd 3200 	strd	r3, r2, [sp]
   89e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89e32:	4620      	mov	r0, r4
   89e34:	f002 faf2 	bl	8c41c <__d2b>
   89e38:	ea5f 5519 	movs.w	r5, r9, lsr #20
   89e3c:	4682      	mov	sl, r0
   89e3e:	f040 8098 	bne.w	89f72 <_dtoa_r+0x1ca>
   89e42:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   89e46:	4445      	add	r5, r8
   89e48:	f205 4032 	addw	r0, r5, #1074	; 0x432
   89e4c:	2820      	cmp	r0, #32
   89e4e:	f340 8390 	ble.w	8a572 <_dtoa_r+0x7ca>
   89e52:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   89e56:	f205 4012 	addw	r0, r5, #1042	; 0x412
   89e5a:	fa09 f903 	lsl.w	r9, r9, r3
   89e5e:	fa26 f000 	lsr.w	r0, r6, r0
   89e62:	ea49 0000 	orr.w	r0, r9, r0
   89e66:	f003 fa3d 	bl	8d2e4 <__aeabi_ui2d>
   89e6a:	2201      	movs	r2, #1
   89e6c:	3d01      	subs	r5, #1
   89e6e:	920f      	str	r2, [sp, #60]	; 0x3c
   89e70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89e74:	2200      	movs	r2, #0
   89e76:	4b52      	ldr	r3, [pc, #328]	; (89fc0 <_dtoa_r+0x218>)
   89e78:	f003 f8f6 	bl	8d068 <__aeabi_dsub>
   89e7c:	a348      	add	r3, pc, #288	; (adr r3, 89fa0 <_dtoa_r+0x1f8>)
   89e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e82:	f003 faa9 	bl	8d3d8 <__aeabi_dmul>
   89e86:	a348      	add	r3, pc, #288	; (adr r3, 89fa8 <_dtoa_r+0x200>)
   89e88:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e8c:	f003 f8ee 	bl	8d06c <__adddf3>
   89e90:	4606      	mov	r6, r0
   89e92:	4628      	mov	r0, r5
   89e94:	460f      	mov	r7, r1
   89e96:	f003 fa35 	bl	8d304 <__aeabi_i2d>
   89e9a:	a345      	add	r3, pc, #276	; (adr r3, 89fb0 <_dtoa_r+0x208>)
   89e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ea0:	f003 fa9a 	bl	8d3d8 <__aeabi_dmul>
   89ea4:	4602      	mov	r2, r0
   89ea6:	460b      	mov	r3, r1
   89ea8:	4630      	mov	r0, r6
   89eaa:	4639      	mov	r1, r7
   89eac:	f003 f8de 	bl	8d06c <__adddf3>
   89eb0:	4606      	mov	r6, r0
   89eb2:	460f      	mov	r7, r1
   89eb4:	f003 fd40 	bl	8d938 <__aeabi_d2iz>
   89eb8:	2200      	movs	r2, #0
   89eba:	4683      	mov	fp, r0
   89ebc:	2300      	movs	r3, #0
   89ebe:	4630      	mov	r0, r6
   89ec0:	4639      	mov	r1, r7
   89ec2:	f003 fcfb 	bl	8d8bc <__aeabi_dcmplt>
   89ec6:	2800      	cmp	r0, #0
   89ec8:	f040 825a 	bne.w	8a380 <_dtoa_r+0x5d8>
   89ecc:	f1bb 0f16 	cmp.w	fp, #22
   89ed0:	f200 8248 	bhi.w	8a364 <_dtoa_r+0x5bc>
   89ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89ed8:	4b3a      	ldr	r3, [pc, #232]	; (89fc4 <_dtoa_r+0x21c>)
   89eda:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ee2:	f003 fceb 	bl	8d8bc <__aeabi_dcmplt>
   89ee6:	2800      	cmp	r0, #0
   89ee8:	d072      	beq.n	89fd0 <_dtoa_r+0x228>
   89eea:	2300      	movs	r3, #0
   89eec:	eba8 0505 	sub.w	r5, r8, r5
   89ef0:	930e      	str	r3, [sp, #56]	; 0x38
   89ef2:	1e6b      	subs	r3, r5, #1
   89ef4:	f10b 3bff 	add.w	fp, fp, #4294967295
   89ef8:	9306      	str	r3, [sp, #24]
   89efa:	f100 823b 	bmi.w	8a374 <_dtoa_r+0x5cc>
   89efe:	2300      	movs	r3, #0
   89f00:	930b      	str	r3, [sp, #44]	; 0x2c
   89f02:	f1bb 0f00 	cmp.w	fp, #0
   89f06:	da6b      	bge.n	89fe0 <_dtoa_r+0x238>
   89f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89f0a:	f8cd b01c 	str.w	fp, [sp, #28]
   89f0e:	eba3 030b 	sub.w	r3, r3, fp
   89f12:	930b      	str	r3, [sp, #44]	; 0x2c
   89f14:	f1cb 0300 	rsb	r3, fp, #0
   89f18:	930d      	str	r3, [sp, #52]	; 0x34
   89f1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f1c:	f04f 0b00 	mov.w	fp, #0
   89f20:	2b09      	cmp	r3, #9
   89f22:	d866      	bhi.n	89ff2 <_dtoa_r+0x24a>
   89f24:	2b05      	cmp	r3, #5
   89f26:	f340 8322 	ble.w	8a56e <_dtoa_r+0x7c6>
   89f2a:	2500      	movs	r5, #0
   89f2c:	3b04      	subs	r3, #4
   89f2e:	9324      	str	r3, [sp, #144]	; 0x90
   89f30:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f32:	3b02      	subs	r3, #2
   89f34:	2b03      	cmp	r3, #3
   89f36:	f200 866e 	bhi.w	8ac16 <_dtoa_r+0xe6e>
   89f3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   89f3e:	043b      	.short	0x043b
   89f40:	042f0438 	.word	0x042f0438
   89f44:	0412      	.short	0x0412
   89f46:	f242 730f 	movw	r3, #9999	; 0x270f
   89f4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89f4c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89f50:	6013      	str	r3, [r2, #0]
   89f52:	ea59 0306 	orrs.w	r3, r9, r6
   89f56:	d11c      	bne.n	89f92 <_dtoa_r+0x1ea>
   89f58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89f5a:	2b00      	cmp	r3, #0
   89f5c:	f000 8657 	beq.w	8ac0e <_dtoa_r+0xe66>
   89f60:	4b19      	ldr	r3, [pc, #100]	; (89fc8 <_dtoa_r+0x220>)
   89f62:	9303      	str	r3, [sp, #12]
   89f64:	3308      	adds	r3, #8
   89f66:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89f68:	9803      	ldr	r0, [sp, #12]
   89f6a:	6013      	str	r3, [r2, #0]
   89f6c:	b01b      	add	sp, #108	; 0x6c
   89f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89f72:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89f76:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89f7a:	4608      	mov	r0, r1
   89f7c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89f80:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89f84:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89f88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89f8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89f90:	e770      	b.n	89e74 <_dtoa_r+0xcc>
   89f92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89f94:	2b00      	cmp	r3, #0
   89f96:	f040 83c8 	bne.w	8a72a <_dtoa_r+0x982>
   89f9a:	4b0c      	ldr	r3, [pc, #48]	; (89fcc <_dtoa_r+0x224>)
   89f9c:	9303      	str	r3, [sp, #12]
   89f9e:	e73e      	b.n	89e1e <_dtoa_r+0x76>
   89fa0:	636f4361 	.word	0x636f4361
   89fa4:	3fd287a7 	.word	0x3fd287a7
   89fa8:	8b60c8b3 	.word	0x8b60c8b3
   89fac:	3fc68a28 	.word	0x3fc68a28
   89fb0:	509f79fb 	.word	0x509f79fb
   89fb4:	3fd34413 	.word	0x3fd34413
   89fb8:	7ff00000 	.word	0x7ff00000
   89fbc:	0008da5d 	.word	0x0008da5d
   89fc0:	3ff80000 	.word	0x3ff80000
   89fc4:	0008dbf8 	.word	0x0008dbf8
   89fc8:	0008daa4 	.word	0x0008daa4
   89fcc:	0008daa0 	.word	0x0008daa0
   89fd0:	eba8 0505 	sub.w	r5, r8, r5
   89fd4:	1e6b      	subs	r3, r5, #1
   89fd6:	9306      	str	r3, [sp, #24]
   89fd8:	f100 84a9 	bmi.w	8a92e <_dtoa_r+0xb86>
   89fdc:	900e      	str	r0, [sp, #56]	; 0x38
   89fde:	900b      	str	r0, [sp, #44]	; 0x2c
   89fe0:	9b06      	ldr	r3, [sp, #24]
   89fe2:	445b      	add	r3, fp
   89fe4:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89fe8:	2300      	movs	r3, #0
   89fea:	930d      	str	r3, [sp, #52]	; 0x34
   89fec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89fee:	2b09      	cmp	r3, #9
   89ff0:	d998      	bls.n	89f24 <_dtoa_r+0x17c>
   89ff2:	2300      	movs	r3, #0
   89ff4:	2501      	movs	r5, #1
   89ff6:	9324      	str	r3, [sp, #144]	; 0x90
   89ff8:	9325      	str	r3, [sp, #148]	; 0x94
   89ffa:	f04f 33ff 	mov.w	r3, #4294967295
   89ffe:	950c      	str	r5, [sp, #48]	; 0x30
   8a000:	930a      	str	r3, [sp, #40]	; 0x28
   8a002:	2100      	movs	r1, #0
   8a004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a006:	6461      	str	r1, [r4, #68]	; 0x44
   8a008:	9312      	str	r3, [sp, #72]	; 0x48
   8a00a:	4620      	mov	r0, r4
   8a00c:	f001 feec 	bl	8bde8 <_Balloc>
   8a010:	9003      	str	r0, [sp, #12]
   8a012:	2800      	cmp	r0, #0
   8a014:	f000 8607 	beq.w	8ac26 <_dtoa_r+0xe7e>
   8a018:	9b03      	ldr	r3, [sp, #12]
   8a01a:	6423      	str	r3, [r4, #64]	; 0x40
   8a01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a01e:	2b0e      	cmp	r3, #14
   8a020:	f200 80e9 	bhi.w	8a1f6 <_dtoa_r+0x44e>
   8a024:	2d00      	cmp	r5, #0
   8a026:	f000 80e6 	beq.w	8a1f6 <_dtoa_r+0x44e>
   8a02a:	9907      	ldr	r1, [sp, #28]
   8a02c:	2900      	cmp	r1, #0
   8a02e:	f340 8452 	ble.w	8a8d6 <_dtoa_r+0xb2e>
   8a032:	4bb5      	ldr	r3, [pc, #724]	; (8a308 <_dtoa_r+0x560>)
   8a034:	f001 020f 	and.w	r2, r1, #15
   8a038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a03c:	05c8      	lsls	r0, r1, #23
   8a03e:	ea4f 1521 	mov.w	r5, r1, asr #4
   8a042:	e9d3 6700 	ldrd	r6, r7, [r3]
   8a046:	f140 83ee 	bpl.w	8a826 <_dtoa_r+0xa7e>
   8a04a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a04e:	4baf      	ldr	r3, [pc, #700]	; (8a30c <_dtoa_r+0x564>)
   8a050:	f04f 0903 	mov.w	r9, #3
   8a054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8a058:	f003 fae8 	bl	8d62c <__aeabi_ddiv>
   8a05c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a060:	f005 050f 	and.w	r5, r5, #15
   8a064:	b18d      	cbz	r5, 8a08a <_dtoa_r+0x2e2>
   8a066:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8a30c <_dtoa_r+0x564>
   8a06a:	07e9      	lsls	r1, r5, #31
   8a06c:	d509      	bpl.n	8a082 <_dtoa_r+0x2da>
   8a06e:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a072:	4630      	mov	r0, r6
   8a074:	4639      	mov	r1, r7
   8a076:	f003 f9af 	bl	8d3d8 <__aeabi_dmul>
   8a07a:	4606      	mov	r6, r0
   8a07c:	460f      	mov	r7, r1
   8a07e:	f109 0901 	add.w	r9, r9, #1
   8a082:	106d      	asrs	r5, r5, #1
   8a084:	f108 0808 	add.w	r8, r8, #8
   8a088:	d1ef      	bne.n	8a06a <_dtoa_r+0x2c2>
   8a08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a08e:	4632      	mov	r2, r6
   8a090:	463b      	mov	r3, r7
   8a092:	f003 facb 	bl	8d62c <__aeabi_ddiv>
   8a096:	4606      	mov	r6, r0
   8a098:	460f      	mov	r7, r1
   8a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a09c:	b143      	cbz	r3, 8a0b0 <_dtoa_r+0x308>
   8a09e:	2200      	movs	r2, #0
   8a0a0:	4630      	mov	r0, r6
   8a0a2:	4639      	mov	r1, r7
   8a0a4:	4b9a      	ldr	r3, [pc, #616]	; (8a310 <_dtoa_r+0x568>)
   8a0a6:	f003 fc09 	bl	8d8bc <__aeabi_dcmplt>
   8a0aa:	2800      	cmp	r0, #0
   8a0ac:	f040 853b 	bne.w	8ab26 <_dtoa_r+0xd7e>
   8a0b0:	4648      	mov	r0, r9
   8a0b2:	f003 f927 	bl	8d304 <__aeabi_i2d>
   8a0b6:	4632      	mov	r2, r6
   8a0b8:	463b      	mov	r3, r7
   8a0ba:	f003 f98d 	bl	8d3d8 <__aeabi_dmul>
   8a0be:	4b95      	ldr	r3, [pc, #596]	; (8a314 <_dtoa_r+0x56c>)
   8a0c0:	2200      	movs	r2, #0
   8a0c2:	f002 ffd3 	bl	8d06c <__adddf3>
   8a0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a0c8:	4680      	mov	r8, r0
   8a0ca:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a0ce:	2b00      	cmp	r3, #0
   8a0d0:	f000 83ce 	beq.w	8a870 <_dtoa_r+0xac8>
   8a0d4:	9b07      	ldr	r3, [sp, #28]
   8a0d6:	9313      	str	r3, [sp, #76]	; 0x4c
   8a0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a0da:	9310      	str	r3, [sp, #64]	; 0x40
   8a0dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a0de:	2b00      	cmp	r3, #0
   8a0e0:	f000 84b7 	beq.w	8aa52 <_dtoa_r+0xcaa>
   8a0e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a0e6:	4b88      	ldr	r3, [pc, #544]	; (8a308 <_dtoa_r+0x560>)
   8a0e8:	2000      	movs	r0, #0
   8a0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a0ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8a0f2:	4989      	ldr	r1, [pc, #548]	; (8a318 <_dtoa_r+0x570>)
   8a0f4:	f003 fa9a 	bl	8d62c <__aeabi_ddiv>
   8a0f8:	4642      	mov	r2, r8
   8a0fa:	464b      	mov	r3, r9
   8a0fc:	f002 ffb4 	bl	8d068 <__aeabi_dsub>
   8a100:	4602      	mov	r2, r0
   8a102:	460b      	mov	r3, r1
   8a104:	4630      	mov	r0, r6
   8a106:	4639      	mov	r1, r7
   8a108:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a10c:	f003 fc14 	bl	8d938 <__aeabi_d2iz>
   8a110:	4680      	mov	r8, r0
   8a112:	f003 f8f7 	bl	8d304 <__aeabi_i2d>
   8a116:	4602      	mov	r2, r0
   8a118:	460b      	mov	r3, r1
   8a11a:	4630      	mov	r0, r6
   8a11c:	4639      	mov	r1, r7
   8a11e:	f002 ffa3 	bl	8d068 <__aeabi_dsub>
   8a122:	9d03      	ldr	r5, [sp, #12]
   8a124:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a128:	4606      	mov	r6, r0
   8a12a:	460f      	mov	r7, r1
   8a12c:	4602      	mov	r2, r0
   8a12e:	f805 3b01 	strb.w	r3, [r5], #1
   8a132:	460b      	mov	r3, r1
   8a134:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8a138:	f003 fbde 	bl	8d8f8 <__aeabi_dcmpgt>
   8a13c:	2800      	cmp	r0, #0
   8a13e:	f040 853b 	bne.w	8abb8 <_dtoa_r+0xe10>
   8a142:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8a146:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8a14a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8a14e:	f04f 0900 	mov.w	r9, #0
   8a152:	9410      	str	r4, [sp, #64]	; 0x40
   8a154:	e02a      	b.n	8a1ac <_dtoa_r+0x404>
   8a156:	f109 0901 	add.w	r9, r9, #1
   8a15a:	45c1      	cmp	r9, r8
   8a15c:	da48      	bge.n	8a1f0 <_dtoa_r+0x448>
   8a15e:	4650      	mov	r0, sl
   8a160:	4659      	mov	r1, fp
   8a162:	2200      	movs	r2, #0
   8a164:	4b6d      	ldr	r3, [pc, #436]	; (8a31c <_dtoa_r+0x574>)
   8a166:	f003 f937 	bl	8d3d8 <__aeabi_dmul>
   8a16a:	2200      	movs	r2, #0
   8a16c:	4b6b      	ldr	r3, [pc, #428]	; (8a31c <_dtoa_r+0x574>)
   8a16e:	4682      	mov	sl, r0
   8a170:	468b      	mov	fp, r1
   8a172:	4630      	mov	r0, r6
   8a174:	4639      	mov	r1, r7
   8a176:	f003 f92f 	bl	8d3d8 <__aeabi_dmul>
   8a17a:	460f      	mov	r7, r1
   8a17c:	4606      	mov	r6, r0
   8a17e:	f003 fbdb 	bl	8d938 <__aeabi_d2iz>
   8a182:	4604      	mov	r4, r0
   8a184:	f003 f8be 	bl	8d304 <__aeabi_i2d>
   8a188:	4602      	mov	r2, r0
   8a18a:	460b      	mov	r3, r1
   8a18c:	4630      	mov	r0, r6
   8a18e:	4639      	mov	r1, r7
   8a190:	f002 ff6a 	bl	8d068 <__aeabi_dsub>
   8a194:	3430      	adds	r4, #48	; 0x30
   8a196:	4652      	mov	r2, sl
   8a198:	465b      	mov	r3, fp
   8a19a:	f805 4b01 	strb.w	r4, [r5], #1
   8a19e:	4606      	mov	r6, r0
   8a1a0:	460f      	mov	r7, r1
   8a1a2:	f003 fb8b 	bl	8d8bc <__aeabi_dcmplt>
   8a1a6:	2800      	cmp	r0, #0
   8a1a8:	f040 8503 	bne.w	8abb2 <_dtoa_r+0xe0a>
   8a1ac:	4632      	mov	r2, r6
   8a1ae:	463b      	mov	r3, r7
   8a1b0:	2000      	movs	r0, #0
   8a1b2:	4957      	ldr	r1, [pc, #348]	; (8a310 <_dtoa_r+0x568>)
   8a1b4:	f002 ff58 	bl	8d068 <__aeabi_dsub>
   8a1b8:	4652      	mov	r2, sl
   8a1ba:	465b      	mov	r3, fp
   8a1bc:	f003 fb7e 	bl	8d8bc <__aeabi_dcmplt>
   8a1c0:	2800      	cmp	r0, #0
   8a1c2:	d0c8      	beq.n	8a156 <_dtoa_r+0x3ae>
   8a1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a1c6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a1ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a1cc:	9a03      	ldr	r2, [sp, #12]
   8a1ce:	9307      	str	r3, [sp, #28]
   8a1d0:	e002      	b.n	8a1d8 <_dtoa_r+0x430>
   8a1d2:	4295      	cmp	r5, r2
   8a1d4:	f000 84d2 	beq.w	8ab7c <_dtoa_r+0xdd4>
   8a1d8:	46a9      	mov	r9, r5
   8a1da:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8a1de:	2b39      	cmp	r3, #57	; 0x39
   8a1e0:	d0f7      	beq.n	8a1d2 <_dtoa_r+0x42a>
   8a1e2:	3301      	adds	r3, #1
   8a1e4:	b2db      	uxtb	r3, r3
   8a1e6:	702b      	strb	r3, [r5, #0]
   8a1e8:	9b07      	ldr	r3, [sp, #28]
   8a1ea:	3301      	adds	r3, #1
   8a1ec:	9307      	str	r3, [sp, #28]
   8a1ee:	e1a0      	b.n	8a532 <_dtoa_r+0x78a>
   8a1f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a1f2:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8a1f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8a1f8:	2b00      	cmp	r3, #0
   8a1fa:	f2c0 8093 	blt.w	8a324 <_dtoa_r+0x57c>
   8a1fe:	9a07      	ldr	r2, [sp, #28]
   8a200:	2a0e      	cmp	r2, #14
   8a202:	f300 808f 	bgt.w	8a324 <_dtoa_r+0x57c>
   8a206:	4b40      	ldr	r3, [pc, #256]	; (8a308 <_dtoa_r+0x560>)
   8a208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a210:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8a214:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a216:	2b00      	cmp	r3, #0
   8a218:	da1a      	bge.n	8a250 <_dtoa_r+0x4a8>
   8a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a21c:	2b00      	cmp	r3, #0
   8a21e:	dc17      	bgt.n	8a250 <_dtoa_r+0x4a8>
   8a220:	f040 833f 	bne.w	8a8a2 <_dtoa_r+0xafa>
   8a224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a228:	2200      	movs	r2, #0
   8a22a:	4b3d      	ldr	r3, [pc, #244]	; (8a320 <_dtoa_r+0x578>)
   8a22c:	f003 f8d4 	bl	8d3d8 <__aeabi_dmul>
   8a230:	4602      	mov	r2, r0
   8a232:	460b      	mov	r3, r1
   8a234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a238:	f003 fb4a 	bl	8d8d0 <__aeabi_dcmple>
   8a23c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8a240:	4645      	mov	r5, r8
   8a242:	2800      	cmp	r0, #0
   8a244:	f000 82cd 	beq.w	8a7e2 <_dtoa_r+0xa3a>
   8a248:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a24a:	9f03      	ldr	r7, [sp, #12]
   8a24c:	43de      	mvns	r6, r3
   8a24e:	e2d0      	b.n	8a7f2 <_dtoa_r+0xa4a>
   8a250:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8a254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a258:	4632      	mov	r2, r6
   8a25a:	463b      	mov	r3, r7
   8a25c:	f003 f9e6 	bl	8d62c <__aeabi_ddiv>
   8a260:	f003 fb6a 	bl	8d938 <__aeabi_d2iz>
   8a264:	4680      	mov	r8, r0
   8a266:	f003 f84d 	bl	8d304 <__aeabi_i2d>
   8a26a:	4632      	mov	r2, r6
   8a26c:	463b      	mov	r3, r7
   8a26e:	f003 f8b3 	bl	8d3d8 <__aeabi_dmul>
   8a272:	460b      	mov	r3, r1
   8a274:	4602      	mov	r2, r0
   8a276:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a27a:	f002 fef5 	bl	8d068 <__aeabi_dsub>
   8a27e:	9d03      	ldr	r5, [sp, #12]
   8a280:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a284:	f805 3b01 	strb.w	r3, [r5], #1
   8a288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a28a:	2b01      	cmp	r3, #1
   8a28c:	f000 837f 	beq.w	8a98e <_dtoa_r+0xbe6>
   8a290:	f8cd a018 	str.w	sl, [sp, #24]
   8a294:	f04f 0901 	mov.w	r9, #1
   8a298:	469b      	mov	fp, r3
   8a29a:	46aa      	mov	sl, r5
   8a29c:	9408      	str	r4, [sp, #32]
   8a29e:	e01d      	b.n	8a2dc <_dtoa_r+0x534>
   8a2a0:	4632      	mov	r2, r6
   8a2a2:	463b      	mov	r3, r7
   8a2a4:	4620      	mov	r0, r4
   8a2a6:	4629      	mov	r1, r5
   8a2a8:	f003 f9c0 	bl	8d62c <__aeabi_ddiv>
   8a2ac:	f003 fb44 	bl	8d938 <__aeabi_d2iz>
   8a2b0:	4680      	mov	r8, r0
   8a2b2:	f003 f827 	bl	8d304 <__aeabi_i2d>
   8a2b6:	4632      	mov	r2, r6
   8a2b8:	463b      	mov	r3, r7
   8a2ba:	f003 f88d 	bl	8d3d8 <__aeabi_dmul>
   8a2be:	f109 0901 	add.w	r9, r9, #1
   8a2c2:	460b      	mov	r3, r1
   8a2c4:	4602      	mov	r2, r0
   8a2c6:	4629      	mov	r1, r5
   8a2c8:	4620      	mov	r0, r4
   8a2ca:	f002 fecd 	bl	8d068 <__aeabi_dsub>
   8a2ce:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a2d2:	45cb      	cmp	fp, r9
   8a2d4:	f80a 3b01 	strb.w	r3, [sl], #1
   8a2d8:	f000 8355 	beq.w	8a986 <_dtoa_r+0xbde>
   8a2dc:	2200      	movs	r2, #0
   8a2de:	4b0f      	ldr	r3, [pc, #60]	; (8a31c <_dtoa_r+0x574>)
   8a2e0:	f003 f87a 	bl	8d3d8 <__aeabi_dmul>
   8a2e4:	2200      	movs	r2, #0
   8a2e6:	2300      	movs	r3, #0
   8a2e8:	4604      	mov	r4, r0
   8a2ea:	460d      	mov	r5, r1
   8a2ec:	f003 fadc 	bl	8d8a8 <__aeabi_dcmpeq>
   8a2f0:	2800      	cmp	r0, #0
   8a2f2:	d0d5      	beq.n	8a2a0 <_dtoa_r+0x4f8>
   8a2f4:	4655      	mov	r5, sl
   8a2f6:	9c08      	ldr	r4, [sp, #32]
   8a2f8:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a2fc:	9b07      	ldr	r3, [sp, #28]
   8a2fe:	46a9      	mov	r9, r5
   8a300:	3301      	adds	r3, #1
   8a302:	9307      	str	r3, [sp, #28]
   8a304:	e115      	b.n	8a532 <_dtoa_r+0x78a>
   8a306:	bf00      	nop
   8a308:	0008dbf8 	.word	0x0008dbf8
   8a30c:	0008dbd0 	.word	0x0008dbd0
   8a310:	3ff00000 	.word	0x3ff00000
   8a314:	401c0000 	.word	0x401c0000
   8a318:	3fe00000 	.word	0x3fe00000
   8a31c:	40240000 	.word	0x40240000
   8a320:	40140000 	.word	0x40140000
   8a324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a326:	2a00      	cmp	r2, #0
   8a328:	d03d      	beq.n	8a3a6 <_dtoa_r+0x5fe>
   8a32a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a32c:	2a01      	cmp	r2, #1
   8a32e:	f340 82bc 	ble.w	8a8aa <_dtoa_r+0xb02>
   8a332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a334:	1e5f      	subs	r7, r3, #1
   8a336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a338:	42bb      	cmp	r3, r7
   8a33a:	f2c0 826e 	blt.w	8a81a <_dtoa_r+0xa72>
   8a33e:	1bdf      	subs	r7, r3, r7
   8a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a342:	2b00      	cmp	r3, #0
   8a344:	f2c0 8354 	blt.w	8a9f0 <_dtoa_r+0xc48>
   8a348:	9a06      	ldr	r2, [sp, #24]
   8a34a:	4611      	mov	r1, r2
   8a34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a34e:	4419      	add	r1, r3
   8a350:	4616      	mov	r6, r2
   8a352:	441a      	add	r2, r3
   8a354:	9106      	str	r1, [sp, #24]
   8a356:	920b      	str	r2, [sp, #44]	; 0x2c
   8a358:	2101      	movs	r1, #1
   8a35a:	4620      	mov	r0, r4
   8a35c:	f001 fe12 	bl	8bf84 <__i2b>
   8a360:	4605      	mov	r5, r0
   8a362:	e023      	b.n	8a3ac <_dtoa_r+0x604>
   8a364:	2301      	movs	r3, #1
   8a366:	eba8 0505 	sub.w	r5, r8, r5
   8a36a:	930e      	str	r3, [sp, #56]	; 0x38
   8a36c:	1e6b      	subs	r3, r5, #1
   8a36e:	9306      	str	r3, [sp, #24]
   8a370:	f57f adc5 	bpl.w	89efe <_dtoa_r+0x156>
   8a374:	f1c5 0301 	rsb	r3, r5, #1
   8a378:	930b      	str	r3, [sp, #44]	; 0x2c
   8a37a:	2300      	movs	r3, #0
   8a37c:	9306      	str	r3, [sp, #24]
   8a37e:	e5c0      	b.n	89f02 <_dtoa_r+0x15a>
   8a380:	4658      	mov	r0, fp
   8a382:	f002 ffbf 	bl	8d304 <__aeabi_i2d>
   8a386:	4632      	mov	r2, r6
   8a388:	463b      	mov	r3, r7
   8a38a:	f003 fa8d 	bl	8d8a8 <__aeabi_dcmpeq>
   8a38e:	2800      	cmp	r0, #0
   8a390:	f47f ad9c 	bne.w	89ecc <_dtoa_r+0x124>
   8a394:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a398:	e598      	b.n	89ecc <_dtoa_r+0x124>
   8a39a:	4bc7      	ldr	r3, [pc, #796]	; (8a6b8 <_dtoa_r+0x910>)
   8a39c:	9303      	str	r3, [sp, #12]
   8a39e:	9803      	ldr	r0, [sp, #12]
   8a3a0:	b01b      	add	sp, #108	; 0x6c
   8a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a3a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a3a8:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8a3ac:	2e00      	cmp	r6, #0
   8a3ae:	dd0c      	ble.n	8a3ca <_dtoa_r+0x622>
   8a3b0:	9a06      	ldr	r2, [sp, #24]
   8a3b2:	2a00      	cmp	r2, #0
   8a3b4:	dd09      	ble.n	8a3ca <_dtoa_r+0x622>
   8a3b6:	42b2      	cmp	r2, r6
   8a3b8:	4613      	mov	r3, r2
   8a3ba:	bfa8      	it	ge
   8a3bc:	4633      	movge	r3, r6
   8a3be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a3c0:	1af6      	subs	r6, r6, r3
   8a3c2:	1ac9      	subs	r1, r1, r3
   8a3c4:	1ad3      	subs	r3, r2, r3
   8a3c6:	910b      	str	r1, [sp, #44]	; 0x2c
   8a3c8:	9306      	str	r3, [sp, #24]
   8a3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a3cc:	b1d3      	cbz	r3, 8a404 <_dtoa_r+0x65c>
   8a3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a3d0:	2b00      	cmp	r3, #0
   8a3d2:	f000 81a3 	beq.w	8a71c <_dtoa_r+0x974>
   8a3d6:	2f00      	cmp	r7, #0
   8a3d8:	dd10      	ble.n	8a3fc <_dtoa_r+0x654>
   8a3da:	4629      	mov	r1, r5
   8a3dc:	463a      	mov	r2, r7
   8a3de:	4620      	mov	r0, r4
   8a3e0:	f001 fe96 	bl	8c110 <__pow5mult>
   8a3e4:	4652      	mov	r2, sl
   8a3e6:	4601      	mov	r1, r0
   8a3e8:	4605      	mov	r5, r0
   8a3ea:	4620      	mov	r0, r4
   8a3ec:	f001 fde0 	bl	8bfb0 <__multiply>
   8a3f0:	4603      	mov	r3, r0
   8a3f2:	4651      	mov	r1, sl
   8a3f4:	4620      	mov	r0, r4
   8a3f6:	469a      	mov	sl, r3
   8a3f8:	f001 fd1c 	bl	8be34 <_Bfree>
   8a3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a3fe:	1bda      	subs	r2, r3, r7
   8a400:	f040 818d 	bne.w	8a71e <_dtoa_r+0x976>
   8a404:	2101      	movs	r1, #1
   8a406:	4620      	mov	r0, r4
   8a408:	f001 fdbc 	bl	8bf84 <__i2b>
   8a40c:	f1bb 0f00 	cmp.w	fp, #0
   8a410:	4680      	mov	r8, r0
   8a412:	f300 80b3 	bgt.w	8a57c <_dtoa_r+0x7d4>
   8a416:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a418:	2b01      	cmp	r3, #1
   8a41a:	f340 818a 	ble.w	8a732 <_dtoa_r+0x98a>
   8a41e:	f04f 0900 	mov.w	r9, #0
   8a422:	2001      	movs	r0, #1
   8a424:	f1bb 0f00 	cmp.w	fp, #0
   8a428:	f040 80b4 	bne.w	8a594 <_dtoa_r+0x7ec>
   8a42c:	9a06      	ldr	r2, [sp, #24]
   8a42e:	4410      	add	r0, r2
   8a430:	f010 001f 	ands.w	r0, r0, #31
   8a434:	f000 8092 	beq.w	8a55c <_dtoa_r+0x7b4>
   8a438:	f1c0 0320 	rsb	r3, r0, #32
   8a43c:	2b04      	cmp	r3, #4
   8a43e:	f340 83f9 	ble.w	8ac34 <_dtoa_r+0xe8c>
   8a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a444:	f1c0 001c 	rsb	r0, r0, #28
   8a448:	4403      	add	r3, r0
   8a44a:	4402      	add	r2, r0
   8a44c:	930b      	str	r3, [sp, #44]	; 0x2c
   8a44e:	4406      	add	r6, r0
   8a450:	9206      	str	r2, [sp, #24]
   8a452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a454:	2b00      	cmp	r3, #0
   8a456:	dd05      	ble.n	8a464 <_dtoa_r+0x6bc>
   8a458:	4651      	mov	r1, sl
   8a45a:	461a      	mov	r2, r3
   8a45c:	4620      	mov	r0, r4
   8a45e:	f001 fea3 	bl	8c1a8 <__lshift>
   8a462:	4682      	mov	sl, r0
   8a464:	9b06      	ldr	r3, [sp, #24]
   8a466:	2b00      	cmp	r3, #0
   8a468:	dd05      	ble.n	8a476 <_dtoa_r+0x6ce>
   8a46a:	4641      	mov	r1, r8
   8a46c:	461a      	mov	r2, r3
   8a46e:	4620      	mov	r0, r4
   8a470:	f001 fe9a 	bl	8c1a8 <__lshift>
   8a474:	4680      	mov	r8, r0
   8a476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a478:	2b00      	cmp	r3, #0
   8a47a:	f040 8135 	bne.w	8a6e8 <_dtoa_r+0x940>
   8a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a480:	2b00      	cmp	r3, #0
   8a482:	f340 811b 	ble.w	8a6bc <_dtoa_r+0x914>
   8a486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a488:	2b00      	cmp	r3, #0
   8a48a:	f040 809a 	bne.w	8a5c2 <_dtoa_r+0x81a>
   8a48e:	9b07      	ldr	r3, [sp, #28]
   8a490:	3301      	adds	r3, #1
   8a492:	9307      	str	r3, [sp, #28]
   8a494:	2601      	movs	r6, #1
   8a496:	9f03      	ldr	r7, [sp, #12]
   8a498:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8a49c:	e007      	b.n	8a4ae <_dtoa_r+0x706>
   8a49e:	4651      	mov	r1, sl
   8a4a0:	2300      	movs	r3, #0
   8a4a2:	220a      	movs	r2, #10
   8a4a4:	4620      	mov	r0, r4
   8a4a6:	f001 fccf 	bl	8be48 <__multadd>
   8a4aa:	4682      	mov	sl, r0
   8a4ac:	3601      	adds	r6, #1
   8a4ae:	4641      	mov	r1, r8
   8a4b0:	4650      	mov	r0, sl
   8a4b2:	f7ff fbe9 	bl	89c88 <quorem>
   8a4b6:	454e      	cmp	r6, r9
   8a4b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a4bc:	f807 3b01 	strb.w	r3, [r7], #1
   8a4c0:	dbed      	blt.n	8a49e <_dtoa_r+0x6f6>
   8a4c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a4c4:	2600      	movs	r6, #0
   8a4c6:	2a00      	cmp	r2, #0
   8a4c8:	bfcc      	ite	gt
   8a4ca:	4693      	movgt	fp, r2
   8a4cc:	f04f 0b01 	movle.w	fp, #1
   8a4d0:	9a03      	ldr	r2, [sp, #12]
   8a4d2:	4493      	add	fp, r2
   8a4d4:	4651      	mov	r1, sl
   8a4d6:	2201      	movs	r2, #1
   8a4d8:	4620      	mov	r0, r4
   8a4da:	9304      	str	r3, [sp, #16]
   8a4dc:	f001 fe64 	bl	8c1a8 <__lshift>
   8a4e0:	4641      	mov	r1, r8
   8a4e2:	4682      	mov	sl, r0
   8a4e4:	f001 fed4 	bl	8c290 <__mcmp>
   8a4e8:	2800      	cmp	r0, #0
   8a4ea:	f340 81a8 	ble.w	8a83e <_dtoa_r+0xa96>
   8a4ee:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8a4f2:	9a03      	ldr	r2, [sp, #12]
   8a4f4:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a4f8:	e004      	b.n	8a504 <_dtoa_r+0x75c>
   8a4fa:	455a      	cmp	r2, fp
   8a4fc:	f000 81e4 	beq.w	8a8c8 <_dtoa_r+0xb20>
   8a500:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a504:	2b39      	cmp	r3, #57	; 0x39
   8a506:	f10b 0901 	add.w	r9, fp, #1
   8a50a:	d0f6      	beq.n	8a4fa <_dtoa_r+0x752>
   8a50c:	3301      	adds	r3, #1
   8a50e:	f88b 3000 	strb.w	r3, [fp]
   8a512:	4641      	mov	r1, r8
   8a514:	4620      	mov	r0, r4
   8a516:	f001 fc8d 	bl	8be34 <_Bfree>
   8a51a:	b155      	cbz	r5, 8a532 <_dtoa_r+0x78a>
   8a51c:	b12e      	cbz	r6, 8a52a <_dtoa_r+0x782>
   8a51e:	42ae      	cmp	r6, r5
   8a520:	d003      	beq.n	8a52a <_dtoa_r+0x782>
   8a522:	4631      	mov	r1, r6
   8a524:	4620      	mov	r0, r4
   8a526:	f001 fc85 	bl	8be34 <_Bfree>
   8a52a:	4629      	mov	r1, r5
   8a52c:	4620      	mov	r0, r4
   8a52e:	f001 fc81 	bl	8be34 <_Bfree>
   8a532:	4651      	mov	r1, sl
   8a534:	4620      	mov	r0, r4
   8a536:	f001 fc7d 	bl	8be34 <_Bfree>
   8a53a:	2300      	movs	r3, #0
   8a53c:	f889 3000 	strb.w	r3, [r9]
   8a540:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8a542:	461a      	mov	r2, r3
   8a544:	9b07      	ldr	r3, [sp, #28]
   8a546:	6013      	str	r3, [r2, #0]
   8a548:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a54a:	2b00      	cmp	r3, #0
   8a54c:	f43f ac67 	beq.w	89e1e <_dtoa_r+0x76>
   8a550:	9803      	ldr	r0, [sp, #12]
   8a552:	f8c3 9000 	str.w	r9, [r3]
   8a556:	b01b      	add	sp, #108	; 0x6c
   8a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a55c:	201c      	movs	r0, #28
   8a55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a560:	4406      	add	r6, r0
   8a562:	4403      	add	r3, r0
   8a564:	930b      	str	r3, [sp, #44]	; 0x2c
   8a566:	9b06      	ldr	r3, [sp, #24]
   8a568:	4403      	add	r3, r0
   8a56a:	9306      	str	r3, [sp, #24]
   8a56c:	e771      	b.n	8a452 <_dtoa_r+0x6aa>
   8a56e:	2501      	movs	r5, #1
   8a570:	e4de      	b.n	89f30 <_dtoa_r+0x188>
   8a572:	f1c0 0020 	rsb	r0, r0, #32
   8a576:	fa06 f000 	lsl.w	r0, r6, r0
   8a57a:	e474      	b.n	89e66 <_dtoa_r+0xbe>
   8a57c:	4601      	mov	r1, r0
   8a57e:	465a      	mov	r2, fp
   8a580:	4620      	mov	r0, r4
   8a582:	f001 fdc5 	bl	8c110 <__pow5mult>
   8a586:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a588:	4680      	mov	r8, r0
   8a58a:	2b01      	cmp	r3, #1
   8a58c:	f340 81d1 	ble.w	8a932 <_dtoa_r+0xb8a>
   8a590:	f04f 0900 	mov.w	r9, #0
   8a594:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a598:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a59c:	6918      	ldr	r0, [r3, #16]
   8a59e:	f001 fca1 	bl	8bee4 <__hi0bits>
   8a5a2:	f1c0 0020 	rsb	r0, r0, #32
   8a5a6:	e741      	b.n	8a42c <_dtoa_r+0x684>
   8a5a8:	4629      	mov	r1, r5
   8a5aa:	2300      	movs	r3, #0
   8a5ac:	220a      	movs	r2, #10
   8a5ae:	4620      	mov	r0, r4
   8a5b0:	f001 fc4a 	bl	8be48 <__multadd>
   8a5b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a5b6:	4605      	mov	r5, r0
   8a5b8:	2b00      	cmp	r3, #0
   8a5ba:	f340 8315 	ble.w	8abe8 <_dtoa_r+0xe40>
   8a5be:	9707      	str	r7, [sp, #28]
   8a5c0:	930a      	str	r3, [sp, #40]	; 0x28
   8a5c2:	2e00      	cmp	r6, #0
   8a5c4:	f300 8122 	bgt.w	8a80c <_dtoa_r+0xa64>
   8a5c8:	f1b9 0f00 	cmp.w	r9, #0
   8a5cc:	f040 81f9 	bne.w	8a9c2 <_dtoa_r+0xc1a>
   8a5d0:	462f      	mov	r7, r5
   8a5d2:	9903      	ldr	r1, [sp, #12]
   8a5d4:	9b04      	ldr	r3, [sp, #16]
   8a5d6:	460e      	mov	r6, r1
   8a5d8:	f003 0201 	and.w	r2, r3, #1
   8a5dc:	1e4b      	subs	r3, r1, #1
   8a5de:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a5e0:	920c      	str	r2, [sp, #48]	; 0x30
   8a5e2:	430a      	orrs	r2, r1
   8a5e4:	920b      	str	r2, [sp, #44]	; 0x2c
   8a5e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a5e8:	441a      	add	r2, r3
   8a5ea:	920a      	str	r2, [sp, #40]	; 0x28
   8a5ec:	4641      	mov	r1, r8
   8a5ee:	4650      	mov	r0, sl
   8a5f0:	f7ff fb4a 	bl	89c88 <quorem>
   8a5f4:	4629      	mov	r1, r5
   8a5f6:	4683      	mov	fp, r0
   8a5f8:	4650      	mov	r0, sl
   8a5fa:	f001 fe49 	bl	8c290 <__mcmp>
   8a5fe:	463a      	mov	r2, r7
   8a600:	4641      	mov	r1, r8
   8a602:	4681      	mov	r9, r0
   8a604:	4620      	mov	r0, r4
   8a606:	f001 fe61 	bl	8c2cc <__mdiff>
   8a60a:	68c2      	ldr	r2, [r0, #12]
   8a60c:	4601      	mov	r1, r0
   8a60e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8a612:	2a00      	cmp	r2, #0
   8a614:	d142      	bne.n	8a69c <_dtoa_r+0x8f4>
   8a616:	9006      	str	r0, [sp, #24]
   8a618:	4650      	mov	r0, sl
   8a61a:	9308      	str	r3, [sp, #32]
   8a61c:	f001 fe38 	bl	8c290 <__mcmp>
   8a620:	9906      	ldr	r1, [sp, #24]
   8a622:	9004      	str	r0, [sp, #16]
   8a624:	4620      	mov	r0, r4
   8a626:	f001 fc05 	bl	8be34 <_Bfree>
   8a62a:	9a04      	ldr	r2, [sp, #16]
   8a62c:	9b08      	ldr	r3, [sp, #32]
   8a62e:	b91a      	cbnz	r2, 8a638 <_dtoa_r+0x890>
   8a630:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a632:	2900      	cmp	r1, #0
   8a634:	f000 82cb 	beq.w	8abce <_dtoa_r+0xe26>
   8a638:	f1b9 0f00 	cmp.w	r9, #0
   8a63c:	f2c0 8185 	blt.w	8a94a <_dtoa_r+0xba2>
   8a640:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a642:	ea41 0909 	orr.w	r9, r1, r9
   8a646:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a648:	ea51 0109 	orrs.w	r1, r1, r9
   8a64c:	f000 817d 	beq.w	8a94a <_dtoa_r+0xba2>
   8a650:	2a00      	cmp	r2, #0
   8a652:	f300 81d1 	bgt.w	8a9f8 <_dtoa_r+0xc50>
   8a656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a658:	f106 0901 	add.w	r9, r6, #1
   8a65c:	4296      	cmp	r6, r2
   8a65e:	46cb      	mov	fp, r9
   8a660:	7033      	strb	r3, [r6, #0]
   8a662:	f000 81e3 	beq.w	8aa2c <_dtoa_r+0xc84>
   8a666:	4651      	mov	r1, sl
   8a668:	2300      	movs	r3, #0
   8a66a:	220a      	movs	r2, #10
   8a66c:	4620      	mov	r0, r4
   8a66e:	f001 fbeb 	bl	8be48 <__multadd>
   8a672:	42bd      	cmp	r5, r7
   8a674:	4682      	mov	sl, r0
   8a676:	4629      	mov	r1, r5
   8a678:	f04f 0300 	mov.w	r3, #0
   8a67c:	f04f 020a 	mov.w	r2, #10
   8a680:	4620      	mov	r0, r4
   8a682:	d012      	beq.n	8a6aa <_dtoa_r+0x902>
   8a684:	f001 fbe0 	bl	8be48 <__multadd>
   8a688:	4639      	mov	r1, r7
   8a68a:	4605      	mov	r5, r0
   8a68c:	2300      	movs	r3, #0
   8a68e:	220a      	movs	r2, #10
   8a690:	4620      	mov	r0, r4
   8a692:	f001 fbd9 	bl	8be48 <__multadd>
   8a696:	464e      	mov	r6, r9
   8a698:	4607      	mov	r7, r0
   8a69a:	e7a7      	b.n	8a5ec <_dtoa_r+0x844>
   8a69c:	4620      	mov	r0, r4
   8a69e:	9304      	str	r3, [sp, #16]
   8a6a0:	f001 fbc8 	bl	8be34 <_Bfree>
   8a6a4:	2201      	movs	r2, #1
   8a6a6:	9b04      	ldr	r3, [sp, #16]
   8a6a8:	e7c6      	b.n	8a638 <_dtoa_r+0x890>
   8a6aa:	f001 fbcd 	bl	8be48 <__multadd>
   8a6ae:	464e      	mov	r6, r9
   8a6b0:	4605      	mov	r5, r0
   8a6b2:	4607      	mov	r7, r0
   8a6b4:	e79a      	b.n	8a5ec <_dtoa_r+0x844>
   8a6b6:	bf00      	nop
   8a6b8:	0008da5c 	.word	0x0008da5c
   8a6bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a6be:	2b02      	cmp	r3, #2
   8a6c0:	dc7e      	bgt.n	8a7c0 <_dtoa_r+0xa18>
   8a6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a6c4:	2b00      	cmp	r3, #0
   8a6c6:	f47f af7c 	bne.w	8a5c2 <_dtoa_r+0x81a>
   8a6ca:	4641      	mov	r1, r8
   8a6cc:	4650      	mov	r0, sl
   8a6ce:	f7ff fadb 	bl	89c88 <quorem>
   8a6d2:	9a07      	ldr	r2, [sp, #28]
   8a6d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a6d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a6dc:	3201      	adds	r2, #1
   8a6de:	2600      	movs	r6, #0
   8a6e0:	9207      	str	r2, [sp, #28]
   8a6e2:	f80b 3b01 	strb.w	r3, [fp], #1
   8a6e6:	e6f5      	b.n	8a4d4 <_dtoa_r+0x72c>
   8a6e8:	4641      	mov	r1, r8
   8a6ea:	4650      	mov	r0, sl
   8a6ec:	f001 fdd0 	bl	8c290 <__mcmp>
   8a6f0:	2800      	cmp	r0, #0
   8a6f2:	f6bf aec4 	bge.w	8a47e <_dtoa_r+0x6d6>
   8a6f6:	4651      	mov	r1, sl
   8a6f8:	2300      	movs	r3, #0
   8a6fa:	220a      	movs	r2, #10
   8a6fc:	4620      	mov	r0, r4
   8a6fe:	f001 fba3 	bl	8be48 <__multadd>
   8a702:	9b07      	ldr	r3, [sp, #28]
   8a704:	4682      	mov	sl, r0
   8a706:	1e5f      	subs	r7, r3, #1
   8a708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a70a:	2b00      	cmp	r3, #0
   8a70c:	f47f af4c 	bne.w	8a5a8 <_dtoa_r+0x800>
   8a710:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a712:	2b00      	cmp	r3, #0
   8a714:	f340 8262 	ble.w	8abdc <_dtoa_r+0xe34>
   8a718:	930a      	str	r3, [sp, #40]	; 0x28
   8a71a:	e6bb      	b.n	8a494 <_dtoa_r+0x6ec>
   8a71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a71e:	4651      	mov	r1, sl
   8a720:	4620      	mov	r0, r4
   8a722:	f001 fcf5 	bl	8c110 <__pow5mult>
   8a726:	4682      	mov	sl, r0
   8a728:	e66c      	b.n	8a404 <_dtoa_r+0x65c>
   8a72a:	4bba      	ldr	r3, [pc, #744]	; (8aa14 <_dtoa_r+0xc6c>)
   8a72c:	9303      	str	r3, [sp, #12]
   8a72e:	3303      	adds	r3, #3
   8a730:	e419      	b.n	89f66 <_dtoa_r+0x1be>
   8a732:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a736:	2900      	cmp	r1, #0
   8a738:	f47f ae71 	bne.w	8a41e <_dtoa_r+0x676>
   8a73c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a740:	2b00      	cmp	r3, #0
   8a742:	f47f ae6c 	bne.w	8a41e <_dtoa_r+0x676>
   8a746:	4bb4      	ldr	r3, [pc, #720]	; (8aa18 <_dtoa_r+0xc70>)
   8a748:	4013      	ands	r3, r2
   8a74a:	2b00      	cmp	r3, #0
   8a74c:	f000 822a 	beq.w	8aba4 <_dtoa_r+0xdfc>
   8a750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a752:	f04f 0901 	mov.w	r9, #1
   8a756:	3301      	adds	r3, #1
   8a758:	930b      	str	r3, [sp, #44]	; 0x2c
   8a75a:	9b06      	ldr	r3, [sp, #24]
   8a75c:	3301      	adds	r3, #1
   8a75e:	9306      	str	r3, [sp, #24]
   8a760:	e65f      	b.n	8a422 <_dtoa_r+0x67a>
   8a762:	2301      	movs	r3, #1
   8a764:	930c      	str	r3, [sp, #48]	; 0x30
   8a766:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a768:	9a07      	ldr	r2, [sp, #28]
   8a76a:	4413      	add	r3, r2
   8a76c:	9312      	str	r3, [sp, #72]	; 0x48
   8a76e:	3301      	adds	r3, #1
   8a770:	2b01      	cmp	r3, #1
   8a772:	461e      	mov	r6, r3
   8a774:	bfb8      	it	lt
   8a776:	2601      	movlt	r6, #1
   8a778:	930a      	str	r3, [sp, #40]	; 0x28
   8a77a:	2100      	movs	r1, #0
   8a77c:	2e17      	cmp	r6, #23
   8a77e:	6461      	str	r1, [r4, #68]	; 0x44
   8a780:	f77f ac43 	ble.w	8a00a <_dtoa_r+0x262>
   8a784:	2201      	movs	r2, #1
   8a786:	2304      	movs	r3, #4
   8a788:	005b      	lsls	r3, r3, #1
   8a78a:	f103 0014 	add.w	r0, r3, #20
   8a78e:	42b0      	cmp	r0, r6
   8a790:	4611      	mov	r1, r2
   8a792:	f102 0201 	add.w	r2, r2, #1
   8a796:	d9f7      	bls.n	8a788 <_dtoa_r+0x9e0>
   8a798:	6461      	str	r1, [r4, #68]	; 0x44
   8a79a:	e436      	b.n	8a00a <_dtoa_r+0x262>
   8a79c:	2301      	movs	r3, #1
   8a79e:	930c      	str	r3, [sp, #48]	; 0x30
   8a7a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a7a2:	2b00      	cmp	r3, #0
   8a7a4:	dd46      	ble.n	8a834 <_dtoa_r+0xa8c>
   8a7a6:	461e      	mov	r6, r3
   8a7a8:	9312      	str	r3, [sp, #72]	; 0x48
   8a7aa:	930a      	str	r3, [sp, #40]	; 0x28
   8a7ac:	e7e5      	b.n	8a77a <_dtoa_r+0x9d2>
   8a7ae:	2300      	movs	r3, #0
   8a7b0:	930c      	str	r3, [sp, #48]	; 0x30
   8a7b2:	e7d8      	b.n	8a766 <_dtoa_r+0x9be>
   8a7b4:	2300      	movs	r3, #0
   8a7b6:	930c      	str	r3, [sp, #48]	; 0x30
   8a7b8:	e7f2      	b.n	8a7a0 <_dtoa_r+0x9f8>
   8a7ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a7bc:	9707      	str	r7, [sp, #28]
   8a7be:	930a      	str	r3, [sp, #40]	; 0x28
   8a7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a7c2:	2b00      	cmp	r3, #0
   8a7c4:	f47f ad40 	bne.w	8a248 <_dtoa_r+0x4a0>
   8a7c8:	4641      	mov	r1, r8
   8a7ca:	2205      	movs	r2, #5
   8a7cc:	4620      	mov	r0, r4
   8a7ce:	f001 fb3b 	bl	8be48 <__multadd>
   8a7d2:	4680      	mov	r8, r0
   8a7d4:	4650      	mov	r0, sl
   8a7d6:	4641      	mov	r1, r8
   8a7d8:	f001 fd5a 	bl	8c290 <__mcmp>
   8a7dc:	2800      	cmp	r0, #0
   8a7de:	f77f ad33 	ble.w	8a248 <_dtoa_r+0x4a0>
   8a7e2:	9f03      	ldr	r7, [sp, #12]
   8a7e4:	2231      	movs	r2, #49	; 0x31
   8a7e6:	463b      	mov	r3, r7
   8a7e8:	9e07      	ldr	r6, [sp, #28]
   8a7ea:	f803 2b01 	strb.w	r2, [r3], #1
   8a7ee:	3601      	adds	r6, #1
   8a7f0:	9303      	str	r3, [sp, #12]
   8a7f2:	4641      	mov	r1, r8
   8a7f4:	4620      	mov	r0, r4
   8a7f6:	f001 fb1d 	bl	8be34 <_Bfree>
   8a7fa:	1c73      	adds	r3, r6, #1
   8a7fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8a800:	9307      	str	r3, [sp, #28]
   8a802:	9703      	str	r7, [sp, #12]
   8a804:	2d00      	cmp	r5, #0
   8a806:	f47f ae90 	bne.w	8a52a <_dtoa_r+0x782>
   8a80a:	e692      	b.n	8a532 <_dtoa_r+0x78a>
   8a80c:	4629      	mov	r1, r5
   8a80e:	4632      	mov	r2, r6
   8a810:	4620      	mov	r0, r4
   8a812:	f001 fcc9 	bl	8c1a8 <__lshift>
   8a816:	4605      	mov	r5, r0
   8a818:	e6d6      	b.n	8a5c8 <_dtoa_r+0x820>
   8a81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a81c:	970d      	str	r7, [sp, #52]	; 0x34
   8a81e:	1afb      	subs	r3, r7, r3
   8a820:	449b      	add	fp, r3
   8a822:	2700      	movs	r7, #0
   8a824:	e58c      	b.n	8a340 <_dtoa_r+0x598>
   8a826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a82a:	f04f 0902 	mov.w	r9, #2
   8a82e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a832:	e417      	b.n	8a064 <_dtoa_r+0x2bc>
   8a834:	2301      	movs	r3, #1
   8a836:	9325      	str	r3, [sp, #148]	; 0x94
   8a838:	930a      	str	r3, [sp, #40]	; 0x28
   8a83a:	f7ff bbe2 	b.w	8a002 <_dtoa_r+0x25a>
   8a83e:	d103      	bne.n	8a848 <_dtoa_r+0xaa0>
   8a840:	9b04      	ldr	r3, [sp, #16]
   8a842:	07db      	lsls	r3, r3, #31
   8a844:	f53f ae53 	bmi.w	8a4ee <_dtoa_r+0x746>
   8a848:	46d9      	mov	r9, fp
   8a84a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a84e:	2b30      	cmp	r3, #48	; 0x30
   8a850:	d0fa      	beq.n	8a848 <_dtoa_r+0xaa0>
   8a852:	e65e      	b.n	8a512 <_dtoa_r+0x76a>
   8a854:	4648      	mov	r0, r9
   8a856:	f002 fd55 	bl	8d304 <__aeabi_i2d>
   8a85a:	4632      	mov	r2, r6
   8a85c:	463b      	mov	r3, r7
   8a85e:	f002 fdbb 	bl	8d3d8 <__aeabi_dmul>
   8a862:	2200      	movs	r2, #0
   8a864:	4b6d      	ldr	r3, [pc, #436]	; (8aa1c <_dtoa_r+0xc74>)
   8a866:	f002 fc01 	bl	8d06c <__adddf3>
   8a86a:	4680      	mov	r8, r0
   8a86c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a870:	4630      	mov	r0, r6
   8a872:	4639      	mov	r1, r7
   8a874:	2200      	movs	r2, #0
   8a876:	4b6a      	ldr	r3, [pc, #424]	; (8aa20 <_dtoa_r+0xc78>)
   8a878:	f002 fbf6 	bl	8d068 <__aeabi_dsub>
   8a87c:	4642      	mov	r2, r8
   8a87e:	464b      	mov	r3, r9
   8a880:	4606      	mov	r6, r0
   8a882:	460f      	mov	r7, r1
   8a884:	f003 f838 	bl	8d8f8 <__aeabi_dcmpgt>
   8a888:	2800      	cmp	r0, #0
   8a88a:	f040 8187 	bne.w	8ab9c <_dtoa_r+0xdf4>
   8a88e:	4642      	mov	r2, r8
   8a890:	4630      	mov	r0, r6
   8a892:	4639      	mov	r1, r7
   8a894:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a898:	f003 f810 	bl	8d8bc <__aeabi_dcmplt>
   8a89c:	2800      	cmp	r0, #0
   8a89e:	f43f acaa 	beq.w	8a1f6 <_dtoa_r+0x44e>
   8a8a2:	f04f 0800 	mov.w	r8, #0
   8a8a6:	4645      	mov	r5, r8
   8a8a8:	e4ce      	b.n	8a248 <_dtoa_r+0x4a0>
   8a8aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a8ac:	2a00      	cmp	r2, #0
   8a8ae:	f000 80c3 	beq.w	8aa38 <_dtoa_r+0xc90>
   8a8b2:	9a06      	ldr	r2, [sp, #24]
   8a8b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a8b8:	441a      	add	r2, r3
   8a8ba:	9206      	str	r2, [sp, #24]
   8a8bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a8be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a8c0:	4616      	mov	r6, r2
   8a8c2:	441a      	add	r2, r3
   8a8c4:	920b      	str	r2, [sp, #44]	; 0x2c
   8a8c6:	e547      	b.n	8a358 <_dtoa_r+0x5b0>
   8a8c8:	2331      	movs	r3, #49	; 0x31
   8a8ca:	9a07      	ldr	r2, [sp, #28]
   8a8cc:	3201      	adds	r2, #1
   8a8ce:	9207      	str	r2, [sp, #28]
   8a8d0:	9a03      	ldr	r2, [sp, #12]
   8a8d2:	7013      	strb	r3, [r2, #0]
   8a8d4:	e61d      	b.n	8a512 <_dtoa_r+0x76a>
   8a8d6:	f000 814b 	beq.w	8ab70 <_dtoa_r+0xdc8>
   8a8da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a8de:	9b07      	ldr	r3, [sp, #28]
   8a8e0:	425d      	negs	r5, r3
   8a8e2:	4b50      	ldr	r3, [pc, #320]	; (8aa24 <_dtoa_r+0xc7c>)
   8a8e4:	f005 020f 	and.w	r2, r5, #15
   8a8e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8f0:	f002 fd72 	bl	8d3d8 <__aeabi_dmul>
   8a8f4:	112d      	asrs	r5, r5, #4
   8a8f6:	4606      	mov	r6, r0
   8a8f8:	460f      	mov	r7, r1
   8a8fa:	f000 817d 	beq.w	8abf8 <_dtoa_r+0xe50>
   8a8fe:	2300      	movs	r3, #0
   8a900:	f04f 0902 	mov.w	r9, #2
   8a904:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8aa28 <_dtoa_r+0xc80>
   8a908:	07ea      	lsls	r2, r5, #31
   8a90a:	d505      	bpl.n	8a918 <_dtoa_r+0xb70>
   8a90c:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a910:	f002 fd62 	bl	8d3d8 <__aeabi_dmul>
   8a914:	2301      	movs	r3, #1
   8a916:	4499      	add	r9, r3
   8a918:	106d      	asrs	r5, r5, #1
   8a91a:	f108 0808 	add.w	r8, r8, #8
   8a91e:	d1f3      	bne.n	8a908 <_dtoa_r+0xb60>
   8a920:	2b00      	cmp	r3, #0
   8a922:	f43f abba 	beq.w	8a09a <_dtoa_r+0x2f2>
   8a926:	4606      	mov	r6, r0
   8a928:	460f      	mov	r7, r1
   8a92a:	f7ff bbb6 	b.w	8a09a <_dtoa_r+0x2f2>
   8a92e:	900e      	str	r0, [sp, #56]	; 0x38
   8a930:	e520      	b.n	8a374 <_dtoa_r+0x5cc>
   8a932:	9b04      	ldr	r3, [sp, #16]
   8a934:	2b00      	cmp	r3, #0
   8a936:	f47f ae2b 	bne.w	8a590 <_dtoa_r+0x7e8>
   8a93a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a93e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a942:	2b00      	cmp	r3, #0
   8a944:	f43f aeff 	beq.w	8a746 <_dtoa_r+0x99e>
   8a948:	e622      	b.n	8a590 <_dtoa_r+0x7e8>
   8a94a:	2a00      	cmp	r2, #0
   8a94c:	dd12      	ble.n	8a974 <_dtoa_r+0xbcc>
   8a94e:	4651      	mov	r1, sl
   8a950:	2201      	movs	r2, #1
   8a952:	4620      	mov	r0, r4
   8a954:	9304      	str	r3, [sp, #16]
   8a956:	f001 fc27 	bl	8c1a8 <__lshift>
   8a95a:	4641      	mov	r1, r8
   8a95c:	4682      	mov	sl, r0
   8a95e:	f001 fc97 	bl	8c290 <__mcmp>
   8a962:	2800      	cmp	r0, #0
   8a964:	9b04      	ldr	r3, [sp, #16]
   8a966:	f340 812c 	ble.w	8abc2 <_dtoa_r+0xe1a>
   8a96a:	2b39      	cmp	r3, #57	; 0x39
   8a96c:	f000 810c 	beq.w	8ab88 <_dtoa_r+0xde0>
   8a970:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a974:	46b1      	mov	r9, r6
   8a976:	f809 3b01 	strb.w	r3, [r9], #1
   8a97a:	9b07      	ldr	r3, [sp, #28]
   8a97c:	462e      	mov	r6, r5
   8a97e:	3301      	adds	r3, #1
   8a980:	463d      	mov	r5, r7
   8a982:	9307      	str	r3, [sp, #28]
   8a984:	e5c5      	b.n	8a512 <_dtoa_r+0x76a>
   8a986:	4655      	mov	r5, sl
   8a988:	9c08      	ldr	r4, [sp, #32]
   8a98a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a98e:	4602      	mov	r2, r0
   8a990:	460b      	mov	r3, r1
   8a992:	f002 fb6b 	bl	8d06c <__adddf3>
   8a996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a99a:	4606      	mov	r6, r0
   8a99c:	460f      	mov	r7, r1
   8a99e:	f002 ffab 	bl	8d8f8 <__aeabi_dcmpgt>
   8a9a2:	b960      	cbnz	r0, 8a9be <_dtoa_r+0xc16>
   8a9a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a9a8:	4630      	mov	r0, r6
   8a9aa:	4639      	mov	r1, r7
   8a9ac:	f002 ff7c 	bl	8d8a8 <__aeabi_dcmpeq>
   8a9b0:	2800      	cmp	r0, #0
   8a9b2:	f43f aca3 	beq.w	8a2fc <_dtoa_r+0x554>
   8a9b6:	f018 0f01 	tst.w	r8, #1
   8a9ba:	f43f ac9f 	beq.w	8a2fc <_dtoa_r+0x554>
   8a9be:	9a03      	ldr	r2, [sp, #12]
   8a9c0:	e40a      	b.n	8a1d8 <_dtoa_r+0x430>
   8a9c2:	4620      	mov	r0, r4
   8a9c4:	6869      	ldr	r1, [r5, #4]
   8a9c6:	f001 fa0f 	bl	8bde8 <_Balloc>
   8a9ca:	4606      	mov	r6, r0
   8a9cc:	2800      	cmp	r0, #0
   8a9ce:	f000 8117 	beq.w	8ac00 <_dtoa_r+0xe58>
   8a9d2:	692b      	ldr	r3, [r5, #16]
   8a9d4:	f105 010c 	add.w	r1, r5, #12
   8a9d8:	3302      	adds	r3, #2
   8a9da:	009a      	lsls	r2, r3, #2
   8a9dc:	300c      	adds	r0, #12
   8a9de:	f7fc fb35 	bl	8704c <memcpy>
   8a9e2:	4631      	mov	r1, r6
   8a9e4:	2201      	movs	r2, #1
   8a9e6:	4620      	mov	r0, r4
   8a9e8:	f001 fbde 	bl	8c1a8 <__lshift>
   8a9ec:	4607      	mov	r7, r0
   8a9ee:	e5f0      	b.n	8a5d2 <_dtoa_r+0x82a>
   8a9f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a9f4:	1a9e      	subs	r6, r3, r2
   8a9f6:	e4af      	b.n	8a358 <_dtoa_r+0x5b0>
   8a9f8:	2b39      	cmp	r3, #57	; 0x39
   8a9fa:	f000 80c5 	beq.w	8ab88 <_dtoa_r+0xde0>
   8a9fe:	46b1      	mov	r9, r6
   8aa00:	3301      	adds	r3, #1
   8aa02:	f809 3b01 	strb.w	r3, [r9], #1
   8aa06:	9b07      	ldr	r3, [sp, #28]
   8aa08:	462e      	mov	r6, r5
   8aa0a:	3301      	adds	r3, #1
   8aa0c:	463d      	mov	r5, r7
   8aa0e:	9307      	str	r3, [sp, #28]
   8aa10:	e57f      	b.n	8a512 <_dtoa_r+0x76a>
   8aa12:	bf00      	nop
   8aa14:	0008daa0 	.word	0x0008daa0
   8aa18:	7ff00000 	.word	0x7ff00000
   8aa1c:	401c0000 	.word	0x401c0000
   8aa20:	40140000 	.word	0x40140000
   8aa24:	0008dbf8 	.word	0x0008dbf8
   8aa28:	0008dbd0 	.word	0x0008dbd0
   8aa2c:	9a07      	ldr	r2, [sp, #28]
   8aa2e:	462e      	mov	r6, r5
   8aa30:	3201      	adds	r2, #1
   8aa32:	463d      	mov	r5, r7
   8aa34:	9207      	str	r2, [sp, #28]
   8aa36:	e54d      	b.n	8a4d4 <_dtoa_r+0x72c>
   8aa38:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8aa3a:	9a06      	ldr	r2, [sp, #24]
   8aa3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8aa3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8aa42:	441a      	add	r2, r3
   8aa44:	9206      	str	r2, [sp, #24]
   8aa46:	460a      	mov	r2, r1
   8aa48:	441a      	add	r2, r3
   8aa4a:	460e      	mov	r6, r1
   8aa4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8aa4e:	920b      	str	r2, [sp, #44]	; 0x2c
   8aa50:	e482      	b.n	8a358 <_dtoa_r+0x5b0>
   8aa52:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aa54:	497f      	ldr	r1, [pc, #508]	; (8ac54 <_dtoa_r+0xeac>)
   8aa56:	4642      	mov	r2, r8
   8aa58:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8aa5c:	464b      	mov	r3, r9
   8aa5e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8aa62:	f002 fcb9 	bl	8d3d8 <__aeabi_dmul>
   8aa66:	4602      	mov	r2, r0
   8aa68:	460b      	mov	r3, r1
   8aa6a:	4630      	mov	r0, r6
   8aa6c:	4639      	mov	r1, r7
   8aa6e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8aa72:	f002 ff61 	bl	8d938 <__aeabi_d2iz>
   8aa76:	4680      	mov	r8, r0
   8aa78:	f002 fc44 	bl	8d304 <__aeabi_i2d>
   8aa7c:	460b      	mov	r3, r1
   8aa7e:	4602      	mov	r2, r0
   8aa80:	4639      	mov	r1, r7
   8aa82:	4630      	mov	r0, r6
   8aa84:	f002 faf0 	bl	8d068 <__aeabi_dsub>
   8aa88:	4606      	mov	r6, r0
   8aa8a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aa8c:	9d03      	ldr	r5, [sp, #12]
   8aa8e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8aa92:	2801      	cmp	r0, #1
   8aa94:	460f      	mov	r7, r1
   8aa96:	f805 3b01 	strb.w	r3, [r5], #1
   8aa9a:	d01e      	beq.n	8aada <_dtoa_r+0xd32>
   8aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8aa9e:	9a03      	ldr	r2, [sp, #12]
   8aaa0:	4413      	add	r3, r2
   8aaa2:	4698      	mov	r8, r3
   8aaa4:	2200      	movs	r2, #0
   8aaa6:	4b6c      	ldr	r3, [pc, #432]	; (8ac58 <_dtoa_r+0xeb0>)
   8aaa8:	4630      	mov	r0, r6
   8aaaa:	4639      	mov	r1, r7
   8aaac:	f002 fc94 	bl	8d3d8 <__aeabi_dmul>
   8aab0:	460f      	mov	r7, r1
   8aab2:	4606      	mov	r6, r0
   8aab4:	f002 ff40 	bl	8d938 <__aeabi_d2iz>
   8aab8:	4681      	mov	r9, r0
   8aaba:	f002 fc23 	bl	8d304 <__aeabi_i2d>
   8aabe:	4602      	mov	r2, r0
   8aac0:	460b      	mov	r3, r1
   8aac2:	4630      	mov	r0, r6
   8aac4:	4639      	mov	r1, r7
   8aac6:	f002 facf 	bl	8d068 <__aeabi_dsub>
   8aaca:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8aace:	f805 9b01 	strb.w	r9, [r5], #1
   8aad2:	4545      	cmp	r5, r8
   8aad4:	4606      	mov	r6, r0
   8aad6:	460f      	mov	r7, r1
   8aad8:	d1e4      	bne.n	8aaa4 <_dtoa_r+0xcfc>
   8aada:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8aade:	2200      	movs	r2, #0
   8aae0:	4b5e      	ldr	r3, [pc, #376]	; (8ac5c <_dtoa_r+0xeb4>)
   8aae2:	4640      	mov	r0, r8
   8aae4:	4649      	mov	r1, r9
   8aae6:	f002 fac1 	bl	8d06c <__adddf3>
   8aaea:	4632      	mov	r2, r6
   8aaec:	463b      	mov	r3, r7
   8aaee:	f002 fee5 	bl	8d8bc <__aeabi_dcmplt>
   8aaf2:	2800      	cmp	r0, #0
   8aaf4:	d158      	bne.n	8aba8 <_dtoa_r+0xe00>
   8aaf6:	4642      	mov	r2, r8
   8aaf8:	464b      	mov	r3, r9
   8aafa:	2000      	movs	r0, #0
   8aafc:	4957      	ldr	r1, [pc, #348]	; (8ac5c <_dtoa_r+0xeb4>)
   8aafe:	f002 fab3 	bl	8d068 <__aeabi_dsub>
   8ab02:	4632      	mov	r2, r6
   8ab04:	463b      	mov	r3, r7
   8ab06:	f002 fef7 	bl	8d8f8 <__aeabi_dcmpgt>
   8ab0a:	2800      	cmp	r0, #0
   8ab0c:	f43f ab73 	beq.w	8a1f6 <_dtoa_r+0x44e>
   8ab10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8ab14:	46a9      	mov	r9, r5
   8ab16:	2b30      	cmp	r3, #48	; 0x30
   8ab18:	f105 35ff 	add.w	r5, r5, #4294967295
   8ab1c:	d0f8      	beq.n	8ab10 <_dtoa_r+0xd68>
   8ab1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8ab20:	3301      	adds	r3, #1
   8ab22:	9307      	str	r3, [sp, #28]
   8ab24:	e505      	b.n	8a532 <_dtoa_r+0x78a>
   8ab26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ab28:	2b00      	cmp	r3, #0
   8ab2a:	f43f ae93 	beq.w	8a854 <_dtoa_r+0xaac>
   8ab2e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8ab30:	2d00      	cmp	r5, #0
   8ab32:	f77f ab60 	ble.w	8a1f6 <_dtoa_r+0x44e>
   8ab36:	2200      	movs	r2, #0
   8ab38:	4b47      	ldr	r3, [pc, #284]	; (8ac58 <_dtoa_r+0xeb0>)
   8ab3a:	4630      	mov	r0, r6
   8ab3c:	4639      	mov	r1, r7
   8ab3e:	f002 fc4b 	bl	8d3d8 <__aeabi_dmul>
   8ab42:	4606      	mov	r6, r0
   8ab44:	460f      	mov	r7, r1
   8ab46:	f109 0001 	add.w	r0, r9, #1
   8ab4a:	f002 fbdb 	bl	8d304 <__aeabi_i2d>
   8ab4e:	4632      	mov	r2, r6
   8ab50:	463b      	mov	r3, r7
   8ab52:	f002 fc41 	bl	8d3d8 <__aeabi_dmul>
   8ab56:	2200      	movs	r2, #0
   8ab58:	4b41      	ldr	r3, [pc, #260]	; (8ac60 <_dtoa_r+0xeb8>)
   8ab5a:	f002 fa87 	bl	8d06c <__adddf3>
   8ab5e:	9a07      	ldr	r2, [sp, #28]
   8ab60:	4680      	mov	r8, r0
   8ab62:	3a01      	subs	r2, #1
   8ab64:	9213      	str	r2, [sp, #76]	; 0x4c
   8ab66:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8ab6a:	9510      	str	r5, [sp, #64]	; 0x40
   8ab6c:	f7ff bab6 	b.w	8a0dc <_dtoa_r+0x334>
   8ab70:	f04f 0902 	mov.w	r9, #2
   8ab74:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8ab78:	f7ff ba8f 	b.w	8a09a <_dtoa_r+0x2f2>
   8ab7c:	9b07      	ldr	r3, [sp, #28]
   8ab7e:	3301      	adds	r3, #1
   8ab80:	9307      	str	r3, [sp, #28]
   8ab82:	2331      	movs	r3, #49	; 0x31
   8ab84:	f7ff bb2f 	b.w	8a1e6 <_dtoa_r+0x43e>
   8ab88:	46b3      	mov	fp, r6
   8ab8a:	2339      	movs	r3, #57	; 0x39
   8ab8c:	9a07      	ldr	r2, [sp, #28]
   8ab8e:	462e      	mov	r6, r5
   8ab90:	3201      	adds	r2, #1
   8ab92:	463d      	mov	r5, r7
   8ab94:	9207      	str	r2, [sp, #28]
   8ab96:	f80b 3b01 	strb.w	r3, [fp], #1
   8ab9a:	e4aa      	b.n	8a4f2 <_dtoa_r+0x74a>
   8ab9c:	f04f 0800 	mov.w	r8, #0
   8aba0:	4645      	mov	r5, r8
   8aba2:	e61e      	b.n	8a7e2 <_dtoa_r+0xa3a>
   8aba4:	4699      	mov	r9, r3
   8aba6:	e43c      	b.n	8a422 <_dtoa_r+0x67a>
   8aba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abaa:	9a03      	ldr	r2, [sp, #12]
   8abac:	9307      	str	r3, [sp, #28]
   8abae:	f7ff bb13 	b.w	8a1d8 <_dtoa_r+0x430>
   8abb2:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8abb6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8abb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abba:	46a9      	mov	r9, r5
   8abbc:	3301      	adds	r3, #1
   8abbe:	9307      	str	r3, [sp, #28]
   8abc0:	e4b7      	b.n	8a532 <_dtoa_r+0x78a>
   8abc2:	f47f aed7 	bne.w	8a974 <_dtoa_r+0xbcc>
   8abc6:	07da      	lsls	r2, r3, #31
   8abc8:	f57f aed4 	bpl.w	8a974 <_dtoa_r+0xbcc>
   8abcc:	e6cd      	b.n	8a96a <_dtoa_r+0xbc2>
   8abce:	2b39      	cmp	r3, #57	; 0x39
   8abd0:	d0da      	beq.n	8ab88 <_dtoa_r+0xde0>
   8abd2:	f1b9 0f00 	cmp.w	r9, #0
   8abd6:	f73f aecb 	bgt.w	8a970 <_dtoa_r+0xbc8>
   8abda:	e6cb      	b.n	8a974 <_dtoa_r+0xbcc>
   8abdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8abde:	2b02      	cmp	r3, #2
   8abe0:	f73f adeb 	bgt.w	8a7ba <_dtoa_r+0xa12>
   8abe4:	9707      	str	r7, [sp, #28]
   8abe6:	e570      	b.n	8a6ca <_dtoa_r+0x922>
   8abe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8abea:	2b02      	cmp	r3, #2
   8abec:	f73f ade5 	bgt.w	8a7ba <_dtoa_r+0xa12>
   8abf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8abf2:	9707      	str	r7, [sp, #28]
   8abf4:	930a      	str	r3, [sp, #40]	; 0x28
   8abf6:	e4e4      	b.n	8a5c2 <_dtoa_r+0x81a>
   8abf8:	f04f 0902 	mov.w	r9, #2
   8abfc:	f7ff ba4d 	b.w	8a09a <_dtoa_r+0x2f2>
   8ac00:	4602      	mov	r2, r0
   8ac02:	f240 21ea 	movw	r1, #746	; 0x2ea
   8ac06:	4b17      	ldr	r3, [pc, #92]	; (8ac64 <_dtoa_r+0xebc>)
   8ac08:	4817      	ldr	r0, [pc, #92]	; (8ac68 <_dtoa_r+0xec0>)
   8ac0a:	f002 f8a7 	bl	8cd5c <__assert_func>
   8ac0e:	4b17      	ldr	r3, [pc, #92]	; (8ac6c <_dtoa_r+0xec4>)
   8ac10:	9303      	str	r3, [sp, #12]
   8ac12:	f7ff b904 	b.w	89e1e <_dtoa_r+0x76>
   8ac16:	2500      	movs	r5, #0
   8ac18:	4620      	mov	r0, r4
   8ac1a:	4629      	mov	r1, r5
   8ac1c:	6465      	str	r5, [r4, #68]	; 0x44
   8ac1e:	f001 f8e3 	bl	8bde8 <_Balloc>
   8ac22:	9003      	str	r0, [sp, #12]
   8ac24:	b958      	cbnz	r0, 8ac3e <_dtoa_r+0xe96>
   8ac26:	2200      	movs	r2, #0
   8ac28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8ac2c:	4b0d      	ldr	r3, [pc, #52]	; (8ac64 <_dtoa_r+0xebc>)
   8ac2e:	480e      	ldr	r0, [pc, #56]	; (8ac68 <_dtoa_r+0xec0>)
   8ac30:	f002 f894 	bl	8cd5c <__assert_func>
   8ac34:	f43f ac0d 	beq.w	8a452 <_dtoa_r+0x6aa>
   8ac38:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8ac3c:	e48f      	b.n	8a55e <_dtoa_r+0x7b6>
   8ac3e:	f04f 33ff 	mov.w	r3, #4294967295
   8ac42:	9312      	str	r3, [sp, #72]	; 0x48
   8ac44:	930a      	str	r3, [sp, #40]	; 0x28
   8ac46:	2301      	movs	r3, #1
   8ac48:	9a03      	ldr	r2, [sp, #12]
   8ac4a:	9525      	str	r5, [sp, #148]	; 0x94
   8ac4c:	6422      	str	r2, [r4, #64]	; 0x40
   8ac4e:	930c      	str	r3, [sp, #48]	; 0x30
   8ac50:	f7ff bad1 	b.w	8a1f6 <_dtoa_r+0x44e>
   8ac54:	0008dbf8 	.word	0x0008dbf8
   8ac58:	40240000 	.word	0x40240000
   8ac5c:	3fe00000 	.word	0x3fe00000
   8ac60:	401c0000 	.word	0x401c0000
   8ac64:	0008dab0 	.word	0x0008dab0
   8ac68:	0008dac4 	.word	0x0008dac4
   8ac6c:	0008daa4 	.word	0x0008daa4

0008ac70 <__sflush_r>:
   8ac70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ac78:	460d      	mov	r5, r1
   8ac7a:	0711      	lsls	r1, r2, #28
   8ac7c:	4680      	mov	r8, r0
   8ac7e:	d447      	bmi.n	8ad10 <__sflush_r+0xa0>
   8ac80:	686b      	ldr	r3, [r5, #4]
   8ac82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8ac86:	2b00      	cmp	r3, #0
   8ac88:	81aa      	strh	r2, [r5, #12]
   8ac8a:	dd5e      	ble.n	8ad4a <__sflush_r+0xda>
   8ac8c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8ac8e:	2c00      	cmp	r4, #0
   8ac90:	d058      	beq.n	8ad44 <__sflush_r+0xd4>
   8ac92:	2300      	movs	r3, #0
   8ac94:	f8d8 6000 	ldr.w	r6, [r8]
   8ac98:	f8c8 3000 	str.w	r3, [r8]
   8ac9c:	b293      	uxth	r3, r2
   8ac9e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8aca2:	d156      	bne.n	8ad52 <__sflush_r+0xe2>
   8aca4:	2301      	movs	r3, #1
   8aca6:	4640      	mov	r0, r8
   8aca8:	69e9      	ldr	r1, [r5, #28]
   8acaa:	47a0      	blx	r4
   8acac:	1c43      	adds	r3, r0, #1
   8acae:	d067      	beq.n	8ad80 <__sflush_r+0x110>
   8acb0:	89ab      	ldrh	r3, [r5, #12]
   8acb2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8acb4:	075f      	lsls	r7, r3, #29
   8acb6:	d505      	bpl.n	8acc4 <__sflush_r+0x54>
   8acb8:	686a      	ldr	r2, [r5, #4]
   8acba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8acbc:	1a80      	subs	r0, r0, r2
   8acbe:	b10b      	cbz	r3, 8acc4 <__sflush_r+0x54>
   8acc0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8acc2:	1ac0      	subs	r0, r0, r3
   8acc4:	4602      	mov	r2, r0
   8acc6:	69e9      	ldr	r1, [r5, #28]
   8acc8:	2300      	movs	r3, #0
   8acca:	4640      	mov	r0, r8
   8accc:	47a0      	blx	r4
   8acce:	1c41      	adds	r1, r0, #1
   8acd0:	d141      	bne.n	8ad56 <__sflush_r+0xe6>
   8acd2:	f8d8 3000 	ldr.w	r3, [r8]
   8acd6:	2b00      	cmp	r3, #0
   8acd8:	d03d      	beq.n	8ad56 <__sflush_r+0xe6>
   8acda:	2b1d      	cmp	r3, #29
   8acdc:	d001      	beq.n	8ace2 <__sflush_r+0x72>
   8acde:	2b16      	cmp	r3, #22
   8ace0:	d156      	bne.n	8ad90 <__sflush_r+0x120>
   8ace2:	2100      	movs	r1, #0
   8ace4:	692a      	ldr	r2, [r5, #16]
   8ace6:	89ab      	ldrh	r3, [r5, #12]
   8ace8:	e9c5 2100 	strd	r2, r1, [r5]
   8acec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8acf0:	81ab      	strh	r3, [r5, #12]
   8acf2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8acf4:	f8c8 6000 	str.w	r6, [r8]
   8acf8:	b321      	cbz	r1, 8ad44 <__sflush_r+0xd4>
   8acfa:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8acfe:	4299      	cmp	r1, r3
   8ad00:	d002      	beq.n	8ad08 <__sflush_r+0x98>
   8ad02:	4640      	mov	r0, r8
   8ad04:	f000 f9cc 	bl	8b0a0 <_free_r>
   8ad08:	2000      	movs	r0, #0
   8ad0a:	6328      	str	r0, [r5, #48]	; 0x30
   8ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad10:	692f      	ldr	r7, [r5, #16]
   8ad12:	b1bf      	cbz	r7, 8ad44 <__sflush_r+0xd4>
   8ad14:	b293      	uxth	r3, r2
   8ad16:	079a      	lsls	r2, r3, #30
   8ad18:	bf18      	it	ne
   8ad1a:	2300      	movne	r3, #0
   8ad1c:	682e      	ldr	r6, [r5, #0]
   8ad1e:	bf08      	it	eq
   8ad20:	696b      	ldreq	r3, [r5, #20]
   8ad22:	602f      	str	r7, [r5, #0]
   8ad24:	1bf6      	subs	r6, r6, r7
   8ad26:	60ab      	str	r3, [r5, #8]
   8ad28:	e00a      	b.n	8ad40 <__sflush_r+0xd0>
   8ad2a:	4633      	mov	r3, r6
   8ad2c:	463a      	mov	r2, r7
   8ad2e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8ad30:	4640      	mov	r0, r8
   8ad32:	69e9      	ldr	r1, [r5, #28]
   8ad34:	47a0      	blx	r4
   8ad36:	1e04      	subs	r4, r0, #0
   8ad38:	eba6 0604 	sub.w	r6, r6, r4
   8ad3c:	4427      	add	r7, r4
   8ad3e:	dd17      	ble.n	8ad70 <__sflush_r+0x100>
   8ad40:	2e00      	cmp	r6, #0
   8ad42:	dcf2      	bgt.n	8ad2a <__sflush_r+0xba>
   8ad44:	2000      	movs	r0, #0
   8ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8ad4c:	2b00      	cmp	r3, #0
   8ad4e:	dc9d      	bgt.n	8ac8c <__sflush_r+0x1c>
   8ad50:	e7f8      	b.n	8ad44 <__sflush_r+0xd4>
   8ad52:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8ad54:	e7ae      	b.n	8acb4 <__sflush_r+0x44>
   8ad56:	2100      	movs	r1, #0
   8ad58:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8ad5c:	692a      	ldr	r2, [r5, #16]
   8ad5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ad62:	81ab      	strh	r3, [r5, #12]
   8ad64:	04db      	lsls	r3, r3, #19
   8ad66:	e9c5 2100 	strd	r2, r1, [r5]
   8ad6a:	d5c2      	bpl.n	8acf2 <__sflush_r+0x82>
   8ad6c:	6528      	str	r0, [r5, #80]	; 0x50
   8ad6e:	e7c0      	b.n	8acf2 <__sflush_r+0x82>
   8ad70:	89ab      	ldrh	r3, [r5, #12]
   8ad72:	f04f 30ff 	mov.w	r0, #4294967295
   8ad76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad7a:	81ab      	strh	r3, [r5, #12]
   8ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad80:	f8d8 3000 	ldr.w	r3, [r8]
   8ad84:	2b00      	cmp	r3, #0
   8ad86:	d093      	beq.n	8acb0 <__sflush_r+0x40>
   8ad88:	2b1d      	cmp	r3, #29
   8ad8a:	d006      	beq.n	8ad9a <__sflush_r+0x12a>
   8ad8c:	2b16      	cmp	r3, #22
   8ad8e:	d004      	beq.n	8ad9a <__sflush_r+0x12a>
   8ad90:	89ab      	ldrh	r3, [r5, #12]
   8ad92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad96:	81ab      	strh	r3, [r5, #12]
   8ad98:	e7d5      	b.n	8ad46 <__sflush_r+0xd6>
   8ad9a:	f8c8 6000 	str.w	r6, [r8]
   8ad9e:	e7d1      	b.n	8ad44 <__sflush_r+0xd4>

0008ada0 <_fflush_r>:
   8ada0:	b538      	push	{r3, r4, r5, lr}
   8ada2:	460c      	mov	r4, r1
   8ada4:	4605      	mov	r5, r0
   8ada6:	b108      	cbz	r0, 8adac <_fflush_r+0xc>
   8ada8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8adaa:	b1a3      	cbz	r3, 8add6 <_fflush_r+0x36>
   8adac:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8adb0:	b1b8      	cbz	r0, 8ade2 <_fflush_r+0x42>
   8adb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adb4:	07db      	lsls	r3, r3, #31
   8adb6:	d401      	bmi.n	8adbc <_fflush_r+0x1c>
   8adb8:	0581      	lsls	r1, r0, #22
   8adba:	d515      	bpl.n	8ade8 <_fflush_r+0x48>
   8adbc:	4628      	mov	r0, r5
   8adbe:	4621      	mov	r1, r4
   8adc0:	f7ff ff56 	bl	8ac70 <__sflush_r>
   8adc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adc6:	4605      	mov	r5, r0
   8adc8:	07da      	lsls	r2, r3, #31
   8adca:	d402      	bmi.n	8add2 <_fflush_r+0x32>
   8adcc:	89a3      	ldrh	r3, [r4, #12]
   8adce:	059b      	lsls	r3, r3, #22
   8add0:	d50e      	bpl.n	8adf0 <_fflush_r+0x50>
   8add2:	4628      	mov	r0, r5
   8add4:	bd38      	pop	{r3, r4, r5, pc}
   8add6:	f000 f83f 	bl	8ae58 <__sinit>
   8adda:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8adde:	2800      	cmp	r0, #0
   8ade0:	d1e7      	bne.n	8adb2 <_fflush_r+0x12>
   8ade2:	4605      	mov	r5, r0
   8ade4:	4628      	mov	r0, r5
   8ade6:	bd38      	pop	{r3, r4, r5, pc}
   8ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8adea:	f000 fc07 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8adee:	e7e5      	b.n	8adbc <_fflush_r+0x1c>
   8adf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8adf2:	f000 fc05 	bl	8b600 <__retarget_lock_release_recursive>
   8adf6:	4628      	mov	r0, r5
   8adf8:	bd38      	pop	{r3, r4, r5, pc}
   8adfa:	bf00      	nop

0008adfc <std>:
   8adfc:	2300      	movs	r3, #0
   8adfe:	b510      	push	{r4, lr}
   8ae00:	4604      	mov	r4, r0
   8ae02:	e9c0 3300 	strd	r3, r3, [r0]
   8ae06:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8ae0a:	8181      	strh	r1, [r0, #12]
   8ae0c:	81c2      	strh	r2, [r0, #14]
   8ae0e:	4619      	mov	r1, r3
   8ae10:	6083      	str	r3, [r0, #8]
   8ae12:	6643      	str	r3, [r0, #100]	; 0x64
   8ae14:	6183      	str	r3, [r0, #24]
   8ae16:	2208      	movs	r2, #8
   8ae18:	305c      	adds	r0, #92	; 0x5c
   8ae1a:	f7fc f98d 	bl	87138 <memset>
   8ae1e:	4807      	ldr	r0, [pc, #28]	; (8ae3c <std+0x40>)
   8ae20:	4907      	ldr	r1, [pc, #28]	; (8ae40 <std+0x44>)
   8ae22:	4a08      	ldr	r2, [pc, #32]	; (8ae44 <std+0x48>)
   8ae24:	4b08      	ldr	r3, [pc, #32]	; (8ae48 <std+0x4c>)
   8ae26:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8ae2a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8ae2e:	62e3      	str	r3, [r4, #44]	; 0x2c
   8ae30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8ae34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8ae38:	f000 bbdc 	b.w	8b5f4 <__retarget_lock_init_recursive>
   8ae3c:	0008c955 	.word	0x0008c955
   8ae40:	0008c979 	.word	0x0008c979
   8ae44:	0008c9b9 	.word	0x0008c9b9
   8ae48:	0008c9d9 	.word	0x0008c9d9

0008ae4c <_cleanup_r>:
   8ae4c:	4901      	ldr	r1, [pc, #4]	; (8ae54 <_cleanup_r+0x8>)
   8ae4e:	f000 bba3 	b.w	8b598 <_fwalk_reent>
   8ae52:	bf00      	nop
   8ae54:	0008ce1d 	.word	0x0008ce1d

0008ae58 <__sinit>:
   8ae58:	b510      	push	{r4, lr}
   8ae5a:	4604      	mov	r4, r0
   8ae5c:	4813      	ldr	r0, [pc, #76]	; (8aeac <__sinit+0x54>)
   8ae5e:	f000 fbcd 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8ae62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8ae64:	b9ea      	cbnz	r2, 8aea2 <__sinit+0x4a>
   8ae66:	2003      	movs	r0, #3
   8ae68:	4911      	ldr	r1, [pc, #68]	; (8aeb0 <__sinit+0x58>)
   8ae6a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8ae6e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8ae72:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8ae76:	63e1      	str	r1, [r4, #60]	; 0x3c
   8ae78:	6860      	ldr	r0, [r4, #4]
   8ae7a:	2104      	movs	r1, #4
   8ae7c:	f7ff ffbe 	bl	8adfc <std>
   8ae80:	68a0      	ldr	r0, [r4, #8]
   8ae82:	2201      	movs	r2, #1
   8ae84:	2109      	movs	r1, #9
   8ae86:	f7ff ffb9 	bl	8adfc <std>
   8ae8a:	68e0      	ldr	r0, [r4, #12]
   8ae8c:	2202      	movs	r2, #2
   8ae8e:	2112      	movs	r1, #18
   8ae90:	f7ff ffb4 	bl	8adfc <std>
   8ae94:	2301      	movs	r3, #1
   8ae96:	4805      	ldr	r0, [pc, #20]	; (8aeac <__sinit+0x54>)
   8ae98:	63a3      	str	r3, [r4, #56]	; 0x38
   8ae9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8ae9e:	f000 bbaf 	b.w	8b600 <__retarget_lock_release_recursive>
   8aea2:	4802      	ldr	r0, [pc, #8]	; (8aeac <__sinit+0x54>)
   8aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8aea8:	f000 bbaa 	b.w	8b600 <__retarget_lock_release_recursive>
   8aeac:	20001848 	.word	0x20001848
   8aeb0:	0008ae4d 	.word	0x0008ae4d

0008aeb4 <__sfp_lock_acquire>:
   8aeb4:	4801      	ldr	r0, [pc, #4]	; (8aebc <__sfp_lock_acquire+0x8>)
   8aeb6:	f000 bba1 	b.w	8b5fc <__retarget_lock_acquire_recursive>
   8aeba:	bf00      	nop
   8aebc:	2000185c 	.word	0x2000185c

0008aec0 <__sfp_lock_release>:
   8aec0:	4801      	ldr	r0, [pc, #4]	; (8aec8 <__sfp_lock_release+0x8>)
   8aec2:	f000 bb9d 	b.w	8b600 <__retarget_lock_release_recursive>
   8aec6:	bf00      	nop
   8aec8:	2000185c 	.word	0x2000185c

0008aecc <__libc_fini_array>:
   8aecc:	b538      	push	{r3, r4, r5, lr}
   8aece:	4b08      	ldr	r3, [pc, #32]	; (8aef0 <__libc_fini_array+0x24>)
   8aed0:	4d08      	ldr	r5, [pc, #32]	; (8aef4 <__libc_fini_array+0x28>)
   8aed2:	1b5b      	subs	r3, r3, r5
   8aed4:	109c      	asrs	r4, r3, #2
   8aed6:	d007      	beq.n	8aee8 <__libc_fini_array+0x1c>
   8aed8:	3b04      	subs	r3, #4
   8aeda:	441d      	add	r5, r3
   8aedc:	3c01      	subs	r4, #1
   8aede:	f855 3904 	ldr.w	r3, [r5], #-4
   8aee2:	4798      	blx	r3
   8aee4:	2c00      	cmp	r4, #0
   8aee6:	d1f9      	bne.n	8aedc <__libc_fini_array+0x10>
   8aee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8aeec:	f002 bf9a 	b.w	8de24 <_fini>
   8aef0:	0008de34 	.word	0x0008de34
   8aef4:	0008de30 	.word	0x0008de30

0008aef8 <__fputwc>:
   8aef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8aefc:	b083      	sub	sp, #12
   8aefe:	4607      	mov	r7, r0
   8af00:	4688      	mov	r8, r1
   8af02:	4614      	mov	r4, r2
   8af04:	f000 fb6c 	bl	8b5e0 <__locale_mb_cur_max>
   8af08:	2801      	cmp	r0, #1
   8af0a:	d103      	bne.n	8af14 <__fputwc+0x1c>
   8af0c:	f108 33ff 	add.w	r3, r8, #4294967295
   8af10:	2bfe      	cmp	r3, #254	; 0xfe
   8af12:	d933      	bls.n	8af7c <__fputwc+0x84>
   8af14:	4642      	mov	r2, r8
   8af16:	4638      	mov	r0, r7
   8af18:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8af1c:	a901      	add	r1, sp, #4
   8af1e:	f001 fe95 	bl	8cc4c <_wcrtomb_r>
   8af22:	1c42      	adds	r2, r0, #1
   8af24:	4606      	mov	r6, r0
   8af26:	d02f      	beq.n	8af88 <__fputwc+0x90>
   8af28:	b318      	cbz	r0, 8af72 <__fputwc+0x7a>
   8af2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8af2e:	2500      	movs	r5, #0
   8af30:	f10d 0904 	add.w	r9, sp, #4
   8af34:	e008      	b.n	8af48 <__fputwc+0x50>
   8af36:	6823      	ldr	r3, [r4, #0]
   8af38:	1c5a      	adds	r2, r3, #1
   8af3a:	6022      	str	r2, [r4, #0]
   8af3c:	7019      	strb	r1, [r3, #0]
   8af3e:	3501      	adds	r5, #1
   8af40:	42b5      	cmp	r5, r6
   8af42:	d216      	bcs.n	8af72 <__fputwc+0x7a>
   8af44:	f815 1009 	ldrb.w	r1, [r5, r9]
   8af48:	68a3      	ldr	r3, [r4, #8]
   8af4a:	3b01      	subs	r3, #1
   8af4c:	2b00      	cmp	r3, #0
   8af4e:	60a3      	str	r3, [r4, #8]
   8af50:	daf1      	bge.n	8af36 <__fputwc+0x3e>
   8af52:	69a2      	ldr	r2, [r4, #24]
   8af54:	4293      	cmp	r3, r2
   8af56:	db01      	blt.n	8af5c <__fputwc+0x64>
   8af58:	290a      	cmp	r1, #10
   8af5a:	d1ec      	bne.n	8af36 <__fputwc+0x3e>
   8af5c:	4622      	mov	r2, r4
   8af5e:	4638      	mov	r0, r7
   8af60:	f001 fe1c 	bl	8cb9c <__swbuf_r>
   8af64:	1c43      	adds	r3, r0, #1
   8af66:	d1ea      	bne.n	8af3e <__fputwc+0x46>
   8af68:	4606      	mov	r6, r0
   8af6a:	4630      	mov	r0, r6
   8af6c:	b003      	add	sp, #12
   8af6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8af72:	4646      	mov	r6, r8
   8af74:	4630      	mov	r0, r6
   8af76:	b003      	add	sp, #12
   8af78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8af7c:	fa5f f188 	uxtb.w	r1, r8
   8af80:	4606      	mov	r6, r0
   8af82:	f88d 1004 	strb.w	r1, [sp, #4]
   8af86:	e7d2      	b.n	8af2e <__fputwc+0x36>
   8af88:	4630      	mov	r0, r6
   8af8a:	89a3      	ldrh	r3, [r4, #12]
   8af8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8af90:	81a3      	strh	r3, [r4, #12]
   8af92:	b003      	add	sp, #12
   8af94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008af98 <_fputwc_r>:
   8af98:	b530      	push	{r4, r5, lr}
   8af9a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8af9c:	4614      	mov	r4, r2
   8af9e:	f013 0f01 	tst.w	r3, #1
   8afa2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8afa6:	4605      	mov	r5, r0
   8afa8:	b083      	sub	sp, #12
   8afaa:	b29a      	uxth	r2, r3
   8afac:	d101      	bne.n	8afb2 <_fputwc_r+0x1a>
   8afae:	0598      	lsls	r0, r3, #22
   8afb0:	d51c      	bpl.n	8afec <_fputwc_r+0x54>
   8afb2:	0490      	lsls	r0, r2, #18
   8afb4:	d406      	bmi.n	8afc4 <_fputwc_r+0x2c>
   8afb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8afb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8afbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8afc0:	81a3      	strh	r3, [r4, #12]
   8afc2:	6662      	str	r2, [r4, #100]	; 0x64
   8afc4:	4628      	mov	r0, r5
   8afc6:	4622      	mov	r2, r4
   8afc8:	f7ff ff96 	bl	8aef8 <__fputwc>
   8afcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8afce:	4605      	mov	r5, r0
   8afd0:	07da      	lsls	r2, r3, #31
   8afd2:	d402      	bmi.n	8afda <_fputwc_r+0x42>
   8afd4:	89a3      	ldrh	r3, [r4, #12]
   8afd6:	059b      	lsls	r3, r3, #22
   8afd8:	d502      	bpl.n	8afe0 <_fputwc_r+0x48>
   8afda:	4628      	mov	r0, r5
   8afdc:	b003      	add	sp, #12
   8afde:	bd30      	pop	{r4, r5, pc}
   8afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8afe2:	f000 fb0d 	bl	8b600 <__retarget_lock_release_recursive>
   8afe6:	4628      	mov	r0, r5
   8afe8:	b003      	add	sp, #12
   8afea:	bd30      	pop	{r4, r5, pc}
   8afec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8afee:	9101      	str	r1, [sp, #4]
   8aff0:	f000 fb04 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8aff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aff8:	9901      	ldr	r1, [sp, #4]
   8affa:	b29a      	uxth	r2, r3
   8affc:	e7d9      	b.n	8afb2 <_fputwc_r+0x1a>
   8affe:	bf00      	nop

0008b000 <_malloc_trim_r>:
   8b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b002:	460c      	mov	r4, r1
   8b004:	4f23      	ldr	r7, [pc, #140]	; (8b094 <_malloc_trim_r+0x94>)
   8b006:	4606      	mov	r6, r0
   8b008:	f000 fee2 	bl	8bdd0 <__malloc_lock>
   8b00c:	68bb      	ldr	r3, [r7, #8]
   8b00e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b012:	685d      	ldr	r5, [r3, #4]
   8b014:	310f      	adds	r1, #15
   8b016:	f025 0503 	bic.w	r5, r5, #3
   8b01a:	194b      	adds	r3, r1, r5
   8b01c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8b020:	f023 030f 	bic.w	r3, r3, #15
   8b024:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8b028:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b02c:	db07      	blt.n	8b03e <_malloc_trim_r+0x3e>
   8b02e:	2100      	movs	r1, #0
   8b030:	4630      	mov	r0, r6
   8b032:	f001 fc7d 	bl	8c930 <_sbrk_r>
   8b036:	68bb      	ldr	r3, [r7, #8]
   8b038:	442b      	add	r3, r5
   8b03a:	4298      	cmp	r0, r3
   8b03c:	d004      	beq.n	8b048 <_malloc_trim_r+0x48>
   8b03e:	4630      	mov	r0, r6
   8b040:	f000 fecc 	bl	8bddc <__malloc_unlock>
   8b044:	2000      	movs	r0, #0
   8b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b048:	4630      	mov	r0, r6
   8b04a:	4261      	negs	r1, r4
   8b04c:	f001 fc70 	bl	8c930 <_sbrk_r>
   8b050:	3001      	adds	r0, #1
   8b052:	d00d      	beq.n	8b070 <_malloc_trim_r+0x70>
   8b054:	4a10      	ldr	r2, [pc, #64]	; (8b098 <_malloc_trim_r+0x98>)
   8b056:	68b9      	ldr	r1, [r7, #8]
   8b058:	6813      	ldr	r3, [r2, #0]
   8b05a:	1b2d      	subs	r5, r5, r4
   8b05c:	f045 0501 	orr.w	r5, r5, #1
   8b060:	4630      	mov	r0, r6
   8b062:	1b1b      	subs	r3, r3, r4
   8b064:	604d      	str	r5, [r1, #4]
   8b066:	6013      	str	r3, [r2, #0]
   8b068:	f000 feb8 	bl	8bddc <__malloc_unlock>
   8b06c:	2001      	movs	r0, #1
   8b06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b070:	2100      	movs	r1, #0
   8b072:	4630      	mov	r0, r6
   8b074:	f001 fc5c 	bl	8c930 <_sbrk_r>
   8b078:	68ba      	ldr	r2, [r7, #8]
   8b07a:	1a83      	subs	r3, r0, r2
   8b07c:	2b0f      	cmp	r3, #15
   8b07e:	ddde      	ble.n	8b03e <_malloc_trim_r+0x3e>
   8b080:	4906      	ldr	r1, [pc, #24]	; (8b09c <_malloc_trim_r+0x9c>)
   8b082:	f043 0301 	orr.w	r3, r3, #1
   8b086:	680c      	ldr	r4, [r1, #0]
   8b088:	4903      	ldr	r1, [pc, #12]	; (8b098 <_malloc_trim_r+0x98>)
   8b08a:	1b00      	subs	r0, r0, r4
   8b08c:	6053      	str	r3, [r2, #4]
   8b08e:	6008      	str	r0, [r1, #0]
   8b090:	e7d5      	b.n	8b03e <_malloc_trim_r+0x3e>
   8b092:	bf00      	nop
   8b094:	200009d8 	.word	0x200009d8
   8b098:	2000137c 	.word	0x2000137c
   8b09c:	20000de0 	.word	0x20000de0

0008b0a0 <_free_r>:
   8b0a0:	2900      	cmp	r1, #0
   8b0a2:	d05f      	beq.n	8b164 <_free_r+0xc4>
   8b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b0a6:	460c      	mov	r4, r1
   8b0a8:	4606      	mov	r6, r0
   8b0aa:	f000 fe91 	bl	8bdd0 <__malloc_lock>
   8b0ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b0b2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8b2a8 <_free_r+0x208>
   8b0b6:	f1a4 0008 	sub.w	r0, r4, #8
   8b0ba:	f023 0101 	bic.w	r1, r3, #1
   8b0be:	1842      	adds	r2, r0, r1
   8b0c0:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8b0c4:	6855      	ldr	r5, [r2, #4]
   8b0c6:	4297      	cmp	r7, r2
   8b0c8:	f025 0503 	bic.w	r5, r5, #3
   8b0cc:	f000 8089 	beq.w	8b1e2 <_free_r+0x142>
   8b0d0:	07df      	lsls	r7, r3, #31
   8b0d2:	6055      	str	r5, [r2, #4]
   8b0d4:	d434      	bmi.n	8b140 <_free_r+0xa0>
   8b0d6:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8b0da:	f10c 0408 	add.w	r4, ip, #8
   8b0de:	1bc0      	subs	r0, r0, r7
   8b0e0:	6883      	ldr	r3, [r0, #8]
   8b0e2:	4439      	add	r1, r7
   8b0e4:	42a3      	cmp	r3, r4
   8b0e6:	d06a      	beq.n	8b1be <_free_r+0x11e>
   8b0e8:	1957      	adds	r7, r2, r5
   8b0ea:	687f      	ldr	r7, [r7, #4]
   8b0ec:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8b0f0:	f8c3 e00c 	str.w	lr, [r3, #12]
   8b0f4:	f8ce 3008 	str.w	r3, [lr, #8]
   8b0f8:	07fb      	lsls	r3, r7, #31
   8b0fa:	f140 8097 	bpl.w	8b22c <_free_r+0x18c>
   8b0fe:	f041 0301 	orr.w	r3, r1, #1
   8b102:	6043      	str	r3, [r0, #4]
   8b104:	6011      	str	r1, [r2, #0]
   8b106:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b10a:	d234      	bcs.n	8b176 <_free_r+0xd6>
   8b10c:	2201      	movs	r2, #1
   8b10e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8b112:	08cb      	lsrs	r3, r1, #3
   8b114:	0949      	lsrs	r1, r1, #5
   8b116:	4413      	add	r3, r2
   8b118:	fa02 f101 	lsl.w	r1, r2, r1
   8b11c:	4321      	orrs	r1, r4
   8b11e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8b122:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8b126:	3a08      	subs	r2, #8
   8b128:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8b12c:	f8cc 1004 	str.w	r1, [ip, #4]
   8b130:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8b134:	60e0      	str	r0, [r4, #12]
   8b136:	4630      	mov	r0, r6
   8b138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b13c:	f000 be4e 	b.w	8bddc <__malloc_unlock>
   8b140:	1953      	adds	r3, r2, r5
   8b142:	685b      	ldr	r3, [r3, #4]
   8b144:	07df      	lsls	r7, r3, #31
   8b146:	d40e      	bmi.n	8b166 <_free_r+0xc6>
   8b148:	4429      	add	r1, r5
   8b14a:	f10c 0408 	add.w	r4, ip, #8
   8b14e:	6893      	ldr	r3, [r2, #8]
   8b150:	42a3      	cmp	r3, r4
   8b152:	d073      	beq.n	8b23c <_free_r+0x19c>
   8b154:	68d4      	ldr	r4, [r2, #12]
   8b156:	f041 0201 	orr.w	r2, r1, #1
   8b15a:	60dc      	str	r4, [r3, #12]
   8b15c:	60a3      	str	r3, [r4, #8]
   8b15e:	6042      	str	r2, [r0, #4]
   8b160:	5041      	str	r1, [r0, r1]
   8b162:	e7d0      	b.n	8b106 <_free_r+0x66>
   8b164:	4770      	bx	lr
   8b166:	f041 0301 	orr.w	r3, r1, #1
   8b16a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b16e:	f844 3c04 	str.w	r3, [r4, #-4]
   8b172:	6011      	str	r1, [r2, #0]
   8b174:	d3ca      	bcc.n	8b10c <_free_r+0x6c>
   8b176:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8b17a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8b17e:	d24a      	bcs.n	8b216 <_free_r+0x176>
   8b180:	098b      	lsrs	r3, r1, #6
   8b182:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8b186:	00ed      	lsls	r5, r5, #3
   8b188:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8b18c:	f85c 3005 	ldr.w	r3, [ip, r5]
   8b190:	eb0c 0405 	add.w	r4, ip, r5
   8b194:	3c08      	subs	r4, #8
   8b196:	429c      	cmp	r4, r3
   8b198:	d059      	beq.n	8b24e <_free_r+0x1ae>
   8b19a:	685a      	ldr	r2, [r3, #4]
   8b19c:	f022 0203 	bic.w	r2, r2, #3
   8b1a0:	428a      	cmp	r2, r1
   8b1a2:	d902      	bls.n	8b1aa <_free_r+0x10a>
   8b1a4:	689b      	ldr	r3, [r3, #8]
   8b1a6:	429c      	cmp	r4, r3
   8b1a8:	d1f7      	bne.n	8b19a <_free_r+0xfa>
   8b1aa:	68dc      	ldr	r4, [r3, #12]
   8b1ac:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8b1b0:	60a0      	str	r0, [r4, #8]
   8b1b2:	60d8      	str	r0, [r3, #12]
   8b1b4:	4630      	mov	r0, r6
   8b1b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b1ba:	f000 be0f 	b.w	8bddc <__malloc_unlock>
   8b1be:	1953      	adds	r3, r2, r5
   8b1c0:	685b      	ldr	r3, [r3, #4]
   8b1c2:	07db      	lsls	r3, r3, #31
   8b1c4:	d466      	bmi.n	8b294 <_free_r+0x1f4>
   8b1c6:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8b1ca:	4429      	add	r1, r5
   8b1cc:	f041 0401 	orr.w	r4, r1, #1
   8b1d0:	60d3      	str	r3, [r2, #12]
   8b1d2:	609a      	str	r2, [r3, #8]
   8b1d4:	6044      	str	r4, [r0, #4]
   8b1d6:	5041      	str	r1, [r0, r1]
   8b1d8:	4630      	mov	r0, r6
   8b1da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b1de:	f000 bdfd 	b.w	8bddc <__malloc_unlock>
   8b1e2:	07db      	lsls	r3, r3, #31
   8b1e4:	4429      	add	r1, r5
   8b1e6:	d407      	bmi.n	8b1f8 <_free_r+0x158>
   8b1e8:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8b1ec:	1b00      	subs	r0, r0, r4
   8b1ee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8b1f2:	4421      	add	r1, r4
   8b1f4:	60d3      	str	r3, [r2, #12]
   8b1f6:	609a      	str	r2, [r3, #8]
   8b1f8:	4b29      	ldr	r3, [pc, #164]	; (8b2a0 <_free_r+0x200>)
   8b1fa:	f041 0201 	orr.w	r2, r1, #1
   8b1fe:	681b      	ldr	r3, [r3, #0]
   8b200:	6042      	str	r2, [r0, #4]
   8b202:	428b      	cmp	r3, r1
   8b204:	f8cc 0008 	str.w	r0, [ip, #8]
   8b208:	d895      	bhi.n	8b136 <_free_r+0x96>
   8b20a:	4b26      	ldr	r3, [pc, #152]	; (8b2a4 <_free_r+0x204>)
   8b20c:	4630      	mov	r0, r6
   8b20e:	6819      	ldr	r1, [r3, #0]
   8b210:	f7ff fef6 	bl	8b000 <_malloc_trim_r>
   8b214:	e78f      	b.n	8b136 <_free_r+0x96>
   8b216:	2b14      	cmp	r3, #20
   8b218:	d90a      	bls.n	8b230 <_free_r+0x190>
   8b21a:	2b54      	cmp	r3, #84	; 0x54
   8b21c:	d821      	bhi.n	8b262 <_free_r+0x1c2>
   8b21e:	0b0b      	lsrs	r3, r1, #12
   8b220:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8b224:	00ed      	lsls	r5, r5, #3
   8b226:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8b22a:	e7af      	b.n	8b18c <_free_r+0xec>
   8b22c:	4429      	add	r1, r5
   8b22e:	e78e      	b.n	8b14e <_free_r+0xae>
   8b230:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8b234:	00ed      	lsls	r5, r5, #3
   8b236:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8b23a:	e7a7      	b.n	8b18c <_free_r+0xec>
   8b23c:	f041 0301 	orr.w	r3, r1, #1
   8b240:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8b244:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8b248:	6043      	str	r3, [r0, #4]
   8b24a:	5041      	str	r1, [r0, r1]
   8b24c:	e773      	b.n	8b136 <_free_r+0x96>
   8b24e:	2501      	movs	r5, #1
   8b250:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8b254:	1092      	asrs	r2, r2, #2
   8b256:	fa05 f202 	lsl.w	r2, r5, r2
   8b25a:	430a      	orrs	r2, r1
   8b25c:	f8cc 2004 	str.w	r2, [ip, #4]
   8b260:	e7a4      	b.n	8b1ac <_free_r+0x10c>
   8b262:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b266:	d806      	bhi.n	8b276 <_free_r+0x1d6>
   8b268:	0bcb      	lsrs	r3, r1, #15
   8b26a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8b26e:	00ed      	lsls	r5, r5, #3
   8b270:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8b274:	e78a      	b.n	8b18c <_free_r+0xec>
   8b276:	f240 5254 	movw	r2, #1364	; 0x554
   8b27a:	4293      	cmp	r3, r2
   8b27c:	d806      	bhi.n	8b28c <_free_r+0x1ec>
   8b27e:	0c8b      	lsrs	r3, r1, #18
   8b280:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8b284:	00ed      	lsls	r5, r5, #3
   8b286:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8b28a:	e77f      	b.n	8b18c <_free_r+0xec>
   8b28c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8b290:	227e      	movs	r2, #126	; 0x7e
   8b292:	e77b      	b.n	8b18c <_free_r+0xec>
   8b294:	f041 0301 	orr.w	r3, r1, #1
   8b298:	6043      	str	r3, [r0, #4]
   8b29a:	6011      	str	r1, [r2, #0]
   8b29c:	e74b      	b.n	8b136 <_free_r+0x96>
   8b29e:	bf00      	nop
   8b2a0:	20000de4 	.word	0x20000de4
   8b2a4:	200013ac 	.word	0x200013ac
   8b2a8:	200009d8 	.word	0x200009d8

0008b2ac <__sfvwrite_r>:
   8b2ac:	6893      	ldr	r3, [r2, #8]
   8b2ae:	2b00      	cmp	r3, #0
   8b2b0:	f000 80bd 	beq.w	8b42e <__sfvwrite_r+0x182>
   8b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2b8:	4690      	mov	r8, r2
   8b2ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b2be:	460c      	mov	r4, r1
   8b2c0:	0711      	lsls	r1, r2, #28
   8b2c2:	4681      	mov	r9, r0
   8b2c4:	b083      	sub	sp, #12
   8b2c6:	b293      	uxth	r3, r2
   8b2c8:	d527      	bpl.n	8b31a <__sfvwrite_r+0x6e>
   8b2ca:	6922      	ldr	r2, [r4, #16]
   8b2cc:	b32a      	cbz	r2, 8b31a <__sfvwrite_r+0x6e>
   8b2ce:	f013 0702 	ands.w	r7, r3, #2
   8b2d2:	f8d8 5000 	ldr.w	r5, [r8]
   8b2d6:	d02f      	beq.n	8b338 <__sfvwrite_r+0x8c>
   8b2d8:	f04f 0b00 	mov.w	fp, #0
   8b2dc:	465f      	mov	r7, fp
   8b2de:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8b594 <__sfvwrite_r+0x2e8>
   8b2e2:	2f00      	cmp	r7, #0
   8b2e4:	f000 8089 	beq.w	8b3fa <__sfvwrite_r+0x14e>
   8b2e8:	4557      	cmp	r7, sl
   8b2ea:	463b      	mov	r3, r7
   8b2ec:	465a      	mov	r2, fp
   8b2ee:	bf28      	it	cs
   8b2f0:	4653      	movcs	r3, sl
   8b2f2:	4648      	mov	r0, r9
   8b2f4:	69e1      	ldr	r1, [r4, #28]
   8b2f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b2f8:	47b0      	blx	r6
   8b2fa:	2800      	cmp	r0, #0
   8b2fc:	f340 808d 	ble.w	8b41a <__sfvwrite_r+0x16e>
   8b300:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b304:	4483      	add	fp, r0
   8b306:	1a1b      	subs	r3, r3, r0
   8b308:	1a3f      	subs	r7, r7, r0
   8b30a:	f8c8 3008 	str.w	r3, [r8, #8]
   8b30e:	2b00      	cmp	r3, #0
   8b310:	d1e7      	bne.n	8b2e2 <__sfvwrite_r+0x36>
   8b312:	2000      	movs	r0, #0
   8b314:	b003      	add	sp, #12
   8b316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b31a:	4621      	mov	r1, r4
   8b31c:	4648      	mov	r0, r9
   8b31e:	f7fe fc3b 	bl	89b98 <__swsetup_r>
   8b322:	2800      	cmp	r0, #0
   8b324:	f040 8132 	bne.w	8b58c <__sfvwrite_r+0x2e0>
   8b328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b32c:	f8d8 5000 	ldr.w	r5, [r8]
   8b330:	b293      	uxth	r3, r2
   8b332:	f013 0702 	ands.w	r7, r3, #2
   8b336:	d1cf      	bne.n	8b2d8 <__sfvwrite_r+0x2c>
   8b338:	f013 0a01 	ands.w	sl, r3, #1
   8b33c:	d179      	bne.n	8b432 <__sfvwrite_r+0x186>
   8b33e:	4656      	mov	r6, sl
   8b340:	2e00      	cmp	r6, #0
   8b342:	d056      	beq.n	8b3f2 <__sfvwrite_r+0x146>
   8b344:	059a      	lsls	r2, r3, #22
   8b346:	68a7      	ldr	r7, [r4, #8]
   8b348:	f140 80bd 	bpl.w	8b4c6 <__sfvwrite_r+0x21a>
   8b34c:	42b7      	cmp	r7, r6
   8b34e:	46bb      	mov	fp, r7
   8b350:	f200 80d2 	bhi.w	8b4f8 <__sfvwrite_r+0x24c>
   8b354:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b358:	f000 80d0 	beq.w	8b4fc <__sfvwrite_r+0x250>
   8b35c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8b360:	6822      	ldr	r2, [r4, #0]
   8b362:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8b366:	eba2 0b01 	sub.w	fp, r2, r1
   8b36a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8b36e:	f10b 0001 	add.w	r0, fp, #1
   8b372:	107f      	asrs	r7, r7, #1
   8b374:	4430      	add	r0, r6
   8b376:	42b8      	cmp	r0, r7
   8b378:	463a      	mov	r2, r7
   8b37a:	bf84      	itt	hi
   8b37c:	4607      	movhi	r7, r0
   8b37e:	463a      	movhi	r2, r7
   8b380:	055b      	lsls	r3, r3, #21
   8b382:	f140 80e7 	bpl.w	8b554 <__sfvwrite_r+0x2a8>
   8b386:	4611      	mov	r1, r2
   8b388:	4648      	mov	r0, r9
   8b38a:	f000 f9b3 	bl	8b6f4 <_malloc_r>
   8b38e:	2800      	cmp	r0, #0
   8b390:	f000 80f6 	beq.w	8b580 <__sfvwrite_r+0x2d4>
   8b394:	465a      	mov	r2, fp
   8b396:	6921      	ldr	r1, [r4, #16]
   8b398:	9000      	str	r0, [sp, #0]
   8b39a:	f7fb fe57 	bl	8704c <memcpy>
   8b39e:	89a2      	ldrh	r2, [r4, #12]
   8b3a0:	9b00      	ldr	r3, [sp, #0]
   8b3a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b3a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b3aa:	81a2      	strh	r2, [r4, #12]
   8b3ac:	eba7 020b 	sub.w	r2, r7, fp
   8b3b0:	eb03 000b 	add.w	r0, r3, fp
   8b3b4:	6167      	str	r7, [r4, #20]
   8b3b6:	46b3      	mov	fp, r6
   8b3b8:	4637      	mov	r7, r6
   8b3ba:	6123      	str	r3, [r4, #16]
   8b3bc:	6020      	str	r0, [r4, #0]
   8b3be:	60a2      	str	r2, [r4, #8]
   8b3c0:	465a      	mov	r2, fp
   8b3c2:	4651      	mov	r1, sl
   8b3c4:	f000 fc9a 	bl	8bcfc <memmove>
   8b3c8:	68a2      	ldr	r2, [r4, #8]
   8b3ca:	6823      	ldr	r3, [r4, #0]
   8b3cc:	1bd2      	subs	r2, r2, r7
   8b3ce:	4637      	mov	r7, r6
   8b3d0:	2600      	movs	r6, #0
   8b3d2:	445b      	add	r3, fp
   8b3d4:	60a2      	str	r2, [r4, #8]
   8b3d6:	6023      	str	r3, [r4, #0]
   8b3d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8b3dc:	44ba      	add	sl, r7
   8b3de:	1bd7      	subs	r7, r2, r7
   8b3e0:	f8c8 7008 	str.w	r7, [r8, #8]
   8b3e4:	2f00      	cmp	r7, #0
   8b3e6:	d094      	beq.n	8b312 <__sfvwrite_r+0x66>
   8b3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b3ec:	b29b      	uxth	r3, r3
   8b3ee:	2e00      	cmp	r6, #0
   8b3f0:	d1a8      	bne.n	8b344 <__sfvwrite_r+0x98>
   8b3f2:	e9d5 a600 	ldrd	sl, r6, [r5]
   8b3f6:	3508      	adds	r5, #8
   8b3f8:	e7a2      	b.n	8b340 <__sfvwrite_r+0x94>
   8b3fa:	e9d5 b700 	ldrd	fp, r7, [r5]
   8b3fe:	3508      	adds	r5, #8
   8b400:	e76f      	b.n	8b2e2 <__sfvwrite_r+0x36>
   8b402:	4629      	mov	r1, r5
   8b404:	465a      	mov	r2, fp
   8b406:	f000 fc79 	bl	8bcfc <memmove>
   8b40a:	6823      	ldr	r3, [r4, #0]
   8b40c:	4621      	mov	r1, r4
   8b40e:	445b      	add	r3, fp
   8b410:	4648      	mov	r0, r9
   8b412:	6023      	str	r3, [r4, #0]
   8b414:	f7ff fcc4 	bl	8ada0 <_fflush_r>
   8b418:	b358      	cbz	r0, 8b472 <__sfvwrite_r+0x1c6>
   8b41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b41e:	f04f 30ff 	mov.w	r0, #4294967295
   8b422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b426:	81a3      	strh	r3, [r4, #12]
   8b428:	b003      	add	sp, #12
   8b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b42e:	2000      	movs	r0, #0
   8b430:	4770      	bx	lr
   8b432:	463e      	mov	r6, r7
   8b434:	46aa      	mov	sl, r5
   8b436:	4638      	mov	r0, r7
   8b438:	463d      	mov	r5, r7
   8b43a:	9700      	str	r7, [sp, #0]
   8b43c:	b36e      	cbz	r6, 8b49a <__sfvwrite_r+0x1ee>
   8b43e:	2800      	cmp	r0, #0
   8b440:	d035      	beq.n	8b4ae <__sfvwrite_r+0x202>
   8b442:	9a00      	ldr	r2, [sp, #0]
   8b444:	6820      	ldr	r0, [r4, #0]
   8b446:	6921      	ldr	r1, [r4, #16]
   8b448:	42b2      	cmp	r2, r6
   8b44a:	bf28      	it	cs
   8b44c:	4632      	movcs	r2, r6
   8b44e:	4288      	cmp	r0, r1
   8b450:	6963      	ldr	r3, [r4, #20]
   8b452:	d904      	bls.n	8b45e <__sfvwrite_r+0x1b2>
   8b454:	68a1      	ldr	r1, [r4, #8]
   8b456:	eb03 0b01 	add.w	fp, r3, r1
   8b45a:	455a      	cmp	r2, fp
   8b45c:	dcd1      	bgt.n	8b402 <__sfvwrite_r+0x156>
   8b45e:	4293      	cmp	r3, r2
   8b460:	dc6b      	bgt.n	8b53a <__sfvwrite_r+0x28e>
   8b462:	462a      	mov	r2, r5
   8b464:	4648      	mov	r0, r9
   8b466:	69e1      	ldr	r1, [r4, #28]
   8b468:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b46a:	47b8      	blx	r7
   8b46c:	f1b0 0b00 	subs.w	fp, r0, #0
   8b470:	ddd3      	ble.n	8b41a <__sfvwrite_r+0x16e>
   8b472:	9b00      	ldr	r3, [sp, #0]
   8b474:	ebb3 030b 	subs.w	r3, r3, fp
   8b478:	9300      	str	r3, [sp, #0]
   8b47a:	d057      	beq.n	8b52c <__sfvwrite_r+0x280>
   8b47c:	2001      	movs	r0, #1
   8b47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b482:	445d      	add	r5, fp
   8b484:	eba3 030b 	sub.w	r3, r3, fp
   8b488:	eba6 060b 	sub.w	r6, r6, fp
   8b48c:	f8c8 3008 	str.w	r3, [r8, #8]
   8b490:	2b00      	cmp	r3, #0
   8b492:	f43f af3e 	beq.w	8b312 <__sfvwrite_r+0x66>
   8b496:	2e00      	cmp	r6, #0
   8b498:	d1d1      	bne.n	8b43e <__sfvwrite_r+0x192>
   8b49a:	f10a 0308 	add.w	r3, sl, #8
   8b49e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b4a2:	469a      	mov	sl, r3
   8b4a4:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b4a8:	3308      	adds	r3, #8
   8b4aa:	2e00      	cmp	r6, #0
   8b4ac:	d0f7      	beq.n	8b49e <__sfvwrite_r+0x1f2>
   8b4ae:	4632      	mov	r2, r6
   8b4b0:	210a      	movs	r1, #10
   8b4b2:	4628      	mov	r0, r5
   8b4b4:	f000 fbe2 	bl	8bc7c <memchr>
   8b4b8:	2800      	cmp	r0, #0
   8b4ba:	d05e      	beq.n	8b57a <__sfvwrite_r+0x2ce>
   8b4bc:	3001      	adds	r0, #1
   8b4be:	1b43      	subs	r3, r0, r5
   8b4c0:	461a      	mov	r2, r3
   8b4c2:	9300      	str	r3, [sp, #0]
   8b4c4:	e7be      	b.n	8b444 <__sfvwrite_r+0x198>
   8b4c6:	6820      	ldr	r0, [r4, #0]
   8b4c8:	6923      	ldr	r3, [r4, #16]
   8b4ca:	4298      	cmp	r0, r3
   8b4cc:	d818      	bhi.n	8b500 <__sfvwrite_r+0x254>
   8b4ce:	6962      	ldr	r2, [r4, #20]
   8b4d0:	42b2      	cmp	r2, r6
   8b4d2:	d815      	bhi.n	8b500 <__sfvwrite_r+0x254>
   8b4d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8b4d8:	42b3      	cmp	r3, r6
   8b4da:	bf28      	it	cs
   8b4dc:	4633      	movcs	r3, r6
   8b4de:	fb93 f3f2 	sdiv	r3, r3, r2
   8b4e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b4e4:	fb02 f303 	mul.w	r3, r2, r3
   8b4e8:	4648      	mov	r0, r9
   8b4ea:	4652      	mov	r2, sl
   8b4ec:	69e1      	ldr	r1, [r4, #28]
   8b4ee:	47b8      	blx	r7
   8b4f0:	1e07      	subs	r7, r0, #0
   8b4f2:	dd92      	ble.n	8b41a <__sfvwrite_r+0x16e>
   8b4f4:	1bf6      	subs	r6, r6, r7
   8b4f6:	e76f      	b.n	8b3d8 <__sfvwrite_r+0x12c>
   8b4f8:	4637      	mov	r7, r6
   8b4fa:	46b3      	mov	fp, r6
   8b4fc:	6820      	ldr	r0, [r4, #0]
   8b4fe:	e75f      	b.n	8b3c0 <__sfvwrite_r+0x114>
   8b500:	42b7      	cmp	r7, r6
   8b502:	bf28      	it	cs
   8b504:	4637      	movcs	r7, r6
   8b506:	4651      	mov	r1, sl
   8b508:	463a      	mov	r2, r7
   8b50a:	f000 fbf7 	bl	8bcfc <memmove>
   8b50e:	68a3      	ldr	r3, [r4, #8]
   8b510:	6822      	ldr	r2, [r4, #0]
   8b512:	1bdb      	subs	r3, r3, r7
   8b514:	443a      	add	r2, r7
   8b516:	60a3      	str	r3, [r4, #8]
   8b518:	6022      	str	r2, [r4, #0]
   8b51a:	2b00      	cmp	r3, #0
   8b51c:	d1ea      	bne.n	8b4f4 <__sfvwrite_r+0x248>
   8b51e:	4621      	mov	r1, r4
   8b520:	4648      	mov	r0, r9
   8b522:	f7ff fc3d 	bl	8ada0 <_fflush_r>
   8b526:	2800      	cmp	r0, #0
   8b528:	d0e4      	beq.n	8b4f4 <__sfvwrite_r+0x248>
   8b52a:	e776      	b.n	8b41a <__sfvwrite_r+0x16e>
   8b52c:	4621      	mov	r1, r4
   8b52e:	4648      	mov	r0, r9
   8b530:	f7ff fc36 	bl	8ada0 <_fflush_r>
   8b534:	2800      	cmp	r0, #0
   8b536:	d0a2      	beq.n	8b47e <__sfvwrite_r+0x1d2>
   8b538:	e76f      	b.n	8b41a <__sfvwrite_r+0x16e>
   8b53a:	4629      	mov	r1, r5
   8b53c:	4693      	mov	fp, r2
   8b53e:	9201      	str	r2, [sp, #4]
   8b540:	f000 fbdc 	bl	8bcfc <memmove>
   8b544:	68a1      	ldr	r1, [r4, #8]
   8b546:	6823      	ldr	r3, [r4, #0]
   8b548:	9a01      	ldr	r2, [sp, #4]
   8b54a:	1a89      	subs	r1, r1, r2
   8b54c:	441a      	add	r2, r3
   8b54e:	60a1      	str	r1, [r4, #8]
   8b550:	6022      	str	r2, [r4, #0]
   8b552:	e78e      	b.n	8b472 <__sfvwrite_r+0x1c6>
   8b554:	4648      	mov	r0, r9
   8b556:	f000 ffc3 	bl	8c4e0 <_realloc_r>
   8b55a:	4603      	mov	r3, r0
   8b55c:	2800      	cmp	r0, #0
   8b55e:	f47f af25 	bne.w	8b3ac <__sfvwrite_r+0x100>
   8b562:	4648      	mov	r0, r9
   8b564:	6921      	ldr	r1, [r4, #16]
   8b566:	f7ff fd9b 	bl	8b0a0 <_free_r>
   8b56a:	220c      	movs	r2, #12
   8b56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b570:	f8c9 2000 	str.w	r2, [r9]
   8b574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b578:	e751      	b.n	8b41e <__sfvwrite_r+0x172>
   8b57a:	1c72      	adds	r2, r6, #1
   8b57c:	9200      	str	r2, [sp, #0]
   8b57e:	e761      	b.n	8b444 <__sfvwrite_r+0x198>
   8b580:	220c      	movs	r2, #12
   8b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b586:	f8c9 2000 	str.w	r2, [r9]
   8b58a:	e748      	b.n	8b41e <__sfvwrite_r+0x172>
   8b58c:	f04f 30ff 	mov.w	r0, #4294967295
   8b590:	e6c0      	b.n	8b314 <__sfvwrite_r+0x68>
   8b592:	bf00      	nop
   8b594:	7ffffc00 	.word	0x7ffffc00

0008b598 <_fwalk_reent>:
   8b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b59c:	4607      	mov	r7, r0
   8b59e:	4688      	mov	r8, r1
   8b5a0:	f04f 0900 	mov.w	r9, #0
   8b5a4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b5a8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b5ac:	3d01      	subs	r5, #1
   8b5ae:	d410      	bmi.n	8b5d2 <_fwalk_reent+0x3a>
   8b5b0:	89a3      	ldrh	r3, [r4, #12]
   8b5b2:	3d01      	subs	r5, #1
   8b5b4:	2b01      	cmp	r3, #1
   8b5b6:	d908      	bls.n	8b5ca <_fwalk_reent+0x32>
   8b5b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b5bc:	3301      	adds	r3, #1
   8b5be:	d004      	beq.n	8b5ca <_fwalk_reent+0x32>
   8b5c0:	4621      	mov	r1, r4
   8b5c2:	4638      	mov	r0, r7
   8b5c4:	47c0      	blx	r8
   8b5c6:	ea49 0900 	orr.w	r9, r9, r0
   8b5ca:	1c6b      	adds	r3, r5, #1
   8b5cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b5d0:	d1ee      	bne.n	8b5b0 <_fwalk_reent+0x18>
   8b5d2:	6836      	ldr	r6, [r6, #0]
   8b5d4:	2e00      	cmp	r6, #0
   8b5d6:	d1e7      	bne.n	8b5a8 <_fwalk_reent+0x10>
   8b5d8:	4648      	mov	r0, r9
   8b5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b5de:	bf00      	nop

0008b5e0 <__locale_mb_cur_max>:
   8b5e0:	4b01      	ldr	r3, [pc, #4]	; (8b5e8 <__locale_mb_cur_max+0x8>)
   8b5e2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b5e6:	4770      	bx	lr
   8b5e8:	2000086c 	.word	0x2000086c

0008b5ec <_localeconv_r>:
   8b5ec:	4800      	ldr	r0, [pc, #0]	; (8b5f0 <_localeconv_r+0x4>)
   8b5ee:	4770      	bx	lr
   8b5f0:	2000095c 	.word	0x2000095c

0008b5f4 <__retarget_lock_init_recursive>:
   8b5f4:	4770      	bx	lr
   8b5f6:	bf00      	nop

0008b5f8 <__retarget_lock_close_recursive>:
   8b5f8:	4770      	bx	lr
   8b5fa:	bf00      	nop

0008b5fc <__retarget_lock_acquire_recursive>:
   8b5fc:	4770      	bx	lr
   8b5fe:	bf00      	nop

0008b600 <__retarget_lock_release_recursive>:
   8b600:	4770      	bx	lr
   8b602:	bf00      	nop

0008b604 <__swhatbuf_r>:
   8b604:	b570      	push	{r4, r5, r6, lr}
   8b606:	460c      	mov	r4, r1
   8b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b60c:	4615      	mov	r5, r2
   8b60e:	2900      	cmp	r1, #0
   8b610:	461e      	mov	r6, r3
   8b612:	b096      	sub	sp, #88	; 0x58
   8b614:	db14      	blt.n	8b640 <__swhatbuf_r+0x3c>
   8b616:	466a      	mov	r2, sp
   8b618:	f001 fc7a 	bl	8cf10 <_fstat_r>
   8b61c:	2800      	cmp	r0, #0
   8b61e:	db0f      	blt.n	8b640 <__swhatbuf_r+0x3c>
   8b620:	9a01      	ldr	r2, [sp, #4]
   8b622:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8b62a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8b62e:	fab2 f282 	clz	r2, r2
   8b632:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b636:	0952      	lsrs	r2, r2, #5
   8b638:	6032      	str	r2, [r6, #0]
   8b63a:	602b      	str	r3, [r5, #0]
   8b63c:	b016      	add	sp, #88	; 0x58
   8b63e:	bd70      	pop	{r4, r5, r6, pc}
   8b640:	2300      	movs	r3, #0
   8b642:	89a1      	ldrh	r1, [r4, #12]
   8b644:	6033      	str	r3, [r6, #0]
   8b646:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8b64a:	d004      	beq.n	8b656 <__swhatbuf_r+0x52>
   8b64c:	2240      	movs	r2, #64	; 0x40
   8b64e:	4618      	mov	r0, r3
   8b650:	602a      	str	r2, [r5, #0]
   8b652:	b016      	add	sp, #88	; 0x58
   8b654:	bd70      	pop	{r4, r5, r6, pc}
   8b656:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b65a:	602b      	str	r3, [r5, #0]
   8b65c:	b016      	add	sp, #88	; 0x58
   8b65e:	bd70      	pop	{r4, r5, r6, pc}

0008b660 <__smakebuf_r>:
   8b660:	b570      	push	{r4, r5, r6, lr}
   8b662:	898b      	ldrh	r3, [r1, #12]
   8b664:	460c      	mov	r4, r1
   8b666:	079d      	lsls	r5, r3, #30
   8b668:	b082      	sub	sp, #8
   8b66a:	d507      	bpl.n	8b67c <__smakebuf_r+0x1c>
   8b66c:	2201      	movs	r2, #1
   8b66e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8b672:	614a      	str	r2, [r1, #20]
   8b674:	600b      	str	r3, [r1, #0]
   8b676:	610b      	str	r3, [r1, #16]
   8b678:	b002      	add	sp, #8
   8b67a:	bd70      	pop	{r4, r5, r6, pc}
   8b67c:	ab01      	add	r3, sp, #4
   8b67e:	466a      	mov	r2, sp
   8b680:	4606      	mov	r6, r0
   8b682:	f7ff ffbf 	bl	8b604 <__swhatbuf_r>
   8b686:	9900      	ldr	r1, [sp, #0]
   8b688:	4605      	mov	r5, r0
   8b68a:	4630      	mov	r0, r6
   8b68c:	f000 f832 	bl	8b6f4 <_malloc_r>
   8b690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b694:	b170      	cbz	r0, 8b6b4 <__smakebuf_r+0x54>
   8b696:	4916      	ldr	r1, [pc, #88]	; (8b6f0 <__smakebuf_r+0x90>)
   8b698:	9a00      	ldr	r2, [sp, #0]
   8b69a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8b69c:	9901      	ldr	r1, [sp, #4]
   8b69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b6a2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8b6a6:	81a3      	strh	r3, [r4, #12]
   8b6a8:	6020      	str	r0, [r4, #0]
   8b6aa:	b989      	cbnz	r1, 8b6d0 <__smakebuf_r+0x70>
   8b6ac:	432b      	orrs	r3, r5
   8b6ae:	81a3      	strh	r3, [r4, #12]
   8b6b0:	b002      	add	sp, #8
   8b6b2:	bd70      	pop	{r4, r5, r6, pc}
   8b6b4:	059a      	lsls	r2, r3, #22
   8b6b6:	d4df      	bmi.n	8b678 <__smakebuf_r+0x18>
   8b6b8:	2101      	movs	r1, #1
   8b6ba:	f023 0303 	bic.w	r3, r3, #3
   8b6be:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b6c2:	f043 0302 	orr.w	r3, r3, #2
   8b6c6:	81a3      	strh	r3, [r4, #12]
   8b6c8:	6161      	str	r1, [r4, #20]
   8b6ca:	6022      	str	r2, [r4, #0]
   8b6cc:	6122      	str	r2, [r4, #16]
   8b6ce:	e7d3      	b.n	8b678 <__smakebuf_r+0x18>
   8b6d0:	4630      	mov	r0, r6
   8b6d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b6d6:	f001 fc31 	bl	8cf3c <_isatty_r>
   8b6da:	b910      	cbnz	r0, 8b6e2 <__smakebuf_r+0x82>
   8b6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6e0:	e7e4      	b.n	8b6ac <__smakebuf_r+0x4c>
   8b6e2:	89a2      	ldrh	r2, [r4, #12]
   8b6e4:	f022 0203 	bic.w	r2, r2, #3
   8b6e8:	f042 0201 	orr.w	r2, r2, #1
   8b6ec:	b213      	sxth	r3, r2
   8b6ee:	e7dd      	b.n	8b6ac <__smakebuf_r+0x4c>
   8b6f0:	0008ae4d 	.word	0x0008ae4d

0008b6f4 <_malloc_r>:
   8b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b6f8:	f101 050b 	add.w	r5, r1, #11
   8b6fc:	2d16      	cmp	r5, #22
   8b6fe:	4606      	mov	r6, r0
   8b700:	b083      	sub	sp, #12
   8b702:	d824      	bhi.n	8b74e <_malloc_r+0x5a>
   8b704:	2910      	cmp	r1, #16
   8b706:	f200 80b6 	bhi.w	8b876 <_malloc_r+0x182>
   8b70a:	f000 fb61 	bl	8bdd0 <__malloc_lock>
   8b70e:	2510      	movs	r5, #16
   8b710:	2002      	movs	r0, #2
   8b712:	2318      	movs	r3, #24
   8b714:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8bc00 <_malloc_r+0x50c>
   8b718:	4443      	add	r3, r8
   8b71a:	685c      	ldr	r4, [r3, #4]
   8b71c:	f1a3 0208 	sub.w	r2, r3, #8
   8b720:	4294      	cmp	r4, r2
   8b722:	f000 80b4 	beq.w	8b88e <_malloc_r+0x19a>
   8b726:	6863      	ldr	r3, [r4, #4]
   8b728:	68e1      	ldr	r1, [r4, #12]
   8b72a:	f023 0303 	bic.w	r3, r3, #3
   8b72e:	4423      	add	r3, r4
   8b730:	685a      	ldr	r2, [r3, #4]
   8b732:	68a5      	ldr	r5, [r4, #8]
   8b734:	f042 0201 	orr.w	r2, r2, #1
   8b738:	60e9      	str	r1, [r5, #12]
   8b73a:	4630      	mov	r0, r6
   8b73c:	608d      	str	r5, [r1, #8]
   8b73e:	3408      	adds	r4, #8
   8b740:	605a      	str	r2, [r3, #4]
   8b742:	f000 fb4b 	bl	8bddc <__malloc_unlock>
   8b746:	4620      	mov	r0, r4
   8b748:	b003      	add	sp, #12
   8b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b74e:	f035 0507 	bics.w	r5, r5, #7
   8b752:	f100 8090 	bmi.w	8b876 <_malloc_r+0x182>
   8b756:	42a9      	cmp	r1, r5
   8b758:	f200 808d 	bhi.w	8b876 <_malloc_r+0x182>
   8b75c:	f000 fb38 	bl	8bdd0 <__malloc_lock>
   8b760:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b764:	f0c0 8185 	bcc.w	8ba72 <_malloc_r+0x37e>
   8b768:	0a6b      	lsrs	r3, r5, #9
   8b76a:	f000 808b 	beq.w	8b884 <_malloc_r+0x190>
   8b76e:	2b04      	cmp	r3, #4
   8b770:	f200 815b 	bhi.w	8ba2a <_malloc_r+0x336>
   8b774:	09ab      	lsrs	r3, r5, #6
   8b776:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b77a:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8b77e:	00c1      	lsls	r1, r0, #3
   8b780:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8bc00 <_malloc_r+0x50c>
   8b784:	4441      	add	r1, r8
   8b786:	684c      	ldr	r4, [r1, #4]
   8b788:	3908      	subs	r1, #8
   8b78a:	42a1      	cmp	r1, r4
   8b78c:	d106      	bne.n	8b79c <_malloc_r+0xa8>
   8b78e:	e00c      	b.n	8b7aa <_malloc_r+0xb6>
   8b790:	2a00      	cmp	r2, #0
   8b792:	f280 8122 	bge.w	8b9da <_malloc_r+0x2e6>
   8b796:	68e4      	ldr	r4, [r4, #12]
   8b798:	42a1      	cmp	r1, r4
   8b79a:	d006      	beq.n	8b7aa <_malloc_r+0xb6>
   8b79c:	6863      	ldr	r3, [r4, #4]
   8b79e:	f023 0303 	bic.w	r3, r3, #3
   8b7a2:	1b5a      	subs	r2, r3, r5
   8b7a4:	2a0f      	cmp	r2, #15
   8b7a6:	ddf3      	ble.n	8b790 <_malloc_r+0x9c>
   8b7a8:	4638      	mov	r0, r7
   8b7aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b7ae:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8bc04 <_malloc_r+0x510>
   8b7b2:	4564      	cmp	r4, ip
   8b7b4:	d077      	beq.n	8b8a6 <_malloc_r+0x1b2>
   8b7b6:	6862      	ldr	r2, [r4, #4]
   8b7b8:	f022 0203 	bic.w	r2, r2, #3
   8b7bc:	1b53      	subs	r3, r2, r5
   8b7be:	2b0f      	cmp	r3, #15
   8b7c0:	f300 8165 	bgt.w	8ba8e <_malloc_r+0x39a>
   8b7c4:	2b00      	cmp	r3, #0
   8b7c6:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8b7ca:	f280 8156 	bge.w	8ba7a <_malloc_r+0x386>
   8b7ce:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b7d2:	f080 8106 	bcs.w	8b9e2 <_malloc_r+0x2ee>
   8b7d6:	2101      	movs	r1, #1
   8b7d8:	08d3      	lsrs	r3, r2, #3
   8b7da:	0952      	lsrs	r2, r2, #5
   8b7dc:	440b      	add	r3, r1
   8b7de:	fa01 f202 	lsl.w	r2, r1, r2
   8b7e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8b7e6:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8b7ea:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8b7ee:	430a      	orrs	r2, r1
   8b7f0:	f1ae 0108 	sub.w	r1, lr, #8
   8b7f4:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8b7f8:	f8c8 2004 	str.w	r2, [r8, #4]
   8b7fc:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8b800:	60fc      	str	r4, [r7, #12]
   8b802:	2101      	movs	r1, #1
   8b804:	1083      	asrs	r3, r0, #2
   8b806:	4099      	lsls	r1, r3
   8b808:	4291      	cmp	r1, r2
   8b80a:	d853      	bhi.n	8b8b4 <_malloc_r+0x1c0>
   8b80c:	4211      	tst	r1, r2
   8b80e:	d106      	bne.n	8b81e <_malloc_r+0x12a>
   8b810:	f020 0003 	bic.w	r0, r0, #3
   8b814:	0049      	lsls	r1, r1, #1
   8b816:	4211      	tst	r1, r2
   8b818:	f100 0004 	add.w	r0, r0, #4
   8b81c:	d0fa      	beq.n	8b814 <_malloc_r+0x120>
   8b81e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8b822:	464c      	mov	r4, r9
   8b824:	4686      	mov	lr, r0
   8b826:	68e7      	ldr	r7, [r4, #12]
   8b828:	42bc      	cmp	r4, r7
   8b82a:	d107      	bne.n	8b83c <_malloc_r+0x148>
   8b82c:	e109      	b.n	8ba42 <_malloc_r+0x34e>
   8b82e:	2b00      	cmp	r3, #0
   8b830:	f280 8110 	bge.w	8ba54 <_malloc_r+0x360>
   8b834:	68ff      	ldr	r7, [r7, #12]
   8b836:	42bc      	cmp	r4, r7
   8b838:	f000 8103 	beq.w	8ba42 <_malloc_r+0x34e>
   8b83c:	687a      	ldr	r2, [r7, #4]
   8b83e:	f022 0203 	bic.w	r2, r2, #3
   8b842:	1b53      	subs	r3, r2, r5
   8b844:	2b0f      	cmp	r3, #15
   8b846:	ddf2      	ble.n	8b82e <_malloc_r+0x13a>
   8b848:	f045 0e01 	orr.w	lr, r5, #1
   8b84c:	4630      	mov	r0, r6
   8b84e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8b852:	443d      	add	r5, r7
   8b854:	f043 0601 	orr.w	r6, r3, #1
   8b858:	f8c7 e004 	str.w	lr, [r7, #4]
   8b85c:	60e1      	str	r1, [r4, #12]
   8b85e:	608c      	str	r4, [r1, #8]
   8b860:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b864:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b868:	606e      	str	r6, [r5, #4]
   8b86a:	50bb      	str	r3, [r7, r2]
   8b86c:	f000 fab6 	bl	8bddc <__malloc_unlock>
   8b870:	f107 0408 	add.w	r4, r7, #8
   8b874:	e002      	b.n	8b87c <_malloc_r+0x188>
   8b876:	230c      	movs	r3, #12
   8b878:	2400      	movs	r4, #0
   8b87a:	6033      	str	r3, [r6, #0]
   8b87c:	4620      	mov	r0, r4
   8b87e:	b003      	add	sp, #12
   8b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b884:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b888:	2040      	movs	r0, #64	; 0x40
   8b88a:	273f      	movs	r7, #63	; 0x3f
   8b88c:	e778      	b.n	8b780 <_malloc_r+0x8c>
   8b88e:	68dc      	ldr	r4, [r3, #12]
   8b890:	42a3      	cmp	r3, r4
   8b892:	bf08      	it	eq
   8b894:	3002      	addeq	r0, #2
   8b896:	f47f af46 	bne.w	8b726 <_malloc_r+0x32>
   8b89a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b89e:	f8df c364 	ldr.w	ip, [pc, #868]	; 8bc04 <_malloc_r+0x510>
   8b8a2:	4564      	cmp	r4, ip
   8b8a4:	d187      	bne.n	8b7b6 <_malloc_r+0xc2>
   8b8a6:	2101      	movs	r1, #1
   8b8a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b8ac:	1083      	asrs	r3, r0, #2
   8b8ae:	4099      	lsls	r1, r3
   8b8b0:	4291      	cmp	r1, r2
   8b8b2:	d9ab      	bls.n	8b80c <_malloc_r+0x118>
   8b8b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b8b8:	6867      	ldr	r7, [r4, #4]
   8b8ba:	f027 0703 	bic.w	r7, r7, #3
   8b8be:	42bd      	cmp	r5, r7
   8b8c0:	d802      	bhi.n	8b8c8 <_malloc_r+0x1d4>
   8b8c2:	1b7b      	subs	r3, r7, r5
   8b8c4:	2b0f      	cmp	r3, #15
   8b8c6:	dc77      	bgt.n	8b9b8 <_malloc_r+0x2c4>
   8b8c8:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8bc08 <_malloc_r+0x514>
   8b8cc:	4bc8      	ldr	r3, [pc, #800]	; (8bbf0 <_malloc_r+0x4fc>)
   8b8ce:	f8d9 2000 	ldr.w	r2, [r9]
   8b8d2:	681b      	ldr	r3, [r3, #0]
   8b8d4:	3201      	adds	r2, #1
   8b8d6:	442b      	add	r3, r5
   8b8d8:	eb04 0a07 	add.w	sl, r4, r7
   8b8dc:	f000 8124 	beq.w	8bb28 <_malloc_r+0x434>
   8b8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b8e4:	330f      	adds	r3, #15
   8b8e6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b8ea:	f02b 0b0f 	bic.w	fp, fp, #15
   8b8ee:	4659      	mov	r1, fp
   8b8f0:	4630      	mov	r0, r6
   8b8f2:	f001 f81d 	bl	8c930 <_sbrk_r>
   8b8f6:	1c41      	adds	r1, r0, #1
   8b8f8:	4602      	mov	r2, r0
   8b8fa:	f000 80e1 	beq.w	8bac0 <_malloc_r+0x3cc>
   8b8fe:	4582      	cmp	sl, r0
   8b900:	f200 80dc 	bhi.w	8babc <_malloc_r+0x3c8>
   8b904:	4bbb      	ldr	r3, [pc, #748]	; (8bbf4 <_malloc_r+0x500>)
   8b906:	6819      	ldr	r1, [r3, #0]
   8b908:	4459      	add	r1, fp
   8b90a:	4608      	mov	r0, r1
   8b90c:	6019      	str	r1, [r3, #0]
   8b90e:	f000 8141 	beq.w	8bb94 <_malloc_r+0x4a0>
   8b912:	f8d9 1000 	ldr.w	r1, [r9]
   8b916:	9301      	str	r3, [sp, #4]
   8b918:	3101      	adds	r1, #1
   8b91a:	bf1b      	ittet	ne
   8b91c:	eba2 0a0a 	subne.w	sl, r2, sl
   8b920:	4450      	addne	r0, sl
   8b922:	f8c9 2000 	streq.w	r2, [r9]
   8b926:	6018      	strne	r0, [r3, #0]
   8b928:	f012 0a07 	ands.w	sl, r2, #7
   8b92c:	f000 810a 	beq.w	8bb44 <_malloc_r+0x450>
   8b930:	f1ca 0108 	rsb	r1, sl, #8
   8b934:	440a      	add	r2, r1
   8b936:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b93a:	4493      	add	fp, r2
   8b93c:	3108      	adds	r1, #8
   8b93e:	eba1 010b 	sub.w	r1, r1, fp
   8b942:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b946:	4649      	mov	r1, r9
   8b948:	4630      	mov	r0, r6
   8b94a:	9200      	str	r2, [sp, #0]
   8b94c:	f000 fff0 	bl	8c930 <_sbrk_r>
   8b950:	1c42      	adds	r2, r0, #1
   8b952:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b956:	f000 8143 	beq.w	8bbe0 <_malloc_r+0x4ec>
   8b95a:	1a80      	subs	r0, r0, r2
   8b95c:	eb00 0b09 	add.w	fp, r0, r9
   8b960:	6819      	ldr	r1, [r3, #0]
   8b962:	f04b 0001 	orr.w	r0, fp, #1
   8b966:	4449      	add	r1, r9
   8b968:	4544      	cmp	r4, r8
   8b96a:	f8c8 2008 	str.w	r2, [r8, #8]
   8b96e:	6019      	str	r1, [r3, #0]
   8b970:	6050      	str	r0, [r2, #4]
   8b972:	f000 811c 	beq.w	8bbae <_malloc_r+0x4ba>
   8b976:	2f0f      	cmp	r7, #15
   8b978:	f240 811b 	bls.w	8bbb2 <_malloc_r+0x4be>
   8b97c:	f04f 0c05 	mov.w	ip, #5
   8b980:	6860      	ldr	r0, [r4, #4]
   8b982:	3f0c      	subs	r7, #12
   8b984:	f027 0707 	bic.w	r7, r7, #7
   8b988:	f000 0001 	and.w	r0, r0, #1
   8b98c:	4338      	orrs	r0, r7
   8b98e:	eb04 0e07 	add.w	lr, r4, r7
   8b992:	2f0f      	cmp	r7, #15
   8b994:	6060      	str	r0, [r4, #4]
   8b996:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b99a:	f200 8137 	bhi.w	8bc0c <_malloc_r+0x518>
   8b99e:	4614      	mov	r4, r2
   8b9a0:	6850      	ldr	r0, [r2, #4]
   8b9a2:	4b95      	ldr	r3, [pc, #596]	; (8bbf8 <_malloc_r+0x504>)
   8b9a4:	681a      	ldr	r2, [r3, #0]
   8b9a6:	428a      	cmp	r2, r1
   8b9a8:	bf38      	it	cc
   8b9aa:	6019      	strcc	r1, [r3, #0]
   8b9ac:	4b93      	ldr	r3, [pc, #588]	; (8bbfc <_malloc_r+0x508>)
   8b9ae:	681a      	ldr	r2, [r3, #0]
   8b9b0:	428a      	cmp	r2, r1
   8b9b2:	bf38      	it	cc
   8b9b4:	6019      	strcc	r1, [r3, #0]
   8b9b6:	e086      	b.n	8bac6 <_malloc_r+0x3d2>
   8b9b8:	f045 0201 	orr.w	r2, r5, #1
   8b9bc:	f043 0301 	orr.w	r3, r3, #1
   8b9c0:	4425      	add	r5, r4
   8b9c2:	6062      	str	r2, [r4, #4]
   8b9c4:	4630      	mov	r0, r6
   8b9c6:	f8c8 5008 	str.w	r5, [r8, #8]
   8b9ca:	3408      	adds	r4, #8
   8b9cc:	606b      	str	r3, [r5, #4]
   8b9ce:	f000 fa05 	bl	8bddc <__malloc_unlock>
   8b9d2:	4620      	mov	r0, r4
   8b9d4:	b003      	add	sp, #12
   8b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b9da:	4423      	add	r3, r4
   8b9dc:	685a      	ldr	r2, [r3, #4]
   8b9de:	68e1      	ldr	r1, [r4, #12]
   8b9e0:	e6a7      	b.n	8b732 <_malloc_r+0x3e>
   8b9e2:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b9e6:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b9ea:	d361      	bcc.n	8bab0 <_malloc_r+0x3bc>
   8b9ec:	2b14      	cmp	r3, #20
   8b9ee:	f200 80ba 	bhi.w	8bb66 <_malloc_r+0x472>
   8b9f2:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b9f6:	00c9      	lsls	r1, r1, #3
   8b9f8:	335b      	adds	r3, #91	; 0x5b
   8b9fa:	eb08 0701 	add.w	r7, r8, r1
   8b9fe:	f858 1001 	ldr.w	r1, [r8, r1]
   8ba02:	3f08      	subs	r7, #8
   8ba04:	428f      	cmp	r7, r1
   8ba06:	f000 8092 	beq.w	8bb2e <_malloc_r+0x43a>
   8ba0a:	684b      	ldr	r3, [r1, #4]
   8ba0c:	f023 0303 	bic.w	r3, r3, #3
   8ba10:	4293      	cmp	r3, r2
   8ba12:	d902      	bls.n	8ba1a <_malloc_r+0x326>
   8ba14:	6889      	ldr	r1, [r1, #8]
   8ba16:	428f      	cmp	r7, r1
   8ba18:	d1f7      	bne.n	8ba0a <_malloc_r+0x316>
   8ba1a:	68cf      	ldr	r7, [r1, #12]
   8ba1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ba20:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ba24:	60bc      	str	r4, [r7, #8]
   8ba26:	60cc      	str	r4, [r1, #12]
   8ba28:	e6eb      	b.n	8b802 <_malloc_r+0x10e>
   8ba2a:	2b14      	cmp	r3, #20
   8ba2c:	d959      	bls.n	8bae2 <_malloc_r+0x3ee>
   8ba2e:	2b54      	cmp	r3, #84	; 0x54
   8ba30:	f200 80a1 	bhi.w	8bb76 <_malloc_r+0x482>
   8ba34:	0b2b      	lsrs	r3, r5, #12
   8ba36:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ba3a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ba3e:	00c1      	lsls	r1, r0, #3
   8ba40:	e69e      	b.n	8b780 <_malloc_r+0x8c>
   8ba42:	f10e 0e01 	add.w	lr, lr, #1
   8ba46:	f01e 0f03 	tst.w	lr, #3
   8ba4a:	f104 0408 	add.w	r4, r4, #8
   8ba4e:	f47f aeea 	bne.w	8b826 <_malloc_r+0x132>
   8ba52:	e051      	b.n	8baf8 <_malloc_r+0x404>
   8ba54:	463c      	mov	r4, r7
   8ba56:	443a      	add	r2, r7
   8ba58:	6853      	ldr	r3, [r2, #4]
   8ba5a:	68f9      	ldr	r1, [r7, #12]
   8ba5c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ba60:	f043 0301 	orr.w	r3, r3, #1
   8ba64:	6053      	str	r3, [r2, #4]
   8ba66:	4630      	mov	r0, r6
   8ba68:	60e9      	str	r1, [r5, #12]
   8ba6a:	608d      	str	r5, [r1, #8]
   8ba6c:	f000 f9b6 	bl	8bddc <__malloc_unlock>
   8ba70:	e704      	b.n	8b87c <_malloc_r+0x188>
   8ba72:	08e8      	lsrs	r0, r5, #3
   8ba74:	f105 0308 	add.w	r3, r5, #8
   8ba78:	e64c      	b.n	8b714 <_malloc_r+0x20>
   8ba7a:	4422      	add	r2, r4
   8ba7c:	6853      	ldr	r3, [r2, #4]
   8ba7e:	4630      	mov	r0, r6
   8ba80:	f043 0301 	orr.w	r3, r3, #1
   8ba84:	6053      	str	r3, [r2, #4]
   8ba86:	3408      	adds	r4, #8
   8ba88:	f000 f9a8 	bl	8bddc <__malloc_unlock>
   8ba8c:	e6f6      	b.n	8b87c <_malloc_r+0x188>
   8ba8e:	f045 0701 	orr.w	r7, r5, #1
   8ba92:	f043 0101 	orr.w	r1, r3, #1
   8ba96:	4425      	add	r5, r4
   8ba98:	6067      	str	r7, [r4, #4]
   8ba9a:	4630      	mov	r0, r6
   8ba9c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8baa0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8baa4:	6069      	str	r1, [r5, #4]
   8baa6:	50a3      	str	r3, [r4, r2]
   8baa8:	f000 f998 	bl	8bddc <__malloc_unlock>
   8baac:	3408      	adds	r4, #8
   8baae:	e6e5      	b.n	8b87c <_malloc_r+0x188>
   8bab0:	0993      	lsrs	r3, r2, #6
   8bab2:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8bab6:	00c9      	lsls	r1, r1, #3
   8bab8:	3338      	adds	r3, #56	; 0x38
   8baba:	e79e      	b.n	8b9fa <_malloc_r+0x306>
   8babc:	4544      	cmp	r4, r8
   8babe:	d064      	beq.n	8bb8a <_malloc_r+0x496>
   8bac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bac4:	6860      	ldr	r0, [r4, #4]
   8bac6:	f020 0b03 	bic.w	fp, r0, #3
   8baca:	455d      	cmp	r5, fp
   8bacc:	ebab 0305 	sub.w	r3, fp, r5
   8bad0:	d802      	bhi.n	8bad8 <_malloc_r+0x3e4>
   8bad2:	2b0f      	cmp	r3, #15
   8bad4:	f73f af70 	bgt.w	8b9b8 <_malloc_r+0x2c4>
   8bad8:	4630      	mov	r0, r6
   8bada:	f000 f97f 	bl	8bddc <__malloc_unlock>
   8bade:	2400      	movs	r4, #0
   8bae0:	e6cc      	b.n	8b87c <_malloc_r+0x188>
   8bae2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8bae6:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8baea:	00c1      	lsls	r1, r0, #3
   8baec:	e648      	b.n	8b780 <_malloc_r+0x8c>
   8baee:	f859 3908 	ldr.w	r3, [r9], #-8
   8baf2:	454b      	cmp	r3, r9
   8baf4:	f040 80a9 	bne.w	8bc4a <_malloc_r+0x556>
   8baf8:	f010 0f03 	tst.w	r0, #3
   8bafc:	f100 30ff 	add.w	r0, r0, #4294967295
   8bb00:	d1f5      	bne.n	8baee <_malloc_r+0x3fa>
   8bb02:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb06:	ea23 0301 	bic.w	r3, r3, r1
   8bb0a:	f8c8 3004 	str.w	r3, [r8, #4]
   8bb0e:	0049      	lsls	r1, r1, #1
   8bb10:	4299      	cmp	r1, r3
   8bb12:	f63f aecf 	bhi.w	8b8b4 <_malloc_r+0x1c0>
   8bb16:	b919      	cbnz	r1, 8bb20 <_malloc_r+0x42c>
   8bb18:	e6cc      	b.n	8b8b4 <_malloc_r+0x1c0>
   8bb1a:	0049      	lsls	r1, r1, #1
   8bb1c:	f10e 0e04 	add.w	lr, lr, #4
   8bb20:	4219      	tst	r1, r3
   8bb22:	d0fa      	beq.n	8bb1a <_malloc_r+0x426>
   8bb24:	4670      	mov	r0, lr
   8bb26:	e67a      	b.n	8b81e <_malloc_r+0x12a>
   8bb28:	f103 0b10 	add.w	fp, r3, #16
   8bb2c:	e6df      	b.n	8b8ee <_malloc_r+0x1fa>
   8bb2e:	f04f 0e01 	mov.w	lr, #1
   8bb32:	109a      	asrs	r2, r3, #2
   8bb34:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb38:	fa0e f202 	lsl.w	r2, lr, r2
   8bb3c:	431a      	orrs	r2, r3
   8bb3e:	f8c8 2004 	str.w	r2, [r8, #4]
   8bb42:	e76d      	b.n	8ba20 <_malloc_r+0x32c>
   8bb44:	eb02 010b 	add.w	r1, r2, fp
   8bb48:	4249      	negs	r1, r1
   8bb4a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8bb4e:	4649      	mov	r1, r9
   8bb50:	4630      	mov	r0, r6
   8bb52:	9200      	str	r2, [sp, #0]
   8bb54:	f000 feec 	bl	8c930 <_sbrk_r>
   8bb58:	1c43      	adds	r3, r0, #1
   8bb5a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bb5e:	f47f aefc 	bne.w	8b95a <_malloc_r+0x266>
   8bb62:	46d1      	mov	r9, sl
   8bb64:	e6fc      	b.n	8b960 <_malloc_r+0x26c>
   8bb66:	2b54      	cmp	r3, #84	; 0x54
   8bb68:	d826      	bhi.n	8bbb8 <_malloc_r+0x4c4>
   8bb6a:	0b13      	lsrs	r3, r2, #12
   8bb6c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8bb70:	00c9      	lsls	r1, r1, #3
   8bb72:	336e      	adds	r3, #110	; 0x6e
   8bb74:	e741      	b.n	8b9fa <_malloc_r+0x306>
   8bb76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bb7a:	d826      	bhi.n	8bbca <_malloc_r+0x4d6>
   8bb7c:	0beb      	lsrs	r3, r5, #15
   8bb7e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8bb82:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8bb86:	00c1      	lsls	r1, r0, #3
   8bb88:	e5fa      	b.n	8b780 <_malloc_r+0x8c>
   8bb8a:	4b1a      	ldr	r3, [pc, #104]	; (8bbf4 <_malloc_r+0x500>)
   8bb8c:	6818      	ldr	r0, [r3, #0]
   8bb8e:	4458      	add	r0, fp
   8bb90:	6018      	str	r0, [r3, #0]
   8bb92:	e6be      	b.n	8b912 <_malloc_r+0x21e>
   8bb94:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8bb98:	f1bc 0f00 	cmp.w	ip, #0
   8bb9c:	f47f aeb9 	bne.w	8b912 <_malloc_r+0x21e>
   8bba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bba4:	44bb      	add	fp, r7
   8bba6:	f04b 0001 	orr.w	r0, fp, #1
   8bbaa:	6060      	str	r0, [r4, #4]
   8bbac:	e6f9      	b.n	8b9a2 <_malloc_r+0x2ae>
   8bbae:	4614      	mov	r4, r2
   8bbb0:	e6f7      	b.n	8b9a2 <_malloc_r+0x2ae>
   8bbb2:	2301      	movs	r3, #1
   8bbb4:	6053      	str	r3, [r2, #4]
   8bbb6:	e78f      	b.n	8bad8 <_malloc_r+0x3e4>
   8bbb8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bbbc:	d832      	bhi.n	8bc24 <_malloc_r+0x530>
   8bbbe:	0bd3      	lsrs	r3, r2, #15
   8bbc0:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8bbc4:	00c9      	lsls	r1, r1, #3
   8bbc6:	3377      	adds	r3, #119	; 0x77
   8bbc8:	e717      	b.n	8b9fa <_malloc_r+0x306>
   8bbca:	f240 5254 	movw	r2, #1364	; 0x554
   8bbce:	4293      	cmp	r3, r2
   8bbd0:	d832      	bhi.n	8bc38 <_malloc_r+0x544>
   8bbd2:	0cab      	lsrs	r3, r5, #18
   8bbd4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8bbd8:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8bbdc:	00c1      	lsls	r1, r0, #3
   8bbde:	e5cf      	b.n	8b780 <_malloc_r+0x8c>
   8bbe0:	f1aa 0a08 	sub.w	sl, sl, #8
   8bbe4:	44d3      	add	fp, sl
   8bbe6:	f04f 0900 	mov.w	r9, #0
   8bbea:	ebab 0b02 	sub.w	fp, fp, r2
   8bbee:	e6b7      	b.n	8b960 <_malloc_r+0x26c>
   8bbf0:	200013ac 	.word	0x200013ac
   8bbf4:	2000137c 	.word	0x2000137c
   8bbf8:	200013a4 	.word	0x200013a4
   8bbfc:	200013a8 	.word	0x200013a8
   8bc00:	200009d8 	.word	0x200009d8
   8bc04:	200009e0 	.word	0x200009e0
   8bc08:	20000de0 	.word	0x20000de0
   8bc0c:	f104 0108 	add.w	r1, r4, #8
   8bc10:	4630      	mov	r0, r6
   8bc12:	9300      	str	r3, [sp, #0]
   8bc14:	f7ff fa44 	bl	8b0a0 <_free_r>
   8bc18:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bc1c:	9b00      	ldr	r3, [sp, #0]
   8bc1e:	6860      	ldr	r0, [r4, #4]
   8bc20:	6819      	ldr	r1, [r3, #0]
   8bc22:	e6be      	b.n	8b9a2 <_malloc_r+0x2ae>
   8bc24:	f240 5154 	movw	r1, #1364	; 0x554
   8bc28:	428b      	cmp	r3, r1
   8bc2a:	d80a      	bhi.n	8bc42 <_malloc_r+0x54e>
   8bc2c:	0c93      	lsrs	r3, r2, #18
   8bc2e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8bc32:	00c9      	lsls	r1, r1, #3
   8bc34:	337c      	adds	r3, #124	; 0x7c
   8bc36:	e6e0      	b.n	8b9fa <_malloc_r+0x306>
   8bc38:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc3c:	207f      	movs	r0, #127	; 0x7f
   8bc3e:	277e      	movs	r7, #126	; 0x7e
   8bc40:	e59e      	b.n	8b780 <_malloc_r+0x8c>
   8bc42:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc46:	237e      	movs	r3, #126	; 0x7e
   8bc48:	e6d7      	b.n	8b9fa <_malloc_r+0x306>
   8bc4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bc4e:	e75e      	b.n	8bb0e <_malloc_r+0x41a>

0008bc50 <__ascii_mbtowc>:
   8bc50:	b082      	sub	sp, #8
   8bc52:	b149      	cbz	r1, 8bc68 <__ascii_mbtowc+0x18>
   8bc54:	b15a      	cbz	r2, 8bc6e <__ascii_mbtowc+0x1e>
   8bc56:	b16b      	cbz	r3, 8bc74 <__ascii_mbtowc+0x24>
   8bc58:	7813      	ldrb	r3, [r2, #0]
   8bc5a:	600b      	str	r3, [r1, #0]
   8bc5c:	7812      	ldrb	r2, [r2, #0]
   8bc5e:	1e10      	subs	r0, r2, #0
   8bc60:	bf18      	it	ne
   8bc62:	2001      	movne	r0, #1
   8bc64:	b002      	add	sp, #8
   8bc66:	4770      	bx	lr
   8bc68:	a901      	add	r1, sp, #4
   8bc6a:	2a00      	cmp	r2, #0
   8bc6c:	d1f3      	bne.n	8bc56 <__ascii_mbtowc+0x6>
   8bc6e:	4610      	mov	r0, r2
   8bc70:	b002      	add	sp, #8
   8bc72:	4770      	bx	lr
   8bc74:	f06f 0001 	mvn.w	r0, #1
   8bc78:	e7f4      	b.n	8bc64 <__ascii_mbtowc+0x14>
   8bc7a:	bf00      	nop

0008bc7c <memchr>:
   8bc7c:	b470      	push	{r4, r5, r6}
   8bc7e:	0784      	lsls	r4, r0, #30
   8bc80:	b2cd      	uxtb	r5, r1
   8bc82:	d012      	beq.n	8bcaa <memchr+0x2e>
   8bc84:	4603      	mov	r3, r0
   8bc86:	1e54      	subs	r4, r2, #1
   8bc88:	b92a      	cbnz	r2, 8bc96 <memchr+0x1a>
   8bc8a:	e00b      	b.n	8bca4 <memchr+0x28>
   8bc8c:	079a      	lsls	r2, r3, #30
   8bc8e:	4618      	mov	r0, r3
   8bc90:	d00c      	beq.n	8bcac <memchr+0x30>
   8bc92:	3c01      	subs	r4, #1
   8bc94:	d306      	bcc.n	8bca4 <memchr+0x28>
   8bc96:	4618      	mov	r0, r3
   8bc98:	f813 2b01 	ldrb.w	r2, [r3], #1
   8bc9c:	42aa      	cmp	r2, r5
   8bc9e:	d1f5      	bne.n	8bc8c <memchr+0x10>
   8bca0:	bc70      	pop	{r4, r5, r6}
   8bca2:	4770      	bx	lr
   8bca4:	2000      	movs	r0, #0
   8bca6:	bc70      	pop	{r4, r5, r6}
   8bca8:	4770      	bx	lr
   8bcaa:	4614      	mov	r4, r2
   8bcac:	2c03      	cmp	r4, #3
   8bcae:	d80d      	bhi.n	8bccc <memchr+0x50>
   8bcb0:	2c00      	cmp	r4, #0
   8bcb2:	d0f7      	beq.n	8bca4 <memchr+0x28>
   8bcb4:	4602      	mov	r2, r0
   8bcb6:	1903      	adds	r3, r0, r4
   8bcb8:	e001      	b.n	8bcbe <memchr+0x42>
   8bcba:	429a      	cmp	r2, r3
   8bcbc:	d0f2      	beq.n	8bca4 <memchr+0x28>
   8bcbe:	4610      	mov	r0, r2
   8bcc0:	f812 1b01 	ldrb.w	r1, [r2], #1
   8bcc4:	42a9      	cmp	r1, r5
   8bcc6:	d1f8      	bne.n	8bcba <memchr+0x3e>
   8bcc8:	bc70      	pop	{r4, r5, r6}
   8bcca:	4770      	bx	lr
   8bccc:	4606      	mov	r6, r0
   8bcce:	020a      	lsls	r2, r1, #8
   8bcd0:	b292      	uxth	r2, r2
   8bcd2:	432a      	orrs	r2, r5
   8bcd4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8bcd8:	6833      	ldr	r3, [r6, #0]
   8bcda:	4630      	mov	r0, r6
   8bcdc:	4053      	eors	r3, r2
   8bcde:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8bce2:	ea21 0303 	bic.w	r3, r1, r3
   8bce6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8bcea:	f106 0604 	add.w	r6, r6, #4
   8bcee:	d1e1      	bne.n	8bcb4 <memchr+0x38>
   8bcf0:	3c04      	subs	r4, #4
   8bcf2:	2c03      	cmp	r4, #3
   8bcf4:	4630      	mov	r0, r6
   8bcf6:	d8ef      	bhi.n	8bcd8 <memchr+0x5c>
   8bcf8:	e7da      	b.n	8bcb0 <memchr+0x34>
   8bcfa:	bf00      	nop

0008bcfc <memmove>:
   8bcfc:	4288      	cmp	r0, r1
   8bcfe:	b4f0      	push	{r4, r5, r6, r7}
   8bd00:	d90d      	bls.n	8bd1e <memmove+0x22>
   8bd02:	188b      	adds	r3, r1, r2
   8bd04:	4283      	cmp	r3, r0
   8bd06:	d90a      	bls.n	8bd1e <memmove+0x22>
   8bd08:	1884      	adds	r4, r0, r2
   8bd0a:	b132      	cbz	r2, 8bd1a <memmove+0x1e>
   8bd0c:	4622      	mov	r2, r4
   8bd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8bd12:	4299      	cmp	r1, r3
   8bd14:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8bd18:	d1f9      	bne.n	8bd0e <memmove+0x12>
   8bd1a:	bcf0      	pop	{r4, r5, r6, r7}
   8bd1c:	4770      	bx	lr
   8bd1e:	2a0f      	cmp	r2, #15
   8bd20:	d80e      	bhi.n	8bd40 <memmove+0x44>
   8bd22:	4603      	mov	r3, r0
   8bd24:	1e54      	subs	r4, r2, #1
   8bd26:	2a00      	cmp	r2, #0
   8bd28:	d0f7      	beq.n	8bd1a <memmove+0x1e>
   8bd2a:	3401      	adds	r4, #1
   8bd2c:	440c      	add	r4, r1
   8bd2e:	3b01      	subs	r3, #1
   8bd30:	f811 2b01 	ldrb.w	r2, [r1], #1
   8bd34:	42a1      	cmp	r1, r4
   8bd36:	f803 2f01 	strb.w	r2, [r3, #1]!
   8bd3a:	d1f9      	bne.n	8bd30 <memmove+0x34>
   8bd3c:	bcf0      	pop	{r4, r5, r6, r7}
   8bd3e:	4770      	bx	lr
   8bd40:	ea40 0301 	orr.w	r3, r0, r1
   8bd44:	079b      	lsls	r3, r3, #30
   8bd46:	d13e      	bne.n	8bdc6 <memmove+0xca>
   8bd48:	f1a2 0310 	sub.w	r3, r2, #16
   8bd4c:	f023 040f 	bic.w	r4, r3, #15
   8bd50:	f101 0720 	add.w	r7, r1, #32
   8bd54:	4427      	add	r7, r4
   8bd56:	091b      	lsrs	r3, r3, #4
   8bd58:	f101 0410 	add.w	r4, r1, #16
   8bd5c:	f100 0510 	add.w	r5, r0, #16
   8bd60:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8bd64:	3410      	adds	r4, #16
   8bd66:	f845 6c10 	str.w	r6, [r5, #-16]
   8bd6a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8bd6e:	3510      	adds	r5, #16
   8bd70:	f845 6c1c 	str.w	r6, [r5, #-28]
   8bd74:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8bd78:	f845 6c18 	str.w	r6, [r5, #-24]
   8bd7c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8bd80:	42bc      	cmp	r4, r7
   8bd82:	f845 6c14 	str.w	r6, [r5, #-20]
   8bd86:	d1eb      	bne.n	8bd60 <memmove+0x64>
   8bd88:	3301      	adds	r3, #1
   8bd8a:	f012 0f0c 	tst.w	r2, #12
   8bd8e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8bd92:	f002 040f 	and.w	r4, r2, #15
   8bd96:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8bd9a:	d017      	beq.n	8bdcc <memmove+0xd0>
   8bd9c:	460e      	mov	r6, r1
   8bd9e:	3c04      	subs	r4, #4
   8bda0:	f024 0c03 	bic.w	ip, r4, #3
   8bda4:	08a5      	lsrs	r5, r4, #2
   8bda6:	449c      	add	ip, r3
   8bda8:	1f1c      	subs	r4, r3, #4
   8bdaa:	f856 7b04 	ldr.w	r7, [r6], #4
   8bdae:	f844 7f04 	str.w	r7, [r4, #4]!
   8bdb2:	4564      	cmp	r4, ip
   8bdb4:	d1f9      	bne.n	8bdaa <memmove+0xae>
   8bdb6:	1c6c      	adds	r4, r5, #1
   8bdb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8bdbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8bdc0:	f002 0203 	and.w	r2, r2, #3
   8bdc4:	e7ae      	b.n	8bd24 <memmove+0x28>
   8bdc6:	4603      	mov	r3, r0
   8bdc8:	1e54      	subs	r4, r2, #1
   8bdca:	e7ae      	b.n	8bd2a <memmove+0x2e>
   8bdcc:	4622      	mov	r2, r4
   8bdce:	e7a9      	b.n	8bd24 <memmove+0x28>

0008bdd0 <__malloc_lock>:
   8bdd0:	4801      	ldr	r0, [pc, #4]	; (8bdd8 <__malloc_lock+0x8>)
   8bdd2:	f7ff bc13 	b.w	8b5fc <__retarget_lock_acquire_recursive>
   8bdd6:	bf00      	nop
   8bdd8:	2000184c 	.word	0x2000184c

0008bddc <__malloc_unlock>:
   8bddc:	4801      	ldr	r0, [pc, #4]	; (8bde4 <__malloc_unlock+0x8>)
   8bdde:	f7ff bc0f 	b.w	8b600 <__retarget_lock_release_recursive>
   8bde2:	bf00      	nop
   8bde4:	2000184c 	.word	0x2000184c

0008bde8 <_Balloc>:
   8bde8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8bdea:	b570      	push	{r4, r5, r6, lr}
   8bdec:	4605      	mov	r5, r0
   8bdee:	460c      	mov	r4, r1
   8bdf0:	b14b      	cbz	r3, 8be06 <_Balloc+0x1e>
   8bdf2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8bdf6:	b180      	cbz	r0, 8be1a <_Balloc+0x32>
   8bdf8:	6802      	ldr	r2, [r0, #0]
   8bdfa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8bdfe:	2300      	movs	r3, #0
   8be00:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8be04:	bd70      	pop	{r4, r5, r6, pc}
   8be06:	2221      	movs	r2, #33	; 0x21
   8be08:	2104      	movs	r1, #4
   8be0a:	f000 ffc5 	bl	8cd98 <_calloc_r>
   8be0e:	4603      	mov	r3, r0
   8be10:	64e8      	str	r0, [r5, #76]	; 0x4c
   8be12:	2800      	cmp	r0, #0
   8be14:	d1ed      	bne.n	8bdf2 <_Balloc+0xa>
   8be16:	2000      	movs	r0, #0
   8be18:	bd70      	pop	{r4, r5, r6, pc}
   8be1a:	2101      	movs	r1, #1
   8be1c:	fa01 f604 	lsl.w	r6, r1, r4
   8be20:	1d72      	adds	r2, r6, #5
   8be22:	4628      	mov	r0, r5
   8be24:	0092      	lsls	r2, r2, #2
   8be26:	f000 ffb7 	bl	8cd98 <_calloc_r>
   8be2a:	2800      	cmp	r0, #0
   8be2c:	d0f3      	beq.n	8be16 <_Balloc+0x2e>
   8be2e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8be32:	e7e4      	b.n	8bdfe <_Balloc+0x16>

0008be34 <_Bfree>:
   8be34:	b131      	cbz	r1, 8be44 <_Bfree+0x10>
   8be36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8be38:	684a      	ldr	r2, [r1, #4]
   8be3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8be3e:	6008      	str	r0, [r1, #0]
   8be40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8be44:	4770      	bx	lr
   8be46:	bf00      	nop

0008be48 <__multadd>:
   8be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8be4c:	4680      	mov	r8, r0
   8be4e:	461c      	mov	r4, r3
   8be50:	2000      	movs	r0, #0
   8be52:	460f      	mov	r7, r1
   8be54:	690e      	ldr	r6, [r1, #16]
   8be56:	3114      	adds	r1, #20
   8be58:	680d      	ldr	r5, [r1, #0]
   8be5a:	3001      	adds	r0, #1
   8be5c:	b2ab      	uxth	r3, r5
   8be5e:	fb02 4303 	mla	r3, r2, r3, r4
   8be62:	0c2c      	lsrs	r4, r5, #16
   8be64:	0c1d      	lsrs	r5, r3, #16
   8be66:	fb02 5404 	mla	r4, r2, r4, r5
   8be6a:	b29b      	uxth	r3, r3
   8be6c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8be70:	4286      	cmp	r6, r0
   8be72:	f841 3b04 	str.w	r3, [r1], #4
   8be76:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8be7a:	dced      	bgt.n	8be58 <__multadd+0x10>
   8be7c:	b13c      	cbz	r4, 8be8e <__multadd+0x46>
   8be7e:	68bb      	ldr	r3, [r7, #8]
   8be80:	42b3      	cmp	r3, r6
   8be82:	dd07      	ble.n	8be94 <__multadd+0x4c>
   8be84:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8be88:	3601      	adds	r6, #1
   8be8a:	615c      	str	r4, [r3, #20]
   8be8c:	613e      	str	r6, [r7, #16]
   8be8e:	4638      	mov	r0, r7
   8be90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8be94:	6879      	ldr	r1, [r7, #4]
   8be96:	4640      	mov	r0, r8
   8be98:	3101      	adds	r1, #1
   8be9a:	f7ff ffa5 	bl	8bde8 <_Balloc>
   8be9e:	4605      	mov	r5, r0
   8bea0:	b1b0      	cbz	r0, 8bed0 <__multadd+0x88>
   8bea2:	693a      	ldr	r2, [r7, #16]
   8bea4:	f107 010c 	add.w	r1, r7, #12
   8bea8:	3202      	adds	r2, #2
   8beaa:	0092      	lsls	r2, r2, #2
   8beac:	300c      	adds	r0, #12
   8beae:	f7fb f8cd 	bl	8704c <memcpy>
   8beb2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8beb6:	687a      	ldr	r2, [r7, #4]
   8beb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bebc:	6039      	str	r1, [r7, #0]
   8bebe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8bec2:	462f      	mov	r7, r5
   8bec4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8bec8:	3601      	adds	r6, #1
   8beca:	615c      	str	r4, [r3, #20]
   8becc:	613e      	str	r6, [r7, #16]
   8bece:	e7de      	b.n	8be8e <__multadd+0x46>
   8bed0:	4602      	mov	r2, r0
   8bed2:	21b5      	movs	r1, #181	; 0xb5
   8bed4:	4b01      	ldr	r3, [pc, #4]	; (8bedc <__multadd+0x94>)
   8bed6:	4802      	ldr	r0, [pc, #8]	; (8bee0 <__multadd+0x98>)
   8bed8:	f000 ff40 	bl	8cd5c <__assert_func>
   8bedc:	0008dab0 	.word	0x0008dab0
   8bee0:	0008db50 	.word	0x0008db50

0008bee4 <__hi0bits>:
   8bee4:	0c02      	lsrs	r2, r0, #16
   8bee6:	0412      	lsls	r2, r2, #16
   8bee8:	4603      	mov	r3, r0
   8beea:	b9ca      	cbnz	r2, 8bf20 <__hi0bits+0x3c>
   8beec:	0403      	lsls	r3, r0, #16
   8beee:	2010      	movs	r0, #16
   8bef0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8bef4:	bf04      	itt	eq
   8bef6:	021b      	lsleq	r3, r3, #8
   8bef8:	3008      	addeq	r0, #8
   8befa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8befe:	bf04      	itt	eq
   8bf00:	011b      	lsleq	r3, r3, #4
   8bf02:	3004      	addeq	r0, #4
   8bf04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8bf08:	bf04      	itt	eq
   8bf0a:	009b      	lsleq	r3, r3, #2
   8bf0c:	3002      	addeq	r0, #2
   8bf0e:	2b00      	cmp	r3, #0
   8bf10:	db05      	blt.n	8bf1e <__hi0bits+0x3a>
   8bf12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8bf16:	f100 0001 	add.w	r0, r0, #1
   8bf1a:	bf08      	it	eq
   8bf1c:	2020      	moveq	r0, #32
   8bf1e:	4770      	bx	lr
   8bf20:	2000      	movs	r0, #0
   8bf22:	e7e5      	b.n	8bef0 <__hi0bits+0xc>

0008bf24 <__lo0bits>:
   8bf24:	6803      	ldr	r3, [r0, #0]
   8bf26:	4601      	mov	r1, r0
   8bf28:	f013 0207 	ands.w	r2, r3, #7
   8bf2c:	d007      	beq.n	8bf3e <__lo0bits+0x1a>
   8bf2e:	07da      	lsls	r2, r3, #31
   8bf30:	d420      	bmi.n	8bf74 <__lo0bits+0x50>
   8bf32:	0798      	lsls	r0, r3, #30
   8bf34:	d522      	bpl.n	8bf7c <__lo0bits+0x58>
   8bf36:	085b      	lsrs	r3, r3, #1
   8bf38:	2001      	movs	r0, #1
   8bf3a:	600b      	str	r3, [r1, #0]
   8bf3c:	4770      	bx	lr
   8bf3e:	b298      	uxth	r0, r3
   8bf40:	b1a8      	cbz	r0, 8bf6e <__lo0bits+0x4a>
   8bf42:	4610      	mov	r0, r2
   8bf44:	f013 0fff 	tst.w	r3, #255	; 0xff
   8bf48:	bf04      	itt	eq
   8bf4a:	0a1b      	lsreq	r3, r3, #8
   8bf4c:	3008      	addeq	r0, #8
   8bf4e:	071a      	lsls	r2, r3, #28
   8bf50:	bf04      	itt	eq
   8bf52:	091b      	lsreq	r3, r3, #4
   8bf54:	3004      	addeq	r0, #4
   8bf56:	079a      	lsls	r2, r3, #30
   8bf58:	bf04      	itt	eq
   8bf5a:	089b      	lsreq	r3, r3, #2
   8bf5c:	3002      	addeq	r0, #2
   8bf5e:	07da      	lsls	r2, r3, #31
   8bf60:	d403      	bmi.n	8bf6a <__lo0bits+0x46>
   8bf62:	085b      	lsrs	r3, r3, #1
   8bf64:	f100 0001 	add.w	r0, r0, #1
   8bf68:	d006      	beq.n	8bf78 <__lo0bits+0x54>
   8bf6a:	600b      	str	r3, [r1, #0]
   8bf6c:	4770      	bx	lr
   8bf6e:	2010      	movs	r0, #16
   8bf70:	0c1b      	lsrs	r3, r3, #16
   8bf72:	e7e7      	b.n	8bf44 <__lo0bits+0x20>
   8bf74:	2000      	movs	r0, #0
   8bf76:	4770      	bx	lr
   8bf78:	2020      	movs	r0, #32
   8bf7a:	4770      	bx	lr
   8bf7c:	089b      	lsrs	r3, r3, #2
   8bf7e:	2002      	movs	r0, #2
   8bf80:	600b      	str	r3, [r1, #0]
   8bf82:	4770      	bx	lr

0008bf84 <__i2b>:
   8bf84:	b510      	push	{r4, lr}
   8bf86:	460c      	mov	r4, r1
   8bf88:	2101      	movs	r1, #1
   8bf8a:	f7ff ff2d 	bl	8bde8 <_Balloc>
   8bf8e:	4602      	mov	r2, r0
   8bf90:	b118      	cbz	r0, 8bf9a <__i2b+0x16>
   8bf92:	2301      	movs	r3, #1
   8bf94:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8bf98:	bd10      	pop	{r4, pc}
   8bf9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8bf9e:	4b02      	ldr	r3, [pc, #8]	; (8bfa8 <__i2b+0x24>)
   8bfa0:	4802      	ldr	r0, [pc, #8]	; (8bfac <__i2b+0x28>)
   8bfa2:	f000 fedb 	bl	8cd5c <__assert_func>
   8bfa6:	bf00      	nop
   8bfa8:	0008dab0 	.word	0x0008dab0
   8bfac:	0008db50 	.word	0x0008db50

0008bfb0 <__multiply>:
   8bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bfb4:	690d      	ldr	r5, [r1, #16]
   8bfb6:	6917      	ldr	r7, [r2, #16]
   8bfb8:	460e      	mov	r6, r1
   8bfba:	42bd      	cmp	r5, r7
   8bfbc:	4614      	mov	r4, r2
   8bfbe:	b085      	sub	sp, #20
   8bfc0:	db05      	blt.n	8bfce <__multiply+0x1e>
   8bfc2:	463a      	mov	r2, r7
   8bfc4:	4623      	mov	r3, r4
   8bfc6:	462f      	mov	r7, r5
   8bfc8:	460c      	mov	r4, r1
   8bfca:	4615      	mov	r5, r2
   8bfcc:	461e      	mov	r6, r3
   8bfce:	68a3      	ldr	r3, [r4, #8]
   8bfd0:	6861      	ldr	r1, [r4, #4]
   8bfd2:	eb07 0805 	add.w	r8, r7, r5
   8bfd6:	4543      	cmp	r3, r8
   8bfd8:	bfb8      	it	lt
   8bfda:	3101      	addlt	r1, #1
   8bfdc:	f7ff ff04 	bl	8bde8 <_Balloc>
   8bfe0:	9001      	str	r0, [sp, #4]
   8bfe2:	2800      	cmp	r0, #0
   8bfe4:	f000 8088 	beq.w	8c0f8 <__multiply+0x148>
   8bfe8:	9b01      	ldr	r3, [sp, #4]
   8bfea:	f103 0914 	add.w	r9, r3, #20
   8bfee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8bff2:	45d1      	cmp	r9, sl
   8bff4:	d205      	bcs.n	8c002 <__multiply+0x52>
   8bff6:	464b      	mov	r3, r9
   8bff8:	2200      	movs	r2, #0
   8bffa:	f843 2b04 	str.w	r2, [r3], #4
   8bffe:	459a      	cmp	sl, r3
   8c000:	d8fb      	bhi.n	8bffa <__multiply+0x4a>
   8c002:	f106 0e14 	add.w	lr, r6, #20
   8c006:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8c00a:	f104 0314 	add.w	r3, r4, #20
   8c00e:	45de      	cmp	lr, fp
   8c010:	461a      	mov	r2, r3
   8c012:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8c016:	d23e      	bcs.n	8c096 <__multiply+0xe6>
   8c018:	1b3b      	subs	r3, r7, r4
   8c01a:	3b15      	subs	r3, #21
   8c01c:	f023 0303 	bic.w	r3, r3, #3
   8c020:	3304      	adds	r3, #4
   8c022:	3415      	adds	r4, #21
   8c024:	42a7      	cmp	r7, r4
   8c026:	bf38      	it	cc
   8c028:	2304      	movcc	r3, #4
   8c02a:	e9cd a802 	strd	sl, r8, [sp, #8]
   8c02e:	4698      	mov	r8, r3
   8c030:	4692      	mov	sl, r2
   8c032:	e003      	b.n	8c03c <__multiply+0x8c>
   8c034:	45f3      	cmp	fp, lr
   8c036:	f109 0904 	add.w	r9, r9, #4
   8c03a:	d92a      	bls.n	8c092 <__multiply+0xe2>
   8c03c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8c040:	b286      	uxth	r6, r0
   8c042:	2e00      	cmp	r6, #0
   8c044:	d138      	bne.n	8c0b8 <__multiply+0x108>
   8c046:	0c00      	lsrs	r0, r0, #16
   8c048:	d0f4      	beq.n	8c034 <__multiply+0x84>
   8c04a:	f8d9 3000 	ldr.w	r3, [r9]
   8c04e:	4654      	mov	r4, sl
   8c050:	461e      	mov	r6, r3
   8c052:	464d      	mov	r5, r9
   8c054:	f04f 0c00 	mov.w	ip, #0
   8c058:	8822      	ldrh	r2, [r4, #0]
   8c05a:	0c36      	lsrs	r6, r6, #16
   8c05c:	fb00 6602 	mla	r6, r0, r2, r6
   8c060:	b29b      	uxth	r3, r3
   8c062:	44b4      	add	ip, r6
   8c064:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8c068:	f845 3b04 	str.w	r3, [r5], #4
   8c06c:	f854 3b04 	ldr.w	r3, [r4], #4
   8c070:	682e      	ldr	r6, [r5, #0]
   8c072:	0c1b      	lsrs	r3, r3, #16
   8c074:	b2b2      	uxth	r2, r6
   8c076:	fb00 2303 	mla	r3, r0, r3, r2
   8c07a:	42a7      	cmp	r7, r4
   8c07c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8c080:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8c084:	d8e8      	bhi.n	8c058 <__multiply+0xa8>
   8c086:	45f3      	cmp	fp, lr
   8c088:	f849 3008 	str.w	r3, [r9, r8]
   8c08c:	f109 0904 	add.w	r9, r9, #4
   8c090:	d8d4      	bhi.n	8c03c <__multiply+0x8c>
   8c092:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8c096:	f1b8 0f00 	cmp.w	r8, #0
   8c09a:	dc03      	bgt.n	8c0a4 <__multiply+0xf4>
   8c09c:	e006      	b.n	8c0ac <__multiply+0xfc>
   8c09e:	f1b8 0801 	subs.w	r8, r8, #1
   8c0a2:	d003      	beq.n	8c0ac <__multiply+0xfc>
   8c0a4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8c0a8:	2b00      	cmp	r3, #0
   8c0aa:	d0f8      	beq.n	8c09e <__multiply+0xee>
   8c0ac:	9801      	ldr	r0, [sp, #4]
   8c0ae:	f8c0 8010 	str.w	r8, [r0, #16]
   8c0b2:	b005      	add	sp, #20
   8c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0b8:	4655      	mov	r5, sl
   8c0ba:	464c      	mov	r4, r9
   8c0bc:	2300      	movs	r3, #0
   8c0be:	f855 1b04 	ldr.w	r1, [r5], #4
   8c0c2:	6820      	ldr	r0, [r4, #0]
   8c0c4:	b28a      	uxth	r2, r1
   8c0c6:	fa1f fc80 	uxth.w	ip, r0
   8c0ca:	fb06 c202 	mla	r2, r6, r2, ip
   8c0ce:	0c09      	lsrs	r1, r1, #16
   8c0d0:	0c00      	lsrs	r0, r0, #16
   8c0d2:	fb06 0101 	mla	r1, r6, r1, r0
   8c0d6:	4413      	add	r3, r2
   8c0d8:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8c0dc:	b29b      	uxth	r3, r3
   8c0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c0e2:	42af      	cmp	r7, r5
   8c0e4:	f844 3b04 	str.w	r3, [r4], #4
   8c0e8:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8c0ec:	d8e7      	bhi.n	8c0be <__multiply+0x10e>
   8c0ee:	f849 3008 	str.w	r3, [r9, r8]
   8c0f2:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8c0f6:	e7a6      	b.n	8c046 <__multiply+0x96>
   8c0f8:	4602      	mov	r2, r0
   8c0fa:	f240 115d 	movw	r1, #349	; 0x15d
   8c0fe:	4b02      	ldr	r3, [pc, #8]	; (8c108 <__multiply+0x158>)
   8c100:	4802      	ldr	r0, [pc, #8]	; (8c10c <__multiply+0x15c>)
   8c102:	f000 fe2b 	bl	8cd5c <__assert_func>
   8c106:	bf00      	nop
   8c108:	0008dab0 	.word	0x0008dab0
   8c10c:	0008db50 	.word	0x0008db50

0008c110 <__pow5mult>:
   8c110:	f012 0303 	ands.w	r3, r2, #3
   8c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c118:	4614      	mov	r4, r2
   8c11a:	4607      	mov	r7, r0
   8c11c:	d12e      	bne.n	8c17c <__pow5mult+0x6c>
   8c11e:	460e      	mov	r6, r1
   8c120:	10a4      	asrs	r4, r4, #2
   8c122:	d01c      	beq.n	8c15e <__pow5mult+0x4e>
   8c124:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8c126:	b395      	cbz	r5, 8c18e <__pow5mult+0x7e>
   8c128:	07e3      	lsls	r3, r4, #31
   8c12a:	f04f 0800 	mov.w	r8, #0
   8c12e:	d406      	bmi.n	8c13e <__pow5mult+0x2e>
   8c130:	1064      	asrs	r4, r4, #1
   8c132:	d014      	beq.n	8c15e <__pow5mult+0x4e>
   8c134:	6828      	ldr	r0, [r5, #0]
   8c136:	b1a8      	cbz	r0, 8c164 <__pow5mult+0x54>
   8c138:	4605      	mov	r5, r0
   8c13a:	07e3      	lsls	r3, r4, #31
   8c13c:	d5f8      	bpl.n	8c130 <__pow5mult+0x20>
   8c13e:	462a      	mov	r2, r5
   8c140:	4631      	mov	r1, r6
   8c142:	4638      	mov	r0, r7
   8c144:	f7ff ff34 	bl	8bfb0 <__multiply>
   8c148:	b1b6      	cbz	r6, 8c178 <__pow5mult+0x68>
   8c14a:	6871      	ldr	r1, [r6, #4]
   8c14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c14e:	1064      	asrs	r4, r4, #1
   8c150:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8c154:	6032      	str	r2, [r6, #0]
   8c156:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8c15a:	4606      	mov	r6, r0
   8c15c:	d1ea      	bne.n	8c134 <__pow5mult+0x24>
   8c15e:	4630      	mov	r0, r6
   8c160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c164:	462a      	mov	r2, r5
   8c166:	4629      	mov	r1, r5
   8c168:	4638      	mov	r0, r7
   8c16a:	f7ff ff21 	bl	8bfb0 <__multiply>
   8c16e:	6028      	str	r0, [r5, #0]
   8c170:	4605      	mov	r5, r0
   8c172:	f8c0 8000 	str.w	r8, [r0]
   8c176:	e7e0      	b.n	8c13a <__pow5mult+0x2a>
   8c178:	4606      	mov	r6, r0
   8c17a:	e7d9      	b.n	8c130 <__pow5mult+0x20>
   8c17c:	4a09      	ldr	r2, [pc, #36]	; (8c1a4 <__pow5mult+0x94>)
   8c17e:	3b01      	subs	r3, #1
   8c180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8c184:	2300      	movs	r3, #0
   8c186:	f7ff fe5f 	bl	8be48 <__multadd>
   8c18a:	4606      	mov	r6, r0
   8c18c:	e7c8      	b.n	8c120 <__pow5mult+0x10>
   8c18e:	f240 2171 	movw	r1, #625	; 0x271
   8c192:	4638      	mov	r0, r7
   8c194:	f7ff fef6 	bl	8bf84 <__i2b>
   8c198:	2300      	movs	r3, #0
   8c19a:	64b8      	str	r0, [r7, #72]	; 0x48
   8c19c:	4605      	mov	r5, r0
   8c19e:	6003      	str	r3, [r0, #0]
   8c1a0:	e7c2      	b.n	8c128 <__pow5mult+0x18>
   8c1a2:	bf00      	nop
   8c1a4:	0008dcc0 	.word	0x0008dcc0

0008c1a8 <__lshift>:
   8c1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c1ac:	690f      	ldr	r7, [r1, #16]
   8c1ae:	688b      	ldr	r3, [r1, #8]
   8c1b0:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8c1b4:	1c7e      	adds	r6, r7, #1
   8c1b6:	429e      	cmp	r6, r3
   8c1b8:	460d      	mov	r5, r1
   8c1ba:	4691      	mov	r9, r2
   8c1bc:	4680      	mov	r8, r0
   8c1be:	6849      	ldr	r1, [r1, #4]
   8c1c0:	ea4f 1462 	mov.w	r4, r2, asr #5
   8c1c4:	dd04      	ble.n	8c1d0 <__lshift+0x28>
   8c1c6:	005b      	lsls	r3, r3, #1
   8c1c8:	429e      	cmp	r6, r3
   8c1ca:	f101 0101 	add.w	r1, r1, #1
   8c1ce:	dcfa      	bgt.n	8c1c6 <__lshift+0x1e>
   8c1d0:	4640      	mov	r0, r8
   8c1d2:	f7ff fe09 	bl	8bde8 <_Balloc>
   8c1d6:	2800      	cmp	r0, #0
   8c1d8:	d04f      	beq.n	8c27a <__lshift+0xd2>
   8c1da:	2c00      	cmp	r4, #0
   8c1dc:	f100 0114 	add.w	r1, r0, #20
   8c1e0:	dd0d      	ble.n	8c1fe <__lshift+0x56>
   8c1e2:	460b      	mov	r3, r1
   8c1e4:	2200      	movs	r2, #0
   8c1e6:	3405      	adds	r4, #5
   8c1e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8c1ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8c1f0:	f843 2b04 	str.w	r2, [r3], #4
   8c1f4:	42a3      	cmp	r3, r4
   8c1f6:	d1fb      	bne.n	8c1f0 <__lshift+0x48>
   8c1f8:	f1ac 0314 	sub.w	r3, ip, #20
   8c1fc:	4419      	add	r1, r3
   8c1fe:	692c      	ldr	r4, [r5, #16]
   8c200:	f105 0314 	add.w	r3, r5, #20
   8c204:	f019 091f 	ands.w	r9, r9, #31
   8c208:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8c20c:	d02d      	beq.n	8c26a <__lshift+0xc2>
   8c20e:	468e      	mov	lr, r1
   8c210:	f04f 0a00 	mov.w	sl, #0
   8c214:	f1c9 0220 	rsb	r2, r9, #32
   8c218:	681c      	ldr	r4, [r3, #0]
   8c21a:	fa04 f409 	lsl.w	r4, r4, r9
   8c21e:	ea44 040a 	orr.w	r4, r4, sl
   8c222:	f84e 4b04 	str.w	r4, [lr], #4
   8c226:	f853 4b04 	ldr.w	r4, [r3], #4
   8c22a:	459c      	cmp	ip, r3
   8c22c:	fa24 fa02 	lsr.w	sl, r4, r2
   8c230:	d8f2      	bhi.n	8c218 <__lshift+0x70>
   8c232:	ebac 0305 	sub.w	r3, ip, r5
   8c236:	3b15      	subs	r3, #21
   8c238:	f023 0303 	bic.w	r3, r3, #3
   8c23c:	3304      	adds	r3, #4
   8c23e:	f105 0215 	add.w	r2, r5, #21
   8c242:	4594      	cmp	ip, r2
   8c244:	bf38      	it	cc
   8c246:	2304      	movcc	r3, #4
   8c248:	f1ba 0f00 	cmp.w	sl, #0
   8c24c:	bf18      	it	ne
   8c24e:	4637      	movne	r7, r6
   8c250:	f841 a003 	str.w	sl, [r1, r3]
   8c254:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c258:	686a      	ldr	r2, [r5, #4]
   8c25a:	6107      	str	r7, [r0, #16]
   8c25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c260:	6029      	str	r1, [r5, #0]
   8c262:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8c266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c26a:	3904      	subs	r1, #4
   8c26c:	f853 2b04 	ldr.w	r2, [r3], #4
   8c270:	459c      	cmp	ip, r3
   8c272:	f841 2f04 	str.w	r2, [r1, #4]!
   8c276:	d8f9      	bhi.n	8c26c <__lshift+0xc4>
   8c278:	e7ec      	b.n	8c254 <__lshift+0xac>
   8c27a:	4602      	mov	r2, r0
   8c27c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8c280:	4b01      	ldr	r3, [pc, #4]	; (8c288 <__lshift+0xe0>)
   8c282:	4802      	ldr	r0, [pc, #8]	; (8c28c <__lshift+0xe4>)
   8c284:	f000 fd6a 	bl	8cd5c <__assert_func>
   8c288:	0008dab0 	.word	0x0008dab0
   8c28c:	0008db50 	.word	0x0008db50

0008c290 <__mcmp>:
   8c290:	b430      	push	{r4, r5}
   8c292:	690b      	ldr	r3, [r1, #16]
   8c294:	4605      	mov	r5, r0
   8c296:	6900      	ldr	r0, [r0, #16]
   8c298:	1ac0      	subs	r0, r0, r3
   8c29a:	d111      	bne.n	8c2c0 <__mcmp+0x30>
   8c29c:	3514      	adds	r5, #20
   8c29e:	3114      	adds	r1, #20
   8c2a0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8c2a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8c2a8:	e001      	b.n	8c2ae <__mcmp+0x1e>
   8c2aa:	429d      	cmp	r5, r3
   8c2ac:	d208      	bcs.n	8c2c0 <__mcmp+0x30>
   8c2ae:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8c2b2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c2b6:	428c      	cmp	r4, r1
   8c2b8:	d0f7      	beq.n	8c2aa <__mcmp+0x1a>
   8c2ba:	d203      	bcs.n	8c2c4 <__mcmp+0x34>
   8c2bc:	f04f 30ff 	mov.w	r0, #4294967295
   8c2c0:	bc30      	pop	{r4, r5}
   8c2c2:	4770      	bx	lr
   8c2c4:	2001      	movs	r0, #1
   8c2c6:	bc30      	pop	{r4, r5}
   8c2c8:	4770      	bx	lr
   8c2ca:	bf00      	nop

0008c2cc <__mdiff>:
   8c2cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c2d0:	690b      	ldr	r3, [r1, #16]
   8c2d2:	460c      	mov	r4, r1
   8c2d4:	6911      	ldr	r1, [r2, #16]
   8c2d6:	4690      	mov	r8, r2
   8c2d8:	eba3 0b01 	sub.w	fp, r3, r1
   8c2dc:	f1bb 0f00 	cmp.w	fp, #0
   8c2e0:	d17c      	bne.n	8c3dc <__mdiff+0x110>
   8c2e2:	f104 0614 	add.w	r6, r4, #20
   8c2e6:	3214      	adds	r2, #20
   8c2e8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8c2ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8c2f0:	e001      	b.n	8c2f6 <__mdiff+0x2a>
   8c2f2:	429e      	cmp	r6, r3
   8c2f4:	d276      	bcs.n	8c3e4 <__mdiff+0x118>
   8c2f6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c2fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c2fe:	428d      	cmp	r5, r1
   8c300:	d0f7      	beq.n	8c2f2 <__mdiff+0x26>
   8c302:	d365      	bcc.n	8c3d0 <__mdiff+0x104>
   8c304:	6861      	ldr	r1, [r4, #4]
   8c306:	f7ff fd6f 	bl	8bde8 <_Balloc>
   8c30a:	2800      	cmp	r0, #0
   8c30c:	d074      	beq.n	8c3f8 <__mdiff+0x12c>
   8c30e:	f100 0614 	add.w	r6, r0, #20
   8c312:	46b4      	mov	ip, r6
   8c314:	2300      	movs	r3, #0
   8c316:	6927      	ldr	r7, [r4, #16]
   8c318:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8c31c:	f104 0a14 	add.w	sl, r4, #20
   8c320:	f108 0514 	add.w	r5, r8, #20
   8c324:	f8c0 b00c 	str.w	fp, [r0, #12]
   8c328:	3410      	adds	r4, #16
   8c32a:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8c32e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8c332:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8c336:	f855 bb04 	ldr.w	fp, [r5], #4
   8c33a:	b291      	uxth	r1, r2
   8c33c:	440b      	add	r3, r1
   8c33e:	fa1f f18b 	uxth.w	r1, fp
   8c342:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8c346:	1a59      	subs	r1, r3, r1
   8c348:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8c34c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8c350:	b289      	uxth	r1, r1
   8c352:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c356:	45a9      	cmp	r9, r5
   8c358:	f84c 1b04 	str.w	r1, [ip], #4
   8c35c:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c360:	d8e7      	bhi.n	8c332 <__mdiff+0x66>
   8c362:	eba9 0208 	sub.w	r2, r9, r8
   8c366:	3a15      	subs	r2, #21
   8c368:	f108 0815 	add.w	r8, r8, #21
   8c36c:	45c1      	cmp	r9, r8
   8c36e:	f022 0403 	bic.w	r4, r2, #3
   8c372:	f104 0404 	add.w	r4, r4, #4
   8c376:	bf38      	it	cc
   8c378:	2404      	movcc	r4, #4
   8c37a:	f022 0203 	bic.w	r2, r2, #3
   8c37e:	bf38      	it	cc
   8c380:	2200      	movcc	r2, #0
   8c382:	44a2      	add	sl, r4
   8c384:	45d6      	cmp	lr, sl
   8c386:	4434      	add	r4, r6
   8c388:	4416      	add	r6, r2
   8c38a:	d918      	bls.n	8c3be <__mdiff+0xf2>
   8c38c:	4625      	mov	r5, r4
   8c38e:	4652      	mov	r2, sl
   8c390:	f852 6b04 	ldr.w	r6, [r2], #4
   8c394:	b2b1      	uxth	r1, r6
   8c396:	4419      	add	r1, r3
   8c398:	140b      	asrs	r3, r1, #16
   8c39a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8c39e:	b289      	uxth	r1, r1
   8c3a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c3a4:	4596      	cmp	lr, r2
   8c3a6:	f845 1b04 	str.w	r1, [r5], #4
   8c3aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c3ae:	d8ef      	bhi.n	8c390 <__mdiff+0xc4>
   8c3b0:	f10e 36ff 	add.w	r6, lr, #4294967295
   8c3b4:	eba6 060a 	sub.w	r6, r6, sl
   8c3b8:	f026 0603 	bic.w	r6, r6, #3
   8c3bc:	4426      	add	r6, r4
   8c3be:	b921      	cbnz	r1, 8c3ca <__mdiff+0xfe>
   8c3c0:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8c3c4:	3f01      	subs	r7, #1
   8c3c6:	2b00      	cmp	r3, #0
   8c3c8:	d0fa      	beq.n	8c3c0 <__mdiff+0xf4>
   8c3ca:	6107      	str	r7, [r0, #16]
   8c3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c3d0:	4623      	mov	r3, r4
   8c3d2:	f04f 0b01 	mov.w	fp, #1
   8c3d6:	4644      	mov	r4, r8
   8c3d8:	4698      	mov	r8, r3
   8c3da:	e793      	b.n	8c304 <__mdiff+0x38>
   8c3dc:	dbf8      	blt.n	8c3d0 <__mdiff+0x104>
   8c3de:	f04f 0b00 	mov.w	fp, #0
   8c3e2:	e78f      	b.n	8c304 <__mdiff+0x38>
   8c3e4:	2100      	movs	r1, #0
   8c3e6:	f7ff fcff 	bl	8bde8 <_Balloc>
   8c3ea:	b160      	cbz	r0, 8c406 <__mdiff+0x13a>
   8c3ec:	2201      	movs	r2, #1
   8c3ee:	2300      	movs	r3, #0
   8c3f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8c3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c3f8:	4602      	mov	r2, r0
   8c3fa:	f44f 7110 	mov.w	r1, #576	; 0x240
   8c3fe:	4b05      	ldr	r3, [pc, #20]	; (8c414 <__mdiff+0x148>)
   8c400:	4805      	ldr	r0, [pc, #20]	; (8c418 <__mdiff+0x14c>)
   8c402:	f000 fcab 	bl	8cd5c <__assert_func>
   8c406:	4602      	mov	r2, r0
   8c408:	f240 2132 	movw	r1, #562	; 0x232
   8c40c:	4b01      	ldr	r3, [pc, #4]	; (8c414 <__mdiff+0x148>)
   8c40e:	4802      	ldr	r0, [pc, #8]	; (8c418 <__mdiff+0x14c>)
   8c410:	f000 fca4 	bl	8cd5c <__assert_func>
   8c414:	0008dab0 	.word	0x0008dab0
   8c418:	0008db50 	.word	0x0008db50

0008c41c <__d2b>:
   8c41c:	b570      	push	{r4, r5, r6, lr}
   8c41e:	2101      	movs	r1, #1
   8c420:	b082      	sub	sp, #8
   8c422:	4616      	mov	r6, r2
   8c424:	461d      	mov	r5, r3
   8c426:	f7ff fcdf 	bl	8bde8 <_Balloc>
   8c42a:	4604      	mov	r4, r0
   8c42c:	2800      	cmp	r0, #0
   8c42e:	d04c      	beq.n	8c4ca <__d2b+0xae>
   8c430:	462b      	mov	r3, r5
   8c432:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8c436:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8c43a:	b10d      	cbz	r5, 8c440 <__d2b+0x24>
   8c43c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c440:	2e00      	cmp	r6, #0
   8c442:	9301      	str	r3, [sp, #4]
   8c444:	d022      	beq.n	8c48c <__d2b+0x70>
   8c446:	4668      	mov	r0, sp
   8c448:	9600      	str	r6, [sp, #0]
   8c44a:	f7ff fd6b 	bl	8bf24 <__lo0bits>
   8c44e:	2800      	cmp	r0, #0
   8c450:	d037      	beq.n	8c4c2 <__d2b+0xa6>
   8c452:	9b01      	ldr	r3, [sp, #4]
   8c454:	9900      	ldr	r1, [sp, #0]
   8c456:	f1c0 0220 	rsb	r2, r0, #32
   8c45a:	fa03 f202 	lsl.w	r2, r3, r2
   8c45e:	430a      	orrs	r2, r1
   8c460:	40c3      	lsrs	r3, r0
   8c462:	9301      	str	r3, [sp, #4]
   8c464:	6162      	str	r2, [r4, #20]
   8c466:	2b00      	cmp	r3, #0
   8c468:	bf14      	ite	ne
   8c46a:	2102      	movne	r1, #2
   8c46c:	2101      	moveq	r1, #1
   8c46e:	61a3      	str	r3, [r4, #24]
   8c470:	6121      	str	r1, [r4, #16]
   8c472:	b1b5      	cbz	r5, 8c4a2 <__d2b+0x86>
   8c474:	9a06      	ldr	r2, [sp, #24]
   8c476:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8c47a:	4403      	add	r3, r0
   8c47c:	6013      	str	r3, [r2, #0]
   8c47e:	9b07      	ldr	r3, [sp, #28]
   8c480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c484:	6018      	str	r0, [r3, #0]
   8c486:	4620      	mov	r0, r4
   8c488:	b002      	add	sp, #8
   8c48a:	bd70      	pop	{r4, r5, r6, pc}
   8c48c:	a801      	add	r0, sp, #4
   8c48e:	f7ff fd49 	bl	8bf24 <__lo0bits>
   8c492:	2301      	movs	r3, #1
   8c494:	9a01      	ldr	r2, [sp, #4]
   8c496:	4619      	mov	r1, r3
   8c498:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8c49c:	3020      	adds	r0, #32
   8c49e:	2d00      	cmp	r5, #0
   8c4a0:	d1e8      	bne.n	8c474 <__d2b+0x58>
   8c4a2:	9a06      	ldr	r2, [sp, #24]
   8c4a4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8c4a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8c4ac:	6010      	str	r0, [r2, #0]
   8c4ae:	6918      	ldr	r0, [r3, #16]
   8c4b0:	f7ff fd18 	bl	8bee4 <__hi0bits>
   8c4b4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8c4b8:	4620      	mov	r0, r4
   8c4ba:	9b07      	ldr	r3, [sp, #28]
   8c4bc:	6019      	str	r1, [r3, #0]
   8c4be:	b002      	add	sp, #8
   8c4c0:	bd70      	pop	{r4, r5, r6, pc}
   8c4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c4c6:	6162      	str	r2, [r4, #20]
   8c4c8:	e7cd      	b.n	8c466 <__d2b+0x4a>
   8c4ca:	4602      	mov	r2, r0
   8c4cc:	f240 310a 	movw	r1, #778	; 0x30a
   8c4d0:	4b01      	ldr	r3, [pc, #4]	; (8c4d8 <__d2b+0xbc>)
   8c4d2:	4802      	ldr	r0, [pc, #8]	; (8c4dc <__d2b+0xc0>)
   8c4d4:	f000 fc42 	bl	8cd5c <__assert_func>
   8c4d8:	0008dab0 	.word	0x0008dab0
   8c4dc:	0008db50 	.word	0x0008db50

0008c4e0 <_realloc_r>:
   8c4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c4e4:	4616      	mov	r6, r2
   8c4e6:	2900      	cmp	r1, #0
   8c4e8:	f000 80bd 	beq.w	8c666 <_realloc_r+0x186>
   8c4ec:	f106 050b 	add.w	r5, r6, #11
   8c4f0:	460c      	mov	r4, r1
   8c4f2:	4680      	mov	r8, r0
   8c4f4:	f7ff fc6c 	bl	8bdd0 <__malloc_lock>
   8c4f8:	2d16      	cmp	r5, #22
   8c4fa:	d85f      	bhi.n	8c5bc <_realloc_r+0xdc>
   8c4fc:	2510      	movs	r5, #16
   8c4fe:	462a      	mov	r2, r5
   8c500:	42ae      	cmp	r6, r5
   8c502:	d860      	bhi.n	8c5c6 <_realloc_r+0xe6>
   8c504:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8c508:	f1a4 0908 	sub.w	r9, r4, #8
   8c50c:	f021 0703 	bic.w	r7, r1, #3
   8c510:	4297      	cmp	r7, r2
   8c512:	f280 8086 	bge.w	8c622 <_realloc_r+0x142>
   8c516:	4bc9      	ldr	r3, [pc, #804]	; (8c83c <_realloc_r+0x35c>)
   8c518:	eb09 0007 	add.w	r0, r9, r7
   8c51c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8c520:	4584      	cmp	ip, r0
   8c522:	f000 80b9 	beq.w	8c698 <_realloc_r+0x1b8>
   8c526:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8c52a:	f02c 0301 	bic.w	r3, ip, #1
   8c52e:	4403      	add	r3, r0
   8c530:	685b      	ldr	r3, [r3, #4]
   8c532:	07db      	lsls	r3, r3, #31
   8c534:	f100 808c 	bmi.w	8c650 <_realloc_r+0x170>
   8c538:	f02c 0c03 	bic.w	ip, ip, #3
   8c53c:	eb07 030c 	add.w	r3, r7, ip
   8c540:	4293      	cmp	r3, r2
   8c542:	f280 8115 	bge.w	8c770 <_realloc_r+0x290>
   8c546:	07cb      	lsls	r3, r1, #31
   8c548:	d40f      	bmi.n	8c56a <_realloc_r+0x8a>
   8c54a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c54e:	eba9 0a03 	sub.w	sl, r9, r3
   8c552:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c556:	f023 0103 	bic.w	r1, r3, #3
   8c55a:	448c      	add	ip, r1
   8c55c:	44bc      	add	ip, r7
   8c55e:	4594      	cmp	ip, r2
   8c560:	da38      	bge.n	8c5d4 <_realloc_r+0xf4>
   8c562:	187b      	adds	r3, r7, r1
   8c564:	4293      	cmp	r3, r2
   8c566:	f280 810f 	bge.w	8c788 <_realloc_r+0x2a8>
   8c56a:	4631      	mov	r1, r6
   8c56c:	4640      	mov	r0, r8
   8c56e:	f7ff f8c1 	bl	8b6f4 <_malloc_r>
   8c572:	4606      	mov	r6, r0
   8c574:	b1e0      	cbz	r0, 8c5b0 <_realloc_r+0xd0>
   8c576:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c57a:	f1a0 0208 	sub.w	r2, r0, #8
   8c57e:	f023 0301 	bic.w	r3, r3, #1
   8c582:	444b      	add	r3, r9
   8c584:	4293      	cmp	r3, r2
   8c586:	f000 80f9 	beq.w	8c77c <_realloc_r+0x29c>
   8c58a:	1f3a      	subs	r2, r7, #4
   8c58c:	2a24      	cmp	r2, #36	; 0x24
   8c58e:	f200 811c 	bhi.w	8c7ca <_realloc_r+0x2ea>
   8c592:	2a13      	cmp	r2, #19
   8c594:	f200 80cd 	bhi.w	8c732 <_realloc_r+0x252>
   8c598:	4603      	mov	r3, r0
   8c59a:	4622      	mov	r2, r4
   8c59c:	6811      	ldr	r1, [r2, #0]
   8c59e:	6019      	str	r1, [r3, #0]
   8c5a0:	6851      	ldr	r1, [r2, #4]
   8c5a2:	6059      	str	r1, [r3, #4]
   8c5a4:	6892      	ldr	r2, [r2, #8]
   8c5a6:	609a      	str	r2, [r3, #8]
   8c5a8:	4621      	mov	r1, r4
   8c5aa:	4640      	mov	r0, r8
   8c5ac:	f7fe fd78 	bl	8b0a0 <_free_r>
   8c5b0:	4640      	mov	r0, r8
   8c5b2:	f7ff fc13 	bl	8bddc <__malloc_unlock>
   8c5b6:	4630      	mov	r0, r6
   8c5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c5bc:	f025 0507 	bic.w	r5, r5, #7
   8c5c0:	2d00      	cmp	r5, #0
   8c5c2:	462a      	mov	r2, r5
   8c5c4:	da9c      	bge.n	8c500 <_realloc_r+0x20>
   8c5c6:	230c      	movs	r3, #12
   8c5c8:	2600      	movs	r6, #0
   8c5ca:	f8c8 3000 	str.w	r3, [r8]
   8c5ce:	4630      	mov	r0, r6
   8c5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c5d4:	4656      	mov	r6, sl
   8c5d6:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8c5da:	60cb      	str	r3, [r1, #12]
   8c5dc:	6099      	str	r1, [r3, #8]
   8c5de:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8c5e2:	f8da 300c 	ldr.w	r3, [sl, #12]
   8c5e6:	1f3a      	subs	r2, r7, #4
   8c5e8:	2a24      	cmp	r2, #36	; 0x24
   8c5ea:	60cb      	str	r3, [r1, #12]
   8c5ec:	6099      	str	r1, [r3, #8]
   8c5ee:	f200 8107 	bhi.w	8c800 <_realloc_r+0x320>
   8c5f2:	2a13      	cmp	r2, #19
   8c5f4:	f240 8102 	bls.w	8c7fc <_realloc_r+0x31c>
   8c5f8:	6823      	ldr	r3, [r4, #0]
   8c5fa:	2a1b      	cmp	r2, #27
   8c5fc:	f8ca 3008 	str.w	r3, [sl, #8]
   8c600:	6863      	ldr	r3, [r4, #4]
   8c602:	f8ca 300c 	str.w	r3, [sl, #12]
   8c606:	f200 811b 	bhi.w	8c840 <_realloc_r+0x360>
   8c60a:	3408      	adds	r4, #8
   8c60c:	f10a 0310 	add.w	r3, sl, #16
   8c610:	6822      	ldr	r2, [r4, #0]
   8c612:	4667      	mov	r7, ip
   8c614:	601a      	str	r2, [r3, #0]
   8c616:	6862      	ldr	r2, [r4, #4]
   8c618:	46d1      	mov	r9, sl
   8c61a:	605a      	str	r2, [r3, #4]
   8c61c:	68a2      	ldr	r2, [r4, #8]
   8c61e:	4634      	mov	r4, r6
   8c620:	609a      	str	r2, [r3, #8]
   8c622:	1b7b      	subs	r3, r7, r5
   8c624:	2b0f      	cmp	r3, #15
   8c626:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c62a:	d821      	bhi.n	8c670 <_realloc_r+0x190>
   8c62c:	f002 0201 	and.w	r2, r2, #1
   8c630:	433a      	orrs	r2, r7
   8c632:	eb09 0107 	add.w	r1, r9, r7
   8c636:	f8c9 2004 	str.w	r2, [r9, #4]
   8c63a:	684b      	ldr	r3, [r1, #4]
   8c63c:	f043 0301 	orr.w	r3, r3, #1
   8c640:	604b      	str	r3, [r1, #4]
   8c642:	4626      	mov	r6, r4
   8c644:	4640      	mov	r0, r8
   8c646:	f7ff fbc9 	bl	8bddc <__malloc_unlock>
   8c64a:	4630      	mov	r0, r6
   8c64c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c650:	07c9      	lsls	r1, r1, #31
   8c652:	d48a      	bmi.n	8c56a <_realloc_r+0x8a>
   8c654:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c658:	eba9 0a03 	sub.w	sl, r9, r3
   8c65c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c660:	f021 0103 	bic.w	r1, r1, #3
   8c664:	e77d      	b.n	8c562 <_realloc_r+0x82>
   8c666:	4611      	mov	r1, r2
   8c668:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c66c:	f7ff b842 	b.w	8b6f4 <_malloc_r>
   8c670:	f002 0201 	and.w	r2, r2, #1
   8c674:	eb09 0105 	add.w	r1, r9, r5
   8c678:	f043 0301 	orr.w	r3, r3, #1
   8c67c:	432a      	orrs	r2, r5
   8c67e:	f8c9 2004 	str.w	r2, [r9, #4]
   8c682:	444f      	add	r7, r9
   8c684:	604b      	str	r3, [r1, #4]
   8c686:	687b      	ldr	r3, [r7, #4]
   8c688:	4640      	mov	r0, r8
   8c68a:	f043 0301 	orr.w	r3, r3, #1
   8c68e:	3108      	adds	r1, #8
   8c690:	607b      	str	r3, [r7, #4]
   8c692:	f7fe fd05 	bl	8b0a0 <_free_r>
   8c696:	e7d4      	b.n	8c642 <_realloc_r+0x162>
   8c698:	f8dc b004 	ldr.w	fp, [ip, #4]
   8c69c:	f105 0010 	add.w	r0, r5, #16
   8c6a0:	f02b 0b03 	bic.w	fp, fp, #3
   8c6a4:	eb07 0c0b 	add.w	ip, r7, fp
   8c6a8:	4584      	cmp	ip, r0
   8c6aa:	da4d      	bge.n	8c748 <_realloc_r+0x268>
   8c6ac:	07c9      	lsls	r1, r1, #31
   8c6ae:	f53f af5c 	bmi.w	8c56a <_realloc_r+0x8a>
   8c6b2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c6b6:	eba9 0a01 	sub.w	sl, r9, r1
   8c6ba:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c6be:	f021 0103 	bic.w	r1, r1, #3
   8c6c2:	448b      	add	fp, r1
   8c6c4:	44bb      	add	fp, r7
   8c6c6:	4558      	cmp	r0, fp
   8c6c8:	f73f af4b 	bgt.w	8c562 <_realloc_r+0x82>
   8c6cc:	4656      	mov	r6, sl
   8c6ce:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c6d2:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c6d6:	1f3a      	subs	r2, r7, #4
   8c6d8:	2a24      	cmp	r2, #36	; 0x24
   8c6da:	60c1      	str	r1, [r0, #12]
   8c6dc:	6088      	str	r0, [r1, #8]
   8c6de:	f200 80bd 	bhi.w	8c85c <_realloc_r+0x37c>
   8c6e2:	2a13      	cmp	r2, #19
   8c6e4:	f240 80b8 	bls.w	8c858 <_realloc_r+0x378>
   8c6e8:	6821      	ldr	r1, [r4, #0]
   8c6ea:	2a1b      	cmp	r2, #27
   8c6ec:	f8ca 1008 	str.w	r1, [sl, #8]
   8c6f0:	6861      	ldr	r1, [r4, #4]
   8c6f2:	f8ca 100c 	str.w	r1, [sl, #12]
   8c6f6:	f200 80c1 	bhi.w	8c87c <_realloc_r+0x39c>
   8c6fa:	3408      	adds	r4, #8
   8c6fc:	f10a 0210 	add.w	r2, sl, #16
   8c700:	6821      	ldr	r1, [r4, #0]
   8c702:	6011      	str	r1, [r2, #0]
   8c704:	6861      	ldr	r1, [r4, #4]
   8c706:	6051      	str	r1, [r2, #4]
   8c708:	68a1      	ldr	r1, [r4, #8]
   8c70a:	6091      	str	r1, [r2, #8]
   8c70c:	ebab 0205 	sub.w	r2, fp, r5
   8c710:	eb0a 0105 	add.w	r1, sl, r5
   8c714:	f042 0201 	orr.w	r2, r2, #1
   8c718:	6099      	str	r1, [r3, #8]
   8c71a:	604a      	str	r2, [r1, #4]
   8c71c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c720:	4640      	mov	r0, r8
   8c722:	f003 0301 	and.w	r3, r3, #1
   8c726:	431d      	orrs	r5, r3
   8c728:	f8ca 5004 	str.w	r5, [sl, #4]
   8c72c:	f7ff fb56 	bl	8bddc <__malloc_unlock>
   8c730:	e74d      	b.n	8c5ce <_realloc_r+0xee>
   8c732:	6823      	ldr	r3, [r4, #0]
   8c734:	2a1b      	cmp	r2, #27
   8c736:	6003      	str	r3, [r0, #0]
   8c738:	6863      	ldr	r3, [r4, #4]
   8c73a:	6043      	str	r3, [r0, #4]
   8c73c:	d849      	bhi.n	8c7d2 <_realloc_r+0x2f2>
   8c73e:	f104 0208 	add.w	r2, r4, #8
   8c742:	f100 0308 	add.w	r3, r0, #8
   8c746:	e729      	b.n	8c59c <_realloc_r+0xbc>
   8c748:	ebac 0205 	sub.w	r2, ip, r5
   8c74c:	eb09 0105 	add.w	r1, r9, r5
   8c750:	f042 0201 	orr.w	r2, r2, #1
   8c754:	6099      	str	r1, [r3, #8]
   8c756:	604a      	str	r2, [r1, #4]
   8c758:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c75c:	4640      	mov	r0, r8
   8c75e:	f003 0301 	and.w	r3, r3, #1
   8c762:	431d      	orrs	r5, r3
   8c764:	f844 5c04 	str.w	r5, [r4, #-4]
   8c768:	f7ff fb38 	bl	8bddc <__malloc_unlock>
   8c76c:	4626      	mov	r6, r4
   8c76e:	e72e      	b.n	8c5ce <_realloc_r+0xee>
   8c770:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8c774:	461f      	mov	r7, r3
   8c776:	60ca      	str	r2, [r1, #12]
   8c778:	6091      	str	r1, [r2, #8]
   8c77a:	e752      	b.n	8c622 <_realloc_r+0x142>
   8c77c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c780:	f023 0303 	bic.w	r3, r3, #3
   8c784:	441f      	add	r7, r3
   8c786:	e74c      	b.n	8c622 <_realloc_r+0x142>
   8c788:	4656      	mov	r6, sl
   8c78a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c78e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c792:	1f3a      	subs	r2, r7, #4
   8c794:	2a24      	cmp	r2, #36	; 0x24
   8c796:	60c1      	str	r1, [r0, #12]
   8c798:	6088      	str	r0, [r1, #8]
   8c79a:	d827      	bhi.n	8c7ec <_realloc_r+0x30c>
   8c79c:	2a13      	cmp	r2, #19
   8c79e:	d923      	bls.n	8c7e8 <_realloc_r+0x308>
   8c7a0:	6821      	ldr	r1, [r4, #0]
   8c7a2:	2a1b      	cmp	r2, #27
   8c7a4:	f8ca 1008 	str.w	r1, [sl, #8]
   8c7a8:	6861      	ldr	r1, [r4, #4]
   8c7aa:	f8ca 100c 	str.w	r1, [sl, #12]
   8c7ae:	d82f      	bhi.n	8c810 <_realloc_r+0x330>
   8c7b0:	3408      	adds	r4, #8
   8c7b2:	f10a 0210 	add.w	r2, sl, #16
   8c7b6:	6821      	ldr	r1, [r4, #0]
   8c7b8:	461f      	mov	r7, r3
   8c7ba:	6011      	str	r1, [r2, #0]
   8c7bc:	6863      	ldr	r3, [r4, #4]
   8c7be:	46d1      	mov	r9, sl
   8c7c0:	6053      	str	r3, [r2, #4]
   8c7c2:	68a3      	ldr	r3, [r4, #8]
   8c7c4:	4634      	mov	r4, r6
   8c7c6:	6093      	str	r3, [r2, #8]
   8c7c8:	e72b      	b.n	8c622 <_realloc_r+0x142>
   8c7ca:	4621      	mov	r1, r4
   8c7cc:	f7ff fa96 	bl	8bcfc <memmove>
   8c7d0:	e6ea      	b.n	8c5a8 <_realloc_r+0xc8>
   8c7d2:	68a3      	ldr	r3, [r4, #8]
   8c7d4:	2a24      	cmp	r2, #36	; 0x24
   8c7d6:	6083      	str	r3, [r0, #8]
   8c7d8:	68e3      	ldr	r3, [r4, #12]
   8c7da:	60c3      	str	r3, [r0, #12]
   8c7dc:	d024      	beq.n	8c828 <_realloc_r+0x348>
   8c7de:	f104 0210 	add.w	r2, r4, #16
   8c7e2:	f100 0310 	add.w	r3, r0, #16
   8c7e6:	e6d9      	b.n	8c59c <_realloc_r+0xbc>
   8c7e8:	4632      	mov	r2, r6
   8c7ea:	e7e4      	b.n	8c7b6 <_realloc_r+0x2d6>
   8c7ec:	4621      	mov	r1, r4
   8c7ee:	4630      	mov	r0, r6
   8c7f0:	461f      	mov	r7, r3
   8c7f2:	46d1      	mov	r9, sl
   8c7f4:	f7ff fa82 	bl	8bcfc <memmove>
   8c7f8:	4634      	mov	r4, r6
   8c7fa:	e712      	b.n	8c622 <_realloc_r+0x142>
   8c7fc:	4633      	mov	r3, r6
   8c7fe:	e707      	b.n	8c610 <_realloc_r+0x130>
   8c800:	4621      	mov	r1, r4
   8c802:	4630      	mov	r0, r6
   8c804:	4667      	mov	r7, ip
   8c806:	46d1      	mov	r9, sl
   8c808:	f7ff fa78 	bl	8bcfc <memmove>
   8c80c:	4634      	mov	r4, r6
   8c80e:	e708      	b.n	8c622 <_realloc_r+0x142>
   8c810:	68a1      	ldr	r1, [r4, #8]
   8c812:	2a24      	cmp	r2, #36	; 0x24
   8c814:	f8ca 1010 	str.w	r1, [sl, #16]
   8c818:	68e1      	ldr	r1, [r4, #12]
   8c81a:	f8ca 1014 	str.w	r1, [sl, #20]
   8c81e:	d023      	beq.n	8c868 <_realloc_r+0x388>
   8c820:	3410      	adds	r4, #16
   8c822:	f10a 0218 	add.w	r2, sl, #24
   8c826:	e7c6      	b.n	8c7b6 <_realloc_r+0x2d6>
   8c828:	6923      	ldr	r3, [r4, #16]
   8c82a:	f104 0218 	add.w	r2, r4, #24
   8c82e:	6103      	str	r3, [r0, #16]
   8c830:	6961      	ldr	r1, [r4, #20]
   8c832:	f100 0318 	add.w	r3, r0, #24
   8c836:	6141      	str	r1, [r0, #20]
   8c838:	e6b0      	b.n	8c59c <_realloc_r+0xbc>
   8c83a:	bf00      	nop
   8c83c:	200009d8 	.word	0x200009d8
   8c840:	68a3      	ldr	r3, [r4, #8]
   8c842:	2a24      	cmp	r2, #36	; 0x24
   8c844:	f8ca 3010 	str.w	r3, [sl, #16]
   8c848:	68e3      	ldr	r3, [r4, #12]
   8c84a:	f8ca 3014 	str.w	r3, [sl, #20]
   8c84e:	d021      	beq.n	8c894 <_realloc_r+0x3b4>
   8c850:	3410      	adds	r4, #16
   8c852:	f10a 0318 	add.w	r3, sl, #24
   8c856:	e6db      	b.n	8c610 <_realloc_r+0x130>
   8c858:	4632      	mov	r2, r6
   8c85a:	e751      	b.n	8c700 <_realloc_r+0x220>
   8c85c:	4621      	mov	r1, r4
   8c85e:	4630      	mov	r0, r6
   8c860:	f7ff fa4c 	bl	8bcfc <memmove>
   8c864:	4b15      	ldr	r3, [pc, #84]	; (8c8bc <_realloc_r+0x3dc>)
   8c866:	e751      	b.n	8c70c <_realloc_r+0x22c>
   8c868:	6921      	ldr	r1, [r4, #16]
   8c86a:	f10a 0220 	add.w	r2, sl, #32
   8c86e:	f8ca 1018 	str.w	r1, [sl, #24]
   8c872:	6961      	ldr	r1, [r4, #20]
   8c874:	3418      	adds	r4, #24
   8c876:	f8ca 101c 	str.w	r1, [sl, #28]
   8c87a:	e79c      	b.n	8c7b6 <_realloc_r+0x2d6>
   8c87c:	68a1      	ldr	r1, [r4, #8]
   8c87e:	2a24      	cmp	r2, #36	; 0x24
   8c880:	f8ca 1010 	str.w	r1, [sl, #16]
   8c884:	68e1      	ldr	r1, [r4, #12]
   8c886:	f8ca 1014 	str.w	r1, [sl, #20]
   8c88a:	d00d      	beq.n	8c8a8 <_realloc_r+0x3c8>
   8c88c:	3410      	adds	r4, #16
   8c88e:	f10a 0218 	add.w	r2, sl, #24
   8c892:	e735      	b.n	8c700 <_realloc_r+0x220>
   8c894:	6922      	ldr	r2, [r4, #16]
   8c896:	f10a 0320 	add.w	r3, sl, #32
   8c89a:	f8ca 2018 	str.w	r2, [sl, #24]
   8c89e:	6962      	ldr	r2, [r4, #20]
   8c8a0:	3418      	adds	r4, #24
   8c8a2:	f8ca 201c 	str.w	r2, [sl, #28]
   8c8a6:	e6b3      	b.n	8c610 <_realloc_r+0x130>
   8c8a8:	6921      	ldr	r1, [r4, #16]
   8c8aa:	f10a 0220 	add.w	r2, sl, #32
   8c8ae:	f8ca 1018 	str.w	r1, [sl, #24]
   8c8b2:	6961      	ldr	r1, [r4, #20]
   8c8b4:	3418      	adds	r4, #24
   8c8b6:	f8ca 101c 	str.w	r1, [sl, #28]
   8c8ba:	e721      	b.n	8c700 <_realloc_r+0x220>
   8c8bc:	200009d8 	.word	0x200009d8

0008c8c0 <frexp>:
   8c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c8c2:	4617      	mov	r7, r2
   8c8c4:	2200      	movs	r2, #0
   8c8c6:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c928 <frexp+0x68>
   8c8ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c8ce:	4563      	cmp	r3, ip
   8c8d0:	4604      	mov	r4, r0
   8c8d2:	460d      	mov	r5, r1
   8c8d4:	603a      	str	r2, [r7, #0]
   8c8d6:	dc22      	bgt.n	8c91e <frexp+0x5e>
   8c8d8:	4684      	mov	ip, r0
   8c8da:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c8de:	d01e      	beq.n	8c91e <frexp+0x5e>
   8c8e0:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c92c <frexp+0x6c>
   8c8e4:	460e      	mov	r6, r1
   8c8e6:	ea01 0c0c 	and.w	ip, r1, ip
   8c8ea:	f1bc 0f00 	cmp.w	ip, #0
   8c8ee:	d109      	bne.n	8c904 <frexp+0x44>
   8c8f0:	2200      	movs	r2, #0
   8c8f2:	4b0c      	ldr	r3, [pc, #48]	; (8c924 <frexp+0x64>)
   8c8f4:	f000 fd70 	bl	8d3d8 <__aeabi_dmul>
   8c8f8:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c8fc:	4604      	mov	r4, r0
   8c8fe:	460e      	mov	r6, r1
   8c900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c904:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c908:	151b      	asrs	r3, r3, #20
   8c90a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c90e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c912:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c916:	4413      	add	r3, r2
   8c918:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c91c:	603b      	str	r3, [r7, #0]
   8c91e:	4620      	mov	r0, r4
   8c920:	4629      	mov	r1, r5
   8c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c924:	43500000 	.word	0x43500000
   8c928:	7fefffff 	.word	0x7fefffff
   8c92c:	7ff00000 	.word	0x7ff00000

0008c930 <_sbrk_r>:
   8c930:	2200      	movs	r2, #0
   8c932:	b538      	push	{r3, r4, r5, lr}
   8c934:	4d06      	ldr	r5, [pc, #24]	; (8c950 <_sbrk_r+0x20>)
   8c936:	4604      	mov	r4, r0
   8c938:	4608      	mov	r0, r1
   8c93a:	602a      	str	r2, [r5, #0]
   8c93c:	f7f9 fed8 	bl	866f0 <_sbrk>
   8c940:	1c43      	adds	r3, r0, #1
   8c942:	d000      	beq.n	8c946 <_sbrk_r+0x16>
   8c944:	bd38      	pop	{r3, r4, r5, pc}
   8c946:	682b      	ldr	r3, [r5, #0]
   8c948:	2b00      	cmp	r3, #0
   8c94a:	d0fb      	beq.n	8c944 <_sbrk_r+0x14>
   8c94c:	6023      	str	r3, [r4, #0]
   8c94e:	bd38      	pop	{r3, r4, r5, pc}
   8c950:	20001860 	.word	0x20001860

0008c954 <__sread>:
   8c954:	b510      	push	{r4, lr}
   8c956:	460c      	mov	r4, r1
   8c958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c95c:	f000 fb16 	bl	8cf8c <_read_r>
   8c960:	2800      	cmp	r0, #0
   8c962:	db03      	blt.n	8c96c <__sread+0x18>
   8c964:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c966:	4403      	add	r3, r0
   8c968:	6523      	str	r3, [r4, #80]	; 0x50
   8c96a:	bd10      	pop	{r4, pc}
   8c96c:	89a3      	ldrh	r3, [r4, #12]
   8c96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c972:	81a3      	strh	r3, [r4, #12]
   8c974:	bd10      	pop	{r4, pc}
   8c976:	bf00      	nop

0008c978 <__swrite>:
   8c978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c97c:	460c      	mov	r4, r1
   8c97e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c982:	461f      	mov	r7, r3
   8c984:	05cb      	lsls	r3, r1, #23
   8c986:	4616      	mov	r6, r2
   8c988:	4605      	mov	r5, r0
   8c98a:	d40b      	bmi.n	8c9a4 <__swrite+0x2c>
   8c98c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c990:	81a1      	strh	r1, [r4, #12]
   8c992:	463b      	mov	r3, r7
   8c994:	4632      	mov	r2, r6
   8c996:	4628      	mov	r0, r5
   8c998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c9a0:	f000 b980 	b.w	8cca4 <_write_r>
   8c9a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9a8:	2302      	movs	r3, #2
   8c9aa:	2200      	movs	r2, #0
   8c9ac:	f000 fad8 	bl	8cf60 <_lseek_r>
   8c9b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c9b4:	e7ea      	b.n	8c98c <__swrite+0x14>
   8c9b6:	bf00      	nop

0008c9b8 <__sseek>:
   8c9b8:	b510      	push	{r4, lr}
   8c9ba:	460c      	mov	r4, r1
   8c9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9c0:	f000 face 	bl	8cf60 <_lseek_r>
   8c9c4:	89a3      	ldrh	r3, [r4, #12]
   8c9c6:	1c42      	adds	r2, r0, #1
   8c9c8:	bf0e      	itee	eq
   8c9ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c9ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c9d2:	6520      	strne	r0, [r4, #80]	; 0x50
   8c9d4:	81a3      	strh	r3, [r4, #12]
   8c9d6:	bd10      	pop	{r4, pc}

0008c9d8 <__sclose>:
   8c9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9dc:	f000 ba0c 	b.w	8cdf8 <_close_r>

0008c9e0 <strlen>:
   8c9e0:	f020 0103 	bic.w	r1, r0, #3
   8c9e4:	f010 0003 	ands.w	r0, r0, #3
   8c9e8:	f1c0 0000 	rsb	r0, r0, #0
   8c9ec:	f851 3b04 	ldr.w	r3, [r1], #4
   8c9f0:	f100 0c04 	add.w	ip, r0, #4
   8c9f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8c9f8:	f06f 0200 	mvn.w	r2, #0
   8c9fc:	bf1c      	itt	ne
   8c9fe:	fa22 f20c 	lsrne.w	r2, r2, ip
   8ca02:	4313      	orrne	r3, r2
   8ca04:	f04f 0c01 	mov.w	ip, #1
   8ca08:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8ca0c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8ca10:	eba3 020c 	sub.w	r2, r3, ip
   8ca14:	ea22 0203 	bic.w	r2, r2, r3
   8ca18:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8ca1c:	bf04      	itt	eq
   8ca1e:	f851 3b04 	ldreq.w	r3, [r1], #4
   8ca22:	3004      	addeq	r0, #4
   8ca24:	d0f4      	beq.n	8ca10 <strlen+0x30>
   8ca26:	f1c2 0100 	rsb	r1, r2, #0
   8ca2a:	ea02 0201 	and.w	r2, r2, r1
   8ca2e:	fab2 f282 	clz	r2, r2
   8ca32:	f1c2 021f 	rsb	r2, r2, #31
   8ca36:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ca3a:	4770      	bx	lr

0008ca3c <strncpy>:
   8ca3c:	b470      	push	{r4, r5, r6}
   8ca3e:	ea40 0401 	orr.w	r4, r0, r1
   8ca42:	07a3      	lsls	r3, r4, #30
   8ca44:	d122      	bne.n	8ca8c <strncpy+0x50>
   8ca46:	2a03      	cmp	r2, #3
   8ca48:	d920      	bls.n	8ca8c <strncpy+0x50>
   8ca4a:	460b      	mov	r3, r1
   8ca4c:	4604      	mov	r4, r0
   8ca4e:	4619      	mov	r1, r3
   8ca50:	f853 6b04 	ldr.w	r6, [r3], #4
   8ca54:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8ca58:	ea25 0506 	bic.w	r5, r5, r6
   8ca5c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8ca60:	d115      	bne.n	8ca8e <strncpy+0x52>
   8ca62:	3a04      	subs	r2, #4
   8ca64:	2a03      	cmp	r2, #3
   8ca66:	4619      	mov	r1, r3
   8ca68:	f844 6b04 	str.w	r6, [r4], #4
   8ca6c:	d8ef      	bhi.n	8ca4e <strncpy+0x12>
   8ca6e:	1e4d      	subs	r5, r1, #1
   8ca70:	b152      	cbz	r2, 8ca88 <strncpy+0x4c>
   8ca72:	4623      	mov	r3, r4
   8ca74:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8ca78:	1e56      	subs	r6, r2, #1
   8ca7a:	f803 1b01 	strb.w	r1, [r3], #1
   8ca7e:	b141      	cbz	r1, 8ca92 <strncpy+0x56>
   8ca80:	4632      	mov	r2, r6
   8ca82:	461c      	mov	r4, r3
   8ca84:	2a00      	cmp	r2, #0
   8ca86:	d1f4      	bne.n	8ca72 <strncpy+0x36>
   8ca88:	bc70      	pop	{r4, r5, r6}
   8ca8a:	4770      	bx	lr
   8ca8c:	4604      	mov	r4, r0
   8ca8e:	1e4d      	subs	r5, r1, #1
   8ca90:	e7ee      	b.n	8ca70 <strncpy+0x34>
   8ca92:	4422      	add	r2, r4
   8ca94:	2e00      	cmp	r6, #0
   8ca96:	d0f7      	beq.n	8ca88 <strncpy+0x4c>
   8ca98:	f803 1b01 	strb.w	r1, [r3], #1
   8ca9c:	4293      	cmp	r3, r2
   8ca9e:	d1fb      	bne.n	8ca98 <strncpy+0x5c>
   8caa0:	bc70      	pop	{r4, r5, r6}
   8caa2:	4770      	bx	lr

0008caa4 <__ssprint_r>:
   8caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8caa8:	6893      	ldr	r3, [r2, #8]
   8caaa:	4691      	mov	r9, r2
   8caac:	b083      	sub	sp, #12
   8caae:	2b00      	cmp	r3, #0
   8cab0:	d06d      	beq.n	8cb8e <__ssprint_r+0xea>
   8cab2:	6817      	ldr	r7, [r2, #0]
   8cab4:	4680      	mov	r8, r0
   8cab6:	460c      	mov	r4, r1
   8cab8:	6808      	ldr	r0, [r1, #0]
   8caba:	688d      	ldr	r5, [r1, #8]
   8cabc:	3708      	adds	r7, #8
   8cabe:	e043      	b.n	8cb48 <__ssprint_r+0xa4>
   8cac0:	89a3      	ldrh	r3, [r4, #12]
   8cac2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8cac6:	d02e      	beq.n	8cb26 <__ssprint_r+0x82>
   8cac8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8cacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8cad0:	eba0 0a01 	sub.w	sl, r0, r1
   8cad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8cad8:	eb0a 0006 	add.w	r0, sl, r6
   8cadc:	106d      	asrs	r5, r5, #1
   8cade:	3001      	adds	r0, #1
   8cae0:	42a8      	cmp	r0, r5
   8cae2:	462a      	mov	r2, r5
   8cae4:	bf84      	itt	hi
   8cae6:	4605      	movhi	r5, r0
   8cae8:	462a      	movhi	r2, r5
   8caea:	055b      	lsls	r3, r3, #21
   8caec:	d536      	bpl.n	8cb5c <__ssprint_r+0xb8>
   8caee:	4611      	mov	r1, r2
   8caf0:	4640      	mov	r0, r8
   8caf2:	f7fe fdff 	bl	8b6f4 <_malloc_r>
   8caf6:	2800      	cmp	r0, #0
   8caf8:	d03a      	beq.n	8cb70 <__ssprint_r+0xcc>
   8cafa:	4652      	mov	r2, sl
   8cafc:	6921      	ldr	r1, [r4, #16]
   8cafe:	9001      	str	r0, [sp, #4]
   8cb00:	f7fa faa4 	bl	8704c <memcpy>
   8cb04:	89a2      	ldrh	r2, [r4, #12]
   8cb06:	9b01      	ldr	r3, [sp, #4]
   8cb08:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8cb0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8cb10:	81a2      	strh	r2, [r4, #12]
   8cb12:	eba5 020a 	sub.w	r2, r5, sl
   8cb16:	eb03 000a 	add.w	r0, r3, sl
   8cb1a:	6165      	str	r5, [r4, #20]
   8cb1c:	46b2      	mov	sl, r6
   8cb1e:	4635      	mov	r5, r6
   8cb20:	6123      	str	r3, [r4, #16]
   8cb22:	6020      	str	r0, [r4, #0]
   8cb24:	60a2      	str	r2, [r4, #8]
   8cb26:	4659      	mov	r1, fp
   8cb28:	4652      	mov	r2, sl
   8cb2a:	f7ff f8e7 	bl	8bcfc <memmove>
   8cb2e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8cb32:	68a1      	ldr	r1, [r4, #8]
   8cb34:	6820      	ldr	r0, [r4, #0]
   8cb36:	1b4d      	subs	r5, r1, r5
   8cb38:	4450      	add	r0, sl
   8cb3a:	1b9e      	subs	r6, r3, r6
   8cb3c:	60a5      	str	r5, [r4, #8]
   8cb3e:	6020      	str	r0, [r4, #0]
   8cb40:	f8c9 6008 	str.w	r6, [r9, #8]
   8cb44:	b31e      	cbz	r6, 8cb8e <__ssprint_r+0xea>
   8cb46:	3708      	adds	r7, #8
   8cb48:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8cb4c:	2e00      	cmp	r6, #0
   8cb4e:	d0fa      	beq.n	8cb46 <__ssprint_r+0xa2>
   8cb50:	42b5      	cmp	r5, r6
   8cb52:	46aa      	mov	sl, r5
   8cb54:	d9b4      	bls.n	8cac0 <__ssprint_r+0x1c>
   8cb56:	4635      	mov	r5, r6
   8cb58:	46b2      	mov	sl, r6
   8cb5a:	e7e4      	b.n	8cb26 <__ssprint_r+0x82>
   8cb5c:	4640      	mov	r0, r8
   8cb5e:	f7ff fcbf 	bl	8c4e0 <_realloc_r>
   8cb62:	4603      	mov	r3, r0
   8cb64:	2800      	cmp	r0, #0
   8cb66:	d1d4      	bne.n	8cb12 <__ssprint_r+0x6e>
   8cb68:	4640      	mov	r0, r8
   8cb6a:	6921      	ldr	r1, [r4, #16]
   8cb6c:	f7fe fa98 	bl	8b0a0 <_free_r>
   8cb70:	230c      	movs	r3, #12
   8cb72:	2200      	movs	r2, #0
   8cb74:	f04f 30ff 	mov.w	r0, #4294967295
   8cb78:	f8c8 3000 	str.w	r3, [r8]
   8cb7c:	89a3      	ldrh	r3, [r4, #12]
   8cb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8cb82:	81a3      	strh	r3, [r4, #12]
   8cb84:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8cb88:	b003      	add	sp, #12
   8cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cb8e:	2000      	movs	r0, #0
   8cb90:	f8c9 0004 	str.w	r0, [r9, #4]
   8cb94:	b003      	add	sp, #12
   8cb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cb9a:	bf00      	nop

0008cb9c <__swbuf_r>:
   8cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cb9e:	460d      	mov	r5, r1
   8cba0:	4614      	mov	r4, r2
   8cba2:	4606      	mov	r6, r0
   8cba4:	b110      	cbz	r0, 8cbac <__swbuf_r+0x10>
   8cba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cba8:	2b00      	cmp	r3, #0
   8cbaa:	d043      	beq.n	8cc34 <__swbuf_r+0x98>
   8cbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cbb0:	69a3      	ldr	r3, [r4, #24]
   8cbb2:	0717      	lsls	r7, r2, #28
   8cbb4:	60a3      	str	r3, [r4, #8]
   8cbb6:	b290      	uxth	r0, r2
   8cbb8:	d51b      	bpl.n	8cbf2 <__swbuf_r+0x56>
   8cbba:	6923      	ldr	r3, [r4, #16]
   8cbbc:	b1cb      	cbz	r3, 8cbf2 <__swbuf_r+0x56>
   8cbbe:	b2ed      	uxtb	r5, r5
   8cbc0:	0481      	lsls	r1, r0, #18
   8cbc2:	462f      	mov	r7, r5
   8cbc4:	d522      	bpl.n	8cc0c <__swbuf_r+0x70>
   8cbc6:	6822      	ldr	r2, [r4, #0]
   8cbc8:	6961      	ldr	r1, [r4, #20]
   8cbca:	1ad3      	subs	r3, r2, r3
   8cbcc:	4299      	cmp	r1, r3
   8cbce:	dd29      	ble.n	8cc24 <__swbuf_r+0x88>
   8cbd0:	3301      	adds	r3, #1
   8cbd2:	68a1      	ldr	r1, [r4, #8]
   8cbd4:	1c50      	adds	r0, r2, #1
   8cbd6:	3901      	subs	r1, #1
   8cbd8:	60a1      	str	r1, [r4, #8]
   8cbda:	6020      	str	r0, [r4, #0]
   8cbdc:	7015      	strb	r5, [r2, #0]
   8cbde:	6962      	ldr	r2, [r4, #20]
   8cbe0:	429a      	cmp	r2, r3
   8cbe2:	d02a      	beq.n	8cc3a <__swbuf_r+0x9e>
   8cbe4:	89a3      	ldrh	r3, [r4, #12]
   8cbe6:	07db      	lsls	r3, r3, #31
   8cbe8:	d501      	bpl.n	8cbee <__swbuf_r+0x52>
   8cbea:	2d0a      	cmp	r5, #10
   8cbec:	d025      	beq.n	8cc3a <__swbuf_r+0x9e>
   8cbee:	4638      	mov	r0, r7
   8cbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cbf2:	4621      	mov	r1, r4
   8cbf4:	4630      	mov	r0, r6
   8cbf6:	f7fc ffcf 	bl	89b98 <__swsetup_r>
   8cbfa:	bb20      	cbnz	r0, 8cc46 <__swbuf_r+0xaa>
   8cbfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cc00:	b2ed      	uxtb	r5, r5
   8cc02:	b290      	uxth	r0, r2
   8cc04:	0481      	lsls	r1, r0, #18
   8cc06:	462f      	mov	r7, r5
   8cc08:	6923      	ldr	r3, [r4, #16]
   8cc0a:	d4dc      	bmi.n	8cbc6 <__swbuf_r+0x2a>
   8cc0c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8cc0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8cc12:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8cc16:	81a2      	strh	r2, [r4, #12]
   8cc18:	6822      	ldr	r2, [r4, #0]
   8cc1a:	6661      	str	r1, [r4, #100]	; 0x64
   8cc1c:	6961      	ldr	r1, [r4, #20]
   8cc1e:	1ad3      	subs	r3, r2, r3
   8cc20:	4299      	cmp	r1, r3
   8cc22:	dcd5      	bgt.n	8cbd0 <__swbuf_r+0x34>
   8cc24:	4621      	mov	r1, r4
   8cc26:	4630      	mov	r0, r6
   8cc28:	f7fe f8ba 	bl	8ada0 <_fflush_r>
   8cc2c:	b958      	cbnz	r0, 8cc46 <__swbuf_r+0xaa>
   8cc2e:	2301      	movs	r3, #1
   8cc30:	6822      	ldr	r2, [r4, #0]
   8cc32:	e7ce      	b.n	8cbd2 <__swbuf_r+0x36>
   8cc34:	f7fe f910 	bl	8ae58 <__sinit>
   8cc38:	e7b8      	b.n	8cbac <__swbuf_r+0x10>
   8cc3a:	4621      	mov	r1, r4
   8cc3c:	4630      	mov	r0, r6
   8cc3e:	f7fe f8af 	bl	8ada0 <_fflush_r>
   8cc42:	2800      	cmp	r0, #0
   8cc44:	d0d3      	beq.n	8cbee <__swbuf_r+0x52>
   8cc46:	f04f 37ff 	mov.w	r7, #4294967295
   8cc4a:	e7d0      	b.n	8cbee <__swbuf_r+0x52>

0008cc4c <_wcrtomb_r>:
   8cc4c:	b570      	push	{r4, r5, r6, lr}
   8cc4e:	4606      	mov	r6, r0
   8cc50:	461d      	mov	r5, r3
   8cc52:	b084      	sub	sp, #16
   8cc54:	b139      	cbz	r1, 8cc66 <_wcrtomb_r+0x1a>
   8cc56:	4c0b      	ldr	r4, [pc, #44]	; (8cc84 <_wcrtomb_r+0x38>)
   8cc58:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cc5c:	47a0      	blx	r4
   8cc5e:	1c43      	adds	r3, r0, #1
   8cc60:	d00a      	beq.n	8cc78 <_wcrtomb_r+0x2c>
   8cc62:	b004      	add	sp, #16
   8cc64:	bd70      	pop	{r4, r5, r6, pc}
   8cc66:	460c      	mov	r4, r1
   8cc68:	4906      	ldr	r1, [pc, #24]	; (8cc84 <_wcrtomb_r+0x38>)
   8cc6a:	4622      	mov	r2, r4
   8cc6c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8cc70:	a901      	add	r1, sp, #4
   8cc72:	47a0      	blx	r4
   8cc74:	1c43      	adds	r3, r0, #1
   8cc76:	d1f4      	bne.n	8cc62 <_wcrtomb_r+0x16>
   8cc78:	2200      	movs	r2, #0
   8cc7a:	238a      	movs	r3, #138	; 0x8a
   8cc7c:	602a      	str	r2, [r5, #0]
   8cc7e:	6033      	str	r3, [r6, #0]
   8cc80:	b004      	add	sp, #16
   8cc82:	bd70      	pop	{r4, r5, r6, pc}
   8cc84:	2000086c 	.word	0x2000086c

0008cc88 <__ascii_wctomb>:
   8cc88:	4603      	mov	r3, r0
   8cc8a:	b149      	cbz	r1, 8cca0 <__ascii_wctomb+0x18>
   8cc8c:	2aff      	cmp	r2, #255	; 0xff
   8cc8e:	d802      	bhi.n	8cc96 <__ascii_wctomb+0xe>
   8cc90:	2001      	movs	r0, #1
   8cc92:	700a      	strb	r2, [r1, #0]
   8cc94:	4770      	bx	lr
   8cc96:	228a      	movs	r2, #138	; 0x8a
   8cc98:	f04f 30ff 	mov.w	r0, #4294967295
   8cc9c:	601a      	str	r2, [r3, #0]
   8cc9e:	4770      	bx	lr
   8cca0:	4608      	mov	r0, r1
   8cca2:	4770      	bx	lr

0008cca4 <_write_r>:
   8cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cca6:	460f      	mov	r7, r1
   8cca8:	2600      	movs	r6, #0
   8ccaa:	4d08      	ldr	r5, [pc, #32]	; (8cccc <_write_r+0x28>)
   8ccac:	4611      	mov	r1, r2
   8ccae:	4604      	mov	r4, r0
   8ccb0:	461a      	mov	r2, r3
   8ccb2:	4638      	mov	r0, r7
   8ccb4:	602e      	str	r6, [r5, #0]
   8ccb6:	f7f7 fb67 	bl	84388 <_write>
   8ccba:	1c43      	adds	r3, r0, #1
   8ccbc:	d000      	beq.n	8ccc0 <_write_r+0x1c>
   8ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccc0:	682b      	ldr	r3, [r5, #0]
   8ccc2:	2b00      	cmp	r3, #0
   8ccc4:	d0fb      	beq.n	8ccbe <_write_r+0x1a>
   8ccc6:	6023      	str	r3, [r4, #0]
   8ccc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccca:	bf00      	nop
   8cccc:	20001860 	.word	0x20001860

0008ccd0 <__register_exitproc>:
   8ccd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ccd4:	f8df a080 	ldr.w	sl, [pc, #128]	; 8cd58 <__register_exitproc+0x88>
   8ccd8:	4606      	mov	r6, r0
   8ccda:	f8da 0000 	ldr.w	r0, [sl]
   8ccde:	4698      	mov	r8, r3
   8cce0:	460f      	mov	r7, r1
   8cce2:	4691      	mov	r9, r2
   8cce4:	f7fe fc8a 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8cce8:	4b1a      	ldr	r3, [pc, #104]	; (8cd54 <__register_exitproc+0x84>)
   8ccea:	681b      	ldr	r3, [r3, #0]
   8ccec:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8ccf0:	b324      	cbz	r4, 8cd3c <__register_exitproc+0x6c>
   8ccf2:	6865      	ldr	r5, [r4, #4]
   8ccf4:	2d1f      	cmp	r5, #31
   8ccf6:	dc26      	bgt.n	8cd46 <__register_exitproc+0x76>
   8ccf8:	b95e      	cbnz	r6, 8cd12 <__register_exitproc+0x42>
   8ccfa:	1c6b      	adds	r3, r5, #1
   8ccfc:	3502      	adds	r5, #2
   8ccfe:	f8da 0000 	ldr.w	r0, [sl]
   8cd02:	6063      	str	r3, [r4, #4]
   8cd04:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8cd08:	f7fe fc7a 	bl	8b600 <__retarget_lock_release_recursive>
   8cd0c:	2000      	movs	r0, #0
   8cd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cd12:	2301      	movs	r3, #1
   8cd14:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8cd18:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8cd1c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8cd20:	40ab      	lsls	r3, r5
   8cd22:	431a      	orrs	r2, r3
   8cd24:	2e02      	cmp	r6, #2
   8cd26:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8cd2a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8cd2e:	d1e4      	bne.n	8ccfa <__register_exitproc+0x2a>
   8cd30:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8cd34:	4313      	orrs	r3, r2
   8cd36:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8cd3a:	e7de      	b.n	8ccfa <__register_exitproc+0x2a>
   8cd3c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8cd40:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8cd44:	e7d5      	b.n	8ccf2 <__register_exitproc+0x22>
   8cd46:	f8da 0000 	ldr.w	r0, [sl]
   8cd4a:	f7fe fc59 	bl	8b600 <__retarget_lock_release_recursive>
   8cd4e:	f04f 30ff 	mov.w	r0, #4294967295
   8cd52:	e7dc      	b.n	8cd0e <__register_exitproc+0x3e>
   8cd54:	0008da18 	.word	0x0008da18
   8cd58:	20000868 	.word	0x20000868

0008cd5c <__assert_func>:
   8cd5c:	4614      	mov	r4, r2
   8cd5e:	b500      	push	{lr}
   8cd60:	4d09      	ldr	r5, [pc, #36]	; (8cd88 <__assert_func+0x2c>)
   8cd62:	461a      	mov	r2, r3
   8cd64:	4603      	mov	r3, r0
   8cd66:	6828      	ldr	r0, [r5, #0]
   8cd68:	b085      	sub	sp, #20
   8cd6a:	68c0      	ldr	r0, [r0, #12]
   8cd6c:	b144      	cbz	r4, 8cd80 <__assert_func+0x24>
   8cd6e:	4d07      	ldr	r5, [pc, #28]	; (8cd8c <__assert_func+0x30>)
   8cd70:	9100      	str	r1, [sp, #0]
   8cd72:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8cd76:	4906      	ldr	r1, [pc, #24]	; (8cd90 <__assert_func+0x34>)
   8cd78:	f000 f8b6 	bl	8cee8 <fiprintf>
   8cd7c:	f000 f91c 	bl	8cfb8 <abort>
   8cd80:	4d04      	ldr	r5, [pc, #16]	; (8cd94 <__assert_func+0x38>)
   8cd82:	462c      	mov	r4, r5
   8cd84:	e7f4      	b.n	8cd70 <__assert_func+0x14>
   8cd86:	bf00      	nop
   8cd88:	2000043c 	.word	0x2000043c
   8cd8c:	0008dccc 	.word	0x0008dccc
   8cd90:	0008dcdc 	.word	0x0008dcdc
   8cd94:	0008dcd8 	.word	0x0008dcd8

0008cd98 <_calloc_r>:
   8cd98:	b510      	push	{r4, lr}
   8cd9a:	fb02 f101 	mul.w	r1, r2, r1
   8cd9e:	f7fe fca9 	bl	8b6f4 <_malloc_r>
   8cda2:	4604      	mov	r4, r0
   8cda4:	b168      	cbz	r0, 8cdc2 <_calloc_r+0x2a>
   8cda6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cdaa:	f022 0203 	bic.w	r2, r2, #3
   8cdae:	3a04      	subs	r2, #4
   8cdb0:	2a24      	cmp	r2, #36	; 0x24
   8cdb2:	d818      	bhi.n	8cde6 <_calloc_r+0x4e>
   8cdb4:	2a13      	cmp	r2, #19
   8cdb6:	d806      	bhi.n	8cdc6 <_calloc_r+0x2e>
   8cdb8:	4602      	mov	r2, r0
   8cdba:	2300      	movs	r3, #0
   8cdbc:	e9c2 3300 	strd	r3, r3, [r2]
   8cdc0:	6093      	str	r3, [r2, #8]
   8cdc2:	4620      	mov	r0, r4
   8cdc4:	bd10      	pop	{r4, pc}
   8cdc6:	2300      	movs	r3, #0
   8cdc8:	2a1b      	cmp	r2, #27
   8cdca:	e9c0 3300 	strd	r3, r3, [r0]
   8cdce:	d90f      	bls.n	8cdf0 <_calloc_r+0x58>
   8cdd0:	2a24      	cmp	r2, #36	; 0x24
   8cdd2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8cdd6:	bf0a      	itet	eq
   8cdd8:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8cddc:	f100 0210 	addne.w	r2, r0, #16
   8cde0:	f100 0218 	addeq.w	r2, r0, #24
   8cde4:	e7e9      	b.n	8cdba <_calloc_r+0x22>
   8cde6:	2100      	movs	r1, #0
   8cde8:	f7fa f9a6 	bl	87138 <memset>
   8cdec:	4620      	mov	r0, r4
   8cdee:	bd10      	pop	{r4, pc}
   8cdf0:	f100 0208 	add.w	r2, r0, #8
   8cdf4:	e7e1      	b.n	8cdba <_calloc_r+0x22>
   8cdf6:	bf00      	nop

0008cdf8 <_close_r>:
   8cdf8:	2200      	movs	r2, #0
   8cdfa:	b538      	push	{r3, r4, r5, lr}
   8cdfc:	4d06      	ldr	r5, [pc, #24]	; (8ce18 <_close_r+0x20>)
   8cdfe:	4604      	mov	r4, r0
   8ce00:	4608      	mov	r0, r1
   8ce02:	602a      	str	r2, [r5, #0]
   8ce04:	f7f9 fca0 	bl	86748 <_close>
   8ce08:	1c43      	adds	r3, r0, #1
   8ce0a:	d000      	beq.n	8ce0e <_close_r+0x16>
   8ce0c:	bd38      	pop	{r3, r4, r5, pc}
   8ce0e:	682b      	ldr	r3, [r5, #0]
   8ce10:	2b00      	cmp	r3, #0
   8ce12:	d0fb      	beq.n	8ce0c <_close_r+0x14>
   8ce14:	6023      	str	r3, [r4, #0]
   8ce16:	bd38      	pop	{r3, r4, r5, pc}
   8ce18:	20001860 	.word	0x20001860

0008ce1c <_fclose_r>:
   8ce1c:	b570      	push	{r4, r5, r6, lr}
   8ce1e:	2900      	cmp	r1, #0
   8ce20:	d04b      	beq.n	8ceba <_fclose_r+0x9e>
   8ce22:	460c      	mov	r4, r1
   8ce24:	4605      	mov	r5, r0
   8ce26:	b110      	cbz	r0, 8ce2e <_fclose_r+0x12>
   8ce28:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ce2a:	2b00      	cmp	r3, #0
   8ce2c:	d048      	beq.n	8cec0 <_fclose_r+0xa4>
   8ce2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce30:	07d8      	lsls	r0, r3, #31
   8ce32:	d534      	bpl.n	8ce9e <_fclose_r+0x82>
   8ce34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ce38:	2b00      	cmp	r3, #0
   8ce3a:	d03e      	beq.n	8ceba <_fclose_r+0x9e>
   8ce3c:	4621      	mov	r1, r4
   8ce3e:	4628      	mov	r0, r5
   8ce40:	f7fd ff16 	bl	8ac70 <__sflush_r>
   8ce44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ce46:	4606      	mov	r6, r0
   8ce48:	b133      	cbz	r3, 8ce58 <_fclose_r+0x3c>
   8ce4a:	4628      	mov	r0, r5
   8ce4c:	69e1      	ldr	r1, [r4, #28]
   8ce4e:	4798      	blx	r3
   8ce50:	2800      	cmp	r0, #0
   8ce52:	bfb8      	it	lt
   8ce54:	f04f 36ff 	movlt.w	r6, #4294967295
   8ce58:	89a3      	ldrh	r3, [r4, #12]
   8ce5a:	061a      	lsls	r2, r3, #24
   8ce5c:	d43b      	bmi.n	8ced6 <_fclose_r+0xba>
   8ce5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ce60:	b141      	cbz	r1, 8ce74 <_fclose_r+0x58>
   8ce62:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8ce66:	4299      	cmp	r1, r3
   8ce68:	d002      	beq.n	8ce70 <_fclose_r+0x54>
   8ce6a:	4628      	mov	r0, r5
   8ce6c:	f7fe f918 	bl	8b0a0 <_free_r>
   8ce70:	2300      	movs	r3, #0
   8ce72:	6323      	str	r3, [r4, #48]	; 0x30
   8ce74:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ce76:	b121      	cbz	r1, 8ce82 <_fclose_r+0x66>
   8ce78:	4628      	mov	r0, r5
   8ce7a:	f7fe f911 	bl	8b0a0 <_free_r>
   8ce7e:	2300      	movs	r3, #0
   8ce80:	6463      	str	r3, [r4, #68]	; 0x44
   8ce82:	f7fe f817 	bl	8aeb4 <__sfp_lock_acquire>
   8ce86:	2200      	movs	r2, #0
   8ce88:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce8a:	81a2      	strh	r2, [r4, #12]
   8ce8c:	07db      	lsls	r3, r3, #31
   8ce8e:	d527      	bpl.n	8cee0 <_fclose_r+0xc4>
   8ce90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ce92:	f7fe fbb1 	bl	8b5f8 <__retarget_lock_close_recursive>
   8ce96:	f7fe f813 	bl	8aec0 <__sfp_lock_release>
   8ce9a:	4630      	mov	r0, r6
   8ce9c:	bd70      	pop	{r4, r5, r6, pc}
   8ce9e:	89a3      	ldrh	r3, [r4, #12]
   8cea0:	0599      	lsls	r1, r3, #22
   8cea2:	d4cb      	bmi.n	8ce3c <_fclose_r+0x20>
   8cea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cea6:	f7fe fba9 	bl	8b5fc <__retarget_lock_acquire_recursive>
   8ceaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ceae:	2b00      	cmp	r3, #0
   8ceb0:	d1c4      	bne.n	8ce3c <_fclose_r+0x20>
   8ceb2:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8ceb4:	f016 0601 	ands.w	r6, r6, #1
   8ceb8:	d008      	beq.n	8cecc <_fclose_r+0xb0>
   8ceba:	2600      	movs	r6, #0
   8cebc:	4630      	mov	r0, r6
   8cebe:	bd70      	pop	{r4, r5, r6, pc}
   8cec0:	f7fd ffca 	bl	8ae58 <__sinit>
   8cec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cec6:	07d8      	lsls	r0, r3, #31
   8cec8:	d4b4      	bmi.n	8ce34 <_fclose_r+0x18>
   8ceca:	e7e8      	b.n	8ce9e <_fclose_r+0x82>
   8cecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cece:	f7fe fb97 	bl	8b600 <__retarget_lock_release_recursive>
   8ced2:	4630      	mov	r0, r6
   8ced4:	bd70      	pop	{r4, r5, r6, pc}
   8ced6:	4628      	mov	r0, r5
   8ced8:	6921      	ldr	r1, [r4, #16]
   8ceda:	f7fe f8e1 	bl	8b0a0 <_free_r>
   8cede:	e7be      	b.n	8ce5e <_fclose_r+0x42>
   8cee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cee2:	f7fe fb8d 	bl	8b600 <__retarget_lock_release_recursive>
   8cee6:	e7d3      	b.n	8ce90 <_fclose_r+0x74>

0008cee8 <fiprintf>:
   8cee8:	b40e      	push	{r1, r2, r3}
   8ceea:	b510      	push	{r4, lr}
   8ceec:	b083      	sub	sp, #12
   8ceee:	ab05      	add	r3, sp, #20
   8cef0:	4c06      	ldr	r4, [pc, #24]	; (8cf0c <fiprintf+0x24>)
   8cef2:	f853 2b04 	ldr.w	r2, [r3], #4
   8cef6:	4601      	mov	r1, r0
   8cef8:	6820      	ldr	r0, [r4, #0]
   8cefa:	9301      	str	r3, [sp, #4]
   8cefc:	f7fb ff72 	bl	88de4 <_vfiprintf_r>
   8cf00:	b003      	add	sp, #12
   8cf02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8cf06:	b003      	add	sp, #12
   8cf08:	4770      	bx	lr
   8cf0a:	bf00      	nop
   8cf0c:	2000043c 	.word	0x2000043c

0008cf10 <_fstat_r>:
   8cf10:	b570      	push	{r4, r5, r6, lr}
   8cf12:	460c      	mov	r4, r1
   8cf14:	4603      	mov	r3, r0
   8cf16:	2600      	movs	r6, #0
   8cf18:	4d07      	ldr	r5, [pc, #28]	; (8cf38 <_fstat_r+0x28>)
   8cf1a:	4620      	mov	r0, r4
   8cf1c:	4611      	mov	r1, r2
   8cf1e:	461c      	mov	r4, r3
   8cf20:	602e      	str	r6, [r5, #0]
   8cf22:	f7f9 fc1c 	bl	8675e <_fstat>
   8cf26:	1c43      	adds	r3, r0, #1
   8cf28:	d000      	beq.n	8cf2c <_fstat_r+0x1c>
   8cf2a:	bd70      	pop	{r4, r5, r6, pc}
   8cf2c:	682b      	ldr	r3, [r5, #0]
   8cf2e:	2b00      	cmp	r3, #0
   8cf30:	d0fb      	beq.n	8cf2a <_fstat_r+0x1a>
   8cf32:	6023      	str	r3, [r4, #0]
   8cf34:	bd70      	pop	{r4, r5, r6, pc}
   8cf36:	bf00      	nop
   8cf38:	20001860 	.word	0x20001860

0008cf3c <_isatty_r>:
   8cf3c:	2200      	movs	r2, #0
   8cf3e:	b538      	push	{r3, r4, r5, lr}
   8cf40:	4d06      	ldr	r5, [pc, #24]	; (8cf5c <_isatty_r+0x20>)
   8cf42:	4604      	mov	r4, r0
   8cf44:	4608      	mov	r0, r1
   8cf46:	602a      	str	r2, [r5, #0]
   8cf48:	f7f9 fc18 	bl	8677c <_isatty>
   8cf4c:	1c43      	adds	r3, r0, #1
   8cf4e:	d000      	beq.n	8cf52 <_isatty_r+0x16>
   8cf50:	bd38      	pop	{r3, r4, r5, pc}
   8cf52:	682b      	ldr	r3, [r5, #0]
   8cf54:	2b00      	cmp	r3, #0
   8cf56:	d0fb      	beq.n	8cf50 <_isatty_r+0x14>
   8cf58:	6023      	str	r3, [r4, #0]
   8cf5a:	bd38      	pop	{r3, r4, r5, pc}
   8cf5c:	20001860 	.word	0x20001860

0008cf60 <_lseek_r>:
   8cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf62:	460f      	mov	r7, r1
   8cf64:	2600      	movs	r6, #0
   8cf66:	4d08      	ldr	r5, [pc, #32]	; (8cf88 <_lseek_r+0x28>)
   8cf68:	4611      	mov	r1, r2
   8cf6a:	4604      	mov	r4, r0
   8cf6c:	461a      	mov	r2, r3
   8cf6e:	4638      	mov	r0, r7
   8cf70:	602e      	str	r6, [r5, #0]
   8cf72:	f7f9 fc0d 	bl	86790 <_lseek>
   8cf76:	1c43      	adds	r3, r0, #1
   8cf78:	d000      	beq.n	8cf7c <_lseek_r+0x1c>
   8cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf7c:	682b      	ldr	r3, [r5, #0]
   8cf7e:	2b00      	cmp	r3, #0
   8cf80:	d0fb      	beq.n	8cf7a <_lseek_r+0x1a>
   8cf82:	6023      	str	r3, [r4, #0]
   8cf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf86:	bf00      	nop
   8cf88:	20001860 	.word	0x20001860

0008cf8c <_read_r>:
   8cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf8e:	460f      	mov	r7, r1
   8cf90:	2600      	movs	r6, #0
   8cf92:	4d08      	ldr	r5, [pc, #32]	; (8cfb4 <_read_r+0x28>)
   8cf94:	4611      	mov	r1, r2
   8cf96:	4604      	mov	r4, r0
   8cf98:	461a      	mov	r2, r3
   8cf9a:	4638      	mov	r0, r7
   8cf9c:	602e      	str	r6, [r5, #0]
   8cf9e:	f7f9 fd59 	bl	86a54 <_read>
   8cfa2:	1c43      	adds	r3, r0, #1
   8cfa4:	d000      	beq.n	8cfa8 <_read_r+0x1c>
   8cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfa8:	682b      	ldr	r3, [r5, #0]
   8cfaa:	2b00      	cmp	r3, #0
   8cfac:	d0fb      	beq.n	8cfa6 <_read_r+0x1a>
   8cfae:	6023      	str	r3, [r4, #0]
   8cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfb2:	bf00      	nop
   8cfb4:	20001860 	.word	0x20001860

0008cfb8 <abort>:
   8cfb8:	2006      	movs	r0, #6
   8cfba:	b508      	push	{r3, lr}
   8cfbc:	f000 f830 	bl	8d020 <raise>
   8cfc0:	2001      	movs	r0, #1
   8cfc2:	f7f9 fbf1 	bl	867a8 <_exit>
   8cfc6:	bf00      	nop

0008cfc8 <_raise_r>:
   8cfc8:	291f      	cmp	r1, #31
   8cfca:	b538      	push	{r3, r4, r5, lr}
   8cfcc:	4605      	mov	r5, r0
   8cfce:	d821      	bhi.n	8d014 <_raise_r+0x4c>
   8cfd0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8cfd4:	460c      	mov	r4, r1
   8cfd6:	b16a      	cbz	r2, 8cff4 <_raise_r+0x2c>
   8cfd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8cfdc:	b153      	cbz	r3, 8cff4 <_raise_r+0x2c>
   8cfde:	2b01      	cmp	r3, #1
   8cfe0:	d016      	beq.n	8d010 <_raise_r+0x48>
   8cfe2:	1c59      	adds	r1, r3, #1
   8cfe4:	d010      	beq.n	8d008 <_raise_r+0x40>
   8cfe6:	2500      	movs	r5, #0
   8cfe8:	4620      	mov	r0, r4
   8cfea:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8cfee:	4798      	blx	r3
   8cff0:	4628      	mov	r0, r5
   8cff2:	bd38      	pop	{r3, r4, r5, pc}
   8cff4:	4628      	mov	r0, r5
   8cff6:	f000 f831 	bl	8d05c <_getpid_r>
   8cffa:	4622      	mov	r2, r4
   8cffc:	4601      	mov	r1, r0
   8cffe:	4628      	mov	r0, r5
   8d000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8d004:	f000 b814 	b.w	8d030 <_kill_r>
   8d008:	2316      	movs	r3, #22
   8d00a:	2001      	movs	r0, #1
   8d00c:	602b      	str	r3, [r5, #0]
   8d00e:	bd38      	pop	{r3, r4, r5, pc}
   8d010:	2000      	movs	r0, #0
   8d012:	bd38      	pop	{r3, r4, r5, pc}
   8d014:	2316      	movs	r3, #22
   8d016:	f04f 30ff 	mov.w	r0, #4294967295
   8d01a:	602b      	str	r3, [r5, #0]
   8d01c:	bd38      	pop	{r3, r4, r5, pc}
   8d01e:	bf00      	nop

0008d020 <raise>:
   8d020:	4b02      	ldr	r3, [pc, #8]	; (8d02c <raise+0xc>)
   8d022:	4601      	mov	r1, r0
   8d024:	6818      	ldr	r0, [r3, #0]
   8d026:	f7ff bfcf 	b.w	8cfc8 <_raise_r>
   8d02a:	bf00      	nop
   8d02c:	2000043c 	.word	0x2000043c

0008d030 <_kill_r>:
   8d030:	b570      	push	{r4, r5, r6, lr}
   8d032:	460c      	mov	r4, r1
   8d034:	4603      	mov	r3, r0
   8d036:	2600      	movs	r6, #0
   8d038:	4d07      	ldr	r5, [pc, #28]	; (8d058 <_kill_r+0x28>)
   8d03a:	4620      	mov	r0, r4
   8d03c:	4611      	mov	r1, r2
   8d03e:	461c      	mov	r4, r3
   8d040:	602e      	str	r6, [r5, #0]
   8d042:	f7f9 fbbf 	bl	867c4 <_kill>
   8d046:	1c43      	adds	r3, r0, #1
   8d048:	d000      	beq.n	8d04c <_kill_r+0x1c>
   8d04a:	bd70      	pop	{r4, r5, r6, pc}
   8d04c:	682b      	ldr	r3, [r5, #0]
   8d04e:	2b00      	cmp	r3, #0
   8d050:	d0fb      	beq.n	8d04a <_kill_r+0x1a>
   8d052:	6023      	str	r3, [r4, #0]
   8d054:	bd70      	pop	{r4, r5, r6, pc}
   8d056:	bf00      	nop
   8d058:	20001860 	.word	0x20001860

0008d05c <_getpid_r>:
   8d05c:	f7f9 bbbc 	b.w	867d8 <_getpid>

0008d060 <__aeabi_drsub>:
   8d060:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8d064:	e002      	b.n	8d06c <__adddf3>
   8d066:	bf00      	nop

0008d068 <__aeabi_dsub>:
   8d068:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008d06c <__adddf3>:
   8d06c:	b530      	push	{r4, r5, lr}
   8d06e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8d072:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8d076:	ea94 0f05 	teq	r4, r5
   8d07a:	bf08      	it	eq
   8d07c:	ea90 0f02 	teqeq	r0, r2
   8d080:	bf1f      	itttt	ne
   8d082:	ea54 0c00 	orrsne.w	ip, r4, r0
   8d086:	ea55 0c02 	orrsne.w	ip, r5, r2
   8d08a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8d08e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d092:	f000 80e2 	beq.w	8d25a <__adddf3+0x1ee>
   8d096:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8d09a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8d09e:	bfb8      	it	lt
   8d0a0:	426d      	neglt	r5, r5
   8d0a2:	dd0c      	ble.n	8d0be <__adddf3+0x52>
   8d0a4:	442c      	add	r4, r5
   8d0a6:	ea80 0202 	eor.w	r2, r0, r2
   8d0aa:	ea81 0303 	eor.w	r3, r1, r3
   8d0ae:	ea82 0000 	eor.w	r0, r2, r0
   8d0b2:	ea83 0101 	eor.w	r1, r3, r1
   8d0b6:	ea80 0202 	eor.w	r2, r0, r2
   8d0ba:	ea81 0303 	eor.w	r3, r1, r3
   8d0be:	2d36      	cmp	r5, #54	; 0x36
   8d0c0:	bf88      	it	hi
   8d0c2:	bd30      	pophi	{r4, r5, pc}
   8d0c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d0c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d0cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8d0d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8d0d4:	d002      	beq.n	8d0dc <__adddf3+0x70>
   8d0d6:	4240      	negs	r0, r0
   8d0d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d0dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8d0e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d0e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8d0e8:	d002      	beq.n	8d0f0 <__adddf3+0x84>
   8d0ea:	4252      	negs	r2, r2
   8d0ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8d0f0:	ea94 0f05 	teq	r4, r5
   8d0f4:	f000 80a7 	beq.w	8d246 <__adddf3+0x1da>
   8d0f8:	f1a4 0401 	sub.w	r4, r4, #1
   8d0fc:	f1d5 0e20 	rsbs	lr, r5, #32
   8d100:	db0d      	blt.n	8d11e <__adddf3+0xb2>
   8d102:	fa02 fc0e 	lsl.w	ip, r2, lr
   8d106:	fa22 f205 	lsr.w	r2, r2, r5
   8d10a:	1880      	adds	r0, r0, r2
   8d10c:	f141 0100 	adc.w	r1, r1, #0
   8d110:	fa03 f20e 	lsl.w	r2, r3, lr
   8d114:	1880      	adds	r0, r0, r2
   8d116:	fa43 f305 	asr.w	r3, r3, r5
   8d11a:	4159      	adcs	r1, r3
   8d11c:	e00e      	b.n	8d13c <__adddf3+0xd0>
   8d11e:	f1a5 0520 	sub.w	r5, r5, #32
   8d122:	f10e 0e20 	add.w	lr, lr, #32
   8d126:	2a01      	cmp	r2, #1
   8d128:	fa03 fc0e 	lsl.w	ip, r3, lr
   8d12c:	bf28      	it	cs
   8d12e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8d132:	fa43 f305 	asr.w	r3, r3, r5
   8d136:	18c0      	adds	r0, r0, r3
   8d138:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8d13c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d140:	d507      	bpl.n	8d152 <__adddf3+0xe6>
   8d142:	f04f 0e00 	mov.w	lr, #0
   8d146:	f1dc 0c00 	rsbs	ip, ip, #0
   8d14a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8d14e:	eb6e 0101 	sbc.w	r1, lr, r1
   8d152:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8d156:	d31b      	bcc.n	8d190 <__adddf3+0x124>
   8d158:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8d15c:	d30c      	bcc.n	8d178 <__adddf3+0x10c>
   8d15e:	0849      	lsrs	r1, r1, #1
   8d160:	ea5f 0030 	movs.w	r0, r0, rrx
   8d164:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8d168:	f104 0401 	add.w	r4, r4, #1
   8d16c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8d170:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8d174:	f080 809a 	bcs.w	8d2ac <__adddf3+0x240>
   8d178:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8d17c:	bf08      	it	eq
   8d17e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d182:	f150 0000 	adcs.w	r0, r0, #0
   8d186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d18a:	ea41 0105 	orr.w	r1, r1, r5
   8d18e:	bd30      	pop	{r4, r5, pc}
   8d190:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8d194:	4140      	adcs	r0, r0
   8d196:	eb41 0101 	adc.w	r1, r1, r1
   8d19a:	3c01      	subs	r4, #1
   8d19c:	bf28      	it	cs
   8d19e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8d1a2:	d2e9      	bcs.n	8d178 <__adddf3+0x10c>
   8d1a4:	f091 0f00 	teq	r1, #0
   8d1a8:	bf04      	itt	eq
   8d1aa:	4601      	moveq	r1, r0
   8d1ac:	2000      	moveq	r0, #0
   8d1ae:	fab1 f381 	clz	r3, r1
   8d1b2:	bf08      	it	eq
   8d1b4:	3320      	addeq	r3, #32
   8d1b6:	f1a3 030b 	sub.w	r3, r3, #11
   8d1ba:	f1b3 0220 	subs.w	r2, r3, #32
   8d1be:	da0c      	bge.n	8d1da <__adddf3+0x16e>
   8d1c0:	320c      	adds	r2, #12
   8d1c2:	dd08      	ble.n	8d1d6 <__adddf3+0x16a>
   8d1c4:	f102 0c14 	add.w	ip, r2, #20
   8d1c8:	f1c2 020c 	rsb	r2, r2, #12
   8d1cc:	fa01 f00c 	lsl.w	r0, r1, ip
   8d1d0:	fa21 f102 	lsr.w	r1, r1, r2
   8d1d4:	e00c      	b.n	8d1f0 <__adddf3+0x184>
   8d1d6:	f102 0214 	add.w	r2, r2, #20
   8d1da:	bfd8      	it	le
   8d1dc:	f1c2 0c20 	rsble	ip, r2, #32
   8d1e0:	fa01 f102 	lsl.w	r1, r1, r2
   8d1e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   8d1e8:	bfdc      	itt	le
   8d1ea:	ea41 010c 	orrle.w	r1, r1, ip
   8d1ee:	4090      	lslle	r0, r2
   8d1f0:	1ae4      	subs	r4, r4, r3
   8d1f2:	bfa2      	ittt	ge
   8d1f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8d1f8:	4329      	orrge	r1, r5
   8d1fa:	bd30      	popge	{r4, r5, pc}
   8d1fc:	ea6f 0404 	mvn.w	r4, r4
   8d200:	3c1f      	subs	r4, #31
   8d202:	da1c      	bge.n	8d23e <__adddf3+0x1d2>
   8d204:	340c      	adds	r4, #12
   8d206:	dc0e      	bgt.n	8d226 <__adddf3+0x1ba>
   8d208:	f104 0414 	add.w	r4, r4, #20
   8d20c:	f1c4 0220 	rsb	r2, r4, #32
   8d210:	fa20 f004 	lsr.w	r0, r0, r4
   8d214:	fa01 f302 	lsl.w	r3, r1, r2
   8d218:	ea40 0003 	orr.w	r0, r0, r3
   8d21c:	fa21 f304 	lsr.w	r3, r1, r4
   8d220:	ea45 0103 	orr.w	r1, r5, r3
   8d224:	bd30      	pop	{r4, r5, pc}
   8d226:	f1c4 040c 	rsb	r4, r4, #12
   8d22a:	f1c4 0220 	rsb	r2, r4, #32
   8d22e:	fa20 f002 	lsr.w	r0, r0, r2
   8d232:	fa01 f304 	lsl.w	r3, r1, r4
   8d236:	ea40 0003 	orr.w	r0, r0, r3
   8d23a:	4629      	mov	r1, r5
   8d23c:	bd30      	pop	{r4, r5, pc}
   8d23e:	fa21 f004 	lsr.w	r0, r1, r4
   8d242:	4629      	mov	r1, r5
   8d244:	bd30      	pop	{r4, r5, pc}
   8d246:	f094 0f00 	teq	r4, #0
   8d24a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d24e:	bf06      	itte	eq
   8d250:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d254:	3401      	addeq	r4, #1
   8d256:	3d01      	subne	r5, #1
   8d258:	e74e      	b.n	8d0f8 <__adddf3+0x8c>
   8d25a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d25e:	bf18      	it	ne
   8d260:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d264:	d029      	beq.n	8d2ba <__adddf3+0x24e>
   8d266:	ea94 0f05 	teq	r4, r5
   8d26a:	bf08      	it	eq
   8d26c:	ea90 0f02 	teqeq	r0, r2
   8d270:	d005      	beq.n	8d27e <__adddf3+0x212>
   8d272:	ea54 0c00 	orrs.w	ip, r4, r0
   8d276:	bf04      	itt	eq
   8d278:	4619      	moveq	r1, r3
   8d27a:	4610      	moveq	r0, r2
   8d27c:	bd30      	pop	{r4, r5, pc}
   8d27e:	ea91 0f03 	teq	r1, r3
   8d282:	bf1e      	ittt	ne
   8d284:	2100      	movne	r1, #0
   8d286:	2000      	movne	r0, #0
   8d288:	bd30      	popne	{r4, r5, pc}
   8d28a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d28e:	d105      	bne.n	8d29c <__adddf3+0x230>
   8d290:	0040      	lsls	r0, r0, #1
   8d292:	4149      	adcs	r1, r1
   8d294:	bf28      	it	cs
   8d296:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d29a:	bd30      	pop	{r4, r5, pc}
   8d29c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d2a0:	bf3c      	itt	cc
   8d2a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d2a6:	bd30      	popcc	{r4, r5, pc}
   8d2a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d2ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d2b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d2b4:	f04f 0000 	mov.w	r0, #0
   8d2b8:	bd30      	pop	{r4, r5, pc}
   8d2ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d2be:	bf1a      	itte	ne
   8d2c0:	4619      	movne	r1, r3
   8d2c2:	4610      	movne	r0, r2
   8d2c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d2c8:	bf1c      	itt	ne
   8d2ca:	460b      	movne	r3, r1
   8d2cc:	4602      	movne	r2, r0
   8d2ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d2d2:	bf06      	itte	eq
   8d2d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d2d8:	ea91 0f03 	teqeq	r1, r3
   8d2dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d2e0:	bd30      	pop	{r4, r5, pc}
   8d2e2:	bf00      	nop

0008d2e4 <__aeabi_ui2d>:
   8d2e4:	f090 0f00 	teq	r0, #0
   8d2e8:	bf04      	itt	eq
   8d2ea:	2100      	moveq	r1, #0
   8d2ec:	4770      	bxeq	lr
   8d2ee:	b530      	push	{r4, r5, lr}
   8d2f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d2f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d2f8:	f04f 0500 	mov.w	r5, #0
   8d2fc:	f04f 0100 	mov.w	r1, #0
   8d300:	e750      	b.n	8d1a4 <__adddf3+0x138>
   8d302:	bf00      	nop

0008d304 <__aeabi_i2d>:
   8d304:	f090 0f00 	teq	r0, #0
   8d308:	bf04      	itt	eq
   8d30a:	2100      	moveq	r1, #0
   8d30c:	4770      	bxeq	lr
   8d30e:	b530      	push	{r4, r5, lr}
   8d310:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d314:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d318:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d31c:	bf48      	it	mi
   8d31e:	4240      	negmi	r0, r0
   8d320:	f04f 0100 	mov.w	r1, #0
   8d324:	e73e      	b.n	8d1a4 <__adddf3+0x138>
   8d326:	bf00      	nop

0008d328 <__aeabi_f2d>:
   8d328:	0042      	lsls	r2, r0, #1
   8d32a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d32e:	ea4f 0131 	mov.w	r1, r1, rrx
   8d332:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d336:	bf1f      	itttt	ne
   8d338:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d33c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d340:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d344:	4770      	bxne	lr
   8d346:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8d34a:	bf08      	it	eq
   8d34c:	4770      	bxeq	lr
   8d34e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8d352:	bf04      	itt	eq
   8d354:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8d358:	4770      	bxeq	lr
   8d35a:	b530      	push	{r4, r5, lr}
   8d35c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d368:	e71c      	b.n	8d1a4 <__adddf3+0x138>
   8d36a:	bf00      	nop

0008d36c <__aeabi_ul2d>:
   8d36c:	ea50 0201 	orrs.w	r2, r0, r1
   8d370:	bf08      	it	eq
   8d372:	4770      	bxeq	lr
   8d374:	b530      	push	{r4, r5, lr}
   8d376:	f04f 0500 	mov.w	r5, #0
   8d37a:	e00a      	b.n	8d392 <__aeabi_l2d+0x16>

0008d37c <__aeabi_l2d>:
   8d37c:	ea50 0201 	orrs.w	r2, r0, r1
   8d380:	bf08      	it	eq
   8d382:	4770      	bxeq	lr
   8d384:	b530      	push	{r4, r5, lr}
   8d386:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d38a:	d502      	bpl.n	8d392 <__aeabi_l2d+0x16>
   8d38c:	4240      	negs	r0, r0
   8d38e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d392:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d396:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d39a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d39e:	f43f aed8 	beq.w	8d152 <__adddf3+0xe6>
   8d3a2:	f04f 0203 	mov.w	r2, #3
   8d3a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3aa:	bf18      	it	ne
   8d3ac:	3203      	addne	r2, #3
   8d3ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3b2:	bf18      	it	ne
   8d3b4:	3203      	addne	r2, #3
   8d3b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d3ba:	f1c2 0320 	rsb	r3, r2, #32
   8d3be:	fa00 fc03 	lsl.w	ip, r0, r3
   8d3c2:	fa20 f002 	lsr.w	r0, r0, r2
   8d3c6:	fa01 fe03 	lsl.w	lr, r1, r3
   8d3ca:	ea40 000e 	orr.w	r0, r0, lr
   8d3ce:	fa21 f102 	lsr.w	r1, r1, r2
   8d3d2:	4414      	add	r4, r2
   8d3d4:	e6bd      	b.n	8d152 <__adddf3+0xe6>
   8d3d6:	bf00      	nop

0008d3d8 <__aeabi_dmul>:
   8d3d8:	b570      	push	{r4, r5, r6, lr}
   8d3da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d3de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d3e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d3e6:	bf1d      	ittte	ne
   8d3e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d3ec:	ea94 0f0c 	teqne	r4, ip
   8d3f0:	ea95 0f0c 	teqne	r5, ip
   8d3f4:	f000 f8de 	bleq	8d5b4 <__aeabi_dmul+0x1dc>
   8d3f8:	442c      	add	r4, r5
   8d3fa:	ea81 0603 	eor.w	r6, r1, r3
   8d3fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d402:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d406:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d40a:	bf18      	it	ne
   8d40c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d418:	d038      	beq.n	8d48c <__aeabi_dmul+0xb4>
   8d41a:	fba0 ce02 	umull	ip, lr, r0, r2
   8d41e:	f04f 0500 	mov.w	r5, #0
   8d422:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d426:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d42a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d42e:	f04f 0600 	mov.w	r6, #0
   8d432:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d436:	f09c 0f00 	teq	ip, #0
   8d43a:	bf18      	it	ne
   8d43c:	f04e 0e01 	orrne.w	lr, lr, #1
   8d440:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d444:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d448:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d44c:	d204      	bcs.n	8d458 <__aeabi_dmul+0x80>
   8d44e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d452:	416d      	adcs	r5, r5
   8d454:	eb46 0606 	adc.w	r6, r6, r6
   8d458:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d45c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d460:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d464:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d468:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d46c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d470:	bf88      	it	hi
   8d472:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d476:	d81e      	bhi.n	8d4b6 <__aeabi_dmul+0xde>
   8d478:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d47c:	bf08      	it	eq
   8d47e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d482:	f150 0000 	adcs.w	r0, r0, #0
   8d486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d48a:	bd70      	pop	{r4, r5, r6, pc}
   8d48c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d490:	ea46 0101 	orr.w	r1, r6, r1
   8d494:	ea40 0002 	orr.w	r0, r0, r2
   8d498:	ea81 0103 	eor.w	r1, r1, r3
   8d49c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d4a0:	bfc2      	ittt	gt
   8d4a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d4a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d4aa:	bd70      	popgt	{r4, r5, r6, pc}
   8d4ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d4b0:	f04f 0e00 	mov.w	lr, #0
   8d4b4:	3c01      	subs	r4, #1
   8d4b6:	f300 80ab 	bgt.w	8d610 <__aeabi_dmul+0x238>
   8d4ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d4be:	bfde      	ittt	le
   8d4c0:	2000      	movle	r0, #0
   8d4c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d4c6:	bd70      	pople	{r4, r5, r6, pc}
   8d4c8:	f1c4 0400 	rsb	r4, r4, #0
   8d4cc:	3c20      	subs	r4, #32
   8d4ce:	da35      	bge.n	8d53c <__aeabi_dmul+0x164>
   8d4d0:	340c      	adds	r4, #12
   8d4d2:	dc1b      	bgt.n	8d50c <__aeabi_dmul+0x134>
   8d4d4:	f104 0414 	add.w	r4, r4, #20
   8d4d8:	f1c4 0520 	rsb	r5, r4, #32
   8d4dc:	fa00 f305 	lsl.w	r3, r0, r5
   8d4e0:	fa20 f004 	lsr.w	r0, r0, r4
   8d4e4:	fa01 f205 	lsl.w	r2, r1, r5
   8d4e8:	ea40 0002 	orr.w	r0, r0, r2
   8d4ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d4f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d4f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d4f8:	fa21 f604 	lsr.w	r6, r1, r4
   8d4fc:	eb42 0106 	adc.w	r1, r2, r6
   8d500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d504:	bf08      	it	eq
   8d506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d50a:	bd70      	pop	{r4, r5, r6, pc}
   8d50c:	f1c4 040c 	rsb	r4, r4, #12
   8d510:	f1c4 0520 	rsb	r5, r4, #32
   8d514:	fa00 f304 	lsl.w	r3, r0, r4
   8d518:	fa20 f005 	lsr.w	r0, r0, r5
   8d51c:	fa01 f204 	lsl.w	r2, r1, r4
   8d520:	ea40 0002 	orr.w	r0, r0, r2
   8d524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d52c:	f141 0100 	adc.w	r1, r1, #0
   8d530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d534:	bf08      	it	eq
   8d536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d53a:	bd70      	pop	{r4, r5, r6, pc}
   8d53c:	f1c4 0520 	rsb	r5, r4, #32
   8d540:	fa00 f205 	lsl.w	r2, r0, r5
   8d544:	ea4e 0e02 	orr.w	lr, lr, r2
   8d548:	fa20 f304 	lsr.w	r3, r0, r4
   8d54c:	fa01 f205 	lsl.w	r2, r1, r5
   8d550:	ea43 0302 	orr.w	r3, r3, r2
   8d554:	fa21 f004 	lsr.w	r0, r1, r4
   8d558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d55c:	fa21 f204 	lsr.w	r2, r1, r4
   8d560:	ea20 0002 	bic.w	r0, r0, r2
   8d564:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d568:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d56c:	bf08      	it	eq
   8d56e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d572:	bd70      	pop	{r4, r5, r6, pc}
   8d574:	f094 0f00 	teq	r4, #0
   8d578:	d10f      	bne.n	8d59a <__aeabi_dmul+0x1c2>
   8d57a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d57e:	0040      	lsls	r0, r0, #1
   8d580:	eb41 0101 	adc.w	r1, r1, r1
   8d584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d588:	bf08      	it	eq
   8d58a:	3c01      	subeq	r4, #1
   8d58c:	d0f7      	beq.n	8d57e <__aeabi_dmul+0x1a6>
   8d58e:	ea41 0106 	orr.w	r1, r1, r6
   8d592:	f095 0f00 	teq	r5, #0
   8d596:	bf18      	it	ne
   8d598:	4770      	bxne	lr
   8d59a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d59e:	0052      	lsls	r2, r2, #1
   8d5a0:	eb43 0303 	adc.w	r3, r3, r3
   8d5a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d5a8:	bf08      	it	eq
   8d5aa:	3d01      	subeq	r5, #1
   8d5ac:	d0f7      	beq.n	8d59e <__aeabi_dmul+0x1c6>
   8d5ae:	ea43 0306 	orr.w	r3, r3, r6
   8d5b2:	4770      	bx	lr
   8d5b4:	ea94 0f0c 	teq	r4, ip
   8d5b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d5bc:	bf18      	it	ne
   8d5be:	ea95 0f0c 	teqne	r5, ip
   8d5c2:	d00c      	beq.n	8d5de <__aeabi_dmul+0x206>
   8d5c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d5c8:	bf18      	it	ne
   8d5ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d5ce:	d1d1      	bne.n	8d574 <__aeabi_dmul+0x19c>
   8d5d0:	ea81 0103 	eor.w	r1, r1, r3
   8d5d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d5d8:	f04f 0000 	mov.w	r0, #0
   8d5dc:	bd70      	pop	{r4, r5, r6, pc}
   8d5de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d5e2:	bf06      	itte	eq
   8d5e4:	4610      	moveq	r0, r2
   8d5e6:	4619      	moveq	r1, r3
   8d5e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d5ec:	d019      	beq.n	8d622 <__aeabi_dmul+0x24a>
   8d5ee:	ea94 0f0c 	teq	r4, ip
   8d5f2:	d102      	bne.n	8d5fa <__aeabi_dmul+0x222>
   8d5f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d5f8:	d113      	bne.n	8d622 <__aeabi_dmul+0x24a>
   8d5fa:	ea95 0f0c 	teq	r5, ip
   8d5fe:	d105      	bne.n	8d60c <__aeabi_dmul+0x234>
   8d600:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d604:	bf1c      	itt	ne
   8d606:	4610      	movne	r0, r2
   8d608:	4619      	movne	r1, r3
   8d60a:	d10a      	bne.n	8d622 <__aeabi_dmul+0x24a>
   8d60c:	ea81 0103 	eor.w	r1, r1, r3
   8d610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d614:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d61c:	f04f 0000 	mov.w	r0, #0
   8d620:	bd70      	pop	{r4, r5, r6, pc}
   8d622:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d626:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d62a:	bd70      	pop	{r4, r5, r6, pc}

0008d62c <__aeabi_ddiv>:
   8d62c:	b570      	push	{r4, r5, r6, lr}
   8d62e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d63a:	bf1d      	ittte	ne
   8d63c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d640:	ea94 0f0c 	teqne	r4, ip
   8d644:	ea95 0f0c 	teqne	r5, ip
   8d648:	f000 f8a7 	bleq	8d79a <__aeabi_ddiv+0x16e>
   8d64c:	eba4 0405 	sub.w	r4, r4, r5
   8d650:	ea81 0e03 	eor.w	lr, r1, r3
   8d654:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d658:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d65c:	f000 8088 	beq.w	8d770 <__aeabi_ddiv+0x144>
   8d660:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d664:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d668:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d66c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d670:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d674:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d678:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d67c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d680:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d684:	429d      	cmp	r5, r3
   8d686:	bf08      	it	eq
   8d688:	4296      	cmpeq	r6, r2
   8d68a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d68e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d692:	d202      	bcs.n	8d69a <__aeabi_ddiv+0x6e>
   8d694:	085b      	lsrs	r3, r3, #1
   8d696:	ea4f 0232 	mov.w	r2, r2, rrx
   8d69a:	1ab6      	subs	r6, r6, r2
   8d69c:	eb65 0503 	sbc.w	r5, r5, r3
   8d6a0:	085b      	lsrs	r3, r3, #1
   8d6a2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d6aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d6ae:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6b6:	bf22      	ittt	cs
   8d6b8:	1ab6      	subcs	r6, r6, r2
   8d6ba:	4675      	movcs	r5, lr
   8d6bc:	ea40 000c 	orrcs.w	r0, r0, ip
   8d6c0:	085b      	lsrs	r3, r3, #1
   8d6c2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6c6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6ce:	bf22      	ittt	cs
   8d6d0:	1ab6      	subcs	r6, r6, r2
   8d6d2:	4675      	movcs	r5, lr
   8d6d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d6d8:	085b      	lsrs	r3, r3, #1
   8d6da:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6de:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6e6:	bf22      	ittt	cs
   8d6e8:	1ab6      	subcs	r6, r6, r2
   8d6ea:	4675      	movcs	r5, lr
   8d6ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d6f0:	085b      	lsrs	r3, r3, #1
   8d6f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6f6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6fe:	bf22      	ittt	cs
   8d700:	1ab6      	subcs	r6, r6, r2
   8d702:	4675      	movcs	r5, lr
   8d704:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d708:	ea55 0e06 	orrs.w	lr, r5, r6
   8d70c:	d018      	beq.n	8d740 <__aeabi_ddiv+0x114>
   8d70e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d712:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d716:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d71a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d71e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d722:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d726:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d72a:	d1c0      	bne.n	8d6ae <__aeabi_ddiv+0x82>
   8d72c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d730:	d10b      	bne.n	8d74a <__aeabi_ddiv+0x11e>
   8d732:	ea41 0100 	orr.w	r1, r1, r0
   8d736:	f04f 0000 	mov.w	r0, #0
   8d73a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d73e:	e7b6      	b.n	8d6ae <__aeabi_ddiv+0x82>
   8d740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d744:	bf04      	itt	eq
   8d746:	4301      	orreq	r1, r0
   8d748:	2000      	moveq	r0, #0
   8d74a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d74e:	bf88      	it	hi
   8d750:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d754:	f63f aeaf 	bhi.w	8d4b6 <__aeabi_dmul+0xde>
   8d758:	ebb5 0c03 	subs.w	ip, r5, r3
   8d75c:	bf04      	itt	eq
   8d75e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d762:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d766:	f150 0000 	adcs.w	r0, r0, #0
   8d76a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d76e:	bd70      	pop	{r4, r5, r6, pc}
   8d770:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d774:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d778:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d77c:	bfc2      	ittt	gt
   8d77e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d782:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d786:	bd70      	popgt	{r4, r5, r6, pc}
   8d788:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d78c:	f04f 0e00 	mov.w	lr, #0
   8d790:	3c01      	subs	r4, #1
   8d792:	e690      	b.n	8d4b6 <__aeabi_dmul+0xde>
   8d794:	ea45 0e06 	orr.w	lr, r5, r6
   8d798:	e68d      	b.n	8d4b6 <__aeabi_dmul+0xde>
   8d79a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d79e:	ea94 0f0c 	teq	r4, ip
   8d7a2:	bf08      	it	eq
   8d7a4:	ea95 0f0c 	teqeq	r5, ip
   8d7a8:	f43f af3b 	beq.w	8d622 <__aeabi_dmul+0x24a>
   8d7ac:	ea94 0f0c 	teq	r4, ip
   8d7b0:	d10a      	bne.n	8d7c8 <__aeabi_ddiv+0x19c>
   8d7b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d7b6:	f47f af34 	bne.w	8d622 <__aeabi_dmul+0x24a>
   8d7ba:	ea95 0f0c 	teq	r5, ip
   8d7be:	f47f af25 	bne.w	8d60c <__aeabi_dmul+0x234>
   8d7c2:	4610      	mov	r0, r2
   8d7c4:	4619      	mov	r1, r3
   8d7c6:	e72c      	b.n	8d622 <__aeabi_dmul+0x24a>
   8d7c8:	ea95 0f0c 	teq	r5, ip
   8d7cc:	d106      	bne.n	8d7dc <__aeabi_ddiv+0x1b0>
   8d7ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d7d2:	f43f aefd 	beq.w	8d5d0 <__aeabi_dmul+0x1f8>
   8d7d6:	4610      	mov	r0, r2
   8d7d8:	4619      	mov	r1, r3
   8d7da:	e722      	b.n	8d622 <__aeabi_dmul+0x24a>
   8d7dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d7e0:	bf18      	it	ne
   8d7e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d7e6:	f47f aec5 	bne.w	8d574 <__aeabi_dmul+0x19c>
   8d7ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d7ee:	f47f af0d 	bne.w	8d60c <__aeabi_dmul+0x234>
   8d7f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d7f6:	f47f aeeb 	bne.w	8d5d0 <__aeabi_dmul+0x1f8>
   8d7fa:	e712      	b.n	8d622 <__aeabi_dmul+0x24a>

0008d7fc <__gedf2>:
   8d7fc:	f04f 3cff 	mov.w	ip, #4294967295
   8d800:	e006      	b.n	8d810 <__cmpdf2+0x4>
   8d802:	bf00      	nop

0008d804 <__ledf2>:
   8d804:	f04f 0c01 	mov.w	ip, #1
   8d808:	e002      	b.n	8d810 <__cmpdf2+0x4>
   8d80a:	bf00      	nop

0008d80c <__cmpdf2>:
   8d80c:	f04f 0c01 	mov.w	ip, #1
   8d810:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d81c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d820:	bf18      	it	ne
   8d822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d826:	d01b      	beq.n	8d860 <__cmpdf2+0x54>
   8d828:	b001      	add	sp, #4
   8d82a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d82e:	bf0c      	ite	eq
   8d830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d834:	ea91 0f03 	teqne	r1, r3
   8d838:	bf02      	ittt	eq
   8d83a:	ea90 0f02 	teqeq	r0, r2
   8d83e:	2000      	moveq	r0, #0
   8d840:	4770      	bxeq	lr
   8d842:	f110 0f00 	cmn.w	r0, #0
   8d846:	ea91 0f03 	teq	r1, r3
   8d84a:	bf58      	it	pl
   8d84c:	4299      	cmppl	r1, r3
   8d84e:	bf08      	it	eq
   8d850:	4290      	cmpeq	r0, r2
   8d852:	bf2c      	ite	cs
   8d854:	17d8      	asrcs	r0, r3, #31
   8d856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d85a:	f040 0001 	orr.w	r0, r0, #1
   8d85e:	4770      	bx	lr
   8d860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d868:	d102      	bne.n	8d870 <__cmpdf2+0x64>
   8d86a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d86e:	d107      	bne.n	8d880 <__cmpdf2+0x74>
   8d870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d878:	d1d6      	bne.n	8d828 <__cmpdf2+0x1c>
   8d87a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d87e:	d0d3      	beq.n	8d828 <__cmpdf2+0x1c>
   8d880:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d884:	4770      	bx	lr
   8d886:	bf00      	nop

0008d888 <__aeabi_cdrcmple>:
   8d888:	4684      	mov	ip, r0
   8d88a:	4610      	mov	r0, r2
   8d88c:	4662      	mov	r2, ip
   8d88e:	468c      	mov	ip, r1
   8d890:	4619      	mov	r1, r3
   8d892:	4663      	mov	r3, ip
   8d894:	e000      	b.n	8d898 <__aeabi_cdcmpeq>
   8d896:	bf00      	nop

0008d898 <__aeabi_cdcmpeq>:
   8d898:	b501      	push	{r0, lr}
   8d89a:	f7ff ffb7 	bl	8d80c <__cmpdf2>
   8d89e:	2800      	cmp	r0, #0
   8d8a0:	bf48      	it	mi
   8d8a2:	f110 0f00 	cmnmi.w	r0, #0
   8d8a6:	bd01      	pop	{r0, pc}

0008d8a8 <__aeabi_dcmpeq>:
   8d8a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8ac:	f7ff fff4 	bl	8d898 <__aeabi_cdcmpeq>
   8d8b0:	bf0c      	ite	eq
   8d8b2:	2001      	moveq	r0, #1
   8d8b4:	2000      	movne	r0, #0
   8d8b6:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8ba:	bf00      	nop

0008d8bc <__aeabi_dcmplt>:
   8d8bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8c0:	f7ff ffea 	bl	8d898 <__aeabi_cdcmpeq>
   8d8c4:	bf34      	ite	cc
   8d8c6:	2001      	movcc	r0, #1
   8d8c8:	2000      	movcs	r0, #0
   8d8ca:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8ce:	bf00      	nop

0008d8d0 <__aeabi_dcmple>:
   8d8d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8d4:	f7ff ffe0 	bl	8d898 <__aeabi_cdcmpeq>
   8d8d8:	bf94      	ite	ls
   8d8da:	2001      	movls	r0, #1
   8d8dc:	2000      	movhi	r0, #0
   8d8de:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8e2:	bf00      	nop

0008d8e4 <__aeabi_dcmpge>:
   8d8e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8e8:	f7ff ffce 	bl	8d888 <__aeabi_cdrcmple>
   8d8ec:	bf94      	ite	ls
   8d8ee:	2001      	movls	r0, #1
   8d8f0:	2000      	movhi	r0, #0
   8d8f2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8f6:	bf00      	nop

0008d8f8 <__aeabi_dcmpgt>:
   8d8f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8fc:	f7ff ffc4 	bl	8d888 <__aeabi_cdrcmple>
   8d900:	bf34      	ite	cc
   8d902:	2001      	movcc	r0, #1
   8d904:	2000      	movcs	r0, #0
   8d906:	f85d fb08 	ldr.w	pc, [sp], #8
   8d90a:	bf00      	nop

0008d90c <__aeabi_dcmpun>:
   8d90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d914:	d102      	bne.n	8d91c <__aeabi_dcmpun+0x10>
   8d916:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d91a:	d10a      	bne.n	8d932 <__aeabi_dcmpun+0x26>
   8d91c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d924:	d102      	bne.n	8d92c <__aeabi_dcmpun+0x20>
   8d926:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d92a:	d102      	bne.n	8d932 <__aeabi_dcmpun+0x26>
   8d92c:	f04f 0000 	mov.w	r0, #0
   8d930:	4770      	bx	lr
   8d932:	f04f 0001 	mov.w	r0, #1
   8d936:	4770      	bx	lr

0008d938 <__aeabi_d2iz>:
   8d938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d93c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d940:	d215      	bcs.n	8d96e <__aeabi_d2iz+0x36>
   8d942:	d511      	bpl.n	8d968 <__aeabi_d2iz+0x30>
   8d944:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d948:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d94c:	d912      	bls.n	8d974 <__aeabi_d2iz+0x3c>
   8d94e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d956:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d95a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d95e:	fa23 f002 	lsr.w	r0, r3, r2
   8d962:	bf18      	it	ne
   8d964:	4240      	negne	r0, r0
   8d966:	4770      	bx	lr
   8d968:	f04f 0000 	mov.w	r0, #0
   8d96c:	4770      	bx	lr
   8d96e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d972:	d105      	bne.n	8d980 <__aeabi_d2iz+0x48>
   8d974:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d978:	bf08      	it	eq
   8d97a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d97e:	4770      	bx	lr
   8d980:	f04f 0000 	mov.w	r0, #0
   8d984:	4770      	bx	lr
   8d986:	bf00      	nop
   8d988:	78383025 	.word	0x78383025
   8d98c:	00000000 	.word	0x00000000
   8d990:	00000000 	.word	0x00000000
   8d994:	00000000 	.word	0x00000000
   8d998:	aaaaaa00 	.word	0xaaaaaa00
   8d99c:	aaaaaaaa 	.word	0xaaaaaaaa
   8d9a0:	eeeeeeaa 	.word	0xeeeeeeaa
   8d9a4:	eeeeeeee 	.word	0xeeeeeeee
   8d9a8:	fffffeee 	.word	0xfffffeee
   8d9ac:	ffffffff 	.word	0xffffffff
   8d9b0:	ffffffff 	.word	0xffffffff
   8d9b4:	dfbf7fff 	.word	0xdfbf7fff
   8d9b8:	fdfbf7ef 	.word	0xfdfbf7ef
   8d9bc:	dfbf7efc 	.word	0xdfbf7efc
   8d9c0:	fdfbf7ef 	.word	0xfdfbf7ef
   8d9c4:	0000007e 	.word	0x0000007e

0008d9c8 <LED_DESCRIPTOR>:
   8d9c8:	0000001d 00000001 0000001f 00000001     ................

0008d9d8 <BOS_DESC>:
   8d9d8:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8d9e8:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8d9f8:	00000000 74697845 20676e69 68746977     ....Exiting with
   8da08:	61747320 20737574 0a2e6425 00000000      status %d......

0008da18 <_global_impure_ptr>:
   8da18:	20000440 00464e49 00666e69 004e414e     @.. INF.inf.NAN.
   8da28:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8da38:	66656463 00000000 33323130 37363534     cdef....01234567
   8da48:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8da58:	0000296c 00000030                       l)..0...

0008da60 <blanks.7335>:
   8da60:	20202020 20202020 20202020 20202020                     

0008da70 <zeroes.7336>:
   8da70:	30303030 30303030 30303030 30303030     0000000000000000

0008da80 <blanks.7328>:
   8da80:	20202020 20202020 20202020 20202020                     

0008da90 <zeroes.7329>:
   8da90:	30303030 30303030 30303030 30303030     0000000000000000
   8daa0:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8dab0:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8dac0:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8dad0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8dae0:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8daf0:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8db00:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8db10:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8db20:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8db30:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8db40:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8db50:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8db60:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8db70:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8db80:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8db90:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8dba0:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8dbb0:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8dbc0:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008dbd0 <__mprec_bigtens>:
   8dbd0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8dbe0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8dbf0:	7f73bf3c 75154fdd                       <.s..O.u

0008dbf8 <__mprec_tens>:
   8dbf8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8dc08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8dc18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8dc28:	00000000 412e8480 00000000 416312d0     .......A......cA
   8dc38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8dc48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8dc58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8dc68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8dc78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8dc88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dc98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8dca8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dcb8:	79d99db4 44ea7843                       ...yCx.D

0008dcc0 <p05.6122>:
   8dcc0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8dcd0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8dce0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8dcf0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8dd00:	2520656e 25732564 00000a73              ne %d%s%s...

0008dd0c <_ctype_>:
   8dd0c:	20202000 20202020 28282020 20282828     .         ((((( 
   8dd1c:	20202020 20202020 20202020 20202020                     
   8dd2c:	10108820 10101010 10101010 10101010      ...............
   8dd3c:	04040410 04040404 10040404 10101010     ................
   8dd4c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8dd5c:	01010101 01010101 01010101 10101010     ................
   8dd6c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8dd7c:	02020202 02020202 02020202 10101010     ................
   8dd8c:	00000020 00000000 00000000 00000000      ...............
   8dd9c:	00000000 00000000 00000000 00000000     ................
   8ddac:	00000000 00000000 00000000 00000000     ................
   8ddbc:	00000000 00000000 00000000 00000000     ................
   8ddcc:	00000000 00000000 00000000 00000000     ................
   8dddc:	00000000 00000000 00000000 00000000     ................
   8ddec:	00000000 00000000 00000000 00000000     ................
   8ddfc:	00000000 00000000 00000000 00000000     ................
   8de0c:	00000000                                ....

0008de10 <_init>:
   8de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de12:	bf00      	nop
   8de14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de16:	bc08      	pop	{r3}
   8de18:	469e      	mov	lr, r3
   8de1a:	4770      	bx	lr

0008de1c <__init_array_start>:
   8de1c:	00089c69 	.word	0x00089c69

0008de20 <__frame_dummy_init_array_entry>:
   8de20:	000800e1                                ....

0008de24 <_fini>:
   8de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de26:	bf00      	nop
   8de28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de2a:	bc08      	pop	{r3}
   8de2c:	469e      	mov	lr, r3
   8de2e:	4770      	bx	lr

0008de30 <__do_global_dtors_aux_fini_array_entry>:
   8de30:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000438 	.word	0x20000438
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <udi_api_vendor>:
20000284:	00084dbd 00084dfd 00084e19 00084e6d     .M...M...N..mN..
20000294:	00000000                                ....

20000298 <udc_string_desc_languageid>:
20000298:	04090304                                ....

2000029c <udc_string_manufacturer_name>:
2000029c:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002ac:	636e4920 0000002e                        Inc....

200002b4 <udc_string_product_name>:
200002b4:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002c4:	00796b73                                sky.

200002c8 <udc_string_desc>:
200002c8:	00000300 00000000 00000000 00000000     ................
200002d8:	00000000 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000                                ....

2000030c <winusb_20_desc>:
2000030c:	0000000a 06030000 0014009e 49570003     ..............WI
2000031c:	4253554e 00000000 00000000 00800000     NUSB............
2000032c:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
2000033c:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
2000034c:	00420053 00000000 00000000 004e0000     S.B...........N.
2000035c:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
2000036c:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
2000037c:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
2000038c:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
2000039c:	00610031 00650064 007d0039               1.a.d.e.9.}...

200003aa <g_interrupt_enabled>:
200003aa:	                                         ..

200003ac <udc_device_desc>:
200003ac:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003bc:	00000103                                ....

200003c0 <udc_device_qual>:
200003c0:	0200060a 40000000 00000001              .......@....

200003cc <udc_desc_fs>:
200003cc:	00200209 80000101 000409fa ffff0200     .. .............
200003dc:	050700ff 00400281 02050700 00004002     ......@......@..

200003ec <udc_desc_hs>:
200003ec:	00200209 80000101 000409fa ffff0200     .. .............
200003fc:	050700ff 02000281 02050700 00020002     ................

2000040c <udi_apis>:
2000040c:	20000284                                ... 

20000410 <udc_config_lsfs>:
20000410:	200003cc 2000040c                       ... ... 

20000418 <udc_config_hs>:
20000418:	200003ec 2000040c                       ... ... 

20000420 <udc_config>:
20000420:	200003ac 20000410 200003ac 200003c0     ... ... ... ... 
20000430:	20000418 00000000                       ... ....

20000438 <SystemCoreClock>:
20000438:	003d0900                                ..=.

2000043c <_impure_ptr>:
2000043c:	20000440                                @.. 

20000440 <impure_data>:
20000440:	00000000 2000072c 20000794 200007fc     ....,.. ... ... 
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000001 00000000     ................
200004f0:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000 00000000 00000000     ................
200007e0:	00000000 00000000 00000000 00000000     ................
200007f0:	00000000 00000000 00000000 00000000     ................
20000800:	00000000 00000000 00000000 00000000     ................
20000810:	00000000 00000000 00000000 00000000     ................
20000820:	00000000 00000000 00000000 00000000     ................
20000830:	00000000 00000000 00000000 00000000     ................
20000840:	00000000 00000000 00000000 00000000     ................
20000850:	00000000 00000000 00000000 00000000     ................
20000860:	00000000 00000000                       ........

20000868 <__atexit_recursive_mutex>:
20000868:	2000183c                                <.. 

2000086c <__global_locale>:
2000086c:	00000043 00000000 00000000 00000000     C...............
2000087c:	00000000 00000000 00000000 00000000     ................
2000088c:	00000043 00000000 00000000 00000000     C...............
2000089c:	00000000 00000000 00000000 00000000     ................
200008ac:	00000043 00000000 00000000 00000000     C...............
200008bc:	00000000 00000000 00000000 00000000     ................
200008cc:	00000043 00000000 00000000 00000000     C...............
200008dc:	00000000 00000000 00000000 00000000     ................
200008ec:	00000043 00000000 00000000 00000000     C...............
200008fc:	00000000 00000000 00000000 00000000     ................
2000090c:	00000043 00000000 00000000 00000000     C...............
2000091c:	00000000 00000000 00000000 00000000     ................
2000092c:	00000043 00000000 00000000 00000000     C...............
2000093c:	00000000 00000000 00000000 00000000     ................
2000094c:	0008cc89 0008bc51 00000000 0008dd0c     ....Q...........
2000095c:	0008db4c 0008dcd8 0008dcd8 0008dcd8     L...............
2000096c:	0008dcd8 0008dcd8 0008dcd8 0008dcd8     ................
2000097c:	0008dcd8 0008dcd8 ffffffff ffffffff     ................
2000098c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000099c:	00000000 00000000 00000000 00000000     ................
200009ac:	00000000 00000000 53410000 00494943     ..........ASCII.
200009bc:	00000000 00000000 00000000 00000000     ................
200009cc:	00000000 00000000 00000000              ............

200009d8 <__malloc_av_>:
200009d8:	00000000 00000000 200009d8 200009d8     ........... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0                       ... ... 

20000de0 <__malloc_sbrk_base>:
20000de0:	ffffffff                                ....

20000de4 <__malloc_trim_threshold>:
20000de4:	00020000                                ....
