
ChipWhisperer-Husky-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ef24  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ef24  0008ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000eb0  20000000  0008ef2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000015b4  20000eb0  0008fddc  00020eb0  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020eb0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020ed9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c1f0  00000000  00000000  00020f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000597a  00000000  00000000  0004d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000a9ca  00000000  00000000  00052a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001448  00000000  00000000  0005d459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001228  00000000  00000000  0005e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001bbfb  00000000  00000000  0005fac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0001ad36  00000000  00000000  0007b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005d26b  00000000  00000000  000963fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00006638  00000000  00000000  000f3668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 a1 39 08 00 ed 25 08 00 ed 25 08 00     .@. .9...%...%..
   80010:	ed 25 08 00 ed 25 08 00 ed 25 08 00 00 00 00 00     .%...%...%......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 ed 25 08 00     .............%..
   80030:	ed 25 08 00 00 00 00 00 ed 25 08 00 ed 25 08 00     .%.......%...%..
   80040:	ed 25 08 00 ed 25 08 00 ed 25 08 00 ed 25 08 00     .%...%...%...%..
   80050:	ed 25 08 00 ed 25 08 00 ed 25 08 00 ed 25 08 00     .%...%...%...%..
   80060:	ed 25 08 00 ed 25 08 00 e5 2d 08 00 fd 2d 08 00     .%...%...-...-..
   80070:	ed 25 08 00 19 22 08 00 3d 22 08 00 61 22 08 00     .%..."..="..a"..
   80080:	ed 25 08 00 ed 25 08 00 ed 25 08 00 ed 25 08 00     .%...%...%...%..
   80090:	ed 25 08 00 ed 25 08 00 ed 25 08 00 ed 25 08 00     .%...%...%...%..
   800a0:	ed 25 08 00 ed 25 08 00 ed 25 08 00 ed 25 08 00     .%...%...%...%..
   800b0:	ed 25 08 00 75 5d 08 00 ed 25 08 00                 .%..u]...%..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000eb0 	.word	0x20000eb0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008ef2c 	.word	0x0008ef2c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000eb4 	.word	0x20000eb4
   800f8:	0008ef2c 	.word	0x0008ef2c

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00082f15 	.word	0x00082f15
   80174:	00082f81 	.word	0x00082f81
   80178:	00082ff5 	.word	0x00082ff5
   8017c:	00083045 	.word	0x00083045

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00082f4d 	.word	0x00082f4d
   801fc:	00082fdd 	.word	0x00082fdd
   80200:	00083091 	.word	0x00083091

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00083101 	.word	0x00083101
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00083119 	.word	0x00083119
   80378:	0008314d 	.word	0x0008314d

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	000830c1 	.word	0x000830c1
   80450:	000830a9 	.word	0x000830a9
   80454:	000802a5 	.word	0x000802a5
   80458:	00083079 	.word	0x00083079
   8045c:	00080311 	.word	0x00080311

00080460 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	2201      	movs	r2, #1
   8046c:	601a      	str	r2, [r3, #0]
}
   8046e:	bf00      	nop
   80470:	370c      	adds	r7, #12
   80472:	46bd      	mov	sp, r7
   80474:	bc80      	pop	{r7}
   80476:	4770      	bx	lr

00080478 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80478:	b480      	push	{r7}
   8047a:	b083      	sub	sp, #12
   8047c:	af00      	add	r7, sp, #0
   8047e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80480:	687b      	ldr	r3, [r7, #4]
   80482:	685b      	ldr	r3, [r3, #4]
   80484:	f043 0201 	orr.w	r2, r3, #1
   80488:	687b      	ldr	r3, [r7, #4]
   8048a:	605a      	str	r2, [r3, #4]
}
   8048c:	bf00      	nop
   8048e:	370c      	adds	r7, #12
   80490:	46bd      	mov	sp, r7
   80492:	bc80      	pop	{r7}
   80494:	4770      	bx	lr
   80496:	0000      	movs	r0, r0

00080498 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80498:	b580      	push	{r7, lr}
   8049a:	b082      	sub	sp, #8
   8049c:	af00      	add	r7, sp, #0
   8049e:	4603      	mov	r3, r0
   804a0:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   804a2:	b672      	cpsid	i
}
   804a4:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804a6:	f3bf 8f5f 	dmb	sy
}
   804aa:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   804ac:	4b05      	ldr	r3, [pc, #20]	; (804c4 <sleepmgr_sleep+0x2c>)
   804ae:	2200      	movs	r2, #0
   804b0:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   804b2:	79fb      	ldrb	r3, [r7, #7]
   804b4:	4618      	mov	r0, r3
   804b6:	4b04      	ldr	r3, [pc, #16]	; (804c8 <sleepmgr_sleep+0x30>)
   804b8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   804ba:	bf00      	nop
   804bc:	3708      	adds	r7, #8
   804be:	46bd      	mov	sp, r7
   804c0:	bd80      	pop	{r7, pc}
   804c2:	bf00      	nop
   804c4:	20000284 	.word	0x20000284
   804c8:	000832fd 	.word	0x000832fd

000804cc <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   804cc:	b480      	push	{r7}
   804ce:	b083      	sub	sp, #12
   804d0:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804d2:	2300      	movs	r3, #0
   804d4:	71fb      	strb	r3, [r7, #7]
   804d6:	e006      	b.n	804e6 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804d8:	79fb      	ldrb	r3, [r7, #7]
   804da:	4a08      	ldr	r2, [pc, #32]	; (804fc <sleepmgr_init+0x30>)
   804dc:	2100      	movs	r1, #0
   804de:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804e0:	79fb      	ldrb	r3, [r7, #7]
   804e2:	3301      	adds	r3, #1
   804e4:	71fb      	strb	r3, [r7, #7]
   804e6:	79fb      	ldrb	r3, [r7, #7]
   804e8:	2b04      	cmp	r3, #4
   804ea:	d9f5      	bls.n	804d8 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804ec:	4b03      	ldr	r3, [pc, #12]	; (804fc <sleepmgr_init+0x30>)
   804ee:	2201      	movs	r2, #1
   804f0:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804f2:	bf00      	nop
   804f4:	370c      	adds	r7, #12
   804f6:	46bd      	mov	sp, r7
   804f8:	bc80      	pop	{r7}
   804fa:	4770      	bx	lr
   804fc:	20002414 	.word	0x20002414

00080500 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80500:	b480      	push	{r7}
   80502:	b083      	sub	sp, #12
   80504:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   80506:	2300      	movs	r3, #0
   80508:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   8050a:	4b09      	ldr	r3, [pc, #36]	; (80530 <sleepmgr_get_sleep_mode+0x30>)
   8050c:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   8050e:	e005      	b.n	8051c <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   80510:	683b      	ldr	r3, [r7, #0]
   80512:	3301      	adds	r3, #1
   80514:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   80516:	79fb      	ldrb	r3, [r7, #7]
   80518:	3301      	adds	r3, #1
   8051a:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   8051c:	683b      	ldr	r3, [r7, #0]
   8051e:	781b      	ldrb	r3, [r3, #0]
   80520:	2b00      	cmp	r3, #0
   80522:	d0f5      	beq.n	80510 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   80524:	79fb      	ldrb	r3, [r7, #7]
}
   80526:	4618      	mov	r0, r3
   80528:	370c      	adds	r7, #12
   8052a:	46bd      	mov	sp, r7
   8052c:	bc80      	pop	{r7}
   8052e:	4770      	bx	lr
   80530:	20002414 	.word	0x20002414

00080534 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   8053a:	4b0b      	ldr	r3, [pc, #44]	; (80568 <sleepmgr_enter_sleep+0x34>)
   8053c:	4798      	blx	r3
   8053e:	4603      	mov	r3, r0
   80540:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   80542:	79fb      	ldrb	r3, [r7, #7]
   80544:	2b00      	cmp	r3, #0
   80546:	d108      	bne.n	8055a <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80548:	4b08      	ldr	r3, [pc, #32]	; (8056c <sleepmgr_enter_sleep+0x38>)
   8054a:	2201      	movs	r2, #1
   8054c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8054e:	f3bf 8f5f 	dmb	sy
}
   80552:	bf00      	nop
  __ASM volatile ("cpsie i");
   80554:	b662      	cpsie	i
}
   80556:	bf00      	nop
		return;
   80558:	e003      	b.n	80562 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   8055a:	79fb      	ldrb	r3, [r7, #7]
   8055c:	4618      	mov	r0, r3
   8055e:	4b04      	ldr	r3, [pc, #16]	; (80570 <sleepmgr_enter_sleep+0x3c>)
   80560:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80562:	3708      	adds	r7, #8
   80564:	46bd      	mov	sp, r7
   80566:	bd80      	pop	{r7, pc}
   80568:	00080501 	.word	0x00080501
   8056c:	20000284 	.word	0x20000284
   80570:	00080499 	.word	0x00080499

00080574 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80574:	b480      	push	{r7}
   80576:	b083      	sub	sp, #12
   80578:	af00      	add	r7, sp, #0
   8057a:	6078      	str	r0, [r7, #4]
   8057c:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8057e:	687b      	ldr	r3, [r7, #4]
   80580:	2200      	movs	r2, #0
   80582:	601a      	str	r2, [r3, #0]
}
   80584:	bf00      	nop
   80586:	370c      	adds	r7, #12
   80588:	46bd      	mov	sp, r7
   8058a:	bc80      	pop	{r7}
   8058c:	4770      	bx	lr
   8058e:	0000      	movs	r0, r0

00080590 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80590:	b480      	push	{r7}
   80592:	b083      	sub	sp, #12
   80594:	af00      	add	r7, sp, #0
   80596:	6078      	str	r0, [r7, #4]
   80598:	460b      	mov	r3, r1
   8059a:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	681b      	ldr	r3, [r3, #0]
   805a0:	f023 0207 	bic.w	r2, r3, #7
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   805a8:	78fb      	ldrb	r3, [r7, #3]
   805aa:	2b0a      	cmp	r3, #10
   805ac:	d839      	bhi.n	80622 <genclk_config_set_source+0x92>
   805ae:	a201      	add	r2, pc, #4	; (adr r2, 805b4 <genclk_config_set_source+0x24>)
   805b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   805b4:	000805e1 	.word	0x000805e1
   805b8:	000805e1 	.word	0x000805e1
   805bc:	000805e1 	.word	0x000805e1
   805c0:	000805eb 	.word	0x000805eb
   805c4:	000805eb 	.word	0x000805eb
   805c8:	000805eb 	.word	0x000805eb
   805cc:	000805eb 	.word	0x000805eb
   805d0:	000805eb 	.word	0x000805eb
   805d4:	000805f9 	.word	0x000805f9
   805d8:	00080607 	.word	0x00080607
   805dc:	00080615 	.word	0x00080615
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	681a      	ldr	r2, [r3, #0]
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	e01b      	b.n	80622 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805ea:	687b      	ldr	r3, [r7, #4]
   805ec:	681b      	ldr	r3, [r3, #0]
   805ee:	f043 0201 	orr.w	r2, r3, #1
   805f2:	687b      	ldr	r3, [r7, #4]
   805f4:	601a      	str	r2, [r3, #0]
		break;
   805f6:	e014      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805f8:	687b      	ldr	r3, [r7, #4]
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	f043 0202 	orr.w	r2, r3, #2
   80600:	687b      	ldr	r3, [r7, #4]
   80602:	601a      	str	r2, [r3, #0]
		break;
   80604:	e00d      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	681b      	ldr	r3, [r3, #0]
   8060a:	f043 0203 	orr.w	r2, r3, #3
   8060e:	687b      	ldr	r3, [r7, #4]
   80610:	601a      	str	r2, [r3, #0]
		break;
   80612:	e006      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   80614:	687b      	ldr	r3, [r7, #4]
   80616:	681b      	ldr	r3, [r3, #0]
   80618:	f043 0204 	orr.w	r2, r3, #4
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	601a      	str	r2, [r3, #0]
		break;
   80620:	bf00      	nop
	}
}
   80622:	bf00      	nop
   80624:	370c      	adds	r7, #12
   80626:	46bd      	mov	sp, r7
   80628:	bc80      	pop	{r7}
   8062a:	4770      	bx	lr

0008062c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   8062c:	b480      	push	{r7}
   8062e:	b083      	sub	sp, #12
   80630:	af00      	add	r7, sp, #0
   80632:	6078      	str	r0, [r7, #4]
   80634:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	681b      	ldr	r3, [r3, #0]
   8063a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   80642:	687b      	ldr	r3, [r7, #4]
   80644:	681a      	ldr	r2, [r3, #0]
   80646:	683b      	ldr	r3, [r7, #0]
   80648:	431a      	orrs	r2, r3
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	601a      	str	r2, [r3, #0]
}
   8064e:	bf00      	nop
   80650:	370c      	adds	r7, #12
   80652:	46bd      	mov	sp, r7
   80654:	bc80      	pop	{r7}
   80656:	4770      	bx	lr

00080658 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80658:	b580      	push	{r7, lr}
   8065a:	b082      	sub	sp, #8
   8065c:	af00      	add	r7, sp, #0
   8065e:	6078      	str	r0, [r7, #4]
   80660:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80662:	4907      	ldr	r1, [pc, #28]	; (80680 <genclk_enable+0x28>)
   80664:	687b      	ldr	r3, [r7, #4]
   80666:	681a      	ldr	r2, [r3, #0]
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	3310      	adds	r3, #16
   8066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80670:	6838      	ldr	r0, [r7, #0]
   80672:	4b04      	ldr	r3, [pc, #16]	; (80684 <genclk_enable+0x2c>)
   80674:	4798      	blx	r3
}
   80676:	bf00      	nop
   80678:	3708      	adds	r7, #8
   8067a:	46bd      	mov	sp, r7
   8067c:	bd80      	pop	{r7, pc}
   8067e:	bf00      	nop
   80680:	400e0400 	.word	0x400e0400
   80684:	000831fd 	.word	0x000831fd

00080688 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80688:	b580      	push	{r7, lr}
   8068a:	b082      	sub	sp, #8
   8068c:	af00      	add	r7, sp, #0
   8068e:	4603      	mov	r3, r0
   80690:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80692:	79fb      	ldrb	r3, [r7, #7]
   80694:	2b0a      	cmp	r3, #10
   80696:	f200 80a2 	bhi.w	807de <genclk_enable_source+0x156>
   8069a:	a201      	add	r2, pc, #4	; (adr r2, 806a0 <genclk_enable_source+0x18>)
   8069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   806a0:	000806cd 	.word	0x000806cd
   806a4:	000806ef 	.word	0x000806ef
   806a8:	0008070f 	.word	0x0008070f
   806ac:	0008072f 	.word	0x0008072f
   806b0:	0008074f 	.word	0x0008074f
   806b4:	0008076f 	.word	0x0008076f
   806b8:	0008078f 	.word	0x0008078f
   806bc:	000807af 	.word	0x000807af
   806c0:	000807cf 	.word	0x000807cf
   806c4:	000807d7 	.word	0x000807d7
   806c8:	000807df 	.word	0x000807df
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   806cc:	2000      	movs	r0, #0
   806ce:	4b4e      	ldr	r3, [pc, #312]	; (80808 <genclk_enable_source+0x180>)
   806d0:	4798      	blx	r3
   806d2:	4603      	mov	r3, r0
   806d4:	f083 0301 	eor.w	r3, r3, #1
   806d8:	b2db      	uxtb	r3, r3
   806da:	2b00      	cmp	r3, #0
   806dc:	f000 8081 	beq.w	807e2 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806e0:	2000      	movs	r0, #0
   806e2:	4b4a      	ldr	r3, [pc, #296]	; (8080c <genclk_enable_source+0x184>)
   806e4:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806e6:	2000      	movs	r0, #0
   806e8:	4b49      	ldr	r3, [pc, #292]	; (80810 <genclk_enable_source+0x188>)
   806ea:	4798      	blx	r3
		}
		break;
   806ec:	e079      	b.n	807e2 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806ee:	2001      	movs	r0, #1
   806f0:	4b45      	ldr	r3, [pc, #276]	; (80808 <genclk_enable_source+0x180>)
   806f2:	4798      	blx	r3
   806f4:	4603      	mov	r3, r0
   806f6:	f083 0301 	eor.w	r3, r3, #1
   806fa:	b2db      	uxtb	r3, r3
   806fc:	2b00      	cmp	r3, #0
   806fe:	d072      	beq.n	807e6 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80700:	2001      	movs	r0, #1
   80702:	4b42      	ldr	r3, [pc, #264]	; (8080c <genclk_enable_source+0x184>)
   80704:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   80706:	2001      	movs	r0, #1
   80708:	4b41      	ldr	r3, [pc, #260]	; (80810 <genclk_enable_source+0x188>)
   8070a:	4798      	blx	r3
		}
		break;
   8070c:	e06b      	b.n	807e6 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   8070e:	2002      	movs	r0, #2
   80710:	4b3d      	ldr	r3, [pc, #244]	; (80808 <genclk_enable_source+0x180>)
   80712:	4798      	blx	r3
   80714:	4603      	mov	r3, r0
   80716:	f083 0301 	eor.w	r3, r3, #1
   8071a:	b2db      	uxtb	r3, r3
   8071c:	2b00      	cmp	r3, #0
   8071e:	d064      	beq.n	807ea <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   80720:	2002      	movs	r0, #2
   80722:	4b3a      	ldr	r3, [pc, #232]	; (8080c <genclk_enable_source+0x184>)
   80724:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   80726:	2002      	movs	r0, #2
   80728:	4b39      	ldr	r3, [pc, #228]	; (80810 <genclk_enable_source+0x188>)
   8072a:	4798      	blx	r3
		}
		break;
   8072c:	e05d      	b.n	807ea <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   8072e:	2003      	movs	r0, #3
   80730:	4b35      	ldr	r3, [pc, #212]	; (80808 <genclk_enable_source+0x180>)
   80732:	4798      	blx	r3
   80734:	4603      	mov	r3, r0
   80736:	f083 0301 	eor.w	r3, r3, #1
   8073a:	b2db      	uxtb	r3, r3
   8073c:	2b00      	cmp	r3, #0
   8073e:	d056      	beq.n	807ee <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80740:	2003      	movs	r0, #3
   80742:	4b32      	ldr	r3, [pc, #200]	; (8080c <genclk_enable_source+0x184>)
   80744:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   80746:	2003      	movs	r0, #3
   80748:	4b31      	ldr	r3, [pc, #196]	; (80810 <genclk_enable_source+0x188>)
   8074a:	4798      	blx	r3
		}
		break;
   8074c:	e04f      	b.n	807ee <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   8074e:	2004      	movs	r0, #4
   80750:	4b2d      	ldr	r3, [pc, #180]	; (80808 <genclk_enable_source+0x180>)
   80752:	4798      	blx	r3
   80754:	4603      	mov	r3, r0
   80756:	f083 0301 	eor.w	r3, r3, #1
   8075a:	b2db      	uxtb	r3, r3
   8075c:	2b00      	cmp	r3, #0
   8075e:	d048      	beq.n	807f2 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80760:	2004      	movs	r0, #4
   80762:	4b2a      	ldr	r3, [pc, #168]	; (8080c <genclk_enable_source+0x184>)
   80764:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80766:	2004      	movs	r0, #4
   80768:	4b29      	ldr	r3, [pc, #164]	; (80810 <genclk_enable_source+0x188>)
   8076a:	4798      	blx	r3
		}
		break;
   8076c:	e041      	b.n	807f2 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8076e:	2005      	movs	r0, #5
   80770:	4b25      	ldr	r3, [pc, #148]	; (80808 <genclk_enable_source+0x180>)
   80772:	4798      	blx	r3
   80774:	4603      	mov	r3, r0
   80776:	f083 0301 	eor.w	r3, r3, #1
   8077a:	b2db      	uxtb	r3, r3
   8077c:	2b00      	cmp	r3, #0
   8077e:	d03a      	beq.n	807f6 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80780:	2005      	movs	r0, #5
   80782:	4b22      	ldr	r3, [pc, #136]	; (8080c <genclk_enable_source+0x184>)
   80784:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80786:	2005      	movs	r0, #5
   80788:	4b21      	ldr	r3, [pc, #132]	; (80810 <genclk_enable_source+0x188>)
   8078a:	4798      	blx	r3
		}
		break;
   8078c:	e033      	b.n	807f6 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8078e:	2006      	movs	r0, #6
   80790:	4b1d      	ldr	r3, [pc, #116]	; (80808 <genclk_enable_source+0x180>)
   80792:	4798      	blx	r3
   80794:	4603      	mov	r3, r0
   80796:	f083 0301 	eor.w	r3, r3, #1
   8079a:	b2db      	uxtb	r3, r3
   8079c:	2b00      	cmp	r3, #0
   8079e:	d02c      	beq.n	807fa <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   807a0:	2006      	movs	r0, #6
   807a2:	4b1a      	ldr	r3, [pc, #104]	; (8080c <genclk_enable_source+0x184>)
   807a4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   807a6:	2006      	movs	r0, #6
   807a8:	4b19      	ldr	r3, [pc, #100]	; (80810 <genclk_enable_source+0x188>)
   807aa:	4798      	blx	r3
		}
		break;
   807ac:	e025      	b.n	807fa <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   807ae:	2007      	movs	r0, #7
   807b0:	4b15      	ldr	r3, [pc, #84]	; (80808 <genclk_enable_source+0x180>)
   807b2:	4798      	blx	r3
   807b4:	4603      	mov	r3, r0
   807b6:	f083 0301 	eor.w	r3, r3, #1
   807ba:	b2db      	uxtb	r3, r3
   807bc:	2b00      	cmp	r3, #0
   807be:	d01e      	beq.n	807fe <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   807c0:	2007      	movs	r0, #7
   807c2:	4b12      	ldr	r3, [pc, #72]	; (8080c <genclk_enable_source+0x184>)
   807c4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   807c6:	2007      	movs	r0, #7
   807c8:	4b11      	ldr	r3, [pc, #68]	; (80810 <genclk_enable_source+0x188>)
   807ca:	4798      	blx	r3
		}
		break;
   807cc:	e017      	b.n	807fe <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   807ce:	2000      	movs	r0, #0
   807d0:	4b10      	ldr	r3, [pc, #64]	; (80814 <genclk_enable_source+0x18c>)
   807d2:	4798      	blx	r3
		break;
   807d4:	e014      	b.n	80800 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   807d6:	2001      	movs	r0, #1
   807d8:	4b0e      	ldr	r3, [pc, #56]	; (80814 <genclk_enable_source+0x18c>)
   807da:	4798      	blx	r3
		break;
   807dc:	e010      	b.n	80800 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807de:	bf00      	nop
   807e0:	e00e      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e2:	bf00      	nop
   807e4:	e00c      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e6:	bf00      	nop
   807e8:	e00a      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ea:	bf00      	nop
   807ec:	e008      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ee:	bf00      	nop
   807f0:	e006      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f2:	bf00      	nop
   807f4:	e004      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f6:	bf00      	nop
   807f8:	e002      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fa:	bf00      	nop
   807fc:	e000      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fe:	bf00      	nop
	}
}
   80800:	bf00      	nop
   80802:	3708      	adds	r7, #8
   80804:	46bd      	mov	sp, r7
   80806:	bd80      	pop	{r7, pc}
   80808:	00080181 	.word	0x00080181
   8080c:	000800fd 	.word	0x000800fd
   80810:	00080275 	.word	0x00080275
   80814:	000803b5 	.word	0x000803b5

00080818 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   80818:	b580      	push	{r7, lr}
   8081a:	af00      	add	r7, sp, #0
    board_init();
   8081c:	4b3f      	ldr	r3, [pc, #252]	; (8091c <phywhisperer_setup_pins+0x104>)
   8081e:	4798      	blx	r3

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   80820:	4b3f      	ldr	r3, [pc, #252]	; (80920 <phywhisperer_setup_pins+0x108>)
   80822:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   80824:	2009      	movs	r0, #9
   80826:	4b3f      	ldr	r3, [pc, #252]	; (80924 <phywhisperer_setup_pins+0x10c>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	493f      	ldr	r1, [pc, #252]	; (80928 <phywhisperer_setup_pins+0x110>)
   8082c:	2029      	movs	r0, #41	; 0x29
   8082e:	4b3f      	ldr	r3, [pc, #252]	; (8092c <phywhisperer_setup_pins+0x114>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80832:	493d      	ldr	r1, [pc, #244]	; (80928 <phywhisperer_setup_pins+0x110>)
   80834:	202a      	movs	r0, #42	; 0x2a
   80836:	4b3d      	ldr	r3, [pc, #244]	; (8092c <phywhisperer_setup_pins+0x114>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8083a:	493b      	ldr	r1, [pc, #236]	; (80928 <phywhisperer_setup_pins+0x110>)
   8083c:	202b      	movs	r0, #43	; 0x2b
   8083e:	4b3b      	ldr	r3, [pc, #236]	; (8092c <phywhisperer_setup_pins+0x114>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80842:	4939      	ldr	r1, [pc, #228]	; (80928 <phywhisperer_setup_pins+0x110>)
   80844:	202c      	movs	r0, #44	; 0x2c
   80846:	4b39      	ldr	r3, [pc, #228]	; (8092c <phywhisperer_setup_pins+0x114>)
   80848:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8084a:	4937      	ldr	r1, [pc, #220]	; (80928 <phywhisperer_setup_pins+0x110>)
   8084c:	202d      	movs	r0, #45	; 0x2d
   8084e:	4b37      	ldr	r3, [pc, #220]	; (8092c <phywhisperer_setup_pins+0x114>)
   80850:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80852:	4935      	ldr	r1, [pc, #212]	; (80928 <phywhisperer_setup_pins+0x110>)
   80854:	202e      	movs	r0, #46	; 0x2e
   80856:	4b35      	ldr	r3, [pc, #212]	; (8092c <phywhisperer_setup_pins+0x114>)
   80858:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8085a:	4933      	ldr	r1, [pc, #204]	; (80928 <phywhisperer_setup_pins+0x110>)
   8085c:	202f      	movs	r0, #47	; 0x2f
   8085e:	4b33      	ldr	r3, [pc, #204]	; (8092c <phywhisperer_setup_pins+0x114>)
   80860:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80862:	4931      	ldr	r1, [pc, #196]	; (80928 <phywhisperer_setup_pins+0x110>)
   80864:	2030      	movs	r0, #48	; 0x30
   80866:	4b31      	ldr	r3, [pc, #196]	; (8092c <phywhisperer_setup_pins+0x114>)
   80868:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8086a:	492f      	ldr	r1, [pc, #188]	; (80928 <phywhisperer_setup_pins+0x110>)
   8086c:	2033      	movs	r0, #51	; 0x33
   8086e:	4b2f      	ldr	r3, [pc, #188]	; (8092c <phywhisperer_setup_pins+0x114>)
   80870:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80872:	492d      	ldr	r1, [pc, #180]	; (80928 <phywhisperer_setup_pins+0x110>)
   80874:	2037      	movs	r0, #55	; 0x37
   80876:	4b2d      	ldr	r3, [pc, #180]	; (8092c <phywhisperer_setup_pins+0x114>)
   80878:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8087a:	492b      	ldr	r1, [pc, #172]	; (80928 <phywhisperer_setup_pins+0x110>)
   8087c:	2034      	movs	r0, #52	; 0x34
   8087e:	4b2b      	ldr	r3, [pc, #172]	; (8092c <phywhisperer_setup_pins+0x114>)
   80880:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80882:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80886:	f240 11bf 	movw	r1, #447	; 0x1bf
   8088a:	4829      	ldr	r0, [pc, #164]	; (80930 <phywhisperer_setup_pins+0x118>)
   8088c:	4b29      	ldr	r3, [pc, #164]	; (80934 <phywhisperer_setup_pins+0x11c>)
   8088e:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80890:	f240 11bf 	movw	r1, #447	; 0x1bf
   80894:	4826      	ldr	r0, [pc, #152]	; (80930 <phywhisperer_setup_pins+0x118>)
   80896:	4b28      	ldr	r3, [pc, #160]	; (80938 <phywhisperer_setup_pins+0x120>)
   80898:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
   8089a:	4928      	ldr	r1, [pc, #160]	; (8093c <phywhisperer_setup_pins+0x124>)
   8089c:	2027      	movs	r0, #39	; 0x27
   8089e:	4b23      	ldr	r3, [pc, #140]	; (8092c <phywhisperer_setup_pins+0x114>)
   808a0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   808a2:	4926      	ldr	r1, [pc, #152]	; (8093c <phywhisperer_setup_pins+0x124>)
   808a4:	2028      	movs	r0, #40	; 0x28
   808a6:	4b21      	ldr	r3, [pc, #132]	; (8092c <phywhisperer_setup_pins+0x114>)
   808a8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
   808aa:	4924      	ldr	r1, [pc, #144]	; (8093c <phywhisperer_setup_pins+0x124>)
   808ac:	2020      	movs	r0, #32
   808ae:	4b1f      	ldr	r3, [pc, #124]	; (8092c <phywhisperer_setup_pins+0x114>)
   808b0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
   808b2:	4922      	ldr	r1, [pc, #136]	; (8093c <phywhisperer_setup_pins+0x124>)
   808b4:	2021      	movs	r0, #33	; 0x21
   808b6:	4b1d      	ldr	r3, [pc, #116]	; (8092c <phywhisperer_setup_pins+0x114>)
   808b8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
   808ba:	4920      	ldr	r1, [pc, #128]	; (8093c <phywhisperer_setup_pins+0x124>)
   808bc:	2022      	movs	r0, #34	; 0x22
   808be:	4b1b      	ldr	r3, [pc, #108]	; (8092c <phywhisperer_setup_pins+0x114>)
   808c0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
   808c2:	491e      	ldr	r1, [pc, #120]	; (8093c <phywhisperer_setup_pins+0x124>)
   808c4:	2023      	movs	r0, #35	; 0x23
   808c6:	4b19      	ldr	r3, [pc, #100]	; (8092c <phywhisperer_setup_pins+0x114>)
   808c8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
   808ca:	491c      	ldr	r1, [pc, #112]	; (8093c <phywhisperer_setup_pins+0x124>)
   808cc:	2024      	movs	r0, #36	; 0x24
   808ce:	4b17      	ldr	r3, [pc, #92]	; (8092c <phywhisperer_setup_pins+0x114>)
   808d0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
   808d2:	491a      	ldr	r1, [pc, #104]	; (8093c <phywhisperer_setup_pins+0x124>)
   808d4:	2025      	movs	r0, #37	; 0x25
   808d6:	4b15      	ldr	r3, [pc, #84]	; (8092c <phywhisperer_setup_pins+0x114>)
   808d8:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   808da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808de:	2026      	movs	r0, #38	; 0x26
   808e0:	4b12      	ldr	r3, [pc, #72]	; (8092c <phywhisperer_setup_pins+0x114>)
   808e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   808e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e8:	2031      	movs	r0, #49	; 0x31
   808ea:	4b10      	ldr	r3, [pc, #64]	; (8092c <phywhisperer_setup_pins+0x114>)
   808ec:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   808ee:	2200      	movs	r2, #0
   808f0:	2100      	movs	r1, #0
   808f2:	4813      	ldr	r0, [pc, #76]	; (80940 <phywhisperer_setup_pins+0x128>)
   808f4:	4b13      	ldr	r3, [pc, #76]	; (80944 <phywhisperer_setup_pins+0x12c>)
   808f6:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(0)
                         | SMC_SETUP_NRD_SETUP(0)
                         | SMC_SETUP_NCS_RD_SETUP(0));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
   808f8:	2200      	movs	r2, #0
   808fa:	2100      	movs	r1, #0
   808fc:	4810      	ldr	r0, [pc, #64]	; (80940 <phywhisperer_setup_pins+0x128>)
   808fe:	4b12      	ldr	r3, [pc, #72]	; (80948 <phywhisperer_setup_pins+0x130>)
   80900:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(0)
                         | SMC_PULSE_NRD_PULSE(0)
                         | SMC_PULSE_NCS_RD_PULSE(0));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
   80902:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80906:	2100      	movs	r1, #0
   80908:	480d      	ldr	r0, [pc, #52]	; (80940 <phywhisperer_setup_pins+0x128>)
   8090a:	4b10      	ldr	r3, [pc, #64]	; (8094c <phywhisperer_setup_pins+0x134>)
   8090c:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(1));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   8090e:	2203      	movs	r2, #3
   80910:	2100      	movs	r1, #0
   80912:	480b      	ldr	r0, [pc, #44]	; (80940 <phywhisperer_setup_pins+0x128>)
   80914:	4b0e      	ldr	r3, [pc, #56]	; (80950 <phywhisperer_setup_pins+0x138>)
   80916:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80918:	bf00      	nop
   8091a:	bd80      	pop	{r7, pc}
   8091c:	000826e9 	.word	0x000826e9
   80920:	000819f1 	.word	0x000819f1
   80924:	00083165 	.word	0x00083165
   80928:	08000001 	.word	0x08000001
   8092c:	00082b01 	.word	0x00082b01
   80930:	400e0e00 	.word	0x400e0e00
   80934:	00082c31 	.word	0x00082c31
   80938:	00082a0d 	.word	0x00082a0d
   8093c:	10000001 	.word	0x10000001
   80940:	400e0000 	.word	0x400e0000
   80944:	00083755 	.word	0x00083755
   80948:	0008377f 	.word	0x0008377f
   8094c:	000837a9 	.word	0x000837a9
   80950:	000837d3 	.word	0x000837d3

00080954 <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80954:	b580      	push	{r7, lr}
   80956:	b086      	sub	sp, #24
   80958:	af00      	add	r7, sp, #0
   8095a:	60f8      	str	r0, [r7, #12]
   8095c:	460b      	mov	r3, r1
   8095e:	607a      	str	r2, [r7, #4]
   80960:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80962:	f107 0314 	add.w	r3, r7, #20
   80966:	68f9      	ldr	r1, [r7, #12]
   80968:	4618      	mov	r0, r3
   8096a:	4b0e      	ldr	r3, [pc, #56]	; (809a4 <genclk_enable_config+0x50>)
   8096c:	4798      	blx	r3
    genclk_enable_source(src);
   8096e:	7afb      	ldrb	r3, [r7, #11]
   80970:	4618      	mov	r0, r3
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <genclk_enable_config+0x54>)
   80974:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80976:	7afa      	ldrb	r2, [r7, #11]
   80978:	f107 0314 	add.w	r3, r7, #20
   8097c:	4611      	mov	r1, r2
   8097e:	4618      	mov	r0, r3
   80980:	4b0a      	ldr	r3, [pc, #40]	; (809ac <genclk_enable_config+0x58>)
   80982:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80984:	f107 0314 	add.w	r3, r7, #20
   80988:	6879      	ldr	r1, [r7, #4]
   8098a:	4618      	mov	r0, r3
   8098c:	4b08      	ldr	r3, [pc, #32]	; (809b0 <genclk_enable_config+0x5c>)
   8098e:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80990:	f107 0314 	add.w	r3, r7, #20
   80994:	68f9      	ldr	r1, [r7, #12]
   80996:	4618      	mov	r0, r3
   80998:	4b06      	ldr	r3, [pc, #24]	; (809b4 <genclk_enable_config+0x60>)
   8099a:	4798      	blx	r3
}
   8099c:	bf00      	nop
   8099e:	3718      	adds	r7, #24
   809a0:	46bd      	mov	sp, r7
   809a2:	bd80      	pop	{r7, pc}
   809a4:	00080575 	.word	0x00080575
   809a8:	00080689 	.word	0x00080689
   809ac:	00080591 	.word	0x00080591
   809b0:	0008062d 	.word	0x0008062d
   809b4:	00080659 	.word	0x00080659

000809b8 <enable_spi>:

#define ADC_SPI_CS PIO_PA3_IDX
#define ADC_RESET PIO_PA4_IDX

void enable_spi(void)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	b084      	sub	sp, #16
   809bc:	af00      	add	r7, sp, #0
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   809be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809c2:	200d      	movs	r0, #13
   809c4:	4b2d      	ldr	r3, [pc, #180]	; (80a7c <enable_spi+0xc4>)
   809c6:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   809c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809cc:	200e      	movs	r0, #14
   809ce:	4b2b      	ldr	r3, [pc, #172]	; (80a7c <enable_spi+0xc4>)
   809d0:	4798      	blx	r3
    gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   809d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809d6:	200f      	movs	r0, #15
   809d8:	4b28      	ldr	r3, [pc, #160]	; (80a7c <enable_spi+0xc4>)
   809da:	4798      	blx	r3
    gpio_configure_pin(ADC_SPI_CS, SPI_CS_FLAGS);
   809dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809e0:	2003      	movs	r0, #3
   809e2:	4b26      	ldr	r3, [pc, #152]	; (80a7c <enable_spi+0xc4>)
   809e4:	4798      	blx	r3
    gpio_set_pin_high(ADC_SPI_CS);
   809e6:	2003      	movs	r0, #3
   809e8:	4b25      	ldr	r3, [pc, #148]	; (80a80 <enable_spi+0xc8>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(ADC_RESET, SPI_CS_FLAGS);
   809ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809f0:	2004      	movs	r0, #4
   809f2:	4b22      	ldr	r3, [pc, #136]	; (80a7c <enable_spi+0xc4>)
   809f4:	4798      	blx	r3
    // gpio_set_pin_low(ADC_RESET);
    gpio_set_pin_high(ADC_RESET);
   809f6:	2004      	movs	r0, #4
   809f8:	4b21      	ldr	r3, [pc, #132]	; (80a80 <enable_spi+0xc8>)
   809fa:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   809fc:	2300      	movs	r3, #0
   809fe:	60bb      	str	r3, [r7, #8]
   80a00:	e002      	b.n	80a08 <enable_spi+0x50>
   80a02:	68bb      	ldr	r3, [r7, #8]
   80a04:	3301      	adds	r3, #1
   80a06:	60bb      	str	r3, [r7, #8]
   80a08:	68bb      	ldr	r3, [r7, #8]
   80a0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80a0e:	d3f8      	bcc.n	80a02 <enable_spi+0x4a>
    gpio_set_pin_low(ADC_RESET);
   80a10:	2004      	movs	r0, #4
   80a12:	4b1c      	ldr	r3, [pc, #112]	; (80a84 <enable_spi+0xcc>)
   80a14:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   80a16:	2300      	movs	r3, #0
   80a18:	607b      	str	r3, [r7, #4]
   80a1a:	e002      	b.n	80a22 <enable_spi+0x6a>
   80a1c:	687b      	ldr	r3, [r7, #4]
   80a1e:	3301      	adds	r3, #1
   80a20:	607b      	str	r3, [r7, #4]
   80a22:	687b      	ldr	r3, [r7, #4]
   80a24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80a28:	d3f8      	bcc.n	80a1c <enable_spi+0x64>

    uint32_t baud;
    spi_enable_clock(SPI);
   80a2a:	4817      	ldr	r0, [pc, #92]	; (80a88 <enable_spi+0xd0>)
   80a2c:	4b17      	ldr	r3, [pc, #92]	; (80a8c <enable_spi+0xd4>)
   80a2e:	4798      	blx	r3
    int16_t div = spi_calc_baudrate_div(960E3, 96E6); //960kHz
   80a30:	4917      	ldr	r1, [pc, #92]	; (80a90 <enable_spi+0xd8>)
   80a32:	4818      	ldr	r0, [pc, #96]	; (80a94 <enable_spi+0xdc>)
   80a34:	4b18      	ldr	r3, [pc, #96]	; (80a98 <enable_spi+0xe0>)
   80a36:	4798      	blx	r3
   80a38:	4603      	mov	r3, r0
   80a3a:	81fb      	strh	r3, [r7, #14]
    spi_set_baudrate_div(SPI, 0, div);
   80a3c:	89fb      	ldrh	r3, [r7, #14]
   80a3e:	b2db      	uxtb	r3, r3
   80a40:	461a      	mov	r2, r3
   80a42:	2100      	movs	r1, #0
   80a44:	4810      	ldr	r0, [pc, #64]	; (80a88 <enable_spi+0xd0>)
   80a46:	4b15      	ldr	r3, [pc, #84]	; (80a9c <enable_spi+0xe4>)
   80a48:	4798      	blx	r3

    spi_set_master_mode(SPI);
   80a4a:	480f      	ldr	r0, [pc, #60]	; (80a88 <enable_spi+0xd0>)
   80a4c:	4b14      	ldr	r3, [pc, #80]	; (80aa0 <enable_spi+0xe8>)
   80a4e:	4798      	blx	r3
    spi_set_clock_polarity(SPI, 0, 0);
   80a50:	2200      	movs	r2, #0
   80a52:	2100      	movs	r1, #0
   80a54:	480c      	ldr	r0, [pc, #48]	; (80a88 <enable_spi+0xd0>)
   80a56:	4b13      	ldr	r3, [pc, #76]	; (80aa4 <enable_spi+0xec>)
   80a58:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI, 0, 8);
   80a5a:	2208      	movs	r2, #8
   80a5c:	2100      	movs	r1, #0
   80a5e:	480a      	ldr	r0, [pc, #40]	; (80a88 <enable_spi+0xd0>)
   80a60:	4b11      	ldr	r3, [pc, #68]	; (80aa8 <enable_spi+0xf0>)
   80a62:	4798      	blx	r3
    spi_set_clock_phase(SPI, 0, 1);
   80a64:	2201      	movs	r2, #1
   80a66:	2100      	movs	r1, #0
   80a68:	4807      	ldr	r0, [pc, #28]	; (80a88 <enable_spi+0xd0>)
   80a6a:	4b10      	ldr	r3, [pc, #64]	; (80aac <enable_spi+0xf4>)
   80a6c:	4798      	blx	r3

    spi_enable(SPI);
   80a6e:	4806      	ldr	r0, [pc, #24]	; (80a88 <enable_spi+0xd0>)
   80a70:	4b0f      	ldr	r3, [pc, #60]	; (80ab0 <enable_spi+0xf8>)
   80a72:	4798      	blx	r3
}
   80a74:	bf00      	nop
   80a76:	3710      	adds	r7, #16
   80a78:	46bd      	mov	sp, r7
   80a7a:	bd80      	pop	{r7, pc}
   80a7c:	00082b01 	.word	0x00082b01
   80a80:	00082aa1 	.word	0x00082aa1
   80a84:	00082ad1 	.word	0x00082ad1
   80a88:	40008000 	.word	0x40008000
   80a8c:	00083819 	.word	0x00083819
   80a90:	05b8d800 	.word	0x05b8d800
   80a94:	000ea600 	.word	0x000ea600
   80a98:	00083919 	.word	0x00083919
   80a9c:	00083953 	.word	0x00083953
   80aa0:	00080479 	.word	0x00080479
   80aa4:	00083835 	.word	0x00083835
   80aa8:	000838d1 	.word	0x000838d1
   80aac:	00083883 	.word	0x00083883
   80ab0:	00080461 	.word	0x00080461

00080ab4 <main>:


int main(void)
{
   80ab4:	b580      	push	{r7, lr}
   80ab6:	b086      	sub	sp, #24
   80ab8:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80aba:	1d3b      	adds	r3, r7, #4
   80abc:	2110      	movs	r1, #16
   80abe:	4618      	mov	r0, r3
   80ac0:	4b2a      	ldr	r3, [pc, #168]	; (80b6c <main+0xb8>)
   80ac2:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80ac4:	4b2a      	ldr	r3, [pc, #168]	; (80b70 <main+0xbc>)
   80ac6:	2201      	movs	r2, #1
   80ac8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80aca:	f3bf 8f5f 	dmb	sy
}
   80ace:	bf00      	nop
  __ASM volatile ("cpsie i");
   80ad0:	b662      	cpsie	i
}
   80ad2:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80ad4:	4b27      	ldr	r3, [pc, #156]	; (80b74 <main+0xc0>)
   80ad6:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80ad8:	4b27      	ldr	r3, [pc, #156]	; (80b78 <main+0xc4>)
   80ada:	4798      	blx	r3
    phywhisperer_setup_pins();
   80adc:	4b27      	ldr	r3, [pc, #156]	; (80b7c <main+0xc8>)
   80ade:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80ae0:	2300      	movs	r3, #0
   80ae2:	617b      	str	r3, [r7, #20]
   80ae4:	e011      	b.n	80b0a <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80ae6:	697b      	ldr	r3, [r7, #20]
   80ae8:	00db      	lsls	r3, r3, #3
   80aea:	4a25      	ldr	r2, [pc, #148]	; (80b80 <main+0xcc>)
   80aec:	1898      	adds	r0, r3, r2
   80aee:	697b      	ldr	r3, [r7, #20]
   80af0:	009b      	lsls	r3, r3, #2
   80af2:	f107 0218 	add.w	r2, r7, #24
   80af6:	4413      	add	r3, r2
   80af8:	f853 3c14 	ldr.w	r3, [r3, #-20]
   80afc:	461a      	mov	r2, r3
   80afe:	4921      	ldr	r1, [pc, #132]	; (80b84 <main+0xd0>)
   80b00:	4b21      	ldr	r3, [pc, #132]	; (80b88 <main+0xd4>)
   80b02:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80b04:	697b      	ldr	r3, [r7, #20]
   80b06:	3301      	adds	r3, #1
   80b08:	617b      	str	r3, [r7, #20]
   80b0a:	697b      	ldr	r3, [r7, #20]
   80b0c:	2b03      	cmp	r3, #3
   80b0e:	d9ea      	bls.n	80ae6 <main+0x32>
	}
	usb_serial_number[32] = 0;
   80b10:	4b1b      	ldr	r3, [pc, #108]	; (80b80 <main+0xcc>)
   80b12:	2200      	movs	r2, #0
   80b14:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b18:	2200      	movs	r2, #0
   80b1a:	210a      	movs	r1, #10
   80b1c:	2001      	movs	r0, #1
   80b1e:	4b1b      	ldr	r3, [pc, #108]	; (80b8c <main+0xd8>)
   80b20:	4798      	blx	r3
    enable_spi();
   80b22:	4b1b      	ldr	r3, [pc, #108]	; (80b90 <main+0xdc>)
   80b24:	4798      	blx	r3
    udc_start();
   80b26:	4b1b      	ldr	r3, [pc, #108]	; (80b94 <main+0xe0>)
   80b28:	4798      	blx	r3

    ui_init();
   80b2a:	4b1b      	ldr	r3, [pc, #108]	; (80b98 <main+0xe4>)
   80b2c:	4798      	blx	r3
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   80b2e:	481b      	ldr	r0, [pc, #108]	; (80b9c <main+0xe8>)
   80b30:	4b1b      	ldr	r3, [pc, #108]	; (80ba0 <main+0xec>)
   80b32:	4798      	blx	r3
	while (true) {
		sleepmgr_enter_sleep();
   80b34:	4b1b      	ldr	r3, [pc, #108]	; (80ba4 <main+0xf0>)
   80b36:	4798      	blx	r3
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   80b38:	4b1b      	ldr	r3, [pc, #108]	; (80ba8 <main+0xf4>)
   80b3a:	781b      	ldrb	r3, [r3, #0]
   80b3c:	b2db      	uxtb	r3, r3
   80b3e:	2b00      	cmp	r3, #0
   80b40:	d0f8      	beq.n	80b34 <main+0x80>
   80b42:	4b1a      	ldr	r3, [pc, #104]	; (80bac <main+0xf8>)
   80b44:	781b      	ldrb	r3, [r3, #0]
   80b46:	b2db      	uxtb	r3, r3
   80b48:	2b00      	cmp	r3, #0
   80b4a:	d0f3      	beq.n	80b34 <main+0x80>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   80b4c:	e007      	b.n	80b5e <main+0xaa>
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   80b4e:	4813      	ldr	r0, [pc, #76]	; (80b9c <main+0xe8>)
   80b50:	4b17      	ldr	r3, [pc, #92]	; (80bb0 <main+0xfc>)
   80b52:	4798      	blx	r3
   80b54:	4603      	mov	r3, r0
   80b56:	4619      	mov	r1, r3
   80b58:	2000      	movs	r0, #0
   80b5a:	4b16      	ldr	r3, [pc, #88]	; (80bb4 <main+0x100>)
   80b5c:	4798      	blx	r3
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   80b5e:	480f      	ldr	r0, [pc, #60]	; (80b9c <main+0xe8>)
   80b60:	4b15      	ldr	r3, [pc, #84]	; (80bb8 <main+0x104>)
   80b62:	4798      	blx	r3
   80b64:	4603      	mov	r3, r0
   80b66:	2b00      	cmp	r3, #0
   80b68:	d1f1      	bne.n	80b4e <main+0x9a>
		sleepmgr_enter_sleep();
   80b6a:	e7e3      	b.n	80b34 <main+0x80>
   80b6c:	000825f5 	.word	0x000825f5
   80b70:	20000284 	.word	0x20000284
   80b74:	000804cd 	.word	0x000804cd
   80b78:	00083e89 	.word	0x00083e89
   80b7c:	00080819 	.word	0x00080819
   80b80:	2000025c 	.word	0x2000025c
   80b84:	0008ea38 	.word	0x0008ea38
   80b88:	00088285 	.word	0x00088285
   80b8c:	00080955 	.word	0x00080955
   80b90:	000809b9 	.word	0x000809b9
   80b94:	00084315 	.word	0x00084315
   80b98:	0008783d 	.word	0x0008783d
   80b9c:	20002154 	.word	0x20002154
   80ba0:	000823d5 	.word	0x000823d5
   80ba4:	00080535 	.word	0x00080535
   80ba8:	2000131c 	.word	0x2000131c
   80bac:	20001564 	.word	0x20001564
   80bb0:	0008245b 	.word	0x0008245b
   80bb4:	000859a1 	.word	0x000859a1
   80bb8:	000824a5 	.word	0x000824a5

00080bbc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80bbc:	b480      	push	{r7}
   80bbe:	b083      	sub	sp, #12
   80bc0:	af00      	add	r7, sp, #0
   80bc2:	4603      	mov	r3, r0
   80bc4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bc6:	79fb      	ldrb	r3, [r7, #7]
   80bc8:	f003 031f 	and.w	r3, r3, #31
   80bcc:	2201      	movs	r2, #1
   80bce:	fa02 f103 	lsl.w	r1, r2, r3
   80bd2:	4a05      	ldr	r2, [pc, #20]	; (80be8 <NVIC_EnableIRQ+0x2c>)
   80bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80bd8:	095b      	lsrs	r3, r3, #5
   80bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   80bde:	bf00      	nop
   80be0:	370c      	adds	r7, #12
   80be2:	46bd      	mov	sp, r7
   80be4:	bc80      	pop	{r7}
   80be6:	4770      	bx	lr
   80be8:	e000e100 	.word	0xe000e100

00080bec <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80bec:	b480      	push	{r7}
   80bee:	b083      	sub	sp, #12
   80bf0:	af00      	add	r7, sp, #0
   80bf2:	4603      	mov	r3, r0
   80bf4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80bf6:	79fb      	ldrb	r3, [r7, #7]
   80bf8:	f003 031f 	and.w	r3, r3, #31
   80bfc:	2201      	movs	r2, #1
   80bfe:	fa02 f103 	lsl.w	r1, r2, r3
   80c02:	4a06      	ldr	r2, [pc, #24]	; (80c1c <NVIC_ClearPendingIRQ+0x30>)
   80c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80c08:	095b      	lsrs	r3, r3, #5
   80c0a:	3360      	adds	r3, #96	; 0x60
   80c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   80c10:	bf00      	nop
   80c12:	370c      	adds	r7, #12
   80c14:	46bd      	mov	sp, r7
   80c16:	bc80      	pop	{r7}
   80c18:	4770      	bx	lr
   80c1a:	bf00      	nop
   80c1c:	e000e100 	.word	0xe000e100

00080c20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   80c20:	b480      	push	{r7}
   80c22:	b083      	sub	sp, #12
   80c24:	af00      	add	r7, sp, #0
   80c26:	4603      	mov	r3, r0
   80c28:	6039      	str	r1, [r7, #0]
   80c2a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   80c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80c30:	2b00      	cmp	r3, #0
   80c32:	da0b      	bge.n	80c4c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80c34:	683b      	ldr	r3, [r7, #0]
   80c36:	b2da      	uxtb	r2, r3
   80c38:	490c      	ldr	r1, [pc, #48]	; (80c6c <NVIC_SetPriority+0x4c>)
   80c3a:	79fb      	ldrb	r3, [r7, #7]
   80c3c:	f003 030f 	and.w	r3, r3, #15
   80c40:	3b04      	subs	r3, #4
   80c42:	0112      	lsls	r2, r2, #4
   80c44:	b2d2      	uxtb	r2, r2
   80c46:	440b      	add	r3, r1
   80c48:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   80c4a:	e009      	b.n	80c60 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80c4c:	683b      	ldr	r3, [r7, #0]
   80c4e:	b2da      	uxtb	r2, r3
   80c50:	4907      	ldr	r1, [pc, #28]	; (80c70 <NVIC_SetPriority+0x50>)
   80c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80c56:	0112      	lsls	r2, r2, #4
   80c58:	b2d2      	uxtb	r2, r2
   80c5a:	440b      	add	r3, r1
   80c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   80c60:	bf00      	nop
   80c62:	370c      	adds	r7, #12
   80c64:	46bd      	mov	sp, r7
   80c66:	bc80      	pop	{r7}
   80c68:	4770      	bx	lr
   80c6a:	bf00      	nop
   80c6c:	e000ed00 	.word	0xe000ed00
   80c70:	e000e100 	.word	0xe000e100

00080c74 <osc_enable>:
{
   80c74:	b580      	push	{r7, lr}
   80c76:	b082      	sub	sp, #8
   80c78:	af00      	add	r7, sp, #0
   80c7a:	6078      	str	r0, [r7, #4]
   80c7c:	687b      	ldr	r3, [r7, #4]
   80c7e:	2b07      	cmp	r3, #7
   80c80:	d82e      	bhi.n	80ce0 <osc_enable+0x6c>
   80c82:	a201      	add	r2, pc, #4	; (adr r2, 80c88 <osc_enable+0x14>)
   80c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c88:	00080cdf 	.word	0x00080cdf
   80c8c:	00080ca9 	.word	0x00080ca9
   80c90:	00080cb1 	.word	0x00080cb1
   80c94:	00080cb9 	.word	0x00080cb9
   80c98:	00080cc1 	.word	0x00080cc1
   80c9c:	00080cc9 	.word	0x00080cc9
   80ca0:	00080cd1 	.word	0x00080cd1
   80ca4:	00080cd9 	.word	0x00080cd9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80ca8:	2000      	movs	r0, #0
   80caa:	4b0f      	ldr	r3, [pc, #60]	; (80ce8 <osc_enable+0x74>)
   80cac:	4798      	blx	r3
		break;
   80cae:	e017      	b.n	80ce0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80cb0:	2001      	movs	r0, #1
   80cb2:	4b0d      	ldr	r3, [pc, #52]	; (80ce8 <osc_enable+0x74>)
   80cb4:	4798      	blx	r3
		break;
   80cb6:	e013      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80cb8:	2000      	movs	r0, #0
   80cba:	4b0c      	ldr	r3, [pc, #48]	; (80cec <osc_enable+0x78>)
   80cbc:	4798      	blx	r3
		break;
   80cbe:	e00f      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80cc0:	2010      	movs	r0, #16
   80cc2:	4b0a      	ldr	r3, [pc, #40]	; (80cec <osc_enable+0x78>)
   80cc4:	4798      	blx	r3
		break;
   80cc6:	e00b      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80cc8:	2020      	movs	r0, #32
   80cca:	4b08      	ldr	r3, [pc, #32]	; (80cec <osc_enable+0x78>)
   80ccc:	4798      	blx	r3
		break;
   80cce:	e007      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80cd0:	203e      	movs	r0, #62	; 0x3e
   80cd2:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <osc_enable+0x7c>)
   80cd4:	4798      	blx	r3
		break;
   80cd6:	e003      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80cd8:	4b06      	ldr	r3, [pc, #24]	; (80cf4 <osc_enable+0x80>)
   80cda:	4798      	blx	r3
		break;
   80cdc:	e000      	b.n	80ce0 <osc_enable+0x6c>
		break;
   80cde:	bf00      	nop
}
   80ce0:	bf00      	nop
   80ce2:	3708      	adds	r7, #8
   80ce4:	46bd      	mov	sp, r7
   80ce6:	bd80      	pop	{r7, pc}
   80ce8:	00082f15 	.word	0x00082f15
   80cec:	00082f81 	.word	0x00082f81
   80cf0:	00082ff5 	.word	0x00082ff5
   80cf4:	00083045 	.word	0x00083045

00080cf8 <osc_is_ready>:
{
   80cf8:	b580      	push	{r7, lr}
   80cfa:	b082      	sub	sp, #8
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2b07      	cmp	r3, #7
   80d04:	d82f      	bhi.n	80d66 <osc_is_ready+0x6e>
   80d06:	a201      	add	r2, pc, #4	; (adr r2, 80d0c <osc_is_ready+0x14>)
   80d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d0c:	00080d2d 	.word	0x00080d2d
   80d10:	00080d31 	.word	0x00080d31
   80d14:	00080d31 	.word	0x00080d31
   80d18:	00080d43 	.word	0x00080d43
   80d1c:	00080d43 	.word	0x00080d43
   80d20:	00080d43 	.word	0x00080d43
   80d24:	00080d55 	.word	0x00080d55
   80d28:	00080d55 	.word	0x00080d55
		return 1;
   80d2c:	2301      	movs	r3, #1
   80d2e:	e01b      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80d30:	4b0f      	ldr	r3, [pc, #60]	; (80d70 <osc_is_ready+0x78>)
   80d32:	4798      	blx	r3
   80d34:	4603      	mov	r3, r0
   80d36:	2b00      	cmp	r3, #0
   80d38:	bf14      	ite	ne
   80d3a:	2301      	movne	r3, #1
   80d3c:	2300      	moveq	r3, #0
   80d3e:	b2db      	uxtb	r3, r3
   80d40:	e012      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80d42:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <osc_is_ready+0x7c>)
   80d44:	4798      	blx	r3
   80d46:	4603      	mov	r3, r0
   80d48:	2b00      	cmp	r3, #0
   80d4a:	bf14      	ite	ne
   80d4c:	2301      	movne	r3, #1
   80d4e:	2300      	moveq	r3, #0
   80d50:	b2db      	uxtb	r3, r3
   80d52:	e009      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80d54:	4b08      	ldr	r3, [pc, #32]	; (80d78 <osc_is_ready+0x80>)
   80d56:	4798      	blx	r3
   80d58:	4603      	mov	r3, r0
   80d5a:	2b00      	cmp	r3, #0
   80d5c:	bf14      	ite	ne
   80d5e:	2301      	movne	r3, #1
   80d60:	2300      	moveq	r3, #0
   80d62:	b2db      	uxtb	r3, r3
   80d64:	e000      	b.n	80d68 <osc_is_ready+0x70>
	return 0;
   80d66:	2300      	movs	r3, #0
}
   80d68:	4618      	mov	r0, r3
   80d6a:	3708      	adds	r7, #8
   80d6c:	46bd      	mov	sp, r7
   80d6e:	bd80      	pop	{r7, pc}
   80d70:	00082f4d 	.word	0x00082f4d
   80d74:	00082fdd 	.word	0x00082fdd
   80d78:	00083091 	.word	0x00083091

00080d7c <osc_get_rate>:
{
   80d7c:	b480      	push	{r7}
   80d7e:	b083      	sub	sp, #12
   80d80:	af00      	add	r7, sp, #0
   80d82:	6078      	str	r0, [r7, #4]
   80d84:	687b      	ldr	r3, [r7, #4]
   80d86:	2b07      	cmp	r3, #7
   80d88:	d823      	bhi.n	80dd2 <osc_get_rate+0x56>
   80d8a:	a201      	add	r2, pc, #4	; (adr r2, 80d90 <osc_get_rate+0x14>)
   80d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d90:	00080db1 	.word	0x00080db1
   80d94:	00080db7 	.word	0x00080db7
   80d98:	00080dbb 	.word	0x00080dbb
   80d9c:	00080dbf 	.word	0x00080dbf
   80da0:	00080dc3 	.word	0x00080dc3
   80da4:	00080dc7 	.word	0x00080dc7
   80da8:	00080dcb 	.word	0x00080dcb
   80dac:	00080dcf 	.word	0x00080dcf
		return OSC_SLCK_32K_RC_HZ;
   80db0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80db4:	e00e      	b.n	80dd4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   80db6:	2300      	movs	r3, #0
   80db8:	e00c      	b.n	80dd4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   80dba:	2300      	movs	r3, #0
   80dbc:	e00a      	b.n	80dd4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   80dbe:	4b08      	ldr	r3, [pc, #32]	; (80de0 <osc_get_rate+0x64>)
   80dc0:	e008      	b.n	80dd4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   80dc2:	4b08      	ldr	r3, [pc, #32]	; (80de4 <osc_get_rate+0x68>)
   80dc4:	e006      	b.n	80dd4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   80dc6:	4b08      	ldr	r3, [pc, #32]	; (80de8 <osc_get_rate+0x6c>)
   80dc8:	e004      	b.n	80dd4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   80dca:	4b07      	ldr	r3, [pc, #28]	; (80de8 <osc_get_rate+0x6c>)
   80dcc:	e002      	b.n	80dd4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   80dce:	4b06      	ldr	r3, [pc, #24]	; (80de8 <osc_get_rate+0x6c>)
   80dd0:	e000      	b.n	80dd4 <osc_get_rate+0x58>
	return 0;
   80dd2:	2300      	movs	r3, #0
}
   80dd4:	4618      	mov	r0, r3
   80dd6:	370c      	adds	r7, #12
   80dd8:	46bd      	mov	sp, r7
   80dda:	bc80      	pop	{r7}
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop
   80de0:	003d0900 	.word	0x003d0900
   80de4:	007a1200 	.word	0x007a1200
   80de8:	00b71b00 	.word	0x00b71b00

00080dec <osc_wait_ready>:
{
   80dec:	b580      	push	{r7, lr}
   80dee:	b082      	sub	sp, #8
   80df0:	af00      	add	r7, sp, #0
   80df2:	4603      	mov	r3, r0
   80df4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80df6:	bf00      	nop
   80df8:	79fb      	ldrb	r3, [r7, #7]
   80dfa:	4618      	mov	r0, r3
   80dfc:	4b06      	ldr	r3, [pc, #24]	; (80e18 <osc_wait_ready+0x2c>)
   80dfe:	4798      	blx	r3
   80e00:	4603      	mov	r3, r0
   80e02:	f083 0301 	eor.w	r3, r3, #1
   80e06:	b2db      	uxtb	r3, r3
   80e08:	2b00      	cmp	r3, #0
   80e0a:	d1f5      	bne.n	80df8 <osc_wait_ready+0xc>
}
   80e0c:	bf00      	nop
   80e0e:	bf00      	nop
   80e10:	3708      	adds	r7, #8
   80e12:	46bd      	mov	sp, r7
   80e14:	bd80      	pop	{r7, pc}
   80e16:	bf00      	nop
   80e18:	00080cf9 	.word	0x00080cf9

00080e1c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80e1c:	b580      	push	{r7, lr}
   80e1e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80e20:	2006      	movs	r0, #6
   80e22:	4b03      	ldr	r3, [pc, #12]	; (80e30 <sysclk_get_main_hz+0x14>)
   80e24:	4798      	blx	r3
   80e26:	4603      	mov	r3, r0
   80e28:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80e2a:	4618      	mov	r0, r3
   80e2c:	bd80      	pop	{r7, pc}
   80e2e:	bf00      	nop
   80e30:	00080d7d 	.word	0x00080d7d

00080e34 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80e34:	b580      	push	{r7, lr}
   80e36:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80e38:	4b02      	ldr	r3, [pc, #8]	; (80e44 <sysclk_get_cpu_hz+0x10>)
   80e3a:	4798      	blx	r3
   80e3c:	4603      	mov	r3, r0
   80e3e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80e40:	4618      	mov	r0, r3
   80e42:	bd80      	pop	{r7, pc}
   80e44:	00080e1d 	.word	0x00080e1d

00080e48 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80e48:	b580      	push	{r7, lr}
   80e4a:	b082      	sub	sp, #8
   80e4c:	af00      	add	r7, sp, #0
   80e4e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80e50:	6878      	ldr	r0, [r7, #4]
   80e52:	4b03      	ldr	r3, [pc, #12]	; (80e60 <sysclk_enable_peripheral_clock+0x18>)
   80e54:	4798      	blx	r3
}
   80e56:	bf00      	nop
   80e58:	3708      	adds	r7, #8
   80e5a:	46bd      	mov	sp, r7
   80e5c:	bd80      	pop	{r7, pc}
   80e5e:	bf00      	nop
   80e60:	00083165 	.word	0x00083165

00080e64 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80e64:	b580      	push	{r7, lr}
   80e66:	af00      	add	r7, sp, #0
	udd_detach();
   80e68:	4b01      	ldr	r3, [pc, #4]	; (80e70 <udc_detach+0xc>)
   80e6a:	4798      	blx	r3
}
   80e6c:	bf00      	nop
   80e6e:	bd80      	pop	{r7, pc}
   80e70:	0008608d 	.word	0x0008608d

00080e74 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80e74:	b580      	push	{r7, lr}
   80e76:	af00      	add	r7, sp, #0
	active = false;
   80e78:	4b03      	ldr	r3, [pc, #12]	; (80e88 <main_suspend_action+0x14>)
   80e7a:	2200      	movs	r2, #0
   80e7c:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80e7e:	4b03      	ldr	r3, [pc, #12]	; (80e8c <main_suspend_action+0x18>)
   80e80:	4798      	blx	r3
}
   80e82:	bf00      	nop
   80e84:	bd80      	pop	{r7, pc}
   80e86:	bf00      	nop
   80e88:	20000ecc 	.word	0x20000ecc
   80e8c:	00087855 	.word	0x00087855

00080e90 <main_resume_action>:

void main_resume_action(void)
{
   80e90:	b580      	push	{r7, lr}
   80e92:	af00      	add	r7, sp, #0
    ui_wakeup();
   80e94:	4b01      	ldr	r3, [pc, #4]	; (80e9c <main_resume_action+0xc>)
   80e96:	4798      	blx	r3
}
   80e98:	bf00      	nop
   80e9a:	bd80      	pop	{r7, pc}
   80e9c:	0008786d 	.word	0x0008786d

00080ea0 <main_sof_action>:

void main_sof_action(void)
{
   80ea0:	b580      	push	{r7, lr}
   80ea2:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80ea4:	4b08      	ldr	r3, [pc, #32]	; (80ec8 <main_sof_action+0x28>)
   80ea6:	781b      	ldrb	r3, [r3, #0]
   80ea8:	b2db      	uxtb	r3, r3
   80eaa:	f083 0301 	eor.w	r3, r3, #1
   80eae:	b2db      	uxtb	r3, r3
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d106      	bne.n	80ec2 <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80eb4:	4b05      	ldr	r3, [pc, #20]	; (80ecc <main_sof_action+0x2c>)
   80eb6:	4798      	blx	r3
   80eb8:	4603      	mov	r3, r0
   80eba:	4618      	mov	r0, r3
   80ebc:	4b04      	ldr	r3, [pc, #16]	; (80ed0 <main_sof_action+0x30>)
   80ebe:	4798      	blx	r3
   80ec0:	e000      	b.n	80ec4 <main_sof_action+0x24>
        return;
   80ec2:	bf00      	nop
}
   80ec4:	bd80      	pop	{r7, pc}
   80ec6:	bf00      	nop
   80ec8:	2000027d 	.word	0x2000027d
   80ecc:	00086155 	.word	0x00086155
   80ed0:	00087881 	.word	0x00087881

00080ed4 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80ed4:	b580      	push	{r7, lr}
   80ed6:	af00      	add	r7, sp, #0
    active = true;
   80ed8:	4b07      	ldr	r3, [pc, #28]	; (80ef8 <main_vendor_enable+0x24>)
   80eda:	2201      	movs	r2, #1
   80edc:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80ede:	4b07      	ldr	r3, [pc, #28]	; (80efc <main_vendor_enable+0x28>)
   80ee0:	2201      	movs	r2, #1
   80ee2:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80ee4:	4a06      	ldr	r2, [pc, #24]	; (80f00 <main_vendor_enable+0x2c>)
   80ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80eea:	4806      	ldr	r0, [pc, #24]	; (80f04 <main_vendor_enable+0x30>)
   80eec:	4b06      	ldr	r3, [pc, #24]	; (80f08 <main_vendor_enable+0x34>)
   80eee:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80ef0:	2301      	movs	r3, #1
}
   80ef2:	4618      	mov	r0, r3
   80ef4:	bd80      	pop	{r7, pc}
   80ef6:	bf00      	nop
   80ef8:	20000ecc 	.word	0x20000ecc
   80efc:	2000027d 	.word	0x2000027d
   80f00:	00081579 	.word	0x00081579
   80f04:	20000ed0 	.word	0x20000ed0
   80f08:	00085b6d 	.word	0x00085b6d

00080f0c <main_vendor_disable>:

void main_vendor_disable(void)
{
   80f0c:	b480      	push	{r7}
   80f0e:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80f10:	4b03      	ldr	r3, [pc, #12]	; (80f20 <main_vendor_disable+0x14>)
   80f12:	2200      	movs	r2, #0
   80f14:	701a      	strb	r2, [r3, #0]
}
   80f16:	bf00      	nop
   80f18:	46bd      	mov	sp, r7
   80f1a:	bc80      	pop	{r7}
   80f1c:	4770      	bx	lr
   80f1e:	bf00      	nop
   80f20:	2000027d 	.word	0x2000027d

00080f24 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80f24:	b580      	push	{r7, lr}
   80f26:	b082      	sub	sp, #8
   80f28:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80f2a:	4b0f      	ldr	r3, [pc, #60]	; (80f68 <ctrl_readmem_bulk+0x44>)
   80f2c:	681b      	ldr	r3, [r3, #0]
   80f2e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f30:	4b0d      	ldr	r3, [pc, #52]	; (80f68 <ctrl_readmem_bulk+0x44>)
   80f32:	685b      	ldr	r3, [r3, #4]
   80f34:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80f36:	4b0d      	ldr	r3, [pc, #52]	; (80f6c <ctrl_readmem_bulk+0x48>)
   80f38:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80f3a:	bf00      	nop
   80f3c:	2002      	movs	r0, #2
   80f3e:	4b0c      	ldr	r3, [pc, #48]	; (80f70 <ctrl_readmem_bulk+0x4c>)
   80f40:	4798      	blx	r3
   80f42:	4603      	mov	r3, r0
   80f44:	2b00      	cmp	r3, #0
   80f46:	d0f9      	beq.n	80f3c <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80f48:	6838      	ldr	r0, [r7, #0]
   80f4a:	4b0a      	ldr	r3, [pc, #40]	; (80f74 <ctrl_readmem_bulk+0x50>)
   80f4c:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80f4e:	4a0a      	ldr	r2, [pc, #40]	; (80f78 <ctrl_readmem_bulk+0x54>)
   80f50:	6879      	ldr	r1, [r7, #4]
   80f52:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80f56:	4b09      	ldr	r3, [pc, #36]	; (80f7c <ctrl_readmem_bulk+0x58>)
   80f58:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80f5a:	4b04      	ldr	r3, [pc, #16]	; (80f6c <ctrl_readmem_bulk+0x48>)
   80f5c:	4798      	blx	r3
}
   80f5e:	bf00      	nop
   80f60:	3708      	adds	r7, #8
   80f62:	46bd      	mov	sp, r7
   80f64:	bd80      	pop	{r7, pc}
   80f66:	bf00      	nop
   80f68:	200012d0 	.word	0x200012d0
   80f6c:	000818c1 	.word	0x000818c1
   80f70:	00081881 	.word	0x00081881
   80f74:	000818f1 	.word	0x000818f1
   80f78:	00081541 	.word	0x00081541
   80f7c:	00085b41 	.word	0x00085b41

00080f80 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80f80:	b580      	push	{r7, lr}
   80f82:	b082      	sub	sp, #8
   80f84:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80f86:	4b0f      	ldr	r3, [pc, #60]	; (80fc4 <ctrl_readmem_ctrl+0x44>)
   80f88:	681b      	ldr	r3, [r3, #0]
   80f8a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f8c:	4b0d      	ldr	r3, [pc, #52]	; (80fc4 <ctrl_readmem_ctrl+0x44>)
   80f8e:	685b      	ldr	r3, [r3, #4]
   80f90:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80f92:	4b0d      	ldr	r3, [pc, #52]	; (80fc8 <ctrl_readmem_ctrl+0x48>)
   80f94:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80f96:	bf00      	nop
   80f98:	2005      	movs	r0, #5
   80f9a:	4b0c      	ldr	r3, [pc, #48]	; (80fcc <ctrl_readmem_ctrl+0x4c>)
   80f9c:	4798      	blx	r3
   80f9e:	4603      	mov	r3, r0
   80fa0:	2b00      	cmp	r3, #0
   80fa2:	d0f9      	beq.n	80f98 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80fa4:	6838      	ldr	r0, [r7, #0]
   80fa6:	4b0a      	ldr	r3, [pc, #40]	; (80fd0 <ctrl_readmem_ctrl+0x50>)
   80fa8:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80faa:	4b0a      	ldr	r3, [pc, #40]	; (80fd4 <ctrl_readmem_ctrl+0x54>)
   80fac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80fb0:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80fb2:	4a09      	ldr	r2, [pc, #36]	; (80fd8 <ctrl_readmem_ctrl+0x58>)
   80fb4:	687b      	ldr	r3, [r7, #4]
   80fb6:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80fb8:	4b03      	ldr	r3, [pc, #12]	; (80fc8 <ctrl_readmem_ctrl+0x48>)
   80fba:	4798      	blx	r3
}
   80fbc:	bf00      	nop
   80fbe:	3708      	adds	r7, #8
   80fc0:	46bd      	mov	sp, r7
   80fc2:	bd80      	pop	{r7, pc}
   80fc4:	200012d0 	.word	0x200012d0
   80fc8:	000818c1 	.word	0x000818c1
   80fcc:	00081881 	.word	0x00081881
   80fd0:	000818f1 	.word	0x000818f1
   80fd4:	20001314 	.word	0x20001314
   80fd8:	20001318 	.word	0x20001318

00080fdc <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80fdc:	b580      	push	{r7, lr}
   80fde:	b084      	sub	sp, #16
   80fe0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80fe2:	4b16      	ldr	r3, [pc, #88]	; (8103c <ctrl_writemem_ctrl+0x60>)
   80fe4:	681b      	ldr	r3, [r3, #0]
   80fe6:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80fe8:	4b14      	ldr	r3, [pc, #80]	; (8103c <ctrl_writemem_ctrl+0x60>)
   80fea:	685b      	ldr	r3, [r3, #4]
   80fec:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80fee:	4b14      	ldr	r3, [pc, #80]	; (81040 <ctrl_writemem_ctrl+0x64>)
   80ff0:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80ff2:	4b14      	ldr	r3, [pc, #80]	; (81044 <ctrl_writemem_ctrl+0x68>)
   80ff4:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80ff6:	bf00      	nop
   80ff8:	2001      	movs	r0, #1
   80ffa:	4b13      	ldr	r3, [pc, #76]	; (81048 <ctrl_writemem_ctrl+0x6c>)
   80ffc:	4798      	blx	r3
   80ffe:	4603      	mov	r3, r0
   81000:	2b00      	cmp	r3, #0
   81002:	d0f9      	beq.n	80ff8 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   81004:	6878      	ldr	r0, [r7, #4]
   81006:	4b11      	ldr	r3, [pc, #68]	; (8104c <ctrl_writemem_ctrl+0x70>)
   81008:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   8100a:	2300      	movs	r3, #0
   8100c:	60fb      	str	r3, [r7, #12]
   8100e:	e00b      	b.n	81028 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   81010:	683a      	ldr	r2, [r7, #0]
   81012:	68fb      	ldr	r3, [r7, #12]
   81014:	441a      	add	r2, r3
   81016:	4b0e      	ldr	r3, [pc, #56]	; (81050 <ctrl_writemem_ctrl+0x74>)
   81018:	6819      	ldr	r1, [r3, #0]
   8101a:	68fb      	ldr	r3, [r7, #12]
   8101c:	440b      	add	r3, r1
   8101e:	7812      	ldrb	r2, [r2, #0]
   81020:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   81022:	68fb      	ldr	r3, [r7, #12]
   81024:	3301      	adds	r3, #1
   81026:	60fb      	str	r3, [r7, #12]
   81028:	68fa      	ldr	r2, [r7, #12]
   8102a:	68bb      	ldr	r3, [r7, #8]
   8102c:	429a      	cmp	r2, r3
   8102e:	d3ef      	bcc.n	81010 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   81030:	4b04      	ldr	r3, [pc, #16]	; (81044 <ctrl_writemem_ctrl+0x68>)
   81032:	4798      	blx	r3
}
   81034:	bf00      	nop
   81036:	3710      	adds	r7, #16
   81038:	46bd      	mov	sp, r7
   8103a:	bd80      	pop	{r7, pc}
   8103c:	200012d0 	.word	0x200012d0
   81040:	200012d8 	.word	0x200012d8
   81044:	000818c1 	.word	0x000818c1
   81048:	00081881 	.word	0x00081881
   8104c:	000818f1 	.word	0x000818f1
   81050:	20000280 	.word	0x20000280

00081054 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   81054:	b580      	push	{r7, lr}
   81056:	b082      	sub	sp, #8
   81058:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8105a:	4b0a      	ldr	r3, [pc, #40]	; (81084 <ctrl_writemem_bulk+0x30>)
   8105c:	685b      	ldr	r3, [r3, #4]
   8105e:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   81060:	4b09      	ldr	r3, [pc, #36]	; (81088 <ctrl_writemem_bulk+0x34>)
   81062:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   81064:	bf00      	nop
   81066:	2004      	movs	r0, #4
   81068:	4b08      	ldr	r3, [pc, #32]	; (8108c <ctrl_writemem_bulk+0x38>)
   8106a:	4798      	blx	r3
   8106c:	4603      	mov	r3, r0
   8106e:	2b00      	cmp	r3, #0
   81070:	d0f9      	beq.n	81066 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   81072:	6878      	ldr	r0, [r7, #4]
   81074:	4b06      	ldr	r3, [pc, #24]	; (81090 <ctrl_writemem_bulk+0x3c>)
   81076:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   81078:	4b03      	ldr	r3, [pc, #12]	; (81088 <ctrl_writemem_bulk+0x34>)
   8107a:	4798      	blx	r3
}
   8107c:	bf00      	nop
   8107e:	3708      	adds	r7, #8
   81080:	46bd      	mov	sp, r7
   81082:	bd80      	pop	{r7, pc}
   81084:	200012d0 	.word	0x200012d0
   81088:	000818c1 	.word	0x000818c1
   8108c:	00081881 	.word	0x00081881
   81090:	000818f1 	.word	0x000818f1

00081094 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   81094:	b580      	push	{r7, lr}
   81096:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81098:	4b19      	ldr	r3, [pc, #100]	; (81100 <ctrl_sam3ucfg_cb+0x6c>)
   8109a:	885b      	ldrh	r3, [r3, #2]
   8109c:	b2db      	uxtb	r3, r3
   8109e:	2b03      	cmp	r3, #3
   810a0:	d014      	beq.n	810cc <ctrl_sam3ucfg_cb+0x38>
   810a2:	2b03      	cmp	r3, #3
   810a4:	dc29      	bgt.n	810fa <ctrl_sam3ucfg_cb+0x66>
   810a6:	2b01      	cmp	r3, #1
   810a8:	d002      	beq.n	810b0 <ctrl_sam3ucfg_cb+0x1c>
   810aa:	2b02      	cmp	r3, #2
   810ac:	d00a      	beq.n	810c4 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   810ae:	e024      	b.n	810fa <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   810b0:	2006      	movs	r0, #6
   810b2:	4b14      	ldr	r3, [pc, #80]	; (81104 <ctrl_sam3ucfg_cb+0x70>)
   810b4:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   810b6:	2006      	movs	r0, #6
   810b8:	4b13      	ldr	r3, [pc, #76]	; (81108 <ctrl_sam3ucfg_cb+0x74>)
   810ba:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   810bc:	2010      	movs	r0, #16
   810be:	4b13      	ldr	r3, [pc, #76]	; (8110c <ctrl_sam3ucfg_cb+0x78>)
   810c0:	4798      	blx	r3
        break;
   810c2:	e01b      	b.n	810fc <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   810c4:	2010      	movs	r0, #16
   810c6:	4b12      	ldr	r3, [pc, #72]	; (81110 <ctrl_sam3ucfg_cb+0x7c>)
   810c8:	4798      	blx	r3
        break;
   810ca:	e017      	b.n	810fc <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   810cc:	2201      	movs	r2, #1
   810ce:	210c      	movs	r1, #12
   810d0:	4810      	ldr	r0, [pc, #64]	; (81114 <ctrl_sam3ucfg_cb+0x80>)
   810d2:	4b11      	ldr	r3, [pc, #68]	; (81118 <ctrl_sam3ucfg_cb+0x84>)
   810d4:	4798      	blx	r3
        udc_detach();
   810d6:	4b11      	ldr	r3, [pc, #68]	; (8111c <ctrl_sam3ucfg_cb+0x88>)
   810d8:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   810da:	bf00      	nop
   810dc:	4b10      	ldr	r3, [pc, #64]	; (81120 <ctrl_sam3ucfg_cb+0x8c>)
   810de:	685b      	ldr	r3, [r3, #4]
   810e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   810e4:	2b00      	cmp	r3, #0
   810e6:	d1f9      	bne.n	810dc <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   810e8:	4b0d      	ldr	r3, [pc, #52]	; (81120 <ctrl_sam3ucfg_cb+0x8c>)
   810ea:	681b      	ldr	r3, [r3, #0]
   810ec:	4a0c      	ldr	r2, [pc, #48]	; (81120 <ctrl_sam3ucfg_cb+0x8c>)
   810ee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   810f2:	f043 0305 	orr.w	r3, r3, #5
   810f6:	6013      	str	r3, [r2, #0]
        while(1);
   810f8:	e7fe      	b.n	810f8 <ctrl_sam3ucfg_cb+0x64>
        break;
   810fa:	bf00      	nop
    }
}
   810fc:	bf00      	nop
   810fe:	bd80      	pop	{r7, pc}
   81100:	2000241c 	.word	0x2000241c
   81104:	00080c75 	.word	0x00080c75
   81108:	00080ded 	.word	0x00080ded
   8110c:	00082e15 	.word	0x00082e15
   81110:	00082e95 	.word	0x00082e95
   81114:	400e0800 	.word	0x400e0800
   81118:	0008258d 	.word	0x0008258d
   8111c:	00080e65 	.word	0x00080e65
   81120:	400e1200 	.word	0x400e1200

00081124 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   81124:	b580      	push	{r7, lr}
   81126:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   81128:	4b0d      	ldr	r3, [pc, #52]	; (81160 <ctrl_progfpga_bulk+0x3c>)
   8112a:	885b      	ldrh	r3, [r3, #2]
   8112c:	2ba2      	cmp	r3, #162	; 0xa2
   8112e:	d00f      	beq.n	81150 <ctrl_progfpga_bulk+0x2c>
   81130:	2ba2      	cmp	r3, #162	; 0xa2
   81132:	dc11      	bgt.n	81158 <ctrl_progfpga_bulk+0x34>
   81134:	2ba0      	cmp	r3, #160	; 0xa0
   81136:	d002      	beq.n	8113e <ctrl_progfpga_bulk+0x1a>
   81138:	2ba1      	cmp	r3, #161	; 0xa1
   8113a:	d003      	beq.n	81144 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   8113c:	e00c      	b.n	81158 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   8113e:	4b09      	ldr	r3, [pc, #36]	; (81164 <ctrl_progfpga_bulk+0x40>)
   81140:	4798      	blx	r3
        break;
   81142:	e00a      	b.n	8115a <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   81144:	4b08      	ldr	r3, [pc, #32]	; (81168 <ctrl_progfpga_bulk+0x44>)
   81146:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81148:	4b08      	ldr	r3, [pc, #32]	; (8116c <ctrl_progfpga_bulk+0x48>)
   8114a:	220a      	movs	r2, #10
   8114c:	701a      	strb	r2, [r3, #0]
        break;
   8114e:	e004      	b.n	8115a <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   81150:	4b06      	ldr	r3, [pc, #24]	; (8116c <ctrl_progfpga_bulk+0x48>)
   81152:	2200      	movs	r2, #0
   81154:	701a      	strb	r2, [r3, #0]
        break;
   81156:	e000      	b.n	8115a <ctrl_progfpga_bulk+0x36>
        break;
   81158:	bf00      	nop
    }
}
   8115a:	bf00      	nop
   8115c:	bd80      	pop	{r7, pc}
   8115e:	bf00      	nop
   81160:	2000241c 	.word	0x2000241c
   81164:	00081a11 	.word	0x00081a11
   81168:	00081a91 	.word	0x00081a91
   8116c:	20001310 	.word	0x20001310

00081170 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   81170:	b580      	push	{r7, lr}
   81172:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   81174:	2026      	movs	r0, #38	; 0x26
   81176:	4b03      	ldr	r3, [pc, #12]	; (81184 <ctrl_fpga_reset+0x14>)
   81178:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   8117a:	2026      	movs	r0, #38	; 0x26
   8117c:	4b02      	ldr	r3, [pc, #8]	; (81188 <ctrl_fpga_reset+0x18>)
   8117e:	4798      	blx	r3
}
   81180:	bf00      	nop
   81182:	bd80      	pop	{r7, pc}
   81184:	00082aa1 	.word	0x00082aa1
   81188:	00082ad1 	.word	0x00082ad1

0008118c <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   8118c:	b580      	push	{r7, lr}
   8118e:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   81190:	2100      	movs	r1, #0
   81192:	4802      	ldr	r0, [pc, #8]	; (8119c <ctrl_usart_cb+0x10>)
   81194:	4b02      	ldr	r3, [pc, #8]	; (811a0 <ctrl_usart_cb+0x14>)
   81196:	4798      	blx	r3
}
   81198:	bf00      	nop
   8119a:	bd80      	pop	{r7, pc}
   8119c:	40090000 	.word	0x40090000
   811a0:	00081c59 	.word	0x00081c59

000811a4 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   811a4:	b580      	push	{r7, lr}
   811a6:	b082      	sub	sp, #8
   811a8:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   811aa:	4b10      	ldr	r3, [pc, #64]	; (811ec <ctrl_usart_cb_data+0x48>)
   811ac:	88da      	ldrh	r2, [r3, #6]
   811ae:	4b0f      	ldr	r3, [pc, #60]	; (811ec <ctrl_usart_cb_data+0x48>)
   811b0:	899b      	ldrh	r3, [r3, #12]
   811b2:	429a      	cmp	r2, r3
   811b4:	d816      	bhi.n	811e4 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   811b6:	2300      	movs	r3, #0
   811b8:	607b      	str	r3, [r7, #4]
   811ba:	e00c      	b.n	811d6 <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   811bc:	4b0b      	ldr	r3, [pc, #44]	; (811ec <ctrl_usart_cb_data+0x48>)
   811be:	689a      	ldr	r2, [r3, #8]
   811c0:	687b      	ldr	r3, [r7, #4]
   811c2:	4413      	add	r3, r2
   811c4:	781b      	ldrb	r3, [r3, #0]
   811c6:	461a      	mov	r2, r3
   811c8:	2100      	movs	r1, #0
   811ca:	4809      	ldr	r0, [pc, #36]	; (811f0 <ctrl_usart_cb_data+0x4c>)
   811cc:	4b09      	ldr	r3, [pc, #36]	; (811f4 <ctrl_usart_cb_data+0x50>)
   811ce:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   811d0:	687b      	ldr	r3, [r7, #4]
   811d2:	3301      	adds	r3, #1
   811d4:	607b      	str	r3, [r7, #4]
   811d6:	4b05      	ldr	r3, [pc, #20]	; (811ec <ctrl_usart_cb_data+0x48>)
   811d8:	88db      	ldrh	r3, [r3, #6]
   811da:	461a      	mov	r2, r3
   811dc:	687b      	ldr	r3, [r7, #4]
   811de:	4293      	cmp	r3, r2
   811e0:	dbec      	blt.n	811bc <ctrl_usart_cb_data+0x18>
   811e2:	e000      	b.n	811e6 <ctrl_usart_cb_data+0x42>
		return;
   811e4:	bf00      	nop
	}
}
   811e6:	3708      	adds	r7, #8
   811e8:	46bd      	mov	sp, r7
   811ea:	bd80      	pop	{r7, pc}
   811ec:	2000241c 	.word	0x2000241c
   811f0:	40090000 	.word	0x40090000
   811f4:	00082059 	.word	0x00082059

000811f8 <spi_adc_cb>:

static void spi_adc_cb(void)
{
   811f8:	b580      	push	{r7, lr}
   811fa:	af00      	add	r7, sp, #0
	//Just do single byte writes for now
	if (udd_g_ctrlreq.req.wLength > 2){
   811fc:	4b09      	ldr	r3, [pc, #36]	; (81224 <spi_adc_cb+0x2c>)
   811fe:	88db      	ldrh	r3, [r3, #6]
   81200:	2b02      	cmp	r3, #2
   81202:	d80c      	bhi.n	8121e <spi_adc_cb+0x26>
		return;
	}
    write_spi_adc(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
   81204:	4b07      	ldr	r3, [pc, #28]	; (81224 <spi_adc_cb+0x2c>)
   81206:	689b      	ldr	r3, [r3, #8]
   81208:	781b      	ldrb	r3, [r3, #0]
   8120a:	461a      	mov	r2, r3
   8120c:	4b05      	ldr	r3, [pc, #20]	; (81224 <spi_adc_cb+0x2c>)
   8120e:	689b      	ldr	r3, [r3, #8]
   81210:	3301      	adds	r3, #1
   81212:	781b      	ldrb	r3, [r3, #0]
   81214:	4619      	mov	r1, r3
   81216:	4610      	mov	r0, r2
   81218:	4b03      	ldr	r3, [pc, #12]	; (81228 <spi_adc_cb+0x30>)
   8121a:	4798      	blx	r3
   8121c:	e000      	b.n	81220 <spi_adc_cb+0x28>
		return;
   8121e:	bf00      	nop
}
   81220:	bd80      	pop	{r7, pc}
   81222:	bf00      	nop
   81224:	2000241c 	.word	0x2000241c
   81228:	000822dd 	.word	0x000822dd

0008122c <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   8122c:	b580      	push	{r7, lr}
   8122e:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81230:	4b4c      	ldr	r3, [pc, #304]	; (81364 <main_setup_out_received+0x138>)
   81232:	4a4d      	ldr	r2, [pc, #308]	; (81368 <main_setup_out_received+0x13c>)
   81234:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81236:	4b4b      	ldr	r3, [pc, #300]	; (81364 <main_setup_out_received+0x138>)
   81238:	88db      	ldrh	r3, [r3, #6]
   8123a:	2b40      	cmp	r3, #64	; 0x40
   8123c:	bf28      	it	cs
   8123e:	2340      	movcs	r3, #64	; 0x40
   81240:	b29a      	uxth	r2, r3
   81242:	4b48      	ldr	r3, [pc, #288]	; (81364 <main_setup_out_received+0x138>)
   81244:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   81246:	4b49      	ldr	r3, [pc, #292]	; (8136c <main_setup_out_received+0x140>)
   81248:	2200      	movs	r2, #0
   8124a:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   8124c:	4b45      	ldr	r3, [pc, #276]	; (81364 <main_setup_out_received+0x138>)
   8124e:	785b      	ldrb	r3, [r3, #1]
   81250:	3b10      	subs	r3, #16
   81252:	2b16      	cmp	r3, #22
   81254:	d87a      	bhi.n	8134c <main_setup_out_received+0x120>
   81256:	a201      	add	r2, pc, #4	; (adr r2, 8125c <main_setup_out_received+0x30>)
   81258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8125c:	000812b9 	.word	0x000812b9
   81260:	000812e5 	.word	0x000812e5
   81264:	000812cf 	.word	0x000812cf
   81268:	000812fb 	.word	0x000812fb
   8126c:	0008134d 	.word	0x0008134d
   81270:	0008134d 	.word	0x0008134d
   81274:	00081325 	.word	0x00081325
   81278:	0008134d 	.word	0x0008134d
   8127c:	0008134d 	.word	0x0008134d
   81280:	0008134d 	.word	0x0008134d
   81284:	0008131b 	.word	0x0008131b
   81288:	00081311 	.word	0x00081311
   8128c:	0008134d 	.word	0x0008134d
   81290:	0008134d 	.word	0x0008134d
   81294:	0008134d 	.word	0x0008134d
   81298:	0008134d 	.word	0x0008134d
   8129c:	0008134d 	.word	0x0008134d
   812a0:	0008134d 	.word	0x0008134d
   812a4:	0008132f 	.word	0x0008132f
   812a8:	0008134d 	.word	0x0008134d
   812ac:	0008134d 	.word	0x0008134d
   812b0:	00081339 	.word	0x00081339
   812b4:	00081343 	.word	0x00081343
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   812b8:	2006      	movs	r0, #6
   812ba:	4b2d      	ldr	r3, [pc, #180]	; (81370 <main_setup_out_received+0x144>)
   812bc:	4798      	blx	r3
   812be:	4603      	mov	r3, r0
   812c0:	2b00      	cmp	r3, #0
   812c2:	d045      	beq.n	81350 <main_setup_out_received+0x124>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   812c4:	4b27      	ldr	r3, [pc, #156]	; (81364 <main_setup_out_received+0x138>)
   812c6:	4a2b      	ldr	r2, [pc, #172]	; (81374 <main_setup_out_received+0x148>)
   812c8:	611a      	str	r2, [r3, #16]
            return true;
   812ca:	2301      	movs	r3, #1
   812cc:	e048      	b.n	81360 <main_setup_out_received+0x134>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   812ce:	2006      	movs	r0, #6
   812d0:	4b27      	ldr	r3, [pc, #156]	; (81370 <main_setup_out_received+0x144>)
   812d2:	4798      	blx	r3
   812d4:	4603      	mov	r3, r0
   812d6:	2b00      	cmp	r3, #0
   812d8:	d03c      	beq.n	81354 <main_setup_out_received+0x128>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   812da:	4b22      	ldr	r3, [pc, #136]	; (81364 <main_setup_out_received+0x138>)
   812dc:	4a26      	ldr	r2, [pc, #152]	; (81378 <main_setup_out_received+0x14c>)
   812de:	611a      	str	r2, [r3, #16]
            return true;
   812e0:	2301      	movs	r3, #1
   812e2:	e03d      	b.n	81360 <main_setup_out_received+0x134>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   812e4:	2006      	movs	r0, #6
   812e6:	4b22      	ldr	r3, [pc, #136]	; (81370 <main_setup_out_received+0x144>)
   812e8:	4798      	blx	r3
   812ea:	4603      	mov	r3, r0
   812ec:	2b00      	cmp	r3, #0
   812ee:	d033      	beq.n	81358 <main_setup_out_received+0x12c>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   812f0:	4b1c      	ldr	r3, [pc, #112]	; (81364 <main_setup_out_received+0x138>)
   812f2:	4a22      	ldr	r2, [pc, #136]	; (8137c <main_setup_out_received+0x150>)
   812f4:	611a      	str	r2, [r3, #16]
            return true;
   812f6:	2301      	movs	r3, #1
   812f8:	e032      	b.n	81360 <main_setup_out_received+0x134>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   812fa:	2006      	movs	r0, #6
   812fc:	4b1c      	ldr	r3, [pc, #112]	; (81370 <main_setup_out_received+0x144>)
   812fe:	4798      	blx	r3
   81300:	4603      	mov	r3, r0
   81302:	2b00      	cmp	r3, #0
   81304:	d02a      	beq.n	8135c <main_setup_out_received+0x130>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81306:	4b17      	ldr	r3, [pc, #92]	; (81364 <main_setup_out_received+0x138>)
   81308:	4a1d      	ldr	r2, [pc, #116]	; (81380 <main_setup_out_received+0x154>)
   8130a:	611a      	str	r2, [r3, #16]
            return true;
   8130c:	2301      	movs	r3, #1
   8130e:	e027      	b.n	81360 <main_setup_out_received+0x134>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81310:	4b14      	ldr	r3, [pc, #80]	; (81364 <main_setup_out_received+0x138>)
   81312:	4a1c      	ldr	r2, [pc, #112]	; (81384 <main_setup_out_received+0x158>)
   81314:	611a      	str	r2, [r3, #16]
        return true;
   81316:	2301      	movs	r3, #1
   81318:	e022      	b.n	81360 <main_setup_out_received+0x134>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8131a:	4b12      	ldr	r3, [pc, #72]	; (81364 <main_setup_out_received+0x138>)
   8131c:	4a1a      	ldr	r2, [pc, #104]	; (81388 <main_setup_out_received+0x15c>)
   8131e:	611a      	str	r2, [r3, #16]
        return true;
   81320:	2301      	movs	r3, #1
   81322:	e01d      	b.n	81360 <main_setup_out_received+0x134>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <main_setup_out_received+0x138>)
   81326:	4a19      	ldr	r2, [pc, #100]	; (8138c <main_setup_out_received+0x160>)
   81328:	611a      	str	r2, [r3, #16]
        return true;
   8132a:	2301      	movs	r3, #1
   8132c:	e018      	b.n	81360 <main_setup_out_received+0x134>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   8132e:	4b0d      	ldr	r3, [pc, #52]	; (81364 <main_setup_out_received+0x138>)
   81330:	4a17      	ldr	r2, [pc, #92]	; (81390 <main_setup_out_received+0x164>)
   81332:	611a      	str	r2, [r3, #16]
        return true;
   81334:	2301      	movs	r3, #1
   81336:	e013      	b.n	81360 <main_setup_out_received+0x134>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   81338:	4b0a      	ldr	r3, [pc, #40]	; (81364 <main_setup_out_received+0x138>)
   8133a:	4a16      	ldr	r2, [pc, #88]	; (81394 <main_setup_out_received+0x168>)
   8133c:	611a      	str	r2, [r3, #16]
        return true;
   8133e:	2301      	movs	r3, #1
   81340:	e00e      	b.n	81360 <main_setup_out_received+0x134>
    case REQ_SPI_ADC:
        udd_g_ctrlreq.callback = spi_adc_cb;
   81342:	4b08      	ldr	r3, [pc, #32]	; (81364 <main_setup_out_received+0x138>)
   81344:	4a14      	ldr	r2, [pc, #80]	; (81398 <main_setup_out_received+0x16c>)
   81346:	611a      	str	r2, [r3, #16]
        return true;
   81348:	2301      	movs	r3, #1
   8134a:	e009      	b.n	81360 <main_setup_out_received+0x134>
    default:
        return false;
   8134c:	2300      	movs	r3, #0
   8134e:	e007      	b.n	81360 <main_setup_out_received+0x134>
        break;
   81350:	bf00      	nop
   81352:	e004      	b.n	8135e <main_setup_out_received+0x132>
        break;
   81354:	bf00      	nop
   81356:	e002      	b.n	8135e <main_setup_out_received+0x132>
        break;
   81358:	bf00      	nop
   8135a:	e000      	b.n	8135e <main_setup_out_received+0x132>
        break;
   8135c:	bf00      	nop
    }

    return false;
   8135e:	2300      	movs	r3, #0
}
   81360:	4618      	mov	r0, r3
   81362:	bd80      	pop	{r7, pc}
   81364:	2000241c 	.word	0x2000241c
   81368:	200012d0 	.word	0x200012d0
   8136c:	20001310 	.word	0x20001310
   81370:	00081881 	.word	0x00081881
   81374:	00080f25 	.word	0x00080f25
   81378:	00080f81 	.word	0x00080f81
   8137c:	00081055 	.word	0x00081055
   81380:	00080fdd 	.word	0x00080fdd
   81384:	0008118d 	.word	0x0008118d
   81388:	000811a5 	.word	0x000811a5
   8138c:	00081125 	.word	0x00081125
   81390:	00081095 	.word	0x00081095
   81394:	00081171 	.word	0x00081171
   81398:	000811f9 	.word	0x000811f9

0008139c <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   8139c:	b580      	push	{r7, lr}
   8139e:	b082      	sub	sp, #8
   813a0:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   813a2:	4b5c      	ldr	r3, [pc, #368]	; (81514 <main_setup_in_received+0x178>)
   813a4:	785b      	ldrb	r3, [r3, #1]
   813a6:	3b12      	subs	r3, #18
   813a8:	2b14      	cmp	r3, #20
   813aa:	f200 80ad 	bhi.w	81508 <main_setup_in_received+0x16c>
   813ae:	a201      	add	r2, pc, #4	; (adr r2, 813b4 <main_setup_in_received+0x18>)
   813b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813b4:	00081409 	.word	0x00081409
   813b8:	00081509 	.word	0x00081509
   813bc:	00081509 	.word	0x00081509
   813c0:	000814ab 	.word	0x000814ab
   813c4:	00081509 	.word	0x00081509
   813c8:	00081489 	.word	0x00081489
   813cc:	00081509 	.word	0x00081509
   813d0:	00081509 	.word	0x00081509
   813d4:	0008144b 	.word	0x0008144b
   813d8:	00081435 	.word	0x00081435
   813dc:	00081509 	.word	0x00081509
   813e0:	00081509 	.word	0x00081509
   813e4:	00081509 	.word	0x00081509
   813e8:	00081509 	.word	0x00081509
   813ec:	00081509 	.word	0x00081509
   813f0:	00081509 	.word	0x00081509
   813f4:	00081509 	.word	0x00081509
   813f8:	00081509 	.word	0x00081509
   813fc:	00081509 	.word	0x00081509
   81400:	00081509 	.word	0x00081509
   81404:	000814e5 	.word	0x000814e5
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81408:	4b43      	ldr	r3, [pc, #268]	; (81518 <main_setup_in_received+0x17c>)
   8140a:	681b      	ldr	r3, [r3, #0]
   8140c:	4a41      	ldr	r2, [pc, #260]	; (81514 <main_setup_in_received+0x178>)
   8140e:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81410:	4b42      	ldr	r3, [pc, #264]	; (8151c <main_setup_in_received+0x180>)
   81412:	681b      	ldr	r3, [r3, #0]
   81414:	b29a      	uxth	r2, r3
   81416:	4b3f      	ldr	r3, [pc, #252]	; (81514 <main_setup_in_received+0x178>)
   81418:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   8141a:	4b40      	ldr	r3, [pc, #256]	; (8151c <main_setup_in_received+0x180>)
   8141c:	2200      	movs	r2, #0
   8141e:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81420:	4b3f      	ldr	r3, [pc, #252]	; (81520 <main_setup_in_received+0x184>)
   81422:	4798      	blx	r3
   81424:	4603      	mov	r3, r0
   81426:	2b05      	cmp	r3, #5
   81428:	d102      	bne.n	81430 <main_setup_in_received+0x94>
            FPGA_setlock(fpga_unlocked);
   8142a:	2000      	movs	r0, #0
   8142c:	4b3d      	ldr	r3, [pc, #244]	; (81524 <main_setup_in_received+0x188>)
   8142e:	4798      	blx	r3
        }

        return true;
   81430:	2301      	movs	r3, #1
   81432:	e06a      	b.n	8150a <main_setup_in_received+0x16e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   81434:	2101      	movs	r1, #1
   81436:	483c      	ldr	r0, [pc, #240]	; (81528 <main_setup_in_received+0x18c>)
   81438:	4b3c      	ldr	r3, [pc, #240]	; (8152c <main_setup_in_received+0x190>)
   8143a:	4798      	blx	r3
   8143c:	4603      	mov	r3, r0
   8143e:	2b00      	cmp	r3, #0
   81440:	bf14      	ite	ne
   81442:	2301      	movne	r3, #1
   81444:	2300      	moveq	r3, #0
   81446:	b2db      	uxtb	r3, r3
   81448:	e05f      	b.n	8150a <main_setup_in_received+0x16e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8144a:	2300      	movs	r3, #0
   8144c:	607b      	str	r3, [r7, #4]
   8144e:	e00c      	b.n	8146a <main_setup_in_received+0xce>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81450:	4835      	ldr	r0, [pc, #212]	; (81528 <main_setup_in_received+0x18c>)
   81452:	4b37      	ldr	r3, [pc, #220]	; (81530 <main_setup_in_received+0x194>)
   81454:	4798      	blx	r3
   81456:	4603      	mov	r3, r0
   81458:	b2d9      	uxtb	r1, r3
   8145a:	4a36      	ldr	r2, [pc, #216]	; (81534 <main_setup_in_received+0x198>)
   8145c:	687b      	ldr	r3, [r7, #4]
   8145e:	4413      	add	r3, r2
   81460:	460a      	mov	r2, r1
   81462:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81464:	687b      	ldr	r3, [r7, #4]
   81466:	3301      	adds	r3, #1
   81468:	607b      	str	r3, [r7, #4]
   8146a:	4b2a      	ldr	r3, [pc, #168]	; (81514 <main_setup_in_received+0x178>)
   8146c:	88db      	ldrh	r3, [r3, #6]
   8146e:	461a      	mov	r2, r3
   81470:	687b      	ldr	r3, [r7, #4]
   81472:	4293      	cmp	r3, r2
   81474:	d3ec      	bcc.n	81450 <main_setup_in_received+0xb4>
        }
        udd_g_ctrlreq.payload = respbuf;
   81476:	4b27      	ldr	r3, [pc, #156]	; (81514 <main_setup_in_received+0x178>)
   81478:	4a2e      	ldr	r2, [pc, #184]	; (81534 <main_setup_in_received+0x198>)
   8147a:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   8147c:	687b      	ldr	r3, [r7, #4]
   8147e:	b29a      	uxth	r2, r3
   81480:	4b24      	ldr	r3, [pc, #144]	; (81514 <main_setup_in_received+0x178>)
   81482:	819a      	strh	r2, [r3, #12]
        return true;
   81484:	2301      	movs	r3, #1
   81486:	e040      	b.n	8150a <main_setup_in_received+0x16e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   81488:	4b2a      	ldr	r3, [pc, #168]	; (81534 <main_setup_in_received+0x198>)
   8148a:	2201      	movs	r2, #1
   8148c:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   8148e:	4b29      	ldr	r3, [pc, #164]	; (81534 <main_setup_in_received+0x198>)
   81490:	2201      	movs	r2, #1
   81492:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   81494:	4b27      	ldr	r3, [pc, #156]	; (81534 <main_setup_in_received+0x198>)
   81496:	2200      	movs	r2, #0
   81498:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   8149a:	4b1e      	ldr	r3, [pc, #120]	; (81514 <main_setup_in_received+0x178>)
   8149c:	4a25      	ldr	r2, [pc, #148]	; (81534 <main_setup_in_received+0x198>)
   8149e:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   814a0:	4b1c      	ldr	r3, [pc, #112]	; (81514 <main_setup_in_received+0x178>)
   814a2:	2203      	movs	r2, #3
   814a4:	819a      	strh	r2, [r3, #12]
        return true;
   814a6:	2301      	movs	r3, #1
   814a8:	e02f      	b.n	8150a <main_setup_in_received+0x16e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   814aa:	2007      	movs	r0, #7
   814ac:	4b22      	ldr	r3, [pc, #136]	; (81538 <main_setup_in_received+0x19c>)
   814ae:	4798      	blx	r3
   814b0:	4603      	mov	r3, r0
   814b2:	2b00      	cmp	r3, #0
   814b4:	bf14      	ite	ne
   814b6:	2301      	movne	r3, #1
   814b8:	2300      	moveq	r3, #0
   814ba:	b2db      	uxtb	r3, r3
   814bc:	461a      	mov	r2, r3
   814be:	4b1d      	ldr	r3, [pc, #116]	; (81534 <main_setup_in_received+0x198>)
   814c0:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   814c2:	4b1c      	ldr	r3, [pc, #112]	; (81534 <main_setup_in_received+0x198>)
   814c4:	2200      	movs	r2, #0
   814c6:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   814c8:	4b1a      	ldr	r3, [pc, #104]	; (81534 <main_setup_in_received+0x198>)
   814ca:	2200      	movs	r2, #0
   814cc:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   814ce:	4b19      	ldr	r3, [pc, #100]	; (81534 <main_setup_in_received+0x198>)
   814d0:	2200      	movs	r2, #0
   814d2:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   814d4:	4b0f      	ldr	r3, [pc, #60]	; (81514 <main_setup_in_received+0x178>)
   814d6:	4a17      	ldr	r2, [pc, #92]	; (81534 <main_setup_in_received+0x198>)
   814d8:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   814da:	4b0e      	ldr	r3, [pc, #56]	; (81514 <main_setup_in_received+0x178>)
   814dc:	2204      	movs	r2, #4
   814de:	819a      	strh	r2, [r3, #12]
        return true;
   814e0:	2301      	movs	r3, #1
   814e2:	e012      	b.n	8150a <main_setup_in_received+0x16e>
        break;
    case REQ_SPI_ADC:
        respbuf[0] = read_spi_adc(udd_g_ctrlreq.req.wValue & 0xFF);
   814e4:	4b0b      	ldr	r3, [pc, #44]	; (81514 <main_setup_in_received+0x178>)
   814e6:	885b      	ldrh	r3, [r3, #2]
   814e8:	b2db      	uxtb	r3, r3
   814ea:	4618      	mov	r0, r3
   814ec:	4b13      	ldr	r3, [pc, #76]	; (8153c <main_setup_in_received+0x1a0>)
   814ee:	4798      	blx	r3
   814f0:	4603      	mov	r3, r0
   814f2:	b2da      	uxtb	r2, r3
   814f4:	4b0f      	ldr	r3, [pc, #60]	; (81534 <main_setup_in_received+0x198>)
   814f6:	701a      	strb	r2, [r3, #0]
        udd_g_ctrlreq.payload = respbuf;
   814f8:	4b06      	ldr	r3, [pc, #24]	; (81514 <main_setup_in_received+0x178>)
   814fa:	4a0e      	ldr	r2, [pc, #56]	; (81534 <main_setup_in_received+0x198>)
   814fc:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 1;
   814fe:	4b05      	ldr	r3, [pc, #20]	; (81514 <main_setup_in_received+0x178>)
   81500:	2201      	movs	r2, #1
   81502:	819a      	strh	r2, [r3, #12]
        return true;
   81504:	2301      	movs	r3, #1
   81506:	e000      	b.n	8150a <main_setup_in_received+0x16e>
        break;
    default:
        return false;
   81508:	2300      	movs	r3, #0
    }
    return false;
}
   8150a:	4618      	mov	r0, r3
   8150c:	3708      	adds	r7, #8
   8150e:	46bd      	mov	sp, r7
   81510:	bd80      	pop	{r7, pc}
   81512:	bf00      	nop
   81514:	2000241c 	.word	0x2000241c
   81518:	20001314 	.word	0x20001314
   8151c:	20001318 	.word	0x20001318
   81520:	000818d9 	.word	0x000818d9
   81524:	00081881 	.word	0x00081881
   81528:	40090000 	.word	0x40090000
   8152c:	00081c59 	.word	0x00081c59
   81530:	00082115 	.word	0x00082115
   81534:	20001520 	.word	0x20001520
   81538:	00082a71 	.word	0x00082a71
   8153c:	0008234d 	.word	0x0008234d

00081540 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81540:	b580      	push	{r7, lr}
   81542:	b082      	sub	sp, #8
   81544:	af00      	add	r7, sp, #0
   81546:	4603      	mov	r3, r0
   81548:	6039      	str	r1, [r7, #0]
   8154a:	71fb      	strb	r3, [r7, #7]
   8154c:	4613      	mov	r3, r2
   8154e:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81550:	79fb      	ldrb	r3, [r7, #7]
   81552:	2b00      	cmp	r3, #0
   81554:	d108      	bne.n	81568 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81556:	4b06      	ldr	r3, [pc, #24]	; (81570 <main_vendor_bulk_in_received+0x30>)
   81558:	4798      	blx	r3
   8155a:	4603      	mov	r3, r0
   8155c:	2b02      	cmp	r3, #2
   8155e:	d104      	bne.n	8156a <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81560:	2000      	movs	r0, #0
   81562:	4b04      	ldr	r3, [pc, #16]	; (81574 <main_vendor_bulk_in_received+0x34>)
   81564:	4798      	blx	r3
   81566:	e000      	b.n	8156a <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81568:	bf00      	nop
    }
}
   8156a:	3708      	adds	r7, #8
   8156c:	46bd      	mov	sp, r7
   8156e:	bd80      	pop	{r7, pc}
   81570:	000818d9 	.word	0x000818d9
   81574:	00081881 	.word	0x00081881

00081578 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81578:	b580      	push	{r7, lr}
   8157a:	b084      	sub	sp, #16
   8157c:	af00      	add	r7, sp, #0
   8157e:	4603      	mov	r3, r0
   81580:	6039      	str	r1, [r7, #0]
   81582:	71fb      	strb	r3, [r7, #7]
   81584:	4613      	mov	r3, r2
   81586:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81588:	79fb      	ldrb	r3, [r7, #7]
   8158a:	2b00      	cmp	r3, #0
   8158c:	d006      	beq.n	8159c <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8158e:	4a22      	ldr	r2, [pc, #136]	; (81618 <main_vendor_bulk_out_received+0xa0>)
   81590:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81594:	4821      	ldr	r0, [pc, #132]	; (8161c <main_vendor_bulk_out_received+0xa4>)
   81596:	4b22      	ldr	r3, [pc, #136]	; (81620 <main_vendor_bulk_out_received+0xa8>)
   81598:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8159a:	e039      	b.n	81610 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   8159c:	4b21      	ldr	r3, [pc, #132]	; (81624 <main_vendor_bulk_out_received+0xac>)
   8159e:	781b      	ldrb	r3, [r3, #0]
   815a0:	2b00      	cmp	r3, #0
   815a2:	d11a      	bne.n	815da <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   815a4:	2300      	movs	r3, #0
   815a6:	60fb      	str	r3, [r7, #12]
   815a8:	e00b      	b.n	815c2 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   815aa:	4b1f      	ldr	r3, [pc, #124]	; (81628 <main_vendor_bulk_out_received+0xb0>)
   815ac:	681a      	ldr	r2, [r3, #0]
   815ae:	68fb      	ldr	r3, [r7, #12]
   815b0:	4413      	add	r3, r2
   815b2:	491a      	ldr	r1, [pc, #104]	; (8161c <main_vendor_bulk_out_received+0xa4>)
   815b4:	68fa      	ldr	r2, [r7, #12]
   815b6:	440a      	add	r2, r1
   815b8:	7812      	ldrb	r2, [r2, #0]
   815ba:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   815bc:	68fb      	ldr	r3, [r7, #12]
   815be:	3301      	adds	r3, #1
   815c0:	60fb      	str	r3, [r7, #12]
   815c2:	68fa      	ldr	r2, [r7, #12]
   815c4:	683b      	ldr	r3, [r7, #0]
   815c6:	429a      	cmp	r2, r3
   815c8:	d3ef      	bcc.n	815aa <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   815ca:	4b18      	ldr	r3, [pc, #96]	; (8162c <main_vendor_bulk_out_received+0xb4>)
   815cc:	4798      	blx	r3
   815ce:	4603      	mov	r3, r0
   815d0:	2b04      	cmp	r3, #4
   815d2:	d117      	bne.n	81604 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   815d4:	4b16      	ldr	r3, [pc, #88]	; (81630 <main_vendor_bulk_out_received+0xb8>)
   815d6:	4798      	blx	r3
   815d8:	e014      	b.n	81604 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   815da:	4b12      	ldr	r3, [pc, #72]	; (81624 <main_vendor_bulk_out_received+0xac>)
   815dc:	781b      	ldrb	r3, [r3, #0]
   815de:	2b0a      	cmp	r3, #10
   815e0:	d110      	bne.n	81604 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   815e2:	2300      	movs	r3, #0
   815e4:	60bb      	str	r3, [r7, #8]
   815e6:	e009      	b.n	815fc <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   815e8:	4a0c      	ldr	r2, [pc, #48]	; (8161c <main_vendor_bulk_out_received+0xa4>)
   815ea:	68bb      	ldr	r3, [r7, #8]
   815ec:	4413      	add	r3, r2
   815ee:	781b      	ldrb	r3, [r3, #0]
   815f0:	4618      	mov	r0, r3
   815f2:	4b10      	ldr	r3, [pc, #64]	; (81634 <main_vendor_bulk_out_received+0xbc>)
   815f4:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   815f6:	68bb      	ldr	r3, [r7, #8]
   815f8:	3301      	adds	r3, #1
   815fa:	60bb      	str	r3, [r7, #8]
   815fc:	68ba      	ldr	r2, [r7, #8]
   815fe:	683b      	ldr	r3, [r7, #0]
   81600:	429a      	cmp	r2, r3
   81602:	d3f1      	bcc.n	815e8 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81604:	4a04      	ldr	r2, [pc, #16]	; (81618 <main_vendor_bulk_out_received+0xa0>)
   81606:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8160a:	4804      	ldr	r0, [pc, #16]	; (8161c <main_vendor_bulk_out_received+0xa4>)
   8160c:	4b04      	ldr	r3, [pc, #16]	; (81620 <main_vendor_bulk_out_received+0xa8>)
   8160e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   81610:	3710      	adds	r7, #16
   81612:	46bd      	mov	sp, r7
   81614:	bd80      	pop	{r7, pc}
   81616:	bf00      	nop
   81618:	00081579 	.word	0x00081579
   8161c:	20000ed0 	.word	0x20000ed0
   81620:	00085b6d 	.word	0x00085b6d
   81624:	20001310 	.word	0x20001310
   81628:	20000280 	.word	0x20000280
   8162c:	000818d9 	.word	0x000818d9
   81630:	000818c1 	.word	0x000818c1
   81634:	00081aa5 	.word	0x00081aa5

00081638 <cdc_enable>:
/////////////////////////////////////////////////////////
#include "usb_protocol_cdc.h"
volatile bool enable_cdc_transfer[2] = {false, false};
	extern volatile bool usart_x_enabled[4];
bool cdc_enable(uint8_t port)
{
   81638:	b480      	push	{r7}
   8163a:	b083      	sub	sp, #12
   8163c:	af00      	add	r7, sp, #0
   8163e:	4603      	mov	r3, r0
   81640:	71fb      	strb	r3, [r7, #7]
	enable_cdc_transfer[port] = true;
   81642:	79fb      	ldrb	r3, [r7, #7]
   81644:	4a04      	ldr	r2, [pc, #16]	; (81658 <cdc_enable+0x20>)
   81646:	2101      	movs	r1, #1
   81648:	54d1      	strb	r1, [r2, r3]
	return true;
   8164a:	2301      	movs	r3, #1
}
   8164c:	4618      	mov	r0, r3
   8164e:	370c      	adds	r7, #12
   81650:	46bd      	mov	sp, r7
   81652:	bc80      	pop	{r7}
   81654:	4770      	bx	lr
   81656:	bf00      	nop
   81658:	2000131c 	.word	0x2000131c

0008165c <cdc_disable>:

void cdc_disable(uint8_t port)
{
   8165c:	b480      	push	{r7}
   8165e:	b083      	sub	sp, #12
   81660:	af00      	add	r7, sp, #0
   81662:	4603      	mov	r3, r0
   81664:	71fb      	strb	r3, [r7, #7]
	enable_cdc_transfer[port] = false;
   81666:	79fb      	ldrb	r3, [r7, #7]
   81668:	4a03      	ldr	r2, [pc, #12]	; (81678 <cdc_disable+0x1c>)
   8166a:	2100      	movs	r1, #0
   8166c:	54d1      	strb	r1, [r2, r3]
}
   8166e:	bf00      	nop
   81670:	370c      	adds	r7, #12
   81672:	46bd      	mov	sp, r7
   81674:	bc80      	pop	{r7}
   81676:	4770      	bx	lr
   81678:	2000131c 	.word	0x2000131c

0008167c <my_callback_rx_notify>:
				usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
			}
*/
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	b084      	sub	sp, #16
   81680:	af00      	add	r7, sp, #0
   81682:	4603      	mov	r3, r0
   81684:	71fb      	strb	r3, [r7, #7]
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   81686:	79fb      	ldrb	r3, [r7, #7]
   81688:	4a1d      	ldr	r2, [pc, #116]	; (81700 <my_callback_rx_notify+0x84>)
   8168a:	5cd3      	ldrb	r3, [r2, r3]
   8168c:	b2db      	uxtb	r3, r3
   8168e:	2b00      	cmp	r3, #0
   81690:	d031      	beq.n	816f6 <my_callback_rx_notify+0x7a>
   81692:	4b1c      	ldr	r3, [pc, #112]	; (81704 <my_callback_rx_notify+0x88>)
   81694:	781b      	ldrb	r3, [r3, #0]
   81696:	b2db      	uxtb	r3, r3
   81698:	2b00      	cmp	r3, #0
   8169a:	d02c      	beq.n	816f6 <my_callback_rx_notify+0x7a>
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   8169c:	79fb      	ldrb	r3, [r7, #7]
   8169e:	4618      	mov	r0, r3
   816a0:	4b19      	ldr	r3, [pc, #100]	; (81708 <my_callback_rx_notify+0x8c>)
   816a2:	4798      	blx	r3
   816a4:	60f8      	str	r0, [r7, #12]
		while (num_char > 0) {
   816a6:	e023      	b.n	816f0 <my_callback_rx_notify+0x74>
			num_char = (num_char > 512) ? 512 : num_char;
   816a8:	68fb      	ldr	r3, [r7, #12]
   816aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   816ae:	bf28      	it	cs
   816b0:	f44f 7300 	movcs.w	r3, #512	; 0x200
   816b4:	60fb      	str	r3, [r7, #12]
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   816b6:	79fb      	ldrb	r3, [r7, #7]
   816b8:	68fa      	ldr	r2, [r7, #12]
   816ba:	4914      	ldr	r1, [pc, #80]	; (8170c <my_callback_rx_notify+0x90>)
   816bc:	4618      	mov	r0, r3
   816be:	4b14      	ldr	r3, [pc, #80]	; (81710 <my_callback_rx_notify+0x94>)
   816c0:	4798      	blx	r3
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   816c2:	2300      	movs	r3, #0
   816c4:	817b      	strh	r3, [r7, #10]
   816c6:	e00a      	b.n	816de <my_callback_rx_notify+0x62>
				//usart_driver_putchar(USART_TARGET, NULL, udi_cdc_multi_getc(port));
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   816c8:	897b      	ldrh	r3, [r7, #10]
   816ca:	4a10      	ldr	r2, [pc, #64]	; (8170c <my_callback_rx_notify+0x90>)
   816cc:	5cd3      	ldrb	r3, [r2, r3]
   816ce:	461a      	mov	r2, r3
   816d0:	2100      	movs	r1, #0
   816d2:	4810      	ldr	r0, [pc, #64]	; (81714 <my_callback_rx_notify+0x98>)
   816d4:	4b10      	ldr	r3, [pc, #64]	; (81718 <my_callback_rx_notify+0x9c>)
   816d6:	4798      	blx	r3
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   816d8:	897b      	ldrh	r3, [r7, #10]
   816da:	3301      	adds	r3, #1
   816dc:	817b      	strh	r3, [r7, #10]
   816de:	897b      	ldrh	r3, [r7, #10]
   816e0:	68fa      	ldr	r2, [r7, #12]
   816e2:	429a      	cmp	r2, r3
   816e4:	d8f0      	bhi.n	816c8 <my_callback_rx_notify+0x4c>
			}
			num_char = udi_cdc_multi_get_nb_received_data(port);
   816e6:	79fb      	ldrb	r3, [r7, #7]
   816e8:	4618      	mov	r0, r3
   816ea:	4b07      	ldr	r3, [pc, #28]	; (81708 <my_callback_rx_notify+0x8c>)
   816ec:	4798      	blx	r3
   816ee:	60f8      	str	r0, [r7, #12]
		while (num_char > 0) {
   816f0:	68fb      	ldr	r3, [r7, #12]
   816f2:	2b00      	cmp	r3, #0
   816f4:	d1d8      	bne.n	816a8 <my_callback_rx_notify+0x2c>
		while (*st) {
			udi_cdc_putc(*st++);
		}
		#endif
	}
}
   816f6:	bf00      	nop
   816f8:	3710      	adds	r7, #16
   816fa:	46bd      	mov	sp, r7
   816fc:	bd80      	pop	{r7, pc}
   816fe:	bf00      	nop
   81700:	2000131c 	.word	0x2000131c
   81704:	20001564 	.word	0x20001564
   81708:	00085729 	.word	0x00085729
   8170c:	20001320 	.word	0x20001320
   81710:	000857b9 	.word	0x000857b9
   81714:	40090000 	.word	0x40090000
   81718:	00082059 	.word	0x00082059

0008171c <my_callback_config>:

extern tcirc_buf rx0buf, tx0buf;
extern tcirc_buf usb_usart_circ_buf;

void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
   8171c:	b580      	push	{r7, lr}
   8171e:	b088      	sub	sp, #32
   81720:	af00      	add	r7, sp, #0
   81722:	4603      	mov	r3, r0
   81724:	6039      	str	r1, [r7, #0]
   81726:	71fb      	strb	r3, [r7, #7]
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   81728:	79fb      	ldrb	r3, [r7, #7]
   8172a:	4a44      	ldr	r2, [pc, #272]	; (8183c <my_callback_config+0x120>)
   8172c:	5cd3      	ldrb	r3, [r2, r3]
   8172e:	b2db      	uxtb	r3, r3
   81730:	2b00      	cmp	r3, #0
   81732:	f000 8080 	beq.w	81836 <my_callback_config+0x11a>
   81736:	4b42      	ldr	r3, [pc, #264]	; (81840 <my_callback_config+0x124>)
   81738:	781b      	ldrb	r3, [r3, #0]
   8173a:	b2db      	uxtb	r3, r3
   8173c:	2b00      	cmp	r3, #0
   8173e:	d07a      	beq.n	81836 <my_callback_config+0x11a>
		sam_usart_opt_t usartopts;
		if (port != 0){
   81740:	79fb      	ldrb	r3, [r7, #7]
   81742:	2b00      	cmp	r3, #0
   81744:	d170      	bne.n	81828 <my_callback_config+0x10c>
			return;
		}
		if (cfg->bDataBits < 5)
   81746:	683b      	ldr	r3, [r7, #0]
   81748:	799b      	ldrb	r3, [r3, #6]
   8174a:	2b04      	cmp	r3, #4
   8174c:	d96e      	bls.n	8182c <my_callback_config+0x110>
			return;
		if (cfg->bCharFormat > 2)
   8174e:	683b      	ldr	r3, [r7, #0]
   81750:	791b      	ldrb	r3, [r3, #4]
   81752:	2b02      	cmp	r3, #2
   81754:	d86c      	bhi.n	81830 <my_callback_config+0x114>
			return;
	
		usartopts.baudrate = cfg->dwDTERate;
   81756:	683b      	ldr	r3, [r7, #0]
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	60bb      	str	r3, [r7, #8]
		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8175c:	2300      	movs	r3, #0
   8175e:	61bb      	str	r3, [r7, #24]
		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   81760:	683b      	ldr	r3, [r7, #0]
   81762:	791b      	ldrb	r3, [r3, #4]
   81764:	031b      	lsls	r3, r3, #12
   81766:	617b      	str	r3, [r7, #20]
		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   81768:	683b      	ldr	r3, [r7, #0]
   8176a:	799b      	ldrb	r3, [r3, #6]
   8176c:	3b05      	subs	r3, #5
   8176e:	019b      	lsls	r3, r3, #6
   81770:	60fb      	str	r3, [r7, #12]
		switch(cfg->bParityType) {
   81772:	683b      	ldr	r3, [r7, #0]
   81774:	795b      	ldrb	r3, [r3, #5]
   81776:	2b04      	cmp	r3, #4
   81778:	d85c      	bhi.n	81834 <my_callback_config+0x118>
   8177a:	a201      	add	r2, pc, #4	; (adr r2, 81780 <my_callback_config+0x64>)
   8177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81780:	00081795 	.word	0x00081795
   81784:	0008179d 	.word	0x0008179d
   81788:	000817a5 	.word	0x000817a5
   8178c:	000817ab 	.word	0x000817ab
   81790:	000817b3 	.word	0x000817b3
			case CDC_PAR_NONE:
			usartopts.parity_type = US_MR_PAR_NO;
   81794:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81798:	613b      	str	r3, [r7, #16]
			break;
   8179a:	e00e      	b.n	817ba <my_callback_config+0x9e>
			case CDC_PAR_ODD:
			usartopts.parity_type = US_MR_PAR_ODD;
   8179c:	f44f 7300 	mov.w	r3, #512	; 0x200
   817a0:	613b      	str	r3, [r7, #16]
			break;
   817a2:	e00a      	b.n	817ba <my_callback_config+0x9e>
			case CDC_PAR_EVEN:
			usartopts.parity_type = US_MR_PAR_EVEN;
   817a4:	2300      	movs	r3, #0
   817a6:	613b      	str	r3, [r7, #16]
			break;
   817a8:	e007      	b.n	817ba <my_callback_config+0x9e>
			case CDC_PAR_MARK:
			usartopts.parity_type = US_MR_PAR_MARK;
   817aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   817ae:	613b      	str	r3, [r7, #16]
			break;
   817b0:	e003      	b.n	817ba <my_callback_config+0x9e>
			case CDC_PAR_SPACE:
			usartopts.parity_type = US_MR_PAR_SPACE;
   817b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   817b6:	613b      	str	r3, [r7, #16]
			break;
   817b8:	bf00      	nop
			default:
			return;
		}
		if (port == 0)
   817ba:	79fb      	ldrb	r3, [r7, #7]
   817bc:	2b00      	cmp	r3, #0
   817be:	d13a      	bne.n	81836 <my_callback_config+0x11a>
		{
			//completely restart USART - otherwise breaks tx or stalls
			sysclk_enable_peripheral_clock(ID_USART0);
   817c0:	200d      	movs	r0, #13
   817c2:	4b20      	ldr	r3, [pc, #128]	; (81844 <my_callback_config+0x128>)
   817c4:	4798      	blx	r3
			init_circ_buf(&usb_usart_circ_buf);
   817c6:	4820      	ldr	r0, [pc, #128]	; (81848 <my_callback_config+0x12c>)
   817c8:	4b20      	ldr	r3, [pc, #128]	; (8184c <my_callback_config+0x130>)
   817ca:	4798      	blx	r3
			init_circ_buf(&tx0buf);
   817cc:	4820      	ldr	r0, [pc, #128]	; (81850 <my_callback_config+0x134>)
   817ce:	4b1f      	ldr	r3, [pc, #124]	; (8184c <my_callback_config+0x130>)
   817d0:	4798      	blx	r3
			init_circ_buf(&rx0buf);
   817d2:	4820      	ldr	r0, [pc, #128]	; (81854 <my_callback_config+0x138>)
   817d4:	4b1d      	ldr	r3, [pc, #116]	; (8184c <my_callback_config+0x130>)
   817d6:	4798      	blx	r3
			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   817d8:	4b1f      	ldr	r3, [pc, #124]	; (81858 <my_callback_config+0x13c>)
   817da:	4798      	blx	r3
   817dc:	4602      	mov	r2, r0
   817de:	f107 0308 	add.w	r3, r7, #8
   817e2:	4619      	mov	r1, r3
   817e4:	481d      	ldr	r0, [pc, #116]	; (8185c <my_callback_config+0x140>)
   817e6:	4b1e      	ldr	r3, [pc, #120]	; (81860 <my_callback_config+0x144>)
   817e8:	4798      	blx	r3
			
			usart_enable_rx(USART0);
   817ea:	481c      	ldr	r0, [pc, #112]	; (8185c <my_callback_config+0x140>)
   817ec:	4b1d      	ldr	r3, [pc, #116]	; (81864 <my_callback_config+0x148>)
   817ee:	4798      	blx	r3
			usart_enable_tx(USART0);
   817f0:	481a      	ldr	r0, [pc, #104]	; (8185c <my_callback_config+0x140>)
   817f2:	4b1d      	ldr	r3, [pc, #116]	; (81868 <my_callback_config+0x14c>)
   817f4:	4798      	blx	r3
			
			usart_enable_interrupt(USART0, UART_IER_RXRDY);
   817f6:	2101      	movs	r1, #1
   817f8:	4818      	ldr	r0, [pc, #96]	; (8185c <my_callback_config+0x140>)
   817fa:	4b1c      	ldr	r3, [pc, #112]	; (8186c <my_callback_config+0x150>)
   817fc:	4798      	blx	r3
			
			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   817fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81802:	2013      	movs	r0, #19
   81804:	4b1a      	ldr	r3, [pc, #104]	; (81870 <my_callback_config+0x154>)
   81806:	4798      	blx	r3
			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81808:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8180c:	2012      	movs	r0, #18
   8180e:	4b18      	ldr	r3, [pc, #96]	; (81870 <my_callback_config+0x154>)
   81810:	4798      	blx	r3
			irq_register_handler(USART0_IRQn, 5);
   81812:	200d      	movs	r0, #13
   81814:	4b17      	ldr	r3, [pc, #92]	; (81874 <my_callback_config+0x158>)
   81816:	4798      	blx	r3
   81818:	2105      	movs	r1, #5
   8181a:	200d      	movs	r0, #13
   8181c:	4b16      	ldr	r3, [pc, #88]	; (81878 <my_callback_config+0x15c>)
   8181e:	4798      	blx	r3
   81820:	200d      	movs	r0, #13
   81822:	4b16      	ldr	r3, [pc, #88]	; (8187c <my_callback_config+0x160>)
   81824:	4798      	blx	r3
   81826:	e006      	b.n	81836 <my_callback_config+0x11a>
			return;
   81828:	bf00      	nop
   8182a:	e004      	b.n	81836 <my_callback_config+0x11a>
			return;
   8182c:	bf00      	nop
   8182e:	e002      	b.n	81836 <my_callback_config+0x11a>
			return;
   81830:	bf00      	nop
   81832:	e000      	b.n	81836 <my_callback_config+0x11a>
			return;
   81834:	bf00      	nop
		}
	}
		
}
   81836:	3720      	adds	r7, #32
   81838:	46bd      	mov	sp, r7
   8183a:	bd80      	pop	{r7, pc}
   8183c:	2000131c 	.word	0x2000131c
   81840:	20001564 	.word	0x20001564
   81844:	00080e49 	.word	0x00080e49
   81848:	20002154 	.word	0x20002154
   8184c:	000823d5 	.word	0x000823d5
   81850:	20002384 	.word	0x20002384
   81854:	20001fb0 	.word	0x20001fb0
   81858:	00080e35 	.word	0x00080e35
   8185c:	40090000 	.word	0x40090000
   81860:	00087a1d 	.word	0x00087a1d
   81864:	00087be1 	.word	0x00087be1
   81868:	00087bb1 	.word	0x00087bb1
   8186c:	00087c29 	.word	0x00087c29
   81870:	00082b01 	.word	0x00082b01
   81874:	00080bed 	.word	0x00080bed
   81878:	00080c21 	.word	0x00080c21
   8187c:	00080bbd 	.word	0x00080bbd

00081880 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81880:	b580      	push	{r7, lr}
   81882:	b084      	sub	sp, #16
   81884:	af00      	add	r7, sp, #0
   81886:	4603      	mov	r3, r0
   81888:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8188a:	2300      	movs	r3, #0
   8188c:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8188e:	4b09      	ldr	r3, [pc, #36]	; (818b4 <FPGA_setlock+0x34>)
   81890:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81892:	4b09      	ldr	r3, [pc, #36]	; (818b8 <FPGA_setlock+0x38>)
   81894:	781b      	ldrb	r3, [r3, #0]
   81896:	b2db      	uxtb	r3, r3
   81898:	2b00      	cmp	r3, #0
   8189a:	d104      	bne.n	818a6 <FPGA_setlock+0x26>
  {
    ret = 1;
   8189c:	2301      	movs	r3, #1
   8189e:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   818a0:	4a05      	ldr	r2, [pc, #20]	; (818b8 <FPGA_setlock+0x38>)
   818a2:	79fb      	ldrb	r3, [r7, #7]
   818a4:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   818a6:	4b05      	ldr	r3, [pc, #20]	; (818bc <FPGA_setlock+0x3c>)
   818a8:	4798      	blx	r3
  return ret;
   818aa:	68fb      	ldr	r3, [r7, #12]
}
   818ac:	4618      	mov	r0, r3
   818ae:	3710      	adds	r7, #16
   818b0:	46bd      	mov	sp, r7
   818b2:	bd80      	pop	{r7, pc}
   818b4:	0008270d 	.word	0x0008270d
   818b8:	20001560 	.word	0x20001560
   818bc:	00082765 	.word	0x00082765

000818c0 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   818c0:	b480      	push	{r7}
   818c2:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   818c4:	4b03      	ldr	r3, [pc, #12]	; (818d4 <FPGA_releaselock+0x14>)
   818c6:	2200      	movs	r2, #0
   818c8:	701a      	strb	r2, [r3, #0]
}
   818ca:	bf00      	nop
   818cc:	46bd      	mov	sp, r7
   818ce:	bc80      	pop	{r7}
   818d0:	4770      	bx	lr
   818d2:	bf00      	nop
   818d4:	20001560 	.word	0x20001560

000818d8 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   818d8:	b480      	push	{r7}
   818da:	af00      	add	r7, sp, #0
  return _fpga_locked;
   818dc:	4b03      	ldr	r3, [pc, #12]	; (818ec <FPGA_lockstatus+0x14>)
   818de:	781b      	ldrb	r3, [r3, #0]
   818e0:	b2db      	uxtb	r3, r3
}
   818e2:	4618      	mov	r0, r3
   818e4:	46bd      	mov	sp, r7
   818e6:	bc80      	pop	{r7}
   818e8:	4770      	bx	lr
   818ea:	bf00      	nop
   818ec:	20001560 	.word	0x20001560

000818f0 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   818f0:	b580      	push	{r7, lr}
   818f2:	b082      	sub	sp, #8
   818f4:	af00      	add	r7, sp, #0
   818f6:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   818f8:	4b0c      	ldr	r3, [pc, #48]	; (8192c <FPGA_setaddr+0x3c>)
   818fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   818fc:	f003 0240 	and.w	r2, r3, #64	; 0x40
   81900:	687b      	ldr	r3, [r7, #4]
   81902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81906:	431a      	orrs	r2, r3
   81908:	687b      	ldr	r3, [r7, #4]
   8190a:	005b      	lsls	r3, r3, #1
   8190c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   81910:	4906      	ldr	r1, [pc, #24]	; (8192c <FPGA_setaddr+0x3c>)
   81912:	4313      	orrs	r3, r2
   81914:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   81916:	2031      	movs	r0, #49	; 0x31
   81918:	4b05      	ldr	r3, [pc, #20]	; (81930 <FPGA_setaddr+0x40>)
   8191a:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   8191c:	2031      	movs	r0, #49	; 0x31
   8191e:	4b05      	ldr	r3, [pc, #20]	; (81934 <FPGA_setaddr+0x44>)
   81920:	4798      	blx	r3
}
   81922:	bf00      	nop
   81924:	3708      	adds	r7, #8
   81926:	46bd      	mov	sp, r7
   81928:	bd80      	pop	{r7, pc}
   8192a:	bf00      	nop
   8192c:	400e0e00 	.word	0x400e0e00
   81930:	00082ad1 	.word	0x00082ad1
   81934:	00082aa1 	.word	0x00082aa1

00081938 <osc_get_rate>:
{
   81938:	b480      	push	{r7}
   8193a:	b083      	sub	sp, #12
   8193c:	af00      	add	r7, sp, #0
   8193e:	6078      	str	r0, [r7, #4]
   81940:	687b      	ldr	r3, [r7, #4]
   81942:	2b07      	cmp	r3, #7
   81944:	d823      	bhi.n	8198e <osc_get_rate+0x56>
   81946:	a201      	add	r2, pc, #4	; (adr r2, 8194c <osc_get_rate+0x14>)
   81948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8194c:	0008196d 	.word	0x0008196d
   81950:	00081973 	.word	0x00081973
   81954:	00081977 	.word	0x00081977
   81958:	0008197b 	.word	0x0008197b
   8195c:	0008197f 	.word	0x0008197f
   81960:	00081983 	.word	0x00081983
   81964:	00081987 	.word	0x00081987
   81968:	0008198b 	.word	0x0008198b
		return OSC_SLCK_32K_RC_HZ;
   8196c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81970:	e00e      	b.n	81990 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81972:	2300      	movs	r3, #0
   81974:	e00c      	b.n	81990 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81976:	2300      	movs	r3, #0
   81978:	e00a      	b.n	81990 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8197a:	4b08      	ldr	r3, [pc, #32]	; (8199c <osc_get_rate+0x64>)
   8197c:	e008      	b.n	81990 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8197e:	4b08      	ldr	r3, [pc, #32]	; (819a0 <osc_get_rate+0x68>)
   81980:	e006      	b.n	81990 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81982:	4b08      	ldr	r3, [pc, #32]	; (819a4 <osc_get_rate+0x6c>)
   81984:	e004      	b.n	81990 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81986:	4b07      	ldr	r3, [pc, #28]	; (819a4 <osc_get_rate+0x6c>)
   81988:	e002      	b.n	81990 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8198a:	4b06      	ldr	r3, [pc, #24]	; (819a4 <osc_get_rate+0x6c>)
   8198c:	e000      	b.n	81990 <osc_get_rate+0x58>
	return 0;
   8198e:	2300      	movs	r3, #0
}
   81990:	4618      	mov	r0, r3
   81992:	370c      	adds	r7, #12
   81994:	46bd      	mov	sp, r7
   81996:	bc80      	pop	{r7}
   81998:	4770      	bx	lr
   8199a:	bf00      	nop
   8199c:	003d0900 	.word	0x003d0900
   819a0:	007a1200 	.word	0x007a1200
   819a4:	00b71b00 	.word	0x00b71b00

000819a8 <sysclk_get_main_hz>:
{
   819a8:	b580      	push	{r7, lr}
   819aa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   819ac:	2006      	movs	r0, #6
   819ae:	4b03      	ldr	r3, [pc, #12]	; (819bc <sysclk_get_main_hz+0x14>)
   819b0:	4798      	blx	r3
   819b2:	4603      	mov	r3, r0
   819b4:	011b      	lsls	r3, r3, #4
}
   819b6:	4618      	mov	r0, r3
   819b8:	bd80      	pop	{r7, pc}
   819ba:	bf00      	nop
   819bc:	00081939 	.word	0x00081939

000819c0 <sysclk_get_cpu_hz>:
{
   819c0:	b580      	push	{r7, lr}
   819c2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   819c4:	4b02      	ldr	r3, [pc, #8]	; (819d0 <sysclk_get_cpu_hz+0x10>)
   819c6:	4798      	blx	r3
   819c8:	4603      	mov	r3, r0
   819ca:	085b      	lsrs	r3, r3, #1
}
   819cc:	4618      	mov	r0, r3
   819ce:	bd80      	pop	{r7, pc}
   819d0:	000819a9 	.word	0x000819a9

000819d4 <sysclk_enable_peripheral_clock>:
{
   819d4:	b580      	push	{r7, lr}
   819d6:	b082      	sub	sp, #8
   819d8:	af00      	add	r7, sp, #0
   819da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   819dc:	6878      	ldr	r0, [r7, #4]
   819de:	4b03      	ldr	r3, [pc, #12]	; (819ec <sysclk_enable_peripheral_clock+0x18>)
   819e0:	4798      	blx	r3
}
   819e2:	bf00      	nop
   819e4:	3708      	adds	r7, #8
   819e6:	46bd      	mov	sp, r7
   819e8:	bd80      	pop	{r7, pc}
   819ea:	bf00      	nop
   819ec:	00083165 	.word	0x00083165

000819f0 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   819f0:	b580      	push	{r7, lr}
   819f2:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   819f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   819f8:	2019      	movs	r0, #25
   819fa:	4b03      	ldr	r3, [pc, #12]	; (81a08 <fpga_program_init+0x18>)
   819fc:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   819fe:	2019      	movs	r0, #25
   81a00:	4b02      	ldr	r3, [pc, #8]	; (81a0c <fpga_program_init+0x1c>)
   81a02:	4798      	blx	r3
}
   81a04:	bf00      	nop
   81a06:	bd80      	pop	{r7, pc}
   81a08:	00082b01 	.word	0x00082b01
   81a0c:	00082aa1 	.word	0x00082aa1

00081a10 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81a10:	b580      	push	{r7, lr}
   81a12:	b084      	sub	sp, #16
   81a14:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   81a16:	2019      	movs	r0, #25
   81a18:	4b14      	ldr	r3, [pc, #80]	; (81a6c <fpga_program_setup1+0x5c>)
   81a1a:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   81a1c:	4b14      	ldr	r3, [pc, #80]	; (81a70 <fpga_program_setup1+0x60>)
   81a1e:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   81a20:	23c0      	movs	r3, #192	; 0xc0
   81a22:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   81a24:	2300      	movs	r3, #0
   81a26:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   81a28:	2300      	movs	r3, #0
   81a2a:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   81a2c:	200d      	movs	r0, #13
   81a2e:	4b11      	ldr	r3, [pc, #68]	; (81a74 <fpga_program_setup1+0x64>)
   81a30:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   81a32:	4b11      	ldr	r3, [pc, #68]	; (81a78 <fpga_program_setup1+0x68>)
   81a34:	4798      	blx	r3
   81a36:	4602      	mov	r2, r0
   81a38:	463b      	mov	r3, r7
   81a3a:	4619      	mov	r1, r3
   81a3c:	480f      	ldr	r0, [pc, #60]	; (81a7c <fpga_program_setup1+0x6c>)
   81a3e:	4b10      	ldr	r3, [pc, #64]	; (81a80 <fpga_program_setup1+0x70>)
   81a40:	4798      	blx	r3
    FPGA_DO_SETUP();
   81a42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a46:	2012      	movs	r0, #18
   81a48:	4b0e      	ldr	r3, [pc, #56]	; (81a84 <fpga_program_setup1+0x74>)
   81a4a:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81a4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a50:	2011      	movs	r0, #17
   81a52:	4b0c      	ldr	r3, [pc, #48]	; (81a84 <fpga_program_setup1+0x74>)
   81a54:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81a56:	4b0c      	ldr	r3, [pc, #48]	; (81a88 <fpga_program_setup1+0x78>)
   81a58:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81a5c:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   81a5e:	4807      	ldr	r0, [pc, #28]	; (81a7c <fpga_program_setup1+0x6c>)
   81a60:	4b0a      	ldr	r3, [pc, #40]	; (81a8c <fpga_program_setup1+0x7c>)
   81a62:	4798      	blx	r3
}
   81a64:	bf00      	nop
   81a66:	3710      	adds	r7, #16
   81a68:	46bd      	mov	sp, r7
   81a6a:	bd80      	pop	{r7, pc}
   81a6c:	00082ad1 	.word	0x00082ad1
   81a70:	00989680 	.word	0x00989680
   81a74:	000819d5 	.word	0x000819d5
   81a78:	000819c1 	.word	0x000819c1
   81a7c:	40090000 	.word	0x40090000
   81a80:	00087aa1 	.word	0x00087aa1
   81a84:	00082b01 	.word	0x00082b01
   81a88:	400e0c00 	.word	0x400e0c00
   81a8c:	00087bb1 	.word	0x00087bb1

00081a90 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81a90:	b580      	push	{r7, lr}
   81a92:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81a94:	2019      	movs	r0, #25
   81a96:	4b02      	ldr	r3, [pc, #8]	; (81aa0 <fpga_program_setup2+0x10>)
   81a98:	4798      	blx	r3
}
   81a9a:	bf00      	nop
   81a9c:	bd80      	pop	{r7, pc}
   81a9e:	bf00      	nop
   81aa0:	00082aa1 	.word	0x00082aa1

00081aa4 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81aa4:	b580      	push	{r7, lr}
   81aa6:	b082      	sub	sp, #8
   81aa8:	af00      	add	r7, sp, #0
   81aaa:	4603      	mov	r3, r0
   81aac:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81aae:	79fb      	ldrb	r3, [r7, #7]
   81ab0:	4619      	mov	r1, r3
   81ab2:	4803      	ldr	r0, [pc, #12]	; (81ac0 <fpga_program_sendbyte+0x1c>)
   81ab4:	4b03      	ldr	r3, [pc, #12]	; (81ac4 <fpga_program_sendbyte+0x20>)
   81ab6:	4798      	blx	r3
}
   81ab8:	bf00      	nop
   81aba:	3708      	adds	r7, #8
   81abc:	46bd      	mov	sp, r7
   81abe:	bd80      	pop	{r7, pc}
   81ac0:	40090000 	.word	0x40090000
   81ac4:	00087cd7 	.word	0x00087cd7

00081ac8 <NVIC_EnableIRQ>:
{
   81ac8:	b480      	push	{r7}
   81aca:	b083      	sub	sp, #12
   81acc:	af00      	add	r7, sp, #0
   81ace:	4603      	mov	r3, r0
   81ad0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81ad2:	79fb      	ldrb	r3, [r7, #7]
   81ad4:	f003 031f 	and.w	r3, r3, #31
   81ad8:	2201      	movs	r2, #1
   81ada:	fa02 f103 	lsl.w	r1, r2, r3
   81ade:	4a05      	ldr	r2, [pc, #20]	; (81af4 <NVIC_EnableIRQ+0x2c>)
   81ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81ae4:	095b      	lsrs	r3, r3, #5
   81ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81aea:	bf00      	nop
   81aec:	370c      	adds	r7, #12
   81aee:	46bd      	mov	sp, r7
   81af0:	bc80      	pop	{r7}
   81af2:	4770      	bx	lr
   81af4:	e000e100 	.word	0xe000e100

00081af8 <NVIC_ClearPendingIRQ>:
{
   81af8:	b480      	push	{r7}
   81afa:	b083      	sub	sp, #12
   81afc:	af00      	add	r7, sp, #0
   81afe:	4603      	mov	r3, r0
   81b00:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81b02:	79fb      	ldrb	r3, [r7, #7]
   81b04:	f003 031f 	and.w	r3, r3, #31
   81b08:	2201      	movs	r2, #1
   81b0a:	fa02 f103 	lsl.w	r1, r2, r3
   81b0e:	4a06      	ldr	r2, [pc, #24]	; (81b28 <NVIC_ClearPendingIRQ+0x30>)
   81b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b14:	095b      	lsrs	r3, r3, #5
   81b16:	3360      	adds	r3, #96	; 0x60
   81b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81b1c:	bf00      	nop
   81b1e:	370c      	adds	r7, #12
   81b20:	46bd      	mov	sp, r7
   81b22:	bc80      	pop	{r7}
   81b24:	4770      	bx	lr
   81b26:	bf00      	nop
   81b28:	e000e100 	.word	0xe000e100

00081b2c <NVIC_SetPriority>:
{
   81b2c:	b480      	push	{r7}
   81b2e:	b083      	sub	sp, #12
   81b30:	af00      	add	r7, sp, #0
   81b32:	4603      	mov	r3, r0
   81b34:	6039      	str	r1, [r7, #0]
   81b36:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	da0b      	bge.n	81b58 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81b40:	683b      	ldr	r3, [r7, #0]
   81b42:	b2da      	uxtb	r2, r3
   81b44:	490c      	ldr	r1, [pc, #48]	; (81b78 <NVIC_SetPriority+0x4c>)
   81b46:	79fb      	ldrb	r3, [r7, #7]
   81b48:	f003 030f 	and.w	r3, r3, #15
   81b4c:	3b04      	subs	r3, #4
   81b4e:	0112      	lsls	r2, r2, #4
   81b50:	b2d2      	uxtb	r2, r2
   81b52:	440b      	add	r3, r1
   81b54:	761a      	strb	r2, [r3, #24]
}
   81b56:	e009      	b.n	81b6c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81b58:	683b      	ldr	r3, [r7, #0]
   81b5a:	b2da      	uxtb	r2, r3
   81b5c:	4907      	ldr	r1, [pc, #28]	; (81b7c <NVIC_SetPriority+0x50>)
   81b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b62:	0112      	lsls	r2, r2, #4
   81b64:	b2d2      	uxtb	r2, r2
   81b66:	440b      	add	r3, r1
   81b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81b6c:	bf00      	nop
   81b6e:	370c      	adds	r7, #12
   81b70:	46bd      	mov	sp, r7
   81b72:	bc80      	pop	{r7}
   81b74:	4770      	bx	lr
   81b76:	bf00      	nop
   81b78:	e000ed00 	.word	0xe000ed00
   81b7c:	e000e100 	.word	0xe000e100

00081b80 <osc_get_rate>:
{
   81b80:	b480      	push	{r7}
   81b82:	b083      	sub	sp, #12
   81b84:	af00      	add	r7, sp, #0
   81b86:	6078      	str	r0, [r7, #4]
   81b88:	687b      	ldr	r3, [r7, #4]
   81b8a:	2b07      	cmp	r3, #7
   81b8c:	d823      	bhi.n	81bd6 <osc_get_rate+0x56>
   81b8e:	a201      	add	r2, pc, #4	; (adr r2, 81b94 <osc_get_rate+0x14>)
   81b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81b94:	00081bb5 	.word	0x00081bb5
   81b98:	00081bbb 	.word	0x00081bbb
   81b9c:	00081bbf 	.word	0x00081bbf
   81ba0:	00081bc3 	.word	0x00081bc3
   81ba4:	00081bc7 	.word	0x00081bc7
   81ba8:	00081bcb 	.word	0x00081bcb
   81bac:	00081bcf 	.word	0x00081bcf
   81bb0:	00081bd3 	.word	0x00081bd3
		return OSC_SLCK_32K_RC_HZ;
   81bb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81bb8:	e00e      	b.n	81bd8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81bba:	2300      	movs	r3, #0
   81bbc:	e00c      	b.n	81bd8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81bbe:	2300      	movs	r3, #0
   81bc0:	e00a      	b.n	81bd8 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81bc2:	4b08      	ldr	r3, [pc, #32]	; (81be4 <osc_get_rate+0x64>)
   81bc4:	e008      	b.n	81bd8 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81bc6:	4b08      	ldr	r3, [pc, #32]	; (81be8 <osc_get_rate+0x68>)
   81bc8:	e006      	b.n	81bd8 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81bca:	4b08      	ldr	r3, [pc, #32]	; (81bec <osc_get_rate+0x6c>)
   81bcc:	e004      	b.n	81bd8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81bce:	4b07      	ldr	r3, [pc, #28]	; (81bec <osc_get_rate+0x6c>)
   81bd0:	e002      	b.n	81bd8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81bd2:	4b06      	ldr	r3, [pc, #24]	; (81bec <osc_get_rate+0x6c>)
   81bd4:	e000      	b.n	81bd8 <osc_get_rate+0x58>
	return 0;
   81bd6:	2300      	movs	r3, #0
}
   81bd8:	4618      	mov	r0, r3
   81bda:	370c      	adds	r7, #12
   81bdc:	46bd      	mov	sp, r7
   81bde:	bc80      	pop	{r7}
   81be0:	4770      	bx	lr
   81be2:	bf00      	nop
   81be4:	003d0900 	.word	0x003d0900
   81be8:	007a1200 	.word	0x007a1200
   81bec:	00b71b00 	.word	0x00b71b00

00081bf0 <sysclk_get_main_hz>:
{
   81bf0:	b580      	push	{r7, lr}
   81bf2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81bf4:	2006      	movs	r0, #6
   81bf6:	4b03      	ldr	r3, [pc, #12]	; (81c04 <sysclk_get_main_hz+0x14>)
   81bf8:	4798      	blx	r3
   81bfa:	4603      	mov	r3, r0
   81bfc:	011b      	lsls	r3, r3, #4
}
   81bfe:	4618      	mov	r0, r3
   81c00:	bd80      	pop	{r7, pc}
   81c02:	bf00      	nop
   81c04:	00081b81 	.word	0x00081b81

00081c08 <sysclk_get_cpu_hz>:
{
   81c08:	b580      	push	{r7, lr}
   81c0a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81c0c:	4b02      	ldr	r3, [pc, #8]	; (81c18 <sysclk_get_cpu_hz+0x10>)
   81c0e:	4798      	blx	r3
   81c10:	4603      	mov	r3, r0
   81c12:	085b      	lsrs	r3, r3, #1
}
   81c14:	4618      	mov	r0, r3
   81c16:	bd80      	pop	{r7, pc}
   81c18:	00081bf1 	.word	0x00081bf1

00081c1c <sysclk_enable_peripheral_clock>:
{
   81c1c:	b580      	push	{r7, lr}
   81c1e:	b082      	sub	sp, #8
   81c20:	af00      	add	r7, sp, #0
   81c22:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81c24:	6878      	ldr	r0, [r7, #4]
   81c26:	4b03      	ldr	r3, [pc, #12]	; (81c34 <sysclk_enable_peripheral_clock+0x18>)
   81c28:	4798      	blx	r3
}
   81c2a:	bf00      	nop
   81c2c:	3708      	adds	r7, #8
   81c2e:	46bd      	mov	sp, r7
   81c30:	bd80      	pop	{r7, pc}
   81c32:	bf00      	nop
   81c34:	00083165 	.word	0x00083165

00081c38 <usart0_enableIO>:
struct usb_cdc_line_coding_t;
tcirc_buf usb_usart_circ_buf;
volatile bool usart_x_enabled[4] = {0};

static inline void usart0_enableIO(void)
{
   81c38:	b580      	push	{r7, lr}
   81c3a:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81c3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c40:	2013      	movs	r0, #19
   81c42:	4b04      	ldr	r3, [pc, #16]	; (81c54 <usart0_enableIO+0x1c>)
   81c44:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81c46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c4a:	2012      	movs	r0, #18
   81c4c:	4b01      	ldr	r3, [pc, #4]	; (81c54 <usart0_enableIO+0x1c>)
   81c4e:	4798      	blx	r3
}
   81c50:	bf00      	nop
   81c52:	bd80      	pop	{r7, pc}
   81c54:	00082b01 	.word	0x00082b01

00081c58 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   81c58:	b580      	push	{r7, lr}
   81c5a:	b08a      	sub	sp, #40	; 0x28
   81c5c:	af00      	add	r7, sp, #0
   81c5e:	6078      	str	r0, [r7, #4]
   81c60:	460b      	mov	r3, r1
   81c62:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81c64:	4b93      	ldr	r3, [pc, #588]	; (81eb4 <ctrl_usart+0x25c>)
   81c66:	885b      	ldrh	r3, [r3, #2]
   81c68:	b2db      	uxtb	r3, r3
   81c6a:	3b10      	subs	r3, #16
   81c6c:	2b08      	cmp	r3, #8
   81c6e:	f200 81d6 	bhi.w	8201e <ctrl_usart+0x3c6>
   81c72:	a201      	add	r2, pc, #4	; (adr r2, 81c78 <ctrl_usart+0x20>)
   81c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c78:	00081c9d 	.word	0x00081c9d
   81c7c:	00081e0d 	.word	0x00081e0d
   81c80:	00081e8f 	.word	0x00081e8f
   81c84:	0008201f 	.word	0x0008201f
   81c88:	00081f25 	.word	0x00081f25
   81c8c:	0008201f 	.word	0x0008201f
   81c90:	0008201f 	.word	0x0008201f
   81c94:	0008201f 	.word	0x0008201f
   81c98:	00081f99 	.word	0x00081f99
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81c9c:	78fb      	ldrb	r3, [r7, #3]
   81c9e:	2b00      	cmp	r3, #0
   81ca0:	d006      	beq.n	81cb0 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   81ca2:	4b84      	ldr	r3, [pc, #528]	; (81eb4 <ctrl_usart+0x25c>)
   81ca4:	88db      	ldrh	r3, [r3, #6]
   81ca6:	2b04      	cmp	r3, #4
   81ca8:	f040 81b0 	bne.w	8200c <ctrl_usart+0x3b4>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   81cac:	2301      	movs	r3, #1
   81cae:	e1b7      	b.n	82020 <ctrl_usart+0x3c8>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   81cb0:	4b80      	ldr	r3, [pc, #512]	; (81eb4 <ctrl_usart+0x25c>)
   81cb2:	88db      	ldrh	r3, [r3, #6]
   81cb4:	2b07      	cmp	r3, #7
   81cb6:	f040 80a5 	bne.w	81e04 <ctrl_usart+0x1ac>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   81cba:	4b7e      	ldr	r3, [pc, #504]	; (81eb4 <ctrl_usart+0x25c>)
   81cbc:	689b      	ldr	r3, [r3, #8]
   81cbe:	681b      	ldr	r3, [r3, #0]
   81cc0:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   81cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81cc4:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   81cc6:	4b7b      	ldr	r3, [pc, #492]	; (81eb4 <ctrl_usart+0x25c>)
   81cc8:	689b      	ldr	r3, [r3, #8]
   81cca:	3304      	adds	r3, #4
   81ccc:	781b      	ldrb	r3, [r3, #0]
   81cce:	2b02      	cmp	r3, #2
   81cd0:	d00d      	beq.n	81cee <ctrl_usart+0x96>
   81cd2:	2b02      	cmp	r3, #2
   81cd4:	dc0f      	bgt.n	81cf6 <ctrl_usart+0x9e>
   81cd6:	2b00      	cmp	r3, #0
   81cd8:	d002      	beq.n	81ce0 <ctrl_usart+0x88>
   81cda:	2b01      	cmp	r3, #1
   81cdc:	d003      	beq.n	81ce6 <ctrl_usart+0x8e>
   81cde:	e00a      	b.n	81cf6 <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81ce0:	2300      	movs	r3, #0
   81ce2:	61bb      	str	r3, [r7, #24]
								break;
   81ce4:	e009      	b.n	81cfa <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81cea:	61bb      	str	r3, [r7, #24]
								break;
   81cec:	e005      	b.n	81cfa <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81cf2:	61bb      	str	r3, [r7, #24]
								break;
   81cf4:	e001      	b.n	81cfa <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81cf6:	2300      	movs	r3, #0
   81cf8:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   81cfa:	4b6e      	ldr	r3, [pc, #440]	; (81eb4 <ctrl_usart+0x25c>)
   81cfc:	689b      	ldr	r3, [r3, #8]
   81cfe:	3305      	adds	r3, #5
   81d00:	781b      	ldrb	r3, [r3, #0]
   81d02:	2b04      	cmp	r3, #4
   81d04:	d81f      	bhi.n	81d46 <ctrl_usart+0xee>
   81d06:	a201      	add	r2, pc, #4	; (adr r2, 81d0c <ctrl_usart+0xb4>)
   81d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81d0c:	00081d21 	.word	0x00081d21
   81d10:	00081d29 	.word	0x00081d29
   81d14:	00081d31 	.word	0x00081d31
   81d18:	00081d37 	.word	0x00081d37
   81d1c:	00081d3f 	.word	0x00081d3f
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   81d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d24:	617b      	str	r3, [r7, #20]
								break;
   81d26:	e011      	b.n	81d4c <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   81d28:	f44f 7300 	mov.w	r3, #512	; 0x200
   81d2c:	617b      	str	r3, [r7, #20]
								break;
   81d2e:	e00d      	b.n	81d4c <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   81d30:	2300      	movs	r3, #0
   81d32:	617b      	str	r3, [r7, #20]
								break;
   81d34:	e00a      	b.n	81d4c <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   81d36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81d3a:	617b      	str	r3, [r7, #20]
								break;
   81d3c:	e006      	b.n	81d4c <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   81d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d42:	617b      	str	r3, [r7, #20]
								break;							
   81d44:	e002      	b.n	81d4c <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   81d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d4a:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   81d4c:	4b59      	ldr	r3, [pc, #356]	; (81eb4 <ctrl_usart+0x25c>)
   81d4e:	689b      	ldr	r3, [r3, #8]
   81d50:	3306      	adds	r3, #6
   81d52:	781b      	ldrb	r3, [r3, #0]
   81d54:	2b07      	cmp	r3, #7
   81d56:	d00c      	beq.n	81d72 <ctrl_usart+0x11a>
   81d58:	2b07      	cmp	r3, #7
   81d5a:	dc0d      	bgt.n	81d78 <ctrl_usart+0x120>
   81d5c:	2b05      	cmp	r3, #5
   81d5e:	d002      	beq.n	81d66 <ctrl_usart+0x10e>
   81d60:	2b06      	cmp	r3, #6
   81d62:	d003      	beq.n	81d6c <ctrl_usart+0x114>
   81d64:	e008      	b.n	81d78 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   81d66:	2300      	movs	r3, #0
   81d68:	613b      	str	r3, [r7, #16]
								break;
   81d6a:	e007      	b.n	81d7c <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81d6c:	2340      	movs	r3, #64	; 0x40
   81d6e:	613b      	str	r3, [r7, #16]
								break;
   81d70:	e004      	b.n	81d7c <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   81d72:	2380      	movs	r3, #128	; 0x80
   81d74:	613b      	str	r3, [r7, #16]
								break;					
   81d76:	e001      	b.n	81d7c <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81d78:	23c0      	movs	r3, #192	; 0xc0
   81d7a:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81d7c:	2300      	movs	r3, #0
   81d7e:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   81d80:	687b      	ldr	r3, [r7, #4]
   81d82:	4a4d      	ldr	r2, [pc, #308]	; (81eb8 <ctrl_usart+0x260>)
   81d84:	4293      	cmp	r3, r2
   81d86:	d112      	bne.n	81dae <ctrl_usart+0x156>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   81d88:	200d      	movs	r0, #13
   81d8a:	4b4c      	ldr	r3, [pc, #304]	; (81ebc <ctrl_usart+0x264>)
   81d8c:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   81d8e:	484c      	ldr	r0, [pc, #304]	; (81ec0 <ctrl_usart+0x268>)
   81d90:	4b4c      	ldr	r3, [pc, #304]	; (81ec4 <ctrl_usart+0x26c>)
   81d92:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   81d94:	484c      	ldr	r0, [pc, #304]	; (81ec8 <ctrl_usart+0x270>)
   81d96:	4b4b      	ldr	r3, [pc, #300]	; (81ec4 <ctrl_usart+0x26c>)
   81d98:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81d9a:	484c      	ldr	r0, [pc, #304]	; (81ecc <ctrl_usart+0x274>)
   81d9c:	4b49      	ldr	r3, [pc, #292]	; (81ec4 <ctrl_usart+0x26c>)
   81d9e:	4798      	blx	r3
							usart_x_enabled[0] = true;
   81da0:	4b4b      	ldr	r3, [pc, #300]	; (81ed0 <ctrl_usart+0x278>)
   81da2:	2201      	movs	r2, #1
   81da4:	701a      	strb	r2, [r3, #0]
							printf("Enabling USART0\n");
   81da6:	484b      	ldr	r0, [pc, #300]	; (81ed4 <ctrl_usart+0x27c>)
   81da8:	4b4b      	ldr	r3, [pc, #300]	; (81ed8 <ctrl_usart+0x280>)
   81daa:	4798      	blx	r3
   81dac:	e020      	b.n	81df0 <ctrl_usart+0x198>
						} else if (usart == USART1)
   81dae:	687b      	ldr	r3, [r7, #4]
   81db0:	4a4a      	ldr	r2, [pc, #296]	; (81edc <ctrl_usart+0x284>)
   81db2:	4293      	cmp	r3, r2
   81db4:	d10c      	bne.n	81dd0 <ctrl_usart+0x178>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   81db6:	200e      	movs	r0, #14
   81db8:	4b40      	ldr	r3, [pc, #256]	; (81ebc <ctrl_usart+0x264>)
   81dba:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   81dbc:	4848      	ldr	r0, [pc, #288]	; (81ee0 <ctrl_usart+0x288>)
   81dbe:	4b41      	ldr	r3, [pc, #260]	; (81ec4 <ctrl_usart+0x26c>)
   81dc0:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   81dc2:	4848      	ldr	r0, [pc, #288]	; (81ee4 <ctrl_usart+0x28c>)
   81dc4:	4b3f      	ldr	r3, [pc, #252]	; (81ec4 <ctrl_usart+0x26c>)
   81dc6:	4798      	blx	r3
							usart_x_enabled[1] = true;
   81dc8:	4b41      	ldr	r3, [pc, #260]	; (81ed0 <ctrl_usart+0x278>)
   81dca:	2201      	movs	r2, #1
   81dcc:	705a      	strb	r2, [r3, #1]
   81dce:	e00f      	b.n	81df0 <ctrl_usart+0x198>
						} else if (usart == USART2)
   81dd0:	687b      	ldr	r3, [r7, #4]
   81dd2:	4a45      	ldr	r2, [pc, #276]	; (81ee8 <ctrl_usart+0x290>)
   81dd4:	4293      	cmp	r3, r2
   81dd6:	d10b      	bne.n	81df0 <ctrl_usart+0x198>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   81dd8:	200f      	movs	r0, #15
   81dda:	4b38      	ldr	r3, [pc, #224]	; (81ebc <ctrl_usart+0x264>)
   81ddc:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81dde:	4843      	ldr	r0, [pc, #268]	; (81eec <ctrl_usart+0x294>)
   81de0:	4b38      	ldr	r3, [pc, #224]	; (81ec4 <ctrl_usart+0x26c>)
   81de2:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   81de4:	4842      	ldr	r0, [pc, #264]	; (81ef0 <ctrl_usart+0x298>)
   81de6:	4b37      	ldr	r3, [pc, #220]	; (81ec4 <ctrl_usart+0x26c>)
   81de8:	4798      	blx	r3
							usart_x_enabled[2] = true;
   81dea:	4b39      	ldr	r3, [pc, #228]	; (81ed0 <ctrl_usart+0x278>)
   81dec:	2201      	movs	r2, #1
   81dee:	709a      	strb	r2, [r3, #2]
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
							usart_x_enabled[3] = true;
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   81df0:	4b40      	ldr	r3, [pc, #256]	; (81ef4 <ctrl_usart+0x29c>)
   81df2:	4798      	blx	r3
   81df4:	4602      	mov	r2, r0
   81df6:	f107 030c 	add.w	r3, r7, #12
   81dfa:	4619      	mov	r1, r3
   81dfc:	6878      	ldr	r0, [r7, #4]
   81dfe:	4b3e      	ldr	r3, [pc, #248]	; (81ef8 <ctrl_usart+0x2a0>)
   81e00:	4798      	blx	r3
					} else {
						printf("ERR: Invalid USART Configuration packet?\n");
					}
			}
			break;
   81e02:	e103      	b.n	8200c <ctrl_usart+0x3b4>
						printf("ERR: Invalid USART Configuration packet?\n");
   81e04:	483d      	ldr	r0, [pc, #244]	; (81efc <ctrl_usart+0x2a4>)
   81e06:	4b34      	ldr	r3, [pc, #208]	; (81ed8 <ctrl_usart+0x280>)
   81e08:	4798      	blx	r3
			break;
   81e0a:	e0ff      	b.n	8200c <ctrl_usart+0x3b4>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   81e0c:	78fb      	ldrb	r3, [r7, #3]
   81e0e:	f083 0301 	eor.w	r3, r3, #1
   81e12:	b2db      	uxtb	r3, r3
   81e14:	2b00      	cmp	r3, #0
   81e16:	f000 80fb 	beq.w	82010 <ctrl_usart+0x3b8>
				usart_enable_rx(usart);
   81e1a:	6878      	ldr	r0, [r7, #4]
   81e1c:	4b38      	ldr	r3, [pc, #224]	; (81f00 <ctrl_usart+0x2a8>)
   81e1e:	4798      	blx	r3
				usart_enable_tx(usart);
   81e20:	6878      	ldr	r0, [r7, #4]
   81e22:	4b38      	ldr	r3, [pc, #224]	; (81f04 <ctrl_usart+0x2ac>)
   81e24:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   81e26:	2101      	movs	r1, #1
   81e28:	6878      	ldr	r0, [r7, #4]
   81e2a:	4b37      	ldr	r3, [pc, #220]	; (81f08 <ctrl_usart+0x2b0>)
   81e2c:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   81e2e:	687b      	ldr	r3, [r7, #4]
   81e30:	4a21      	ldr	r2, [pc, #132]	; (81eb8 <ctrl_usart+0x260>)
   81e32:	4293      	cmp	r3, r2
   81e34:	d10c      	bne.n	81e50 <ctrl_usart+0x1f8>
					usart0_enableIO();
   81e36:	4b35      	ldr	r3, [pc, #212]	; (81f0c <ctrl_usart+0x2b4>)
   81e38:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   81e3a:	200d      	movs	r0, #13
   81e3c:	4b34      	ldr	r3, [pc, #208]	; (81f10 <ctrl_usart+0x2b8>)
   81e3e:	4798      	blx	r3
   81e40:	2105      	movs	r1, #5
   81e42:	200d      	movs	r0, #13
   81e44:	4b33      	ldr	r3, [pc, #204]	; (81f14 <ctrl_usart+0x2bc>)
   81e46:	4798      	blx	r3
   81e48:	200d      	movs	r0, #13
   81e4a:	4b33      	ldr	r3, [pc, #204]	; (81f18 <ctrl_usart+0x2c0>)
   81e4c:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   81e4e:	e0df      	b.n	82010 <ctrl_usart+0x3b8>
				} else if (usart == USART1) {
   81e50:	687b      	ldr	r3, [r7, #4]
   81e52:	4a22      	ldr	r2, [pc, #136]	; (81edc <ctrl_usart+0x284>)
   81e54:	4293      	cmp	r3, r2
   81e56:	d10a      	bne.n	81e6e <ctrl_usart+0x216>
					irq_register_handler(USART1_IRQn, 5);
   81e58:	200e      	movs	r0, #14
   81e5a:	4b2d      	ldr	r3, [pc, #180]	; (81f10 <ctrl_usart+0x2b8>)
   81e5c:	4798      	blx	r3
   81e5e:	2105      	movs	r1, #5
   81e60:	200e      	movs	r0, #14
   81e62:	4b2c      	ldr	r3, [pc, #176]	; (81f14 <ctrl_usart+0x2bc>)
   81e64:	4798      	blx	r3
   81e66:	200e      	movs	r0, #14
   81e68:	4b2b      	ldr	r3, [pc, #172]	; (81f18 <ctrl_usart+0x2c0>)
   81e6a:	4798      	blx	r3
			break;
   81e6c:	e0d0      	b.n	82010 <ctrl_usart+0x3b8>
				} else if (usart == USART2) {
   81e6e:	687b      	ldr	r3, [r7, #4]
   81e70:	4a1d      	ldr	r2, [pc, #116]	; (81ee8 <ctrl_usart+0x290>)
   81e72:	4293      	cmp	r3, r2
   81e74:	f040 80cc 	bne.w	82010 <ctrl_usart+0x3b8>
					irq_register_handler(USART2_IRQn, 5);
   81e78:	200f      	movs	r0, #15
   81e7a:	4b25      	ldr	r3, [pc, #148]	; (81f10 <ctrl_usart+0x2b8>)
   81e7c:	4798      	blx	r3
   81e7e:	2105      	movs	r1, #5
   81e80:	200f      	movs	r0, #15
   81e82:	4b24      	ldr	r3, [pc, #144]	; (81f14 <ctrl_usart+0x2bc>)
   81e84:	4798      	blx	r3
   81e86:	200f      	movs	r0, #15
   81e88:	4b23      	ldr	r3, [pc, #140]	; (81f18 <ctrl_usart+0x2c0>)
   81e8a:	4798      	blx	r3
			break;
   81e8c:	e0c0      	b.n	82010 <ctrl_usart+0x3b8>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   81e8e:	78fb      	ldrb	r3, [r7, #3]
   81e90:	f083 0301 	eor.w	r3, r3, #1
   81e94:	b2db      	uxtb	r3, r3
   81e96:	2b00      	cmp	r3, #0
   81e98:	f000 80bc 	beq.w	82014 <ctrl_usart+0x3bc>
				usart_disable_rx(usart);
   81e9c:	6878      	ldr	r0, [r7, #4]
   81e9e:	4b1f      	ldr	r3, [pc, #124]	; (81f1c <ctrl_usart+0x2c4>)
   81ea0:	4798      	blx	r3
				usart_disable_rx(usart);
   81ea2:	6878      	ldr	r0, [r7, #4]
   81ea4:	4b1d      	ldr	r3, [pc, #116]	; (81f1c <ctrl_usart+0x2c4>)
   81ea6:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81ea8:	2103      	movs	r1, #3
   81eaa:	6878      	ldr	r0, [r7, #4]
   81eac:	4b1c      	ldr	r3, [pc, #112]	; (81f20 <ctrl_usart+0x2c8>)
   81eae:	4798      	blx	r3
			}
		
			break;
   81eb0:	e0b0      	b.n	82014 <ctrl_usart+0x3bc>
   81eb2:	bf00      	nop
   81eb4:	2000241c 	.word	0x2000241c
   81eb8:	40090000 	.word	0x40090000
   81ebc:	00081c1d 	.word	0x00081c1d
   81ec0:	20002154 	.word	0x20002154
   81ec4:	000823d5 	.word	0x000823d5
   81ec8:	20002384 	.word	0x20002384
   81ecc:	20001fb0 	.word	0x20001fb0
   81ed0:	20001564 	.word	0x20001564
   81ed4:	0008ea40 	.word	0x0008ea40
   81ed8:	000880d1 	.word	0x000880d1
   81edc:	40094000 	.word	0x40094000
   81ee0:	200020c8 	.word	0x200020c8
   81ee4:	200022f8 	.word	0x200022f8
   81ee8:	40098000 	.word	0x40098000
   81eec:	20001f24 	.word	0x20001f24
   81ef0:	2000226c 	.word	0x2000226c
   81ef4:	00081c09 	.word	0x00081c09
   81ef8:	00087a1d 	.word	0x00087a1d
   81efc:	0008ea54 	.word	0x0008ea54
   81f00:	00087be1 	.word	0x00087be1
   81f04:	00087bb1 	.word	0x00087bb1
   81f08:	00087c29 	.word	0x00087c29
   81f0c:	00081c39 	.word	0x00081c39
   81f10:	00081af9 	.word	0x00081af9
   81f14:	00081b2d 	.word	0x00081b2d
   81f18:	00081ac9 	.word	0x00081ac9
   81f1c:	00087bf9 	.word	0x00087bf9
   81f20:	00087c43 	.word	0x00087c43
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   81f24:	78fb      	ldrb	r3, [r7, #3]
   81f26:	2b00      	cmp	r3, #0
   81f28:	d076      	beq.n	82018 <ctrl_usart+0x3c0>
				if (udd_g_ctrlreq.req.wLength == 4){
   81f2a:	4b3f      	ldr	r3, [pc, #252]	; (82028 <ctrl_usart+0x3d0>)
   81f2c:	88db      	ldrh	r3, [r3, #6]
   81f2e:	2b04      	cmp	r3, #4
   81f30:	d172      	bne.n	82018 <ctrl_usart+0x3c0>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81f32:	4b3d      	ldr	r3, [pc, #244]	; (82028 <ctrl_usart+0x3d0>)
   81f34:	4a3d      	ldr	r2, [pc, #244]	; (8202c <ctrl_usart+0x3d4>)
   81f36:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81f38:	4b3b      	ldr	r3, [pc, #236]	; (82028 <ctrl_usart+0x3d0>)
   81f3a:	2204      	movs	r2, #4
   81f3c:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81f3e:	687b      	ldr	r3, [r7, #4]
   81f40:	4a3b      	ldr	r2, [pc, #236]	; (82030 <ctrl_usart+0x3d8>)
   81f42:	4293      	cmp	r3, r2
   81f44:	d105      	bne.n	81f52 <ctrl_usart+0x2fa>
						cnt = circ_buf_count(&rx0buf);
   81f46:	483b      	ldr	r0, [pc, #236]	; (82034 <ctrl_usart+0x3dc>)
   81f48:	4b3b      	ldr	r3, [pc, #236]	; (82038 <ctrl_usart+0x3e0>)
   81f4a:	4798      	blx	r3
   81f4c:	4603      	mov	r3, r0
   81f4e:	60bb      	str	r3, [r7, #8]
   81f50:	e012      	b.n	81f78 <ctrl_usart+0x320>
					} else if (usart == USART1){
   81f52:	687b      	ldr	r3, [r7, #4]
   81f54:	4a39      	ldr	r2, [pc, #228]	; (8203c <ctrl_usart+0x3e4>)
   81f56:	4293      	cmp	r3, r2
   81f58:	d105      	bne.n	81f66 <ctrl_usart+0x30e>
						cnt = circ_buf_count(&rx1buf);
   81f5a:	4839      	ldr	r0, [pc, #228]	; (82040 <ctrl_usart+0x3e8>)
   81f5c:	4b36      	ldr	r3, [pc, #216]	; (82038 <ctrl_usart+0x3e0>)
   81f5e:	4798      	blx	r3
   81f60:	4603      	mov	r3, r0
   81f62:	60bb      	str	r3, [r7, #8]
   81f64:	e008      	b.n	81f78 <ctrl_usart+0x320>
					} else if (usart == USART2){
   81f66:	687b      	ldr	r3, [r7, #4]
   81f68:	4a36      	ldr	r2, [pc, #216]	; (82044 <ctrl_usart+0x3ec>)
   81f6a:	4293      	cmp	r3, r2
   81f6c:	d104      	bne.n	81f78 <ctrl_usart+0x320>
						cnt = circ_buf_count(&rx2buf);
   81f6e:	4836      	ldr	r0, [pc, #216]	; (82048 <ctrl_usart+0x3f0>)
   81f70:	4b31      	ldr	r3, [pc, #196]	; (82038 <ctrl_usart+0x3e0>)
   81f72:	4798      	blx	r3
   81f74:	4603      	mov	r3, r0
   81f76:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81f78:	f107 0308 	add.w	r3, r7, #8
   81f7c:	781a      	ldrb	r2, [r3, #0]
   81f7e:	4b2b      	ldr	r3, [pc, #172]	; (8202c <ctrl_usart+0x3d4>)
   81f80:	701a      	strb	r2, [r3, #0]
   81f82:	7a7a      	ldrb	r2, [r7, #9]
   81f84:	4b29      	ldr	r3, [pc, #164]	; (8202c <ctrl_usart+0x3d4>)
   81f86:	705a      	strb	r2, [r3, #1]
   81f88:	7aba      	ldrb	r2, [r7, #10]
   81f8a:	4b28      	ldr	r3, [pc, #160]	; (8202c <ctrl_usart+0x3d4>)
   81f8c:	709a      	strb	r2, [r3, #2]
   81f8e:	7afa      	ldrb	r2, [r7, #11]
   81f90:	4b26      	ldr	r3, [pc, #152]	; (8202c <ctrl_usart+0x3d4>)
   81f92:	70da      	strb	r2, [r3, #3]
			
					return true;
   81f94:	2301      	movs	r3, #1
   81f96:	e043      	b.n	82020 <ctrl_usart+0x3c8>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   81f98:	78fb      	ldrb	r3, [r7, #3]
   81f9a:	2b00      	cmp	r3, #0
   81f9c:	d03e      	beq.n	8201c <ctrl_usart+0x3c4>
				if (udd_g_ctrlreq.req.wLength == 4){
   81f9e:	4b22      	ldr	r3, [pc, #136]	; (82028 <ctrl_usart+0x3d0>)
   81fa0:	88db      	ldrh	r3, [r3, #6]
   81fa2:	2b04      	cmp	r3, #4
   81fa4:	d13a      	bne.n	8201c <ctrl_usart+0x3c4>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81fa6:	4b20      	ldr	r3, [pc, #128]	; (82028 <ctrl_usart+0x3d0>)
   81fa8:	4a20      	ldr	r2, [pc, #128]	; (8202c <ctrl_usart+0x3d4>)
   81faa:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81fac:	4b1e      	ldr	r3, [pc, #120]	; (82028 <ctrl_usart+0x3d0>)
   81fae:	2204      	movs	r2, #4
   81fb0:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81fb2:	687b      	ldr	r3, [r7, #4]
   81fb4:	4a1e      	ldr	r2, [pc, #120]	; (82030 <ctrl_usart+0x3d8>)
   81fb6:	4293      	cmp	r3, r2
   81fb8:	d105      	bne.n	81fc6 <ctrl_usart+0x36e>
						cnt = circ_buf_count(&tx0buf);
   81fba:	4824      	ldr	r0, [pc, #144]	; (8204c <ctrl_usart+0x3f4>)
   81fbc:	4b1e      	ldr	r3, [pc, #120]	; (82038 <ctrl_usart+0x3e0>)
   81fbe:	4798      	blx	r3
   81fc0:	4603      	mov	r3, r0
   81fc2:	60bb      	str	r3, [r7, #8]
   81fc4:	e012      	b.n	81fec <ctrl_usart+0x394>
					} else if (usart == USART1){
   81fc6:	687b      	ldr	r3, [r7, #4]
   81fc8:	4a1c      	ldr	r2, [pc, #112]	; (8203c <ctrl_usart+0x3e4>)
   81fca:	4293      	cmp	r3, r2
   81fcc:	d105      	bne.n	81fda <ctrl_usart+0x382>
						cnt = circ_buf_count(&tx1buf);
   81fce:	4820      	ldr	r0, [pc, #128]	; (82050 <ctrl_usart+0x3f8>)
   81fd0:	4b19      	ldr	r3, [pc, #100]	; (82038 <ctrl_usart+0x3e0>)
   81fd2:	4798      	blx	r3
   81fd4:	4603      	mov	r3, r0
   81fd6:	60bb      	str	r3, [r7, #8]
   81fd8:	e008      	b.n	81fec <ctrl_usart+0x394>
					} else if (usart == USART2){
   81fda:	687b      	ldr	r3, [r7, #4]
   81fdc:	4a19      	ldr	r2, [pc, #100]	; (82044 <ctrl_usart+0x3ec>)
   81fde:	4293      	cmp	r3, r2
   81fe0:	d104      	bne.n	81fec <ctrl_usart+0x394>
						cnt = circ_buf_count(&tx2buf);
   81fe2:	481c      	ldr	r0, [pc, #112]	; (82054 <ctrl_usart+0x3fc>)
   81fe4:	4b14      	ldr	r3, [pc, #80]	; (82038 <ctrl_usart+0x3e0>)
   81fe6:	4798      	blx	r3
   81fe8:	4603      	mov	r3, r0
   81fea:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81fec:	f107 0308 	add.w	r3, r7, #8
   81ff0:	781a      	ldrb	r2, [r3, #0]
   81ff2:	4b0e      	ldr	r3, [pc, #56]	; (8202c <ctrl_usart+0x3d4>)
   81ff4:	701a      	strb	r2, [r3, #0]
   81ff6:	7a7a      	ldrb	r2, [r7, #9]
   81ff8:	4b0c      	ldr	r3, [pc, #48]	; (8202c <ctrl_usart+0x3d4>)
   81ffa:	705a      	strb	r2, [r3, #1]
   81ffc:	7aba      	ldrb	r2, [r7, #10]
   81ffe:	4b0b      	ldr	r3, [pc, #44]	; (8202c <ctrl_usart+0x3d4>)
   82000:	709a      	strb	r2, [r3, #2]
   82002:	7afa      	ldrb	r2, [r7, #11]
   82004:	4b09      	ldr	r3, [pc, #36]	; (8202c <ctrl_usart+0x3d4>)
   82006:	70da      	strb	r2, [r3, #3]
			
					return true;
   82008:	2301      	movs	r3, #1
   8200a:	e009      	b.n	82020 <ctrl_usart+0x3c8>
			break;
   8200c:	bf00      	nop
   8200e:	e006      	b.n	8201e <ctrl_usart+0x3c6>
			break;
   82010:	bf00      	nop
   82012:	e004      	b.n	8201e <ctrl_usart+0x3c6>
			break;
   82014:	bf00      	nop
   82016:	e002      	b.n	8201e <ctrl_usart+0x3c6>
			break;		
   82018:	bf00      	nop
   8201a:	e000      	b.n	8201e <ctrl_usart+0x3c6>
				}
			}
			break;		
   8201c:	bf00      	nop
	}
	
	return false;
   8201e:	2300      	movs	r3, #0
}
   82020:	4618      	mov	r0, r3
   82022:	3728      	adds	r7, #40	; 0x28
   82024:	46bd      	mov	sp, r7
   82026:	bd80      	pop	{r7, pc}
   82028:	2000241c 	.word	0x2000241c
   8202c:	20001568 	.word	0x20001568
   82030:	40090000 	.word	0x40090000
   82034:	20001fb0 	.word	0x20001fb0
   82038:	000824cd 	.word	0x000824cd
   8203c:	40094000 	.word	0x40094000
   82040:	200022f8 	.word	0x200022f8
   82044:	40098000 	.word	0x40098000
   82048:	2000226c 	.word	0x2000226c
   8204c:	20002384 	.word	0x20002384
   82050:	200020c8 	.word	0x200020c8
   82054:	20001f24 	.word	0x20001f24

00082058 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   82058:	b580      	push	{r7, lr}
   8205a:	b084      	sub	sp, #16
   8205c:	af00      	add	r7, sp, #0
   8205e:	60f8      	str	r0, [r7, #12]
   82060:	60b9      	str	r1, [r7, #8]
   82062:	4613      	mov	r3, r2
   82064:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   82066:	68bb      	ldr	r3, [r7, #8]
   82068:	2b00      	cmp	r3, #0
   8206a:	d113      	bne.n	82094 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   8206c:	68fb      	ldr	r3, [r7, #12]
   8206e:	4a1d      	ldr	r2, [pc, #116]	; (820e4 <usart_driver_putchar+0x8c>)
   82070:	4293      	cmp	r3, r2
   82072:	d102      	bne.n	8207a <usart_driver_putchar+0x22>
   82074:	4b1c      	ldr	r3, [pc, #112]	; (820e8 <usart_driver_putchar+0x90>)
   82076:	60bb      	str	r3, [r7, #8]
   82078:	e00c      	b.n	82094 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   8207a:	68fb      	ldr	r3, [r7, #12]
   8207c:	4a1b      	ldr	r2, [pc, #108]	; (820ec <usart_driver_putchar+0x94>)
   8207e:	4293      	cmp	r3, r2
   82080:	d102      	bne.n	82088 <usart_driver_putchar+0x30>
   82082:	4b1b      	ldr	r3, [pc, #108]	; (820f0 <usart_driver_putchar+0x98>)
   82084:	60bb      	str	r3, [r7, #8]
   82086:	e005      	b.n	82094 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   82088:	68fb      	ldr	r3, [r7, #12]
   8208a:	4a1a      	ldr	r2, [pc, #104]	; (820f4 <usart_driver_putchar+0x9c>)
   8208c:	4293      	cmp	r3, r2
   8208e:	d124      	bne.n	820da <usart_driver_putchar+0x82>
   82090:	4b19      	ldr	r3, [pc, #100]	; (820f8 <usart_driver_putchar+0xa0>)
   82092:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   82094:	79fb      	ldrb	r3, [r7, #7]
   82096:	2200      	movs	r2, #0
   82098:	4619      	mov	r1, r3
   8209a:	68b8      	ldr	r0, [r7, #8]
   8209c:	4b17      	ldr	r3, [pc, #92]	; (820fc <usart_driver_putchar+0xa4>)
   8209e:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   820a0:	68f8      	ldr	r0, [r7, #12]
   820a2:	4b17      	ldr	r3, [pc, #92]	; (82100 <usart_driver_putchar+0xa8>)
   820a4:	4798      	blx	r3
   820a6:	4603      	mov	r3, r0
   820a8:	f003 0302 	and.w	r3, r3, #2
   820ac:	2b00      	cmp	r3, #0
   820ae:	d115      	bne.n	820dc <usart_driver_putchar+0x84>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   820b0:	68f8      	ldr	r0, [r7, #12]
   820b2:	4b14      	ldr	r3, [pc, #80]	; (82104 <usart_driver_putchar+0xac>)
   820b4:	4798      	blx	r3
   820b6:	4603      	mov	r3, r0
   820b8:	f003 0302 	and.w	r3, r3, #2
   820bc:	2b00      	cmp	r3, #0
   820be:	d007      	beq.n	820d0 <usart_driver_putchar+0x78>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   820c0:	68b8      	ldr	r0, [r7, #8]
   820c2:	4b11      	ldr	r3, [pc, #68]	; (82108 <usart_driver_putchar+0xb0>)
   820c4:	4798      	blx	r3
   820c6:	4603      	mov	r3, r0
   820c8:	4619      	mov	r1, r3
   820ca:	68f8      	ldr	r0, [r7, #12]
   820cc:	4b0f      	ldr	r3, [pc, #60]	; (8210c <usart_driver_putchar+0xb4>)
   820ce:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   820d0:	2102      	movs	r1, #2
   820d2:	68f8      	ldr	r0, [r7, #12]
   820d4:	4b0e      	ldr	r3, [pc, #56]	; (82110 <usart_driver_putchar+0xb8>)
   820d6:	4798      	blx	r3
   820d8:	e000      	b.n	820dc <usart_driver_putchar+0x84>
		else return;
   820da:	bf00      	nop
	}
}
   820dc:	3710      	adds	r7, #16
   820de:	46bd      	mov	sp, r7
   820e0:	bd80      	pop	{r7, pc}
   820e2:	bf00      	nop
   820e4:	40090000 	.word	0x40090000
   820e8:	20002384 	.word	0x20002384
   820ec:	40094000 	.word	0x40094000
   820f0:	200020c8 	.word	0x200020c8
   820f4:	40098000 	.word	0x40098000
   820f8:	20001f24 	.word	0x20001f24
   820fc:	000823f7 	.word	0x000823f7
   82100:	00087c5d 	.word	0x00087c5d
   82104:	00087c73 	.word	0x00087c73
   82108:	0008245b 	.word	0x0008245b
   8210c:	00087cd7 	.word	0x00087cd7
   82110:	00087c29 	.word	0x00087c29

00082114 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   82114:	b580      	push	{r7, lr}
   82116:	b084      	sub	sp, #16
   82118:	af00      	add	r7, sp, #0
   8211a:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   8211c:	2300      	movs	r3, #0
   8211e:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   82120:	68fb      	ldr	r3, [r7, #12]
   82122:	2b00      	cmp	r3, #0
   82124:	d116      	bne.n	82154 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   82126:	687b      	ldr	r3, [r7, #4]
   82128:	4a0e      	ldr	r2, [pc, #56]	; (82164 <usart_driver_getchar+0x50>)
   8212a:	4293      	cmp	r3, r2
   8212c:	d102      	bne.n	82134 <usart_driver_getchar+0x20>
   8212e:	4b0e      	ldr	r3, [pc, #56]	; (82168 <usart_driver_getchar+0x54>)
   82130:	60fb      	str	r3, [r7, #12]
   82132:	e00f      	b.n	82154 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   82134:	687b      	ldr	r3, [r7, #4]
   82136:	4a0d      	ldr	r2, [pc, #52]	; (8216c <usart_driver_getchar+0x58>)
   82138:	4293      	cmp	r3, r2
   8213a:	d102      	bne.n	82142 <usart_driver_getchar+0x2e>
   8213c:	4b0c      	ldr	r3, [pc, #48]	; (82170 <usart_driver_getchar+0x5c>)
   8213e:	60fb      	str	r3, [r7, #12]
   82140:	e008      	b.n	82154 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   82142:	687b      	ldr	r3, [r7, #4]
   82144:	4a0b      	ldr	r2, [pc, #44]	; (82174 <usart_driver_getchar+0x60>)
   82146:	4293      	cmp	r3, r2
   82148:	d102      	bne.n	82150 <usart_driver_getchar+0x3c>
   8214a:	4b0b      	ldr	r3, [pc, #44]	; (82178 <usart_driver_getchar+0x64>)
   8214c:	60fb      	str	r3, [r7, #12]
   8214e:	e001      	b.n	82154 <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   82150:	23ff      	movs	r3, #255	; 0xff
   82152:	e003      	b.n	8215c <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   82154:	68f8      	ldr	r0, [r7, #12]
   82156:	4b09      	ldr	r3, [pc, #36]	; (8217c <usart_driver_getchar+0x68>)
   82158:	4798      	blx	r3
   8215a:	4603      	mov	r3, r0
}
   8215c:	4618      	mov	r0, r3
   8215e:	3710      	adds	r7, #16
   82160:	46bd      	mov	sp, r7
   82162:	bd80      	pop	{r7, pc}
   82164:	40090000 	.word	0x40090000
   82168:	20001fb0 	.word	0x20001fb0
   8216c:	40094000 	.word	0x40094000
   82170:	200022f8 	.word	0x200022f8
   82174:	40098000 	.word	0x40098000
   82178:	2000226c 	.word	0x2000226c
   8217c:	0008245b 	.word	0x0008245b

00082180 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   82180:	b580      	push	{r7, lr}
   82182:	b086      	sub	sp, #24
   82184:	af00      	add	r7, sp, #0
   82186:	60f8      	str	r0, [r7, #12]
   82188:	60b9      	str	r1, [r7, #8]
   8218a:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   8218c:	68f8      	ldr	r0, [r7, #12]
   8218e:	4b1b      	ldr	r3, [pc, #108]	; (821fc <generic_isr+0x7c>)
   82190:	4798      	blx	r3
   82192:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   82194:	697b      	ldr	r3, [r7, #20]
   82196:	f003 0301 	and.w	r3, r3, #1
   8219a:	2b00      	cmp	r3, #0
   8219c:	d012      	beq.n	821c4 <generic_isr+0x44>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   8219e:	68fb      	ldr	r3, [r7, #12]
   821a0:	699b      	ldr	r3, [r3, #24]
   821a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   821a6:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   821a8:	693b      	ldr	r3, [r7, #16]
   821aa:	b2db      	uxtb	r3, r3
   821ac:	2200      	movs	r2, #0
   821ae:	4619      	mov	r1, r3
   821b0:	68b8      	ldr	r0, [r7, #8]
   821b2:	4b13      	ldr	r3, [pc, #76]	; (82200 <generic_isr+0x80>)
   821b4:	4798      	blx	r3
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   821b6:	693b      	ldr	r3, [r7, #16]
   821b8:	b2db      	uxtb	r3, r3
   821ba:	2200      	movs	r2, #0
   821bc:	4619      	mov	r1, r3
   821be:	4811      	ldr	r0, [pc, #68]	; (82204 <generic_isr+0x84>)
   821c0:	4b0f      	ldr	r3, [pc, #60]	; (82200 <generic_isr+0x80>)
   821c2:	4798      	blx	r3
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   821c4:	697b      	ldr	r3, [r7, #20]
   821c6:	f003 0302 	and.w	r3, r3, #2
   821ca:	2b00      	cmp	r3, #0
   821cc:	d012      	beq.n	821f4 <generic_isr+0x74>
		if (circ_buf_has_char(txbuf)){
   821ce:	6878      	ldr	r0, [r7, #4]
   821d0:	4b0d      	ldr	r3, [pc, #52]	; (82208 <generic_isr+0x88>)
   821d2:	4798      	blx	r3
   821d4:	4603      	mov	r3, r0
   821d6:	2b00      	cmp	r3, #0
   821d8:	d008      	beq.n	821ec <generic_isr+0x6c>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   821da:	6878      	ldr	r0, [r7, #4]
   821dc:	4b0b      	ldr	r3, [pc, #44]	; (8220c <generic_isr+0x8c>)
   821de:	4798      	blx	r3
   821e0:	4603      	mov	r3, r0
   821e2:	4619      	mov	r1, r3
   821e4:	68f8      	ldr	r0, [r7, #12]
   821e6:	4b0a      	ldr	r3, [pc, #40]	; (82210 <generic_isr+0x90>)
   821e8:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   821ea:	e003      	b.n	821f4 <generic_isr+0x74>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   821ec:	2102      	movs	r1, #2
   821ee:	68f8      	ldr	r0, [r7, #12]
   821f0:	4b08      	ldr	r3, [pc, #32]	; (82214 <generic_isr+0x94>)
   821f2:	4798      	blx	r3
}
   821f4:	bf00      	nop
   821f6:	3718      	adds	r7, #24
   821f8:	46bd      	mov	sp, r7
   821fa:	bd80      	pop	{r7, pc}
   821fc:	00087c73 	.word	0x00087c73
   82200:	000823f7 	.word	0x000823f7
   82204:	20002154 	.word	0x20002154
   82208:	000824a5 	.word	0x000824a5
   8220c:	0008245b 	.word	0x0008245b
   82210:	00087cd7 	.word	0x00087cd7
   82214:	00087c43 	.word	0x00087c43

00082218 <USART0_Handler>:

ISR(USART0_Handler)
{
   82218:	b580      	push	{r7, lr}
   8221a:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   8221c:	4a03      	ldr	r2, [pc, #12]	; (8222c <USART0_Handler+0x14>)
   8221e:	4904      	ldr	r1, [pc, #16]	; (82230 <USART0_Handler+0x18>)
   82220:	4804      	ldr	r0, [pc, #16]	; (82234 <USART0_Handler+0x1c>)
   82222:	4b05      	ldr	r3, [pc, #20]	; (82238 <USART0_Handler+0x20>)
   82224:	4798      	blx	r3
}
   82226:	bf00      	nop
   82228:	bd80      	pop	{r7, pc}
   8222a:	bf00      	nop
   8222c:	20002384 	.word	0x20002384
   82230:	20001fb0 	.word	0x20001fb0
   82234:	40090000 	.word	0x40090000
   82238:	00082181 	.word	0x00082181

0008223c <USART1_Handler>:

ISR(USART1_Handler)
{
   8223c:	b580      	push	{r7, lr}
   8223e:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   82240:	4a03      	ldr	r2, [pc, #12]	; (82250 <USART1_Handler+0x14>)
   82242:	4904      	ldr	r1, [pc, #16]	; (82254 <USART1_Handler+0x18>)
   82244:	4804      	ldr	r0, [pc, #16]	; (82258 <USART1_Handler+0x1c>)
   82246:	4b05      	ldr	r3, [pc, #20]	; (8225c <USART1_Handler+0x20>)
   82248:	4798      	blx	r3
}
   8224a:	bf00      	nop
   8224c:	bd80      	pop	{r7, pc}
   8224e:	bf00      	nop
   82250:	200020c8 	.word	0x200020c8
   82254:	200022f8 	.word	0x200022f8
   82258:	40094000 	.word	0x40094000
   8225c:	00082181 	.word	0x00082181

00082260 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   82260:	b580      	push	{r7, lr}
   82262:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   82264:	4a03      	ldr	r2, [pc, #12]	; (82274 <USART2_Handler+0x14>)
   82266:	4904      	ldr	r1, [pc, #16]	; (82278 <USART2_Handler+0x18>)
   82268:	4804      	ldr	r0, [pc, #16]	; (8227c <USART2_Handler+0x1c>)
   8226a:	4b05      	ldr	r3, [pc, #20]	; (82280 <USART2_Handler+0x20>)
   8226c:	4798      	blx	r3
}
   8226e:	bf00      	nop
   82270:	bd80      	pop	{r7, pc}
   82272:	bf00      	nop
   82274:	20001f24 	.word	0x20001f24
   82278:	2000226c 	.word	0x2000226c
   8227c:	40098000 	.word	0x40098000
   82280:	00082181 	.word	0x00082181

00082284 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
   82284:	b480      	push	{r7}
   82286:	b083      	sub	sp, #12
   82288:	af00      	add	r7, sp, #0
   8228a:	6078      	str	r0, [r7, #4]
   8228c:	460b      	mov	r3, r1
   8228e:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   82290:	887a      	ldrh	r2, [r7, #2]
   82292:	687b      	ldr	r3, [r7, #4]
   82294:	60da      	str	r2, [r3, #12]
}
   82296:	bf00      	nop
   82298:	370c      	adds	r7, #12
   8229a:	46bd      	mov	sp, r7
   8229c:	bc80      	pop	{r7}
   8229e:	4770      	bx	lr

000822a0 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
   822a0:	b480      	push	{r7}
   822a2:	b083      	sub	sp, #12
   822a4:	af00      	add	r7, sp, #0
   822a6:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   822a8:	687b      	ldr	r3, [r7, #4]
   822aa:	689b      	ldr	r3, [r3, #8]
   822ac:	b29b      	uxth	r3, r3
}
   822ae:	4618      	mov	r0, r3
   822b0:	370c      	adds	r7, #12
   822b2:	46bd      	mov	sp, r7
   822b4:	bc80      	pop	{r7}
   822b6:	4770      	bx	lr

000822b8 <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
   822b8:	b480      	push	{r7}
   822ba:	b083      	sub	sp, #12
   822bc:	af00      	add	r7, sp, #0
   822be:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   822c0:	687b      	ldr	r3, [r7, #4]
   822c2:	691b      	ldr	r3, [r3, #16]
   822c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
   822c8:	2b00      	cmp	r3, #0
   822ca:	d001      	beq.n	822d0 <spi_is_tx_empty+0x18>
		return 1;
   822cc:	2301      	movs	r3, #1
   822ce:	e000      	b.n	822d2 <spi_is_tx_empty+0x1a>
	} else {
		return 0;
   822d0:	2300      	movs	r3, #0
	}
}
   822d2:	4618      	mov	r0, r3
   822d4:	370c      	adds	r7, #12
   822d6:	46bd      	mov	sp, r7
   822d8:	bc80      	pop	{r7}
   822da:	4770      	bx	lr

000822dc <write_spi_adc>:
    gpio_set_pin_low(ADC_RESET);
    for (volatile uint32_t i = 0; i < 500; i++);
}

bool write_spi_adc(uint8_t addr, uint8_t data)
{
   822dc:	b580      	push	{r7, lr}
   822de:	b082      	sub	sp, #8
   822e0:	af00      	add	r7, sp, #0
   822e2:	4603      	mov	r3, r0
   822e4:	460a      	mov	r2, r1
   822e6:	71fb      	strb	r3, [r7, #7]
   822e8:	4613      	mov	r3, r2
   822ea:	71bb      	strb	r3, [r7, #6]
    gpio_set_pin_low(ADC_SPI_CS);
   822ec:	2003      	movs	r0, #3
   822ee:	4b12      	ldr	r3, [pc, #72]	; (82338 <write_spi_adc+0x5c>)
   822f0:	4798      	blx	r3

    spi_put(SPI, addr);
   822f2:	79fb      	ldrb	r3, [r7, #7]
   822f4:	b29b      	uxth	r3, r3
   822f6:	4619      	mov	r1, r3
   822f8:	4810      	ldr	r0, [pc, #64]	; (8233c <write_spi_adc+0x60>)
   822fa:	4b11      	ldr	r3, [pc, #68]	; (82340 <write_spi_adc+0x64>)
   822fc:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   822fe:	bf00      	nop
   82300:	480e      	ldr	r0, [pc, #56]	; (8233c <write_spi_adc+0x60>)
   82302:	4b10      	ldr	r3, [pc, #64]	; (82344 <write_spi_adc+0x68>)
   82304:	4798      	blx	r3
   82306:	4603      	mov	r3, r0
   82308:	2b00      	cmp	r3, #0
   8230a:	d0f9      	beq.n	82300 <write_spi_adc+0x24>
    spi_put(SPI, data);
   8230c:	79bb      	ldrb	r3, [r7, #6]
   8230e:	b29b      	uxth	r3, r3
   82310:	4619      	mov	r1, r3
   82312:	480a      	ldr	r0, [pc, #40]	; (8233c <write_spi_adc+0x60>)
   82314:	4b0a      	ldr	r3, [pc, #40]	; (82340 <write_spi_adc+0x64>)
   82316:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   82318:	bf00      	nop
   8231a:	4808      	ldr	r0, [pc, #32]	; (8233c <write_spi_adc+0x60>)
   8231c:	4b09      	ldr	r3, [pc, #36]	; (82344 <write_spi_adc+0x68>)
   8231e:	4798      	blx	r3
   82320:	4603      	mov	r3, r0
   82322:	2b00      	cmp	r3, #0
   82324:	d0f9      	beq.n	8231a <write_spi_adc+0x3e>

    gpio_set_pin_high(ADC_SPI_CS);
   82326:	2003      	movs	r0, #3
   82328:	4b07      	ldr	r3, [pc, #28]	; (82348 <write_spi_adc+0x6c>)
   8232a:	4798      	blx	r3

    return true;
   8232c:	2301      	movs	r3, #1
}
   8232e:	4618      	mov	r0, r3
   82330:	3708      	adds	r7, #8
   82332:	46bd      	mov	sp, r7
   82334:	bd80      	pop	{r7, pc}
   82336:	bf00      	nop
   82338:	00082ad1 	.word	0x00082ad1
   8233c:	40008000 	.word	0x40008000
   82340:	00082285 	.word	0x00082285
   82344:	000822b9 	.word	0x000822b9
   82348:	00082aa1 	.word	0x00082aa1

0008234c <read_spi_adc>:

uint8_t read_spi_adc(uint8_t addr)
{
   8234c:	b580      	push	{r7, lr}
   8234e:	b084      	sub	sp, #16
   82350:	af00      	add	r7, sp, #0
   82352:	4603      	mov	r3, r0
   82354:	71fb      	strb	r3, [r7, #7]
    write_spi_adc(0x00, 0x01); //enable read, disable write
   82356:	2101      	movs	r1, #1
   82358:	2000      	movs	r0, #0
   8235a:	4b17      	ldr	r3, [pc, #92]	; (823b8 <read_spi_adc+0x6c>)
   8235c:	4798      	blx	r3
    gpio_set_pin_low(ADC_SPI_CS);
   8235e:	2003      	movs	r0, #3
   82360:	4b16      	ldr	r3, [pc, #88]	; (823bc <read_spi_adc+0x70>)
   82362:	4798      	blx	r3
    spi_put(SPI, addr);
   82364:	79fb      	ldrb	r3, [r7, #7]
   82366:	b29b      	uxth	r3, r3
   82368:	4619      	mov	r1, r3
   8236a:	4815      	ldr	r0, [pc, #84]	; (823c0 <read_spi_adc+0x74>)
   8236c:	4b15      	ldr	r3, [pc, #84]	; (823c4 <read_spi_adc+0x78>)
   8236e:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   82370:	bf00      	nop
   82372:	4813      	ldr	r0, [pc, #76]	; (823c0 <read_spi_adc+0x74>)
   82374:	4b14      	ldr	r3, [pc, #80]	; (823c8 <read_spi_adc+0x7c>)
   82376:	4798      	blx	r3
   82378:	4603      	mov	r3, r0
   8237a:	2b00      	cmp	r3, #0
   8237c:	d0f9      	beq.n	82372 <read_spi_adc+0x26>
    spi_put(SPI, 0x00); //shift data in
   8237e:	2100      	movs	r1, #0
   82380:	480f      	ldr	r0, [pc, #60]	; (823c0 <read_spi_adc+0x74>)
   82382:	4b10      	ldr	r3, [pc, #64]	; (823c4 <read_spi_adc+0x78>)
   82384:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   82386:	bf00      	nop
   82388:	480d      	ldr	r0, [pc, #52]	; (823c0 <read_spi_adc+0x74>)
   8238a:	4b0f      	ldr	r3, [pc, #60]	; (823c8 <read_spi_adc+0x7c>)
   8238c:	4798      	blx	r3
   8238e:	4603      	mov	r3, r0
   82390:	2b00      	cmp	r3, #0
   82392:	d0f9      	beq.n	82388 <read_spi_adc+0x3c>

    uint8_t rtn = spi_get(SPI);
   82394:	480a      	ldr	r0, [pc, #40]	; (823c0 <read_spi_adc+0x74>)
   82396:	4b0d      	ldr	r3, [pc, #52]	; (823cc <read_spi_adc+0x80>)
   82398:	4798      	blx	r3
   8239a:	4603      	mov	r3, r0
   8239c:	73fb      	strb	r3, [r7, #15]
    gpio_set_pin_high(ADC_SPI_CS);
   8239e:	2003      	movs	r0, #3
   823a0:	4b0b      	ldr	r3, [pc, #44]	; (823d0 <read_spi_adc+0x84>)
   823a2:	4798      	blx	r3

    write_spi_adc(0x00, 0x00); //disable read, enable write
   823a4:	2100      	movs	r1, #0
   823a6:	2000      	movs	r0, #0
   823a8:	4b03      	ldr	r3, [pc, #12]	; (823b8 <read_spi_adc+0x6c>)
   823aa:	4798      	blx	r3
    return rtn;
   823ac:	7bfb      	ldrb	r3, [r7, #15]
}
   823ae:	4618      	mov	r0, r3
   823b0:	3710      	adds	r7, #16
   823b2:	46bd      	mov	sp, r7
   823b4:	bd80      	pop	{r7, pc}
   823b6:	bf00      	nop
   823b8:	000822dd 	.word	0x000822dd
   823bc:	00082ad1 	.word	0x00082ad1
   823c0:	40008000 	.word	0x40008000
   823c4:	00082285 	.word	0x00082285
   823c8:	000822b9 	.word	0x000822b9
   823cc:	000822a1 	.word	0x000822a1
   823d0:	00082aa1 	.word	0x00082aa1

000823d4 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   823d4:	b480      	push	{r7}
   823d6:	b083      	sub	sp, #12
   823d8:	af00      	add	r7, sp, #0
   823da:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   823dc:	2300      	movs	r3, #0
   823de:	687a      	ldr	r2, [r7, #4]
   823e0:	6053      	str	r3, [r2, #4]
   823e2:	687a      	ldr	r2, [r7, #4]
   823e4:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   823e6:	687b      	ldr	r3, [r7, #4]
   823e8:	2200      	movs	r2, #0
   823ea:	609a      	str	r2, [r3, #8]
}
   823ec:	bf00      	nop
   823ee:	370c      	adds	r7, #12
   823f0:	46bd      	mov	sp, r7
   823f2:	bc80      	pop	{r7}
   823f4:	4770      	bx	lr

000823f6 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   823f6:	b480      	push	{r7}
   823f8:	b085      	sub	sp, #20
   823fa:	af00      	add	r7, sp, #0
   823fc:	6078      	str	r0, [r7, #4]
   823fe:	460b      	mov	r3, r1
   82400:	70fb      	strb	r3, [r7, #3]
   82402:	4613      	mov	r3, r2
   82404:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   82406:	687b      	ldr	r3, [r7, #4]
   82408:	681b      	ldr	r3, [r3, #0]
   8240a:	60fb      	str	r3, [r7, #12]
    newhead++;
   8240c:	68fb      	ldr	r3, [r7, #12]
   8240e:	3301      	adds	r3, #1
   82410:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   82412:	68fb      	ldr	r3, [r7, #12]
   82414:	2b7f      	cmp	r3, #127	; 0x7f
   82416:	d90e      	bls.n	82436 <add_to_circ_buf+0x40>
        newhead = 0;
   82418:	2300      	movs	r3, #0
   8241a:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   8241c:	e00b      	b.n	82436 <add_to_circ_buf+0x40>
    {
        if (!block)
   8241e:	78bb      	ldrb	r3, [r7, #2]
   82420:	f083 0301 	eor.w	r3, r3, #1
   82424:	b2db      	uxtb	r3, r3
   82426:	2b00      	cmp	r3, #0
   82428:	d005      	beq.n	82436 <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   8242a:	687b      	ldr	r3, [r7, #4]
   8242c:	689b      	ldr	r3, [r3, #8]
   8242e:	1c5a      	adds	r2, r3, #1
   82430:	687b      	ldr	r3, [r7, #4]
   82432:	609a      	str	r2, [r3, #8]
            return;
   82434:	e00d      	b.n	82452 <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   82436:	687b      	ldr	r3, [r7, #4]
   82438:	685b      	ldr	r3, [r3, #4]
   8243a:	68fa      	ldr	r2, [r7, #12]
   8243c:	429a      	cmp	r2, r3
   8243e:	d0ee      	beq.n	8241e <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   82440:	687b      	ldr	r3, [r7, #4]
   82442:	681b      	ldr	r3, [r3, #0]
   82444:	687a      	ldr	r2, [r7, #4]
   82446:	4413      	add	r3, r2
   82448:	78fa      	ldrb	r2, [r7, #3]
   8244a:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   8244c:	687b      	ldr	r3, [r7, #4]
   8244e:	68fa      	ldr	r2, [r7, #12]
   82450:	601a      	str	r2, [r3, #0]
}
   82452:	3714      	adds	r7, #20
   82454:	46bd      	mov	sp, r7
   82456:	bc80      	pop	{r7}
   82458:	4770      	bx	lr

0008245a <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   8245a:	b480      	push	{r7}
   8245c:	b085      	sub	sp, #20
   8245e:	af00      	add	r7, sp, #0
   82460:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   82462:	687b      	ldr	r3, [r7, #4]
   82464:	685b      	ldr	r3, [r3, #4]
   82466:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   82468:	687a      	ldr	r2, [r7, #4]
   8246a:	68fb      	ldr	r3, [r7, #12]
   8246c:	4413      	add	r3, r2
   8246e:	330c      	adds	r3, #12
   82470:	781b      	ldrb	r3, [r3, #0]
   82472:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   82474:	687b      	ldr	r3, [r7, #4]
   82476:	681b      	ldr	r3, [r3, #0]
   82478:	68fa      	ldr	r2, [r7, #12]
   8247a:	429a      	cmp	r2, r3
   8247c:	d101      	bne.n	82482 <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   8247e:	23ff      	movs	r3, #255	; 0xff
   82480:	e00b      	b.n	8249a <get_from_circ_buf+0x40>

    newtail++;
   82482:	68fb      	ldr	r3, [r7, #12]
   82484:	3301      	adds	r3, #1
   82486:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   82488:	68fb      	ldr	r3, [r7, #12]
   8248a:	2b7f      	cmp	r3, #127	; 0x7f
   8248c:	d901      	bls.n	82492 <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   8248e:	2300      	movs	r3, #0
   82490:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   82492:	687b      	ldr	r3, [r7, #4]
   82494:	68fa      	ldr	r2, [r7, #12]
   82496:	605a      	str	r2, [r3, #4]

    return retval;
   82498:	7afb      	ldrb	r3, [r7, #11]
}
   8249a:	4618      	mov	r0, r3
   8249c:	3714      	adds	r7, #20
   8249e:	46bd      	mov	sp, r7
   824a0:	bc80      	pop	{r7}
   824a2:	4770      	bx	lr

000824a4 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   824a4:	b480      	push	{r7}
   824a6:	b085      	sub	sp, #20
   824a8:	af00      	add	r7, sp, #0
   824aa:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   824ac:	687b      	ldr	r3, [r7, #4]
   824ae:	681b      	ldr	r3, [r3, #0]
   824b0:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   824b2:	687b      	ldr	r3, [r7, #4]
   824b4:	685b      	ldr	r3, [r3, #4]
   824b6:	68fa      	ldr	r2, [r7, #12]
   824b8:	429a      	cmp	r2, r3
   824ba:	bf14      	ite	ne
   824bc:	2301      	movne	r3, #1
   824be:	2300      	moveq	r3, #0
   824c0:	b2db      	uxtb	r3, r3
}
   824c2:	4618      	mov	r0, r3
   824c4:	3714      	adds	r7, #20
   824c6:	46bd      	mov	sp, r7
   824c8:	bc80      	pop	{r7}
   824ca:	4770      	bx	lr

000824cc <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   824cc:	b480      	push	{r7}
   824ce:	b085      	sub	sp, #20
   824d0:	af00      	add	r7, sp, #0
   824d2:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   824d4:	687b      	ldr	r3, [r7, #4]
   824d6:	681b      	ldr	r3, [r3, #0]
   824d8:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   824da:	687b      	ldr	r3, [r7, #4]
   824dc:	685b      	ldr	r3, [r3, #4]
   824de:	68fa      	ldr	r2, [r7, #12]
   824e0:	1ad3      	subs	r3, r2, r3
   824e2:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   824e4:	68fb      	ldr	r3, [r7, #12]
   824e6:	2b00      	cmp	r3, #0
   824e8:	da02      	bge.n	824f0 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   824ea:	68fb      	ldr	r3, [r7, #12]
   824ec:	3380      	adds	r3, #128	; 0x80
   824ee:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   824f0:	68fb      	ldr	r3, [r7, #12]
}
   824f2:	4618      	mov	r0, r3
   824f4:	3714      	adds	r7, #20
   824f6:	46bd      	mov	sp, r7
   824f8:	bc80      	pop	{r7}
   824fa:	4770      	bx	lr

000824fc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   824fc:	b480      	push	{r7}
   824fe:	b083      	sub	sp, #12
   82500:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82502:	f3ef 8310 	mrs	r3, PRIMASK
   82506:	603b      	str	r3, [r7, #0]
  return(result);
   82508:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8250a:	2b00      	cmp	r3, #0
   8250c:	bf0c      	ite	eq
   8250e:	2301      	moveq	r3, #1
   82510:	2300      	movne	r3, #0
   82512:	b2db      	uxtb	r3, r3
   82514:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   82516:	b672      	cpsid	i
}
   82518:	bf00      	nop
  __ASM volatile ("dmb");
   8251a:	f3bf 8f5f 	dmb	sy
}
   8251e:	bf00      	nop
	cpu_irq_disable();
   82520:	4b04      	ldr	r3, [pc, #16]	; (82534 <cpu_irq_save+0x38>)
   82522:	2200      	movs	r2, #0
   82524:	701a      	strb	r2, [r3, #0]
	return flags;
   82526:	687b      	ldr	r3, [r7, #4]
}
   82528:	4618      	mov	r0, r3
   8252a:	370c      	adds	r7, #12
   8252c:	46bd      	mov	sp, r7
   8252e:	bc80      	pop	{r7}
   82530:	4770      	bx	lr
   82532:	bf00      	nop
   82534:	20000284 	.word	0x20000284

00082538 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   82538:	b480      	push	{r7}
   8253a:	b083      	sub	sp, #12
   8253c:	af00      	add	r7, sp, #0
   8253e:	6078      	str	r0, [r7, #4]
	return (flags);
   82540:	687b      	ldr	r3, [r7, #4]
   82542:	2b00      	cmp	r3, #0
   82544:	bf14      	ite	ne
   82546:	2301      	movne	r3, #1
   82548:	2300      	moveq	r3, #0
   8254a:	b2db      	uxtb	r3, r3
}
   8254c:	4618      	mov	r0, r3
   8254e:	370c      	adds	r7, #12
   82550:	46bd      	mov	sp, r7
   82552:	bc80      	pop	{r7}
   82554:	4770      	bx	lr
   82556:	0000      	movs	r0, r0

00082558 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   82558:	b580      	push	{r7, lr}
   8255a:	b082      	sub	sp, #8
   8255c:	af00      	add	r7, sp, #0
   8255e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   82560:	6878      	ldr	r0, [r7, #4]
   82562:	4b08      	ldr	r3, [pc, #32]	; (82584 <cpu_irq_restore+0x2c>)
   82564:	4798      	blx	r3
   82566:	4603      	mov	r3, r0
   82568:	2b00      	cmp	r3, #0
   8256a:	d007      	beq.n	8257c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   8256c:	4b06      	ldr	r3, [pc, #24]	; (82588 <cpu_irq_restore+0x30>)
   8256e:	2201      	movs	r2, #1
   82570:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82572:	f3bf 8f5f 	dmb	sy
}
   82576:	bf00      	nop
  __ASM volatile ("cpsie i");
   82578:	b662      	cpsie	i
}
   8257a:	bf00      	nop
}
   8257c:	bf00      	nop
   8257e:	3708      	adds	r7, #8
   82580:	46bd      	mov	sp, r7
   82582:	bd80      	pop	{r7, pc}
   82584:	00082539 	.word	0x00082539
   82588:	20000284 	.word	0x20000284

0008258c <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   8258c:	b580      	push	{r7, lr}
   8258e:	b086      	sub	sp, #24
   82590:	af00      	add	r7, sp, #0
   82592:	60f8      	str	r0, [r7, #12]
   82594:	60b9      	str	r1, [r7, #8]
   82596:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82598:	68bb      	ldr	r3, [r7, #8]
   8259a:	2b0e      	cmp	r3, #14
   8259c:	d002      	beq.n	825a4 <efc_perform_command+0x18>
   8259e:	68bb      	ldr	r3, [r7, #8]
   825a0:	2b0f      	cmp	r3, #15
   825a2:	d102      	bne.n	825aa <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   825a4:	f04f 33ff 	mov.w	r3, #4294967295
   825a8:	e016      	b.n	825d8 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   825aa:	4b0d      	ldr	r3, [pc, #52]	; (825e0 <efc_perform_command+0x54>)
   825ac:	4798      	blx	r3
   825ae:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   825b0:	687b      	ldr	r3, [r7, #4]
   825b2:	021b      	lsls	r3, r3, #8
   825b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   825b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   825bc:	68ba      	ldr	r2, [r7, #8]
   825be:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   825c0:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   825c2:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   825c6:	4619      	mov	r1, r3
   825c8:	68f8      	ldr	r0, [r7, #12]
   825ca:	4b06      	ldr	r3, [pc, #24]	; (825e4 <efc_perform_command+0x58>)
   825cc:	4798      	blx	r3
   825ce:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   825d0:	6978      	ldr	r0, [r7, #20]
   825d2:	4b05      	ldr	r3, [pc, #20]	; (825e8 <efc_perform_command+0x5c>)
   825d4:	4798      	blx	r3
	return result;
   825d6:	693b      	ldr	r3, [r7, #16]
}
   825d8:	4618      	mov	r0, r3
   825da:	3718      	adds	r7, #24
   825dc:	46bd      	mov	sp, r7
   825de:	bd80      	pop	{r7, pc}
   825e0:	000824fd 	.word	0x000824fd
   825e4:	200000bd 	.word	0x200000bd
   825e8:	00082559 	.word	0x00082559

000825ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   825ec:	b480      	push	{r7}
   825ee:	af00      	add	r7, sp, #0
	while (1) {
   825f0:	e7fe      	b.n	825f0 <Dummy_Handler+0x4>
   825f2:	0000      	movs	r0, r0

000825f4 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   825f4:	b590      	push	{r4, r7, lr}
   825f6:	b08b      	sub	sp, #44	; 0x2c
   825f8:	af02      	add	r7, sp, #8
   825fa:	6078      	str	r0, [r7, #4]
   825fc:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   825fe:	f107 030c 	add.w	r3, r7, #12
   82602:	2204      	movs	r2, #4
   82604:	9200      	str	r2, [sp, #0]
   82606:	220f      	movs	r2, #15
   82608:	210e      	movs	r1, #14
   8260a:	4814      	ldr	r0, [pc, #80]	; (8265c <flash_read_unique_id+0x68>)
   8260c:	4c14      	ldr	r4, [pc, #80]	; (82660 <flash_read_unique_id+0x6c>)
   8260e:	47a0      	blx	r4
   82610:	4603      	mov	r3, r0
   82612:	2b00      	cmp	r3, #0
   82614:	d001      	beq.n	8261a <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   82616:	2310      	movs	r3, #16
   82618:	e01b      	b.n	82652 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   8261a:	683b      	ldr	r3, [r7, #0]
   8261c:	2b04      	cmp	r3, #4
   8261e:	d901      	bls.n	82624 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   82620:	2304      	movs	r3, #4
   82622:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82624:	2300      	movs	r3, #0
   82626:	61fb      	str	r3, [r7, #28]
   82628:	e00e      	b.n	82648 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   8262a:	69fb      	ldr	r3, [r7, #28]
   8262c:	009b      	lsls	r3, r3, #2
   8262e:	687a      	ldr	r2, [r7, #4]
   82630:	441a      	add	r2, r3
   82632:	69fb      	ldr	r3, [r7, #28]
   82634:	009b      	lsls	r3, r3, #2
   82636:	f107 0120 	add.w	r1, r7, #32
   8263a:	440b      	add	r3, r1
   8263c:	f853 3c14 	ldr.w	r3, [r3, #-20]
   82640:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82642:	69fb      	ldr	r3, [r7, #28]
   82644:	3301      	adds	r3, #1
   82646:	61fb      	str	r3, [r7, #28]
   82648:	69fa      	ldr	r2, [r7, #28]
   8264a:	683b      	ldr	r3, [r7, #0]
   8264c:	429a      	cmp	r2, r3
   8264e:	d3ec      	bcc.n	8262a <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   82650:	2300      	movs	r3, #0
}
   82652:	4618      	mov	r0, r3
   82654:	3724      	adds	r7, #36	; 0x24
   82656:	46bd      	mov	sp, r7
   82658:	bd90      	pop	{r4, r7, pc}
   8265a:	bf00      	nop
   8265c:	400e0800 	.word	0x400e0800
   82660:	20000001 	.word	0x20000001

00082664 <sysclk_enable_peripheral_clock>:
{
   82664:	b580      	push	{r7, lr}
   82666:	b082      	sub	sp, #8
   82668:	af00      	add	r7, sp, #0
   8266a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8266c:	6878      	ldr	r0, [r7, #4]
   8266e:	4b03      	ldr	r3, [pc, #12]	; (8267c <sysclk_enable_peripheral_clock+0x18>)
   82670:	4798      	blx	r3
}
   82672:	bf00      	nop
   82674:	3708      	adds	r7, #8
   82676:	46bd      	mov	sp, r7
   82678:	bd80      	pop	{r7, pc}
   8267a:	bf00      	nop
   8267c:	00083165 	.word	0x00083165

00082680 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82680:	b580      	push	{r7, lr}
   82682:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82684:	200a      	movs	r0, #10
   82686:	4b04      	ldr	r3, [pc, #16]	; (82698 <ioport_init+0x18>)
   82688:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   8268a:	200b      	movs	r0, #11
   8268c:	4b02      	ldr	r3, [pc, #8]	; (82698 <ioport_init+0x18>)
   8268e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   82690:	bf00      	nop
	arch_ioport_init();
}
   82692:	bf00      	nop
   82694:	bd80      	pop	{r7, pc}
   82696:	bf00      	nop
   82698:	00082665 	.word	0x00082665

0008269c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   8269c:	b580      	push	{r7, lr}
   8269e:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   826a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   826a4:	201d      	movs	r0, #29
   826a6:	4b0d      	ldr	r3, [pc, #52]	; (826dc <iopins_normal+0x40>)
   826a8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   826aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   826ae:	201f      	movs	r0, #31
   826b0:	4b0a      	ldr	r3, [pc, #40]	; (826dc <iopins_normal+0x40>)
   826b2:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   826b4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   826b8:	201d      	movs	r0, #29
   826ba:	4b08      	ldr	r3, [pc, #32]	; (826dc <iopins_normal+0x40>)
   826bc:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   826be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   826c2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   826c6:	4806      	ldr	r0, [pc, #24]	; (826e0 <iopins_normal+0x44>)
   826c8:	4b06      	ldr	r3, [pc, #24]	; (826e4 <iopins_normal+0x48>)
   826ca:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   826cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   826d0:	2038      	movs	r0, #56	; 0x38
   826d2:	4b02      	ldr	r3, [pc, #8]	; (826dc <iopins_normal+0x40>)
   826d4:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   826d6:	bf00      	nop
   826d8:	bd80      	pop	{r7, pc}
   826da:	bf00      	nop
   826dc:	00082b01 	.word	0x00082b01
   826e0:	400e0c00 	.word	0x400e0c00
   826e4:	00082c31 	.word	0x00082c31

000826e8 <board_init>:

void board_init(void)
{
   826e8:	b580      	push	{r7, lr}
   826ea:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   826ec:	4b04      	ldr	r3, [pc, #16]	; (82700 <board_init+0x18>)
   826ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   826f2:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   826f4:	4b03      	ldr	r3, [pc, #12]	; (82704 <board_init+0x1c>)
   826f6:	4798      	blx	r3

	iopins_normal();
   826f8:	4b03      	ldr	r3, [pc, #12]	; (82708 <board_init+0x20>)
   826fa:	4798      	blx	r3

}
   826fc:	bf00      	nop
   826fe:	bd80      	pop	{r7, pc}
   82700:	400e1250 	.word	0x400e1250
   82704:	00082681 	.word	0x00082681
   82708:	0008269d 	.word	0x0008269d

0008270c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   8270c:	b480      	push	{r7}
   8270e:	b083      	sub	sp, #12
   82710:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   82712:	4b11      	ldr	r3, [pc, #68]	; (82758 <cpu_irq_enter_critical+0x4c>)
   82714:	681b      	ldr	r3, [r3, #0]
   82716:	2b00      	cmp	r3, #0
   82718:	d114      	bne.n	82744 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8271a:	f3ef 8310 	mrs	r3, PRIMASK
   8271e:	607b      	str	r3, [r7, #4]
  return(result);
   82720:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   82722:	2b00      	cmp	r3, #0
   82724:	d10b      	bne.n	8273e <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   82726:	b672      	cpsid	i
}
   82728:	bf00      	nop
  __ASM volatile ("dmb");
   8272a:	f3bf 8f5f 	dmb	sy
}
   8272e:	bf00      	nop
			cpu_irq_disable();
   82730:	4b0a      	ldr	r3, [pc, #40]	; (8275c <cpu_irq_enter_critical+0x50>)
   82732:	2200      	movs	r2, #0
   82734:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   82736:	4b0a      	ldr	r3, [pc, #40]	; (82760 <cpu_irq_enter_critical+0x54>)
   82738:	2201      	movs	r2, #1
   8273a:	701a      	strb	r2, [r3, #0]
   8273c:	e002      	b.n	82744 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   8273e:	4b08      	ldr	r3, [pc, #32]	; (82760 <cpu_irq_enter_critical+0x54>)
   82740:	2200      	movs	r2, #0
   82742:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   82744:	4b04      	ldr	r3, [pc, #16]	; (82758 <cpu_irq_enter_critical+0x4c>)
   82746:	681b      	ldr	r3, [r3, #0]
   82748:	3301      	adds	r3, #1
   8274a:	4a03      	ldr	r2, [pc, #12]	; (82758 <cpu_irq_enter_critical+0x4c>)
   8274c:	6013      	str	r3, [r2, #0]
}
   8274e:	bf00      	nop
   82750:	370c      	adds	r7, #12
   82752:	46bd      	mov	sp, r7
   82754:	bc80      	pop	{r7}
   82756:	4770      	bx	lr
   82758:	20001578 	.word	0x20001578
   8275c:	20000284 	.word	0x20000284
   82760:	2000157c 	.word	0x2000157c

00082764 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   82764:	b480      	push	{r7}
   82766:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82768:	4b0c      	ldr	r3, [pc, #48]	; (8279c <cpu_irq_leave_critical+0x38>)
   8276a:	681b      	ldr	r3, [r3, #0]
   8276c:	3b01      	subs	r3, #1
   8276e:	4a0b      	ldr	r2, [pc, #44]	; (8279c <cpu_irq_leave_critical+0x38>)
   82770:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   82772:	4b0a      	ldr	r3, [pc, #40]	; (8279c <cpu_irq_leave_critical+0x38>)
   82774:	681b      	ldr	r3, [r3, #0]
   82776:	2b00      	cmp	r3, #0
   82778:	d10c      	bne.n	82794 <cpu_irq_leave_critical+0x30>
   8277a:	4b09      	ldr	r3, [pc, #36]	; (827a0 <cpu_irq_leave_critical+0x3c>)
   8277c:	781b      	ldrb	r3, [r3, #0]
   8277e:	b2db      	uxtb	r3, r3
   82780:	2b00      	cmp	r3, #0
   82782:	d007      	beq.n	82794 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   82784:	4b07      	ldr	r3, [pc, #28]	; (827a4 <cpu_irq_leave_critical+0x40>)
   82786:	2201      	movs	r2, #1
   82788:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8278a:	f3bf 8f5f 	dmb	sy
}
   8278e:	bf00      	nop
  __ASM volatile ("cpsie i");
   82790:	b662      	cpsie	i
}
   82792:	bf00      	nop
	}
}
   82794:	bf00      	nop
   82796:	46bd      	mov	sp, r7
   82798:	bc80      	pop	{r7}
   8279a:	4770      	bx	lr
   8279c:	20001578 	.word	0x20001578
   827a0:	2000157c 	.word	0x2000157c
   827a4:	20000284 	.word	0x20000284

000827a8 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   827a8:	b580      	push	{r7, lr}
   827aa:	b084      	sub	sp, #16
   827ac:	af00      	add	r7, sp, #0
   827ae:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   827b0:	2300      	movs	r3, #0
   827b2:	60fb      	str	r3, [r7, #12]
   827b4:	e017      	b.n	827e6 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   827b6:	4a10      	ldr	r2, [pc, #64]	; (827f8 <LED_Off+0x50>)
   827b8:	68fb      	ldr	r3, [r7, #12]
   827ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   827be:	687a      	ldr	r2, [r7, #4]
   827c0:	429a      	cmp	r2, r3
   827c2:	d10d      	bne.n	827e0 <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   827c4:	4a0c      	ldr	r2, [pc, #48]	; (827f8 <LED_Off+0x50>)
   827c6:	68fb      	ldr	r3, [r7, #12]
   827c8:	00db      	lsls	r3, r3, #3
   827ca:	4413      	add	r3, r2
   827cc:	685b      	ldr	r3, [r3, #4]
   827ce:	2b01      	cmp	r3, #1
   827d0:	d103      	bne.n	827da <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   827d2:	6878      	ldr	r0, [r7, #4]
   827d4:	4b09      	ldr	r3, [pc, #36]	; (827fc <LED_Off+0x54>)
   827d6:	4798      	blx	r3
   827d8:	e002      	b.n	827e0 <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   827da:	6878      	ldr	r0, [r7, #4]
   827dc:	4b08      	ldr	r3, [pc, #32]	; (82800 <LED_Off+0x58>)
   827de:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   827e0:	68fb      	ldr	r3, [r7, #12]
   827e2:	3301      	adds	r3, #1
   827e4:	60fb      	str	r3, [r7, #12]
   827e6:	68fb      	ldr	r3, [r7, #12]
   827e8:	2b01      	cmp	r3, #1
   827ea:	d9e4      	bls.n	827b6 <LED_Off+0xe>
			}
		}
	}
}
   827ec:	bf00      	nop
   827ee:	bf00      	nop
   827f0:	3710      	adds	r7, #16
   827f2:	46bd      	mov	sp, r7
   827f4:	bd80      	pop	{r7, pc}
   827f6:	bf00      	nop
   827f8:	0008ea80 	.word	0x0008ea80
   827fc:	00082ad1 	.word	0x00082ad1
   82800:	00082aa1 	.word	0x00082aa1

00082804 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   82804:	b580      	push	{r7, lr}
   82806:	b084      	sub	sp, #16
   82808:	af00      	add	r7, sp, #0
   8280a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8280c:	2300      	movs	r3, #0
   8280e:	60fb      	str	r3, [r7, #12]
   82810:	e017      	b.n	82842 <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82812:	4a10      	ldr	r2, [pc, #64]	; (82854 <LED_On+0x50>)
   82814:	68fb      	ldr	r3, [r7, #12]
   82816:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   8281a:	687a      	ldr	r2, [r7, #4]
   8281c:	429a      	cmp	r2, r3
   8281e:	d10d      	bne.n	8283c <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82820:	4a0c      	ldr	r2, [pc, #48]	; (82854 <LED_On+0x50>)
   82822:	68fb      	ldr	r3, [r7, #12]
   82824:	00db      	lsls	r3, r3, #3
   82826:	4413      	add	r3, r2
   82828:	685b      	ldr	r3, [r3, #4]
   8282a:	2b01      	cmp	r3, #1
   8282c:	d103      	bne.n	82836 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   8282e:	6878      	ldr	r0, [r7, #4]
   82830:	4b09      	ldr	r3, [pc, #36]	; (82858 <LED_On+0x54>)
   82832:	4798      	blx	r3
   82834:	e002      	b.n	8283c <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   82836:	6878      	ldr	r0, [r7, #4]
   82838:	4b08      	ldr	r3, [pc, #32]	; (8285c <LED_On+0x58>)
   8283a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8283c:	68fb      	ldr	r3, [r7, #12]
   8283e:	3301      	adds	r3, #1
   82840:	60fb      	str	r3, [r7, #12]
   82842:	68fb      	ldr	r3, [r7, #12]
   82844:	2b01      	cmp	r3, #1
   82846:	d9e4      	bls.n	82812 <LED_On+0xe>
			}
		}
	}
}
   82848:	bf00      	nop
   8284a:	bf00      	nop
   8284c:	3710      	adds	r7, #16
   8284e:	46bd      	mov	sp, r7
   82850:	bd80      	pop	{r7, pc}
   82852:	bf00      	nop
   82854:	0008ea80 	.word	0x0008ea80
   82858:	00082aa1 	.word	0x00082aa1
   8285c:	00082ad1 	.word	0x00082ad1

00082860 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82860:	b480      	push	{r7}
   82862:	b085      	sub	sp, #20
   82864:	af00      	add	r7, sp, #0
   82866:	60f8      	str	r0, [r7, #12]
   82868:	60b9      	str	r1, [r7, #8]
   8286a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8286c:	687b      	ldr	r3, [r7, #4]
   8286e:	2b00      	cmp	r3, #0
   82870:	d003      	beq.n	8287a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82872:	68fb      	ldr	r3, [r7, #12]
   82874:	68ba      	ldr	r2, [r7, #8]
   82876:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82878:	e002      	b.n	82880 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   8287a:	68fb      	ldr	r3, [r7, #12]
   8287c:	68ba      	ldr	r2, [r7, #8]
   8287e:	661a      	str	r2, [r3, #96]	; 0x60
}
   82880:	bf00      	nop
   82882:	3714      	adds	r7, #20
   82884:	46bd      	mov	sp, r7
   82886:	bc80      	pop	{r7}
   82888:	4770      	bx	lr

0008288a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8288a:	b480      	push	{r7}
   8288c:	b087      	sub	sp, #28
   8288e:	af00      	add	r7, sp, #0
   82890:	60f8      	str	r0, [r7, #12]
   82892:	60b9      	str	r1, [r7, #8]
   82894:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82896:	68fb      	ldr	r3, [r7, #12]
   82898:	687a      	ldr	r2, [r7, #4]
   8289a:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8289c:	68bb      	ldr	r3, [r7, #8]
   8289e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   828a2:	d03c      	beq.n	8291e <pio_set_peripheral+0x94>
   828a4:	68bb      	ldr	r3, [r7, #8]
   828a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   828aa:	d834      	bhi.n	82916 <pio_set_peripheral+0x8c>
   828ac:	68bb      	ldr	r3, [r7, #8]
   828ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   828b2:	d034      	beq.n	8291e <pio_set_peripheral+0x94>
   828b4:	68bb      	ldr	r3, [r7, #8]
   828b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   828ba:	d82c      	bhi.n	82916 <pio_set_peripheral+0x8c>
   828bc:	68bb      	ldr	r3, [r7, #8]
   828be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   828c2:	d02c      	beq.n	8291e <pio_set_peripheral+0x94>
   828c4:	68bb      	ldr	r3, [r7, #8]
   828c6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   828ca:	d824      	bhi.n	82916 <pio_set_peripheral+0x8c>
   828cc:	68bb      	ldr	r3, [r7, #8]
   828ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   828d2:	d017      	beq.n	82904 <pio_set_peripheral+0x7a>
   828d4:	68bb      	ldr	r3, [r7, #8]
   828d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   828da:	d81c      	bhi.n	82916 <pio_set_peripheral+0x8c>
   828dc:	68bb      	ldr	r3, [r7, #8]
   828de:	2b00      	cmp	r3, #0
   828e0:	d01d      	beq.n	8291e <pio_set_peripheral+0x94>
   828e2:	68bb      	ldr	r3, [r7, #8]
   828e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   828e8:	d115      	bne.n	82916 <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   828ea:	68fb      	ldr	r3, [r7, #12]
   828ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   828ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   828f0:	68fb      	ldr	r3, [r7, #12]
   828f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   828f4:	687b      	ldr	r3, [r7, #4]
   828f6:	43d9      	mvns	r1, r3
   828f8:	697b      	ldr	r3, [r7, #20]
   828fa:	400b      	ands	r3, r1
   828fc:	401a      	ands	r2, r3
   828fe:	68fb      	ldr	r3, [r7, #12]
   82900:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82902:	e008      	b.n	82916 <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82904:	68fb      	ldr	r3, [r7, #12]
   82906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82908:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8290a:	687a      	ldr	r2, [r7, #4]
   8290c:	697b      	ldr	r3, [r7, #20]
   8290e:	431a      	orrs	r2, r3
   82910:	68fb      	ldr	r3, [r7, #12]
   82912:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82914:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82916:	68fb      	ldr	r3, [r7, #12]
   82918:	687a      	ldr	r2, [r7, #4]
   8291a:	605a      	str	r2, [r3, #4]
   8291c:	e000      	b.n	82920 <pio_set_peripheral+0x96>
		return;
   8291e:	bf00      	nop
}
   82920:	371c      	adds	r7, #28
   82922:	46bd      	mov	sp, r7
   82924:	bc80      	pop	{r7}
   82926:	4770      	bx	lr

00082928 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82928:	b580      	push	{r7, lr}
   8292a:	b084      	sub	sp, #16
   8292c:	af00      	add	r7, sp, #0
   8292e:	60f8      	str	r0, [r7, #12]
   82930:	60b9      	str	r1, [r7, #8]
   82932:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82934:	68b9      	ldr	r1, [r7, #8]
   82936:	68f8      	ldr	r0, [r7, #12]
   82938:	4b19      	ldr	r3, [pc, #100]	; (829a0 <pio_set_input+0x78>)
   8293a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8293c:	687b      	ldr	r3, [r7, #4]
   8293e:	f003 0301 	and.w	r3, r3, #1
   82942:	461a      	mov	r2, r3
   82944:	68b9      	ldr	r1, [r7, #8]
   82946:	68f8      	ldr	r0, [r7, #12]
   82948:	4b16      	ldr	r3, [pc, #88]	; (829a4 <pio_set_input+0x7c>)
   8294a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8294c:	687b      	ldr	r3, [r7, #4]
   8294e:	f003 030a 	and.w	r3, r3, #10
   82952:	2b00      	cmp	r3, #0
   82954:	d003      	beq.n	8295e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82956:	68fb      	ldr	r3, [r7, #12]
   82958:	68ba      	ldr	r2, [r7, #8]
   8295a:	621a      	str	r2, [r3, #32]
   8295c:	e002      	b.n	82964 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8295e:	68fb      	ldr	r3, [r7, #12]
   82960:	68ba      	ldr	r2, [r7, #8]
   82962:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82964:	687b      	ldr	r3, [r7, #4]
   82966:	f003 0302 	and.w	r3, r3, #2
   8296a:	2b00      	cmp	r3, #0
   8296c:	d004      	beq.n	82978 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8296e:	68fb      	ldr	r3, [r7, #12]
   82970:	68ba      	ldr	r2, [r7, #8]
   82972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82976:	e008      	b.n	8298a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82978:	687b      	ldr	r3, [r7, #4]
   8297a:	f003 0308 	and.w	r3, r3, #8
   8297e:	2b00      	cmp	r3, #0
   82980:	d003      	beq.n	8298a <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   82982:	68fb      	ldr	r3, [r7, #12]
   82984:	68ba      	ldr	r2, [r7, #8]
   82986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8298a:	68fb      	ldr	r3, [r7, #12]
   8298c:	68ba      	ldr	r2, [r7, #8]
   8298e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82990:	68fb      	ldr	r3, [r7, #12]
   82992:	68ba      	ldr	r2, [r7, #8]
   82994:	601a      	str	r2, [r3, #0]
}
   82996:	bf00      	nop
   82998:	3710      	adds	r7, #16
   8299a:	46bd      	mov	sp, r7
   8299c:	bd80      	pop	{r7, pc}
   8299e:	bf00      	nop
   829a0:	00082a29 	.word	0x00082a29
   829a4:	00082861 	.word	0x00082861

000829a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   829a8:	b580      	push	{r7, lr}
   829aa:	b084      	sub	sp, #16
   829ac:	af00      	add	r7, sp, #0
   829ae:	60f8      	str	r0, [r7, #12]
   829b0:	60b9      	str	r1, [r7, #8]
   829b2:	607a      	str	r2, [r7, #4]
   829b4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   829b6:	68b9      	ldr	r1, [r7, #8]
   829b8:	68f8      	ldr	r0, [r7, #12]
   829ba:	4b12      	ldr	r3, [pc, #72]	; (82a04 <pio_set_output+0x5c>)
   829bc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   829be:	69ba      	ldr	r2, [r7, #24]
   829c0:	68b9      	ldr	r1, [r7, #8]
   829c2:	68f8      	ldr	r0, [r7, #12]
   829c4:	4b10      	ldr	r3, [pc, #64]	; (82a08 <pio_set_output+0x60>)
   829c6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   829c8:	683b      	ldr	r3, [r7, #0]
   829ca:	2b00      	cmp	r3, #0
   829cc:	d003      	beq.n	829d6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   829ce:	68fb      	ldr	r3, [r7, #12]
   829d0:	68ba      	ldr	r2, [r7, #8]
   829d2:	651a      	str	r2, [r3, #80]	; 0x50
   829d4:	e002      	b.n	829dc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   829d6:	68fb      	ldr	r3, [r7, #12]
   829d8:	68ba      	ldr	r2, [r7, #8]
   829da:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   829dc:	687b      	ldr	r3, [r7, #4]
   829de:	2b00      	cmp	r3, #0
   829e0:	d003      	beq.n	829ea <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   829e2:	68fb      	ldr	r3, [r7, #12]
   829e4:	68ba      	ldr	r2, [r7, #8]
   829e6:	631a      	str	r2, [r3, #48]	; 0x30
   829e8:	e002      	b.n	829f0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   829ea:	68fb      	ldr	r3, [r7, #12]
   829ec:	68ba      	ldr	r2, [r7, #8]
   829ee:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   829f0:	68fb      	ldr	r3, [r7, #12]
   829f2:	68ba      	ldr	r2, [r7, #8]
   829f4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   829f6:	68fb      	ldr	r3, [r7, #12]
   829f8:	68ba      	ldr	r2, [r7, #8]
   829fa:	601a      	str	r2, [r3, #0]
}
   829fc:	bf00      	nop
   829fe:	3710      	adds	r7, #16
   82a00:	46bd      	mov	sp, r7
   82a02:	bd80      	pop	{r7, pc}
   82a04:	00082a29 	.word	0x00082a29
   82a08:	00082861 	.word	0x00082861

00082a0c <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   82a0c:	b480      	push	{r7}
   82a0e:	b083      	sub	sp, #12
   82a10:	af00      	add	r7, sp, #0
   82a12:	6078      	str	r0, [r7, #4]
   82a14:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   82a16:	687b      	ldr	r3, [r7, #4]
   82a18:	683a      	ldr	r2, [r7, #0]
   82a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82a1e:	bf00      	nop
   82a20:	370c      	adds	r7, #12
   82a22:	46bd      	mov	sp, r7
   82a24:	bc80      	pop	{r7}
   82a26:	4770      	bx	lr

00082a28 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82a28:	b480      	push	{r7}
   82a2a:	b083      	sub	sp, #12
   82a2c:	af00      	add	r7, sp, #0
   82a2e:	6078      	str	r0, [r7, #4]
   82a30:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82a32:	687b      	ldr	r3, [r7, #4]
   82a34:	683a      	ldr	r2, [r7, #0]
   82a36:	645a      	str	r2, [r3, #68]	; 0x44
}
   82a38:	bf00      	nop
   82a3a:	370c      	adds	r7, #12
   82a3c:	46bd      	mov	sp, r7
   82a3e:	bc80      	pop	{r7}
   82a40:	4770      	bx	lr

00082a42 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82a42:	b480      	push	{r7}
   82a44:	b083      	sub	sp, #12
   82a46:	af00      	add	r7, sp, #0
   82a48:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82a4a:	687b      	ldr	r3, [r7, #4]
   82a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82a4e:	4618      	mov	r0, r3
   82a50:	370c      	adds	r7, #12
   82a52:	46bd      	mov	sp, r7
   82a54:	bc80      	pop	{r7}
   82a56:	4770      	bx	lr

00082a58 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82a58:	b480      	push	{r7}
   82a5a:	b083      	sub	sp, #12
   82a5c:	af00      	add	r7, sp, #0
   82a5e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82a64:	4618      	mov	r0, r3
   82a66:	370c      	adds	r7, #12
   82a68:	46bd      	mov	sp, r7
   82a6a:	bc80      	pop	{r7}
   82a6c:	4770      	bx	lr
   82a6e:	0000      	movs	r0, r0

00082a70 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   82a70:	b580      	push	{r7, lr}
   82a72:	b084      	sub	sp, #16
   82a74:	af00      	add	r7, sp, #0
   82a76:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82a78:	6878      	ldr	r0, [r7, #4]
   82a7a:	4b08      	ldr	r3, [pc, #32]	; (82a9c <pio_get_pin_value+0x2c>)
   82a7c:	4798      	blx	r3
   82a7e:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82a80:	68fb      	ldr	r3, [r7, #12]
   82a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82a84:	687b      	ldr	r3, [r7, #4]
   82a86:	f003 031f 	and.w	r3, r3, #31
   82a8a:	fa22 f303 	lsr.w	r3, r2, r3
   82a8e:	f003 0301 	and.w	r3, r3, #1
}
   82a92:	4618      	mov	r0, r3
   82a94:	3710      	adds	r7, #16
   82a96:	46bd      	mov	sp, r7
   82a98:	bd80      	pop	{r7, pc}
   82a9a:	bf00      	nop
   82a9c:	00082d0d 	.word	0x00082d0d

00082aa0 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82aa0:	b580      	push	{r7, lr}
   82aa2:	b084      	sub	sp, #16
   82aa4:	af00      	add	r7, sp, #0
   82aa6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82aa8:	6878      	ldr	r0, [r7, #4]
   82aaa:	4b08      	ldr	r3, [pc, #32]	; (82acc <pio_set_pin_high+0x2c>)
   82aac:	4798      	blx	r3
   82aae:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82ab0:	687b      	ldr	r3, [r7, #4]
   82ab2:	f003 031f 	and.w	r3, r3, #31
   82ab6:	2201      	movs	r2, #1
   82ab8:	fa02 f303 	lsl.w	r3, r2, r3
   82abc:	461a      	mov	r2, r3
   82abe:	68fb      	ldr	r3, [r7, #12]
   82ac0:	631a      	str	r2, [r3, #48]	; 0x30
}
   82ac2:	bf00      	nop
   82ac4:	3710      	adds	r7, #16
   82ac6:	46bd      	mov	sp, r7
   82ac8:	bd80      	pop	{r7, pc}
   82aca:	bf00      	nop
   82acc:	00082d0d 	.word	0x00082d0d

00082ad0 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82ad0:	b580      	push	{r7, lr}
   82ad2:	b084      	sub	sp, #16
   82ad4:	af00      	add	r7, sp, #0
   82ad6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82ad8:	6878      	ldr	r0, [r7, #4]
   82ada:	4b08      	ldr	r3, [pc, #32]	; (82afc <pio_set_pin_low+0x2c>)
   82adc:	4798      	blx	r3
   82ade:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82ae0:	687b      	ldr	r3, [r7, #4]
   82ae2:	f003 031f 	and.w	r3, r3, #31
   82ae6:	2201      	movs	r2, #1
   82ae8:	fa02 f303 	lsl.w	r3, r2, r3
   82aec:	461a      	mov	r2, r3
   82aee:	68fb      	ldr	r3, [r7, #12]
   82af0:	635a      	str	r2, [r3, #52]	; 0x34
}
   82af2:	bf00      	nop
   82af4:	3710      	adds	r7, #16
   82af6:	46bd      	mov	sp, r7
   82af8:	bd80      	pop	{r7, pc}
   82afa:	bf00      	nop
   82afc:	00082d0d 	.word	0x00082d0d

00082b00 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82b00:	b590      	push	{r4, r7, lr}
   82b02:	b087      	sub	sp, #28
   82b04:	af02      	add	r7, sp, #8
   82b06:	6078      	str	r0, [r7, #4]
   82b08:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82b0a:	6878      	ldr	r0, [r7, #4]
   82b0c:	4b43      	ldr	r3, [pc, #268]	; (82c1c <pio_configure_pin+0x11c>)
   82b0e:	4798      	blx	r3
   82b10:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82b12:	683b      	ldr	r3, [r7, #0]
   82b14:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82b18:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b1c:	d057      	beq.n	82bce <pio_configure_pin+0xce>
   82b1e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b22:	d873      	bhi.n	82c0c <pio_configure_pin+0x10c>
   82b24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b28:	d051      	beq.n	82bce <pio_configure_pin+0xce>
   82b2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b2e:	d86d      	bhi.n	82c0c <pio_configure_pin+0x10c>
   82b30:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b34:	d03f      	beq.n	82bb6 <pio_configure_pin+0xb6>
   82b36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b3a:	d867      	bhi.n	82c0c <pio_configure_pin+0x10c>
   82b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82b40:	d003      	beq.n	82b4a <pio_configure_pin+0x4a>
   82b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b46:	d01b      	beq.n	82b80 <pio_configure_pin+0x80>
   82b48:	e060      	b.n	82c0c <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82b4a:	687b      	ldr	r3, [r7, #4]
   82b4c:	f003 031f 	and.w	r3, r3, #31
   82b50:	2201      	movs	r2, #1
   82b52:	fa02 f303 	lsl.w	r3, r2, r3
   82b56:	461a      	mov	r2, r3
   82b58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b5c:	68f8      	ldr	r0, [r7, #12]
   82b5e:	4b30      	ldr	r3, [pc, #192]	; (82c20 <pio_configure_pin+0x120>)
   82b60:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82b62:	687b      	ldr	r3, [r7, #4]
   82b64:	f003 031f 	and.w	r3, r3, #31
   82b68:	2201      	movs	r2, #1
   82b6a:	fa02 f303 	lsl.w	r3, r2, r3
   82b6e:	4619      	mov	r1, r3
   82b70:	683b      	ldr	r3, [r7, #0]
   82b72:	f003 0301 	and.w	r3, r3, #1
   82b76:	461a      	mov	r2, r3
   82b78:	68f8      	ldr	r0, [r7, #12]
   82b7a:	4b2a      	ldr	r3, [pc, #168]	; (82c24 <pio_configure_pin+0x124>)
   82b7c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82b7e:	e047      	b.n	82c10 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82b80:	687b      	ldr	r3, [r7, #4]
   82b82:	f003 031f 	and.w	r3, r3, #31
   82b86:	2201      	movs	r2, #1
   82b88:	fa02 f303 	lsl.w	r3, r2, r3
   82b8c:	461a      	mov	r2, r3
   82b8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82b92:	68f8      	ldr	r0, [r7, #12]
   82b94:	4b22      	ldr	r3, [pc, #136]	; (82c20 <pio_configure_pin+0x120>)
   82b96:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82b98:	687b      	ldr	r3, [r7, #4]
   82b9a:	f003 031f 	and.w	r3, r3, #31
   82b9e:	2201      	movs	r2, #1
   82ba0:	fa02 f303 	lsl.w	r3, r2, r3
   82ba4:	4619      	mov	r1, r3
   82ba6:	683b      	ldr	r3, [r7, #0]
   82ba8:	f003 0301 	and.w	r3, r3, #1
   82bac:	461a      	mov	r2, r3
   82bae:	68f8      	ldr	r0, [r7, #12]
   82bb0:	4b1c      	ldr	r3, [pc, #112]	; (82c24 <pio_configure_pin+0x124>)
   82bb2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82bb4:	e02c      	b.n	82c10 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82bb6:	687b      	ldr	r3, [r7, #4]
   82bb8:	f003 031f 	and.w	r3, r3, #31
   82bbc:	2201      	movs	r2, #1
   82bbe:	fa02 f303 	lsl.w	r3, r2, r3
   82bc2:	683a      	ldr	r2, [r7, #0]
   82bc4:	4619      	mov	r1, r3
   82bc6:	68f8      	ldr	r0, [r7, #12]
   82bc8:	4b17      	ldr	r3, [pc, #92]	; (82c28 <pio_configure_pin+0x128>)
   82bca:	4798      	blx	r3
		break;
   82bcc:	e020      	b.n	82c10 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82bce:	687b      	ldr	r3, [r7, #4]
   82bd0:	f003 031f 	and.w	r3, r3, #31
   82bd4:	2201      	movs	r2, #1
   82bd6:	fa02 f303 	lsl.w	r3, r2, r3
   82bda:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82bdc:	683b      	ldr	r3, [r7, #0]
   82bde:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82be2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82be6:	bf0c      	ite	eq
   82be8:	2301      	moveq	r3, #1
   82bea:	2300      	movne	r3, #0
   82bec:	b2db      	uxtb	r3, r3
   82bee:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82bf0:	683b      	ldr	r3, [r7, #0]
   82bf2:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82bf4:	f003 0201 	and.w	r2, r3, #1
   82bf8:	683b      	ldr	r3, [r7, #0]
   82bfa:	f003 0301 	and.w	r3, r3, #1
   82bfe:	9300      	str	r3, [sp, #0]
   82c00:	4613      	mov	r3, r2
   82c02:	4602      	mov	r2, r0
   82c04:	68f8      	ldr	r0, [r7, #12]
   82c06:	4c09      	ldr	r4, [pc, #36]	; (82c2c <pio_configure_pin+0x12c>)
   82c08:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82c0a:	e001      	b.n	82c10 <pio_configure_pin+0x110>

	default:
		return 0;
   82c0c:	2300      	movs	r3, #0
   82c0e:	e000      	b.n	82c12 <pio_configure_pin+0x112>
	}

	return 1;
   82c10:	2301      	movs	r3, #1
}
   82c12:	4618      	mov	r0, r3
   82c14:	3714      	adds	r7, #20
   82c16:	46bd      	mov	sp, r7
   82c18:	bd90      	pop	{r4, r7, pc}
   82c1a:	bf00      	nop
   82c1c:	00082d0d 	.word	0x00082d0d
   82c20:	0008288b 	.word	0x0008288b
   82c24:	00082861 	.word	0x00082861
   82c28:	00082929 	.word	0x00082929
   82c2c:	000829a9 	.word	0x000829a9

00082c30 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82c30:	b590      	push	{r4, r7, lr}
   82c32:	b087      	sub	sp, #28
   82c34:	af02      	add	r7, sp, #8
   82c36:	60f8      	str	r0, [r7, #12]
   82c38:	60b9      	str	r1, [r7, #8]
   82c3a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82c3c:	687b      	ldr	r3, [r7, #4]
   82c3e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82c42:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82c46:	d039      	beq.n	82cbc <pio_configure_pin_group+0x8c>
   82c48:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82c4c:	d84f      	bhi.n	82cee <pio_configure_pin_group+0xbe>
   82c4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82c52:	d033      	beq.n	82cbc <pio_configure_pin_group+0x8c>
   82c54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82c58:	d849      	bhi.n	82cee <pio_configure_pin_group+0xbe>
   82c5a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c5e:	d027      	beq.n	82cb0 <pio_configure_pin_group+0x80>
   82c60:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c64:	d843      	bhi.n	82cee <pio_configure_pin_group+0xbe>
   82c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82c6a:	d003      	beq.n	82c74 <pio_configure_pin_group+0x44>
   82c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82c70:	d00f      	beq.n	82c92 <pio_configure_pin_group+0x62>
   82c72:	e03c      	b.n	82cee <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82c74:	68ba      	ldr	r2, [r7, #8]
   82c76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82c7a:	68f8      	ldr	r0, [r7, #12]
   82c7c:	4b1f      	ldr	r3, [pc, #124]	; (82cfc <pio_configure_pin_group+0xcc>)
   82c7e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82c80:	687b      	ldr	r3, [r7, #4]
   82c82:	f003 0301 	and.w	r3, r3, #1
   82c86:	461a      	mov	r2, r3
   82c88:	68b9      	ldr	r1, [r7, #8]
   82c8a:	68f8      	ldr	r0, [r7, #12]
   82c8c:	4b1c      	ldr	r3, [pc, #112]	; (82d00 <pio_configure_pin_group+0xd0>)
   82c8e:	4798      	blx	r3
		break;
   82c90:	e02f      	b.n	82cf2 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82c92:	68ba      	ldr	r2, [r7, #8]
   82c94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82c98:	68f8      	ldr	r0, [r7, #12]
   82c9a:	4b18      	ldr	r3, [pc, #96]	; (82cfc <pio_configure_pin_group+0xcc>)
   82c9c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82c9e:	687b      	ldr	r3, [r7, #4]
   82ca0:	f003 0301 	and.w	r3, r3, #1
   82ca4:	461a      	mov	r2, r3
   82ca6:	68b9      	ldr	r1, [r7, #8]
   82ca8:	68f8      	ldr	r0, [r7, #12]
   82caa:	4b15      	ldr	r3, [pc, #84]	; (82d00 <pio_configure_pin_group+0xd0>)
   82cac:	4798      	blx	r3
		break;
   82cae:	e020      	b.n	82cf2 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82cb0:	687a      	ldr	r2, [r7, #4]
   82cb2:	68b9      	ldr	r1, [r7, #8]
   82cb4:	68f8      	ldr	r0, [r7, #12]
   82cb6:	4b13      	ldr	r3, [pc, #76]	; (82d04 <pio_configure_pin_group+0xd4>)
   82cb8:	4798      	blx	r3
		break;
   82cba:	e01a      	b.n	82cf2 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82cbc:	687b      	ldr	r3, [r7, #4]
   82cbe:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82cc2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82cc6:	bf0c      	ite	eq
   82cc8:	2301      	moveq	r3, #1
   82cca:	2300      	movne	r3, #0
   82ccc:	b2db      	uxtb	r3, r3
   82cce:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82cd0:	687b      	ldr	r3, [r7, #4]
   82cd2:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82cd4:	f003 0201 	and.w	r2, r3, #1
   82cd8:	687b      	ldr	r3, [r7, #4]
   82cda:	f003 0301 	and.w	r3, r3, #1
   82cde:	9300      	str	r3, [sp, #0]
   82ce0:	4613      	mov	r3, r2
   82ce2:	460a      	mov	r2, r1
   82ce4:	68b9      	ldr	r1, [r7, #8]
   82ce6:	68f8      	ldr	r0, [r7, #12]
   82ce8:	4c07      	ldr	r4, [pc, #28]	; (82d08 <pio_configure_pin_group+0xd8>)
   82cea:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82cec:	e001      	b.n	82cf2 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   82cee:	2300      	movs	r3, #0
   82cf0:	e000      	b.n	82cf4 <pio_configure_pin_group+0xc4>
	}

	return 1;
   82cf2:	2301      	movs	r3, #1
}
   82cf4:	4618      	mov	r0, r3
   82cf6:	3714      	adds	r7, #20
   82cf8:	46bd      	mov	sp, r7
   82cfa:	bd90      	pop	{r4, r7, pc}
   82cfc:	0008288b 	.word	0x0008288b
   82d00:	00082861 	.word	0x00082861
   82d04:	00082929 	.word	0x00082929
   82d08:	000829a9 	.word	0x000829a9

00082d0c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   82d0c:	b480      	push	{r7}
   82d0e:	b085      	sub	sp, #20
   82d10:	af00      	add	r7, sp, #0
   82d12:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82d14:	687b      	ldr	r3, [r7, #4]
   82d16:	095b      	lsrs	r3, r3, #5
   82d18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82d1c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82d20:	025b      	lsls	r3, r3, #9
   82d22:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   82d24:	68fb      	ldr	r3, [r7, #12]
}
   82d26:	4618      	mov	r0, r3
   82d28:	3714      	adds	r7, #20
   82d2a:	46bd      	mov	sp, r7
   82d2c:	bc80      	pop	{r7}
   82d2e:	4770      	bx	lr

00082d30 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82d30:	b580      	push	{r7, lr}
   82d32:	b084      	sub	sp, #16
   82d34:	af00      	add	r7, sp, #0
   82d36:	6078      	str	r0, [r7, #4]
   82d38:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82d3a:	6878      	ldr	r0, [r7, #4]
   82d3c:	4b26      	ldr	r3, [pc, #152]	; (82dd8 <pio_handler_process+0xa8>)
   82d3e:	4798      	blx	r3
   82d40:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82d42:	6878      	ldr	r0, [r7, #4]
   82d44:	4b25      	ldr	r3, [pc, #148]	; (82ddc <pio_handler_process+0xac>)
   82d46:	4798      	blx	r3
   82d48:	4602      	mov	r2, r0
   82d4a:	68fb      	ldr	r3, [r7, #12]
   82d4c:	4013      	ands	r3, r2
   82d4e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82d50:	68fb      	ldr	r3, [r7, #12]
   82d52:	2b00      	cmp	r3, #0
   82d54:	d03c      	beq.n	82dd0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   82d56:	2300      	movs	r3, #0
   82d58:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82d5a:	e034      	b.n	82dc6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82d5c:	4a20      	ldr	r2, [pc, #128]	; (82de0 <pio_handler_process+0xb0>)
   82d5e:	68bb      	ldr	r3, [r7, #8]
   82d60:	011b      	lsls	r3, r3, #4
   82d62:	4413      	add	r3, r2
   82d64:	681b      	ldr	r3, [r3, #0]
   82d66:	683a      	ldr	r2, [r7, #0]
   82d68:	429a      	cmp	r2, r3
   82d6a:	d126      	bne.n	82dba <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82d6c:	4a1c      	ldr	r2, [pc, #112]	; (82de0 <pio_handler_process+0xb0>)
   82d6e:	68bb      	ldr	r3, [r7, #8]
   82d70:	011b      	lsls	r3, r3, #4
   82d72:	4413      	add	r3, r2
   82d74:	3304      	adds	r3, #4
   82d76:	681a      	ldr	r2, [r3, #0]
   82d78:	68fb      	ldr	r3, [r7, #12]
   82d7a:	4013      	ands	r3, r2
   82d7c:	2b00      	cmp	r3, #0
   82d7e:	d01c      	beq.n	82dba <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82d80:	4a17      	ldr	r2, [pc, #92]	; (82de0 <pio_handler_process+0xb0>)
   82d82:	68bb      	ldr	r3, [r7, #8]
   82d84:	011b      	lsls	r3, r3, #4
   82d86:	4413      	add	r3, r2
   82d88:	330c      	adds	r3, #12
   82d8a:	681b      	ldr	r3, [r3, #0]
   82d8c:	4914      	ldr	r1, [pc, #80]	; (82de0 <pio_handler_process+0xb0>)
   82d8e:	68ba      	ldr	r2, [r7, #8]
   82d90:	0112      	lsls	r2, r2, #4
   82d92:	440a      	add	r2, r1
   82d94:	6810      	ldr	r0, [r2, #0]
   82d96:	4912      	ldr	r1, [pc, #72]	; (82de0 <pio_handler_process+0xb0>)
   82d98:	68ba      	ldr	r2, [r7, #8]
   82d9a:	0112      	lsls	r2, r2, #4
   82d9c:	440a      	add	r2, r1
   82d9e:	3204      	adds	r2, #4
   82da0:	6812      	ldr	r2, [r2, #0]
   82da2:	4611      	mov	r1, r2
   82da4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82da6:	4a0e      	ldr	r2, [pc, #56]	; (82de0 <pio_handler_process+0xb0>)
   82da8:	68bb      	ldr	r3, [r7, #8]
   82daa:	011b      	lsls	r3, r3, #4
   82dac:	4413      	add	r3, r2
   82dae:	3304      	adds	r3, #4
   82db0:	681b      	ldr	r3, [r3, #0]
   82db2:	43db      	mvns	r3, r3
   82db4:	68fa      	ldr	r2, [r7, #12]
   82db6:	4013      	ands	r3, r2
   82db8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82dba:	68bb      	ldr	r3, [r7, #8]
   82dbc:	3301      	adds	r3, #1
   82dbe:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82dc0:	68bb      	ldr	r3, [r7, #8]
   82dc2:	2b06      	cmp	r3, #6
   82dc4:	d803      	bhi.n	82dce <pio_handler_process+0x9e>
		while (status != 0) {
   82dc6:	68fb      	ldr	r3, [r7, #12]
   82dc8:	2b00      	cmp	r3, #0
   82dca:	d1c7      	bne.n	82d5c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82dcc:	e000      	b.n	82dd0 <pio_handler_process+0xa0>
				break;
   82dce:	bf00      	nop
}
   82dd0:	bf00      	nop
   82dd2:	3710      	adds	r7, #16
   82dd4:	46bd      	mov	sp, r7
   82dd6:	bd80      	pop	{r7, pc}
   82dd8:	00082a43 	.word	0x00082a43
   82ddc:	00082a59 	.word	0x00082a59
   82de0:	20001580 	.word	0x20001580

00082de4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82de4:	b580      	push	{r7, lr}
   82de6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82de8:	210a      	movs	r1, #10
   82dea:	4802      	ldr	r0, [pc, #8]	; (82df4 <PIOA_Handler+0x10>)
   82dec:	4b02      	ldr	r3, [pc, #8]	; (82df8 <PIOA_Handler+0x14>)
   82dee:	4798      	blx	r3
}
   82df0:	bf00      	nop
   82df2:	bd80      	pop	{r7, pc}
   82df4:	400e0c00 	.word	0x400e0c00
   82df8:	00082d31 	.word	0x00082d31

00082dfc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82dfc:	b580      	push	{r7, lr}
   82dfe:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82e00:	210b      	movs	r1, #11
   82e02:	4802      	ldr	r0, [pc, #8]	; (82e0c <PIOB_Handler+0x10>)
   82e04:	4b02      	ldr	r3, [pc, #8]	; (82e10 <PIOB_Handler+0x14>)
   82e06:	4798      	blx	r3
}
   82e08:	bf00      	nop
   82e0a:	bd80      	pop	{r7, pc}
   82e0c:	400e0e00 	.word	0x400e0e00
   82e10:	00082d31 	.word	0x00082d31

00082e14 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   82e14:	b480      	push	{r7}
   82e16:	b085      	sub	sp, #20
   82e18:	af00      	add	r7, sp, #0
   82e1a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82e1c:	4b1c      	ldr	r3, [pc, #112]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e20:	f023 0303 	bic.w	r3, r3, #3
   82e24:	4a1a      	ldr	r2, [pc, #104]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e26:	f043 0301 	orr.w	r3, r3, #1
   82e2a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e30:	60fb      	str	r3, [r7, #12]
   82e32:	e007      	b.n	82e44 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e34:	68fb      	ldr	r3, [r7, #12]
   82e36:	2b00      	cmp	r3, #0
   82e38:	d101      	bne.n	82e3e <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   82e3a:	2301      	movs	r3, #1
   82e3c:	e023      	b.n	82e86 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   82e3e:	68fb      	ldr	r3, [r7, #12]
   82e40:	3b01      	subs	r3, #1
   82e42:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e44:	4b12      	ldr	r3, [pc, #72]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e48:	f003 0308 	and.w	r3, r3, #8
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	d0f1      	beq.n	82e34 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82e50:	4b0f      	ldr	r3, [pc, #60]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82e58:	490d      	ldr	r1, [pc, #52]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e5a:	687b      	ldr	r3, [r7, #4]
   82e5c:	4313      	orrs	r3, r2
   82e5e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e64:	60fb      	str	r3, [r7, #12]
   82e66:	e007      	b.n	82e78 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e68:	68fb      	ldr	r3, [r7, #12]
   82e6a:	2b00      	cmp	r3, #0
   82e6c:	d101      	bne.n	82e72 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   82e6e:	2301      	movs	r3, #1
   82e70:	e009      	b.n	82e86 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   82e72:	68fb      	ldr	r3, [r7, #12]
   82e74:	3b01      	subs	r3, #1
   82e76:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e78:	4b05      	ldr	r3, [pc, #20]	; (82e90 <pmc_switch_mck_to_mainck+0x7c>)
   82e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e7c:	f003 0308 	and.w	r3, r3, #8
   82e80:	2b00      	cmp	r3, #0
   82e82:	d0f1      	beq.n	82e68 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   82e84:	2300      	movs	r3, #0
}
   82e86:	4618      	mov	r0, r3
   82e88:	3714      	adds	r7, #20
   82e8a:	46bd      	mov	sp, r7
   82e8c:	bc80      	pop	{r7}
   82e8e:	4770      	bx	lr
   82e90:	400e0400 	.word	0x400e0400

00082e94 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82e94:	b480      	push	{r7}
   82e96:	b085      	sub	sp, #20
   82e98:	af00      	add	r7, sp, #0
   82e9a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82e9c:	4b1c      	ldr	r3, [pc, #112]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82ea4:	491a      	ldr	r1, [pc, #104]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82ea6:	687b      	ldr	r3, [r7, #4]
   82ea8:	4313      	orrs	r3, r2
   82eaa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82eb0:	60fb      	str	r3, [r7, #12]
   82eb2:	e007      	b.n	82ec4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82eb4:	68fb      	ldr	r3, [r7, #12]
   82eb6:	2b00      	cmp	r3, #0
   82eb8:	d101      	bne.n	82ebe <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82eba:	2301      	movs	r3, #1
   82ebc:	e023      	b.n	82f06 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82ebe:	68fb      	ldr	r3, [r7, #12]
   82ec0:	3b01      	subs	r3, #1
   82ec2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82ec4:	4b12      	ldr	r3, [pc, #72]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ec8:	f003 0308 	and.w	r3, r3, #8
   82ecc:	2b00      	cmp	r3, #0
   82ece:	d0f1      	beq.n	82eb4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82ed0:	4b0f      	ldr	r3, [pc, #60]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ed4:	f023 0303 	bic.w	r3, r3, #3
   82ed8:	4a0d      	ldr	r2, [pc, #52]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82eda:	f043 0302 	orr.w	r3, r3, #2
   82ede:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82ee4:	60fb      	str	r3, [r7, #12]
   82ee6:	e007      	b.n	82ef8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82ee8:	68fb      	ldr	r3, [r7, #12]
   82eea:	2b00      	cmp	r3, #0
   82eec:	d101      	bne.n	82ef2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82eee:	2301      	movs	r3, #1
   82ef0:	e009      	b.n	82f06 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82ef2:	68fb      	ldr	r3, [r7, #12]
   82ef4:	3b01      	subs	r3, #1
   82ef6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82ef8:	4b05      	ldr	r3, [pc, #20]	; (82f10 <pmc_switch_mck_to_pllack+0x7c>)
   82efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82efc:	f003 0308 	and.w	r3, r3, #8
   82f00:	2b00      	cmp	r3, #0
   82f02:	d0f1      	beq.n	82ee8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82f04:	2300      	movs	r3, #0
}
   82f06:	4618      	mov	r0, r3
   82f08:	3714      	adds	r7, #20
   82f0a:	46bd      	mov	sp, r7
   82f0c:	bc80      	pop	{r7}
   82f0e:	4770      	bx	lr
   82f10:	400e0400 	.word	0x400e0400

00082f14 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82f14:	b480      	push	{r7}
   82f16:	b083      	sub	sp, #12
   82f18:	af00      	add	r7, sp, #0
   82f1a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82f1c:	687b      	ldr	r3, [r7, #4]
   82f1e:	2b01      	cmp	r3, #1
   82f20:	d107      	bne.n	82f32 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82f22:	4b08      	ldr	r3, [pc, #32]	; (82f44 <pmc_switch_sclk_to_32kxtal+0x30>)
   82f24:	689b      	ldr	r3, [r3, #8]
   82f26:	4a07      	ldr	r2, [pc, #28]	; (82f44 <pmc_switch_sclk_to_32kxtal+0x30>)
   82f28:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82f30:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82f32:	4b04      	ldr	r3, [pc, #16]	; (82f44 <pmc_switch_sclk_to_32kxtal+0x30>)
   82f34:	4a04      	ldr	r2, [pc, #16]	; (82f48 <pmc_switch_sclk_to_32kxtal+0x34>)
   82f36:	601a      	str	r2, [r3, #0]
}
   82f38:	bf00      	nop
   82f3a:	370c      	adds	r7, #12
   82f3c:	46bd      	mov	sp, r7
   82f3e:	bc80      	pop	{r7}
   82f40:	4770      	bx	lr
   82f42:	bf00      	nop
   82f44:	400e1210 	.word	0x400e1210
   82f48:	a5000008 	.word	0xa5000008

00082f4c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82f4c:	b480      	push	{r7}
   82f4e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82f50:	4b09      	ldr	r3, [pc, #36]	; (82f78 <pmc_osc_is_ready_32kxtal+0x2c>)
   82f52:	695b      	ldr	r3, [r3, #20]
   82f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82f58:	2b00      	cmp	r3, #0
   82f5a:	d007      	beq.n	82f6c <pmc_osc_is_ready_32kxtal+0x20>
   82f5c:	4b07      	ldr	r3, [pc, #28]	; (82f7c <pmc_osc_is_ready_32kxtal+0x30>)
   82f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82f64:	2b00      	cmp	r3, #0
   82f66:	d001      	beq.n	82f6c <pmc_osc_is_ready_32kxtal+0x20>
   82f68:	2301      	movs	r3, #1
   82f6a:	e000      	b.n	82f6e <pmc_osc_is_ready_32kxtal+0x22>
   82f6c:	2300      	movs	r3, #0
}
   82f6e:	4618      	mov	r0, r3
   82f70:	46bd      	mov	sp, r7
   82f72:	bc80      	pop	{r7}
   82f74:	4770      	bx	lr
   82f76:	bf00      	nop
   82f78:	400e1210 	.word	0x400e1210
   82f7c:	400e0400 	.word	0x400e0400

00082f80 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   82f80:	b480      	push	{r7}
   82f82:	b083      	sub	sp, #12
   82f84:	af00      	add	r7, sp, #0
   82f86:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82f88:	4b13      	ldr	r3, [pc, #76]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
   82f8a:	6a1b      	ldr	r3, [r3, #32]
   82f8c:	4a12      	ldr	r2, [pc, #72]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
   82f8e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82f92:	f043 0308 	orr.w	r3, r3, #8
   82f96:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82f98:	bf00      	nop
   82f9a:	4b0f      	ldr	r3, [pc, #60]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
   82f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82fa2:	2b00      	cmp	r3, #0
   82fa4:	d0f9      	beq.n	82f9a <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82fa6:	4b0c      	ldr	r3, [pc, #48]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
   82fa8:	6a1b      	ldr	r3, [r3, #32]
   82faa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82fb2:	687a      	ldr	r2, [r7, #4]
   82fb4:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82fb6:	4a08      	ldr	r2, [pc, #32]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82fb8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82fbc:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82fbe:	bf00      	nop
   82fc0:	4b05      	ldr	r3, [pc, #20]	; (82fd8 <pmc_osc_enable_fastrc+0x58>)
   82fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82fc8:	2b00      	cmp	r3, #0
   82fca:	d0f9      	beq.n	82fc0 <pmc_osc_enable_fastrc+0x40>
}
   82fcc:	bf00      	nop
   82fce:	bf00      	nop
   82fd0:	370c      	adds	r7, #12
   82fd2:	46bd      	mov	sp, r7
   82fd4:	bc80      	pop	{r7}
   82fd6:	4770      	bx	lr
   82fd8:	400e0400 	.word	0x400e0400

00082fdc <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82fdc:	b480      	push	{r7}
   82fde:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82fe0:	4b03      	ldr	r3, [pc, #12]	; (82ff0 <pmc_osc_is_ready_fastrc+0x14>)
   82fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82fe8:	4618      	mov	r0, r3
   82fea:	46bd      	mov	sp, r7
   82fec:	bc80      	pop	{r7}
   82fee:	4770      	bx	lr
   82ff0:	400e0400 	.word	0x400e0400

00082ff4 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   82ff4:	b480      	push	{r7}
   82ff6:	b085      	sub	sp, #20
   82ff8:	af00      	add	r7, sp, #0
   82ffa:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82ffc:	4b10      	ldr	r3, [pc, #64]	; (83040 <pmc_osc_enable_main_xtal+0x4c>)
   82ffe:	6a1b      	ldr	r3, [r3, #32]
   83000:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83002:	68fb      	ldr	r3, [r7, #12]
   83004:	f023 0303 	bic.w	r3, r3, #3
   83008:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8300a:	687b      	ldr	r3, [r7, #4]
   8300c:	021b      	lsls	r3, r3, #8
   8300e:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83010:	68fb      	ldr	r3, [r7, #12]
   83012:	4313      	orrs	r3, r2
   83014:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83018:	f043 0301 	orr.w	r3, r3, #1
   8301c:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   8301e:	4a08      	ldr	r2, [pc, #32]	; (83040 <pmc_osc_enable_main_xtal+0x4c>)
   83020:	68fb      	ldr	r3, [r7, #12]
   83022:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83024:	bf00      	nop
   83026:	4b06      	ldr	r3, [pc, #24]	; (83040 <pmc_osc_enable_main_xtal+0x4c>)
   83028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8302a:	f003 0301 	and.w	r3, r3, #1
   8302e:	2b00      	cmp	r3, #0
   83030:	d0f9      	beq.n	83026 <pmc_osc_enable_main_xtal+0x32>
}
   83032:	bf00      	nop
   83034:	bf00      	nop
   83036:	3714      	adds	r7, #20
   83038:	46bd      	mov	sp, r7
   8303a:	bc80      	pop	{r7}
   8303c:	4770      	bx	lr
   8303e:	bf00      	nop
   83040:	400e0400 	.word	0x400e0400

00083044 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   83044:	b480      	push	{r7}
   83046:	b083      	sub	sp, #12
   83048:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   8304a:	4b0a      	ldr	r3, [pc, #40]	; (83074 <pmc_osc_bypass_main_xtal+0x30>)
   8304c:	6a1b      	ldr	r3, [r3, #32]
   8304e:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83050:	687b      	ldr	r3, [r7, #4]
   83052:	f023 0303 	bic.w	r3, r3, #3
   83056:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   83058:	687b      	ldr	r3, [r7, #4]
   8305a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8305e:	f043 0302 	orr.w	r3, r3, #2
   83062:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   83064:	4a03      	ldr	r2, [pc, #12]	; (83074 <pmc_osc_bypass_main_xtal+0x30>)
   83066:	687b      	ldr	r3, [r7, #4]
   83068:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   8306a:	bf00      	nop
   8306c:	370c      	adds	r7, #12
   8306e:	46bd      	mov	sp, r7
   83070:	bc80      	pop	{r7}
   83072:	4770      	bx	lr
   83074:	400e0400 	.word	0x400e0400

00083078 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   83078:	b480      	push	{r7}
   8307a:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   8307c:	4b03      	ldr	r3, [pc, #12]	; (8308c <pmc_osc_is_bypassed_main_xtal+0x14>)
   8307e:	6a1b      	ldr	r3, [r3, #32]
   83080:	f003 0302 	and.w	r3, r3, #2
}
   83084:	4618      	mov	r0, r3
   83086:	46bd      	mov	sp, r7
   83088:	bc80      	pop	{r7}
   8308a:	4770      	bx	lr
   8308c:	400e0400 	.word	0x400e0400

00083090 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   83090:	b480      	push	{r7}
   83092:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83094:	4b03      	ldr	r3, [pc, #12]	; (830a4 <pmc_osc_is_ready_main_xtal+0x14>)
   83096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83098:	f003 0301 	and.w	r3, r3, #1
}
   8309c:	4618      	mov	r0, r3
   8309e:	46bd      	mov	sp, r7
   830a0:	bc80      	pop	{r7}
   830a2:	4770      	bx	lr
   830a4:	400e0400 	.word	0x400e0400

000830a8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   830a8:	b480      	push	{r7}
   830aa:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   830ac:	4b03      	ldr	r3, [pc, #12]	; (830bc <pmc_osc_is_ready_mainck+0x14>)
   830ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   830b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   830b4:	4618      	mov	r0, r3
   830b6:	46bd      	mov	sp, r7
   830b8:	bc80      	pop	{r7}
   830ba:	4770      	bx	lr
   830bc:	400e0400 	.word	0x400e0400

000830c0 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   830c0:	b480      	push	{r7}
   830c2:	b085      	sub	sp, #20
   830c4:	af00      	add	r7, sp, #0
   830c6:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   830c8:	4b0c      	ldr	r3, [pc, #48]	; (830fc <pmc_mainck_osc_select+0x3c>)
   830ca:	6a1b      	ldr	r3, [r3, #32]
   830cc:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   830ce:	687b      	ldr	r3, [r7, #4]
   830d0:	2b00      	cmp	r3, #0
   830d2:	d004      	beq.n	830de <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   830d4:	68fb      	ldr	r3, [r7, #12]
   830d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   830da:	60fb      	str	r3, [r7, #12]
   830dc:	e003      	b.n	830e6 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   830de:	68fb      	ldr	r3, [r7, #12]
   830e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   830e4:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   830e6:	4a05      	ldr	r2, [pc, #20]	; (830fc <pmc_mainck_osc_select+0x3c>)
   830e8:	68fb      	ldr	r3, [r7, #12]
   830ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   830ee:	6213      	str	r3, [r2, #32]
}
   830f0:	bf00      	nop
   830f2:	3714      	adds	r7, #20
   830f4:	46bd      	mov	sp, r7
   830f6:	bc80      	pop	{r7}
   830f8:	4770      	bx	lr
   830fa:	bf00      	nop
   830fc:	400e0400 	.word	0x400e0400

00083100 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83100:	b480      	push	{r7}
   83102:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83104:	4b03      	ldr	r3, [pc, #12]	; (83114 <pmc_disable_pllack+0x14>)
   83106:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8310a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8310c:	bf00      	nop
   8310e:	46bd      	mov	sp, r7
   83110:	bc80      	pop	{r7}
   83112:	4770      	bx	lr
   83114:	400e0400 	.word	0x400e0400

00083118 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83118:	b480      	push	{r7}
   8311a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8311c:	4b03      	ldr	r3, [pc, #12]	; (8312c <pmc_is_locked_pllack+0x14>)
   8311e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83120:	f003 0302 	and.w	r3, r3, #2
}
   83124:	4618      	mov	r0, r3
   83126:	46bd      	mov	sp, r7
   83128:	bc80      	pop	{r7}
   8312a:	4770      	bx	lr
   8312c:	400e0400 	.word	0x400e0400

00083130 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83130:	b480      	push	{r7}
   83132:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83134:	4b04      	ldr	r3, [pc, #16]	; (83148 <pmc_disable_upll_clock+0x18>)
   83136:	69db      	ldr	r3, [r3, #28]
   83138:	4a03      	ldr	r2, [pc, #12]	; (83148 <pmc_disable_upll_clock+0x18>)
   8313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8313e:	61d3      	str	r3, [r2, #28]
}
   83140:	bf00      	nop
   83142:	46bd      	mov	sp, r7
   83144:	bc80      	pop	{r7}
   83146:	4770      	bx	lr
   83148:	400e0400 	.word	0x400e0400

0008314c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8314c:	b480      	push	{r7}
   8314e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83150:	4b03      	ldr	r3, [pc, #12]	; (83160 <pmc_is_locked_upll+0x14>)
   83152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83154:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83158:	4618      	mov	r0, r3
   8315a:	46bd      	mov	sp, r7
   8315c:	bc80      	pop	{r7}
   8315e:	4770      	bx	lr
   83160:	400e0400 	.word	0x400e0400

00083164 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83164:	b480      	push	{r7}
   83166:	b083      	sub	sp, #12
   83168:	af00      	add	r7, sp, #0
   8316a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8316c:	687b      	ldr	r3, [r7, #4]
   8316e:	2b1d      	cmp	r3, #29
   83170:	d901      	bls.n	83176 <pmc_enable_periph_clk+0x12>
		return 1;
   83172:	2301      	movs	r3, #1
   83174:	e015      	b.n	831a2 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83176:	687b      	ldr	r3, [r7, #4]
   83178:	2b1f      	cmp	r3, #31
   8317a:	d811      	bhi.n	831a0 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8317c:	4b0b      	ldr	r3, [pc, #44]	; (831ac <pmc_enable_periph_clk+0x48>)
   8317e:	699a      	ldr	r2, [r3, #24]
   83180:	2101      	movs	r1, #1
   83182:	687b      	ldr	r3, [r7, #4]
   83184:	fa01 f303 	lsl.w	r3, r1, r3
   83188:	401a      	ands	r2, r3
   8318a:	2101      	movs	r1, #1
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	fa01 f303 	lsl.w	r3, r1, r3
   83192:	429a      	cmp	r2, r3
   83194:	d004      	beq.n	831a0 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   83196:	2201      	movs	r2, #1
   83198:	687b      	ldr	r3, [r7, #4]
   8319a:	409a      	lsls	r2, r3
   8319c:	4b03      	ldr	r3, [pc, #12]	; (831ac <pmc_enable_periph_clk+0x48>)
   8319e:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   831a0:	2300      	movs	r3, #0
}
   831a2:	4618      	mov	r0, r3
   831a4:	370c      	adds	r7, #12
   831a6:	46bd      	mov	sp, r7
   831a8:	bc80      	pop	{r7}
   831aa:	4770      	bx	lr
   831ac:	400e0400 	.word	0x400e0400

000831b0 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   831b0:	b480      	push	{r7}
   831b2:	b083      	sub	sp, #12
   831b4:	af00      	add	r7, sp, #0
   831b6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   831b8:	687b      	ldr	r3, [r7, #4]
   831ba:	2b1d      	cmp	r3, #29
   831bc:	d901      	bls.n	831c2 <pmc_disable_periph_clk+0x12>
		return 1;
   831be:	2301      	movs	r3, #1
   831c0:	e015      	b.n	831ee <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   831c2:	687b      	ldr	r3, [r7, #4]
   831c4:	2b1f      	cmp	r3, #31
   831c6:	d811      	bhi.n	831ec <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   831c8:	4b0b      	ldr	r3, [pc, #44]	; (831f8 <pmc_disable_periph_clk+0x48>)
   831ca:	699a      	ldr	r2, [r3, #24]
   831cc:	2101      	movs	r1, #1
   831ce:	687b      	ldr	r3, [r7, #4]
   831d0:	fa01 f303 	lsl.w	r3, r1, r3
   831d4:	401a      	ands	r2, r3
   831d6:	2101      	movs	r1, #1
   831d8:	687b      	ldr	r3, [r7, #4]
   831da:	fa01 f303 	lsl.w	r3, r1, r3
   831de:	429a      	cmp	r2, r3
   831e0:	d104      	bne.n	831ec <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   831e2:	2201      	movs	r2, #1
   831e4:	687b      	ldr	r3, [r7, #4]
   831e6:	409a      	lsls	r2, r3
   831e8:	4b03      	ldr	r3, [pc, #12]	; (831f8 <pmc_disable_periph_clk+0x48>)
   831ea:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   831ec:	2300      	movs	r3, #0
}
   831ee:	4618      	mov	r0, r3
   831f0:	370c      	adds	r7, #12
   831f2:	46bd      	mov	sp, r7
   831f4:	bc80      	pop	{r7}
   831f6:	4770      	bx	lr
   831f8:	400e0400 	.word	0x400e0400

000831fc <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   831fc:	b480      	push	{r7}
   831fe:	b083      	sub	sp, #12
   83200:	af00      	add	r7, sp, #0
   83202:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83204:	4a05      	ldr	r2, [pc, #20]	; (8321c <pmc_enable_pck+0x20>)
   83206:	f44f 7180 	mov.w	r1, #256	; 0x100
   8320a:	687b      	ldr	r3, [r7, #4]
   8320c:	fa01 f303 	lsl.w	r3, r1, r3
   83210:	6013      	str	r3, [r2, #0]
}
   83212:	bf00      	nop
   83214:	370c      	adds	r7, #12
   83216:	46bd      	mov	sp, r7
   83218:	bc80      	pop	{r7}
   8321a:	4770      	bx	lr
   8321c:	400e0400 	.word	0x400e0400

00083220 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83220:	b480      	push	{r7}
   83222:	b083      	sub	sp, #12
   83224:	af00      	add	r7, sp, #0
   83226:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83228:	687b      	ldr	r3, [r7, #4]
   8322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
   8322e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83230:	4b05      	ldr	r3, [pc, #20]	; (83248 <pmc_set_fast_startup_input+0x28>)
   83232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83234:	4904      	ldr	r1, [pc, #16]	; (83248 <pmc_set_fast_startup_input+0x28>)
   83236:	687b      	ldr	r3, [r7, #4]
   83238:	4313      	orrs	r3, r2
   8323a:	670b      	str	r3, [r1, #112]	; 0x70
}
   8323c:	bf00      	nop
   8323e:	370c      	adds	r7, #12
   83240:	46bd      	mov	sp, r7
   83242:	bc80      	pop	{r7}
   83244:	4770      	bx	lr
   83246:	bf00      	nop
   83248:	400e0400 	.word	0x400e0400

0008324c <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   8324c:	b480      	push	{r7}
   8324e:	b083      	sub	sp, #12
   83250:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   83252:	4b13      	ldr	r3, [pc, #76]	; (832a0 <pmc_enable_waitmode+0x54>)
   83254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83256:	4a12      	ldr	r2, [pc, #72]	; (832a0 <pmc_enable_waitmode+0x54>)
   83258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8325c:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   8325e:	4b11      	ldr	r3, [pc, #68]	; (832a4 <pmc_enable_waitmode+0x58>)
   83260:	691b      	ldr	r3, [r3, #16]
   83262:	4a10      	ldr	r2, [pc, #64]	; (832a4 <pmc_enable_waitmode+0x58>)
   83264:	f023 0304 	bic.w	r3, r3, #4
   83268:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   8326a:	bf20      	wfe
}
   8326c:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   8326e:	2300      	movs	r3, #0
   83270:	607b      	str	r3, [r7, #4]
   83272:	e004      	b.n	8327e <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   83274:	bf00      	nop
}
   83276:	bf00      	nop
   83278:	687b      	ldr	r3, [r7, #4]
   8327a:	3301      	adds	r3, #1
   8327c:	607b      	str	r3, [r7, #4]
   8327e:	687b      	ldr	r3, [r7, #4]
   83280:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83284:	d3f6      	bcc.n	83274 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83286:	bf00      	nop
   83288:	4b05      	ldr	r3, [pc, #20]	; (832a0 <pmc_enable_waitmode+0x54>)
   8328a:	6a1b      	ldr	r3, [r3, #32]
   8328c:	f003 0308 	and.w	r3, r3, #8
   83290:	2b00      	cmp	r3, #0
   83292:	d0f9      	beq.n	83288 <pmc_enable_waitmode+0x3c>

}
   83294:	bf00      	nop
   83296:	bf00      	nop
   83298:	370c      	adds	r7, #12
   8329a:	46bd      	mov	sp, r7
   8329c:	bc80      	pop	{r7}
   8329e:	4770      	bx	lr
   832a0:	400e0400 	.word	0x400e0400
   832a4:	e000ed00 	.word	0xe000ed00

000832a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   832a8:	b580      	push	{r7, lr}
   832aa:	b086      	sub	sp, #24
   832ac:	af00      	add	r7, sp, #0
   832ae:	60f8      	str	r0, [r7, #12]
   832b0:	60b9      	str	r1, [r7, #8]
   832b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   832b4:	2300      	movs	r3, #0
   832b6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   832b8:	68fb      	ldr	r3, [r7, #12]
   832ba:	2b00      	cmp	r3, #0
   832bc:	d012      	beq.n	832e4 <_read+0x3c>
		return -1;
   832be:	f04f 33ff 	mov.w	r3, #4294967295
   832c2:	e013      	b.n	832ec <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   832c4:	4b0b      	ldr	r3, [pc, #44]	; (832f4 <_read+0x4c>)
   832c6:	681b      	ldr	r3, [r3, #0]
   832c8:	4a0b      	ldr	r2, [pc, #44]	; (832f8 <_read+0x50>)
   832ca:	6812      	ldr	r2, [r2, #0]
   832cc:	68b9      	ldr	r1, [r7, #8]
   832ce:	4610      	mov	r0, r2
   832d0:	4798      	blx	r3
		ptr++;
   832d2:	68bb      	ldr	r3, [r7, #8]
   832d4:	3301      	adds	r3, #1
   832d6:	60bb      	str	r3, [r7, #8]
		nChars++;
   832d8:	697b      	ldr	r3, [r7, #20]
   832da:	3301      	adds	r3, #1
   832dc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   832de:	687b      	ldr	r3, [r7, #4]
   832e0:	3b01      	subs	r3, #1
   832e2:	607b      	str	r3, [r7, #4]
   832e4:	687b      	ldr	r3, [r7, #4]
   832e6:	2b00      	cmp	r3, #0
   832e8:	dcec      	bgt.n	832c4 <_read+0x1c>
	}
	return nChars;
   832ea:	697b      	ldr	r3, [r7, #20]
}
   832ec:	4618      	mov	r0, r3
   832ee:	3718      	adds	r7, #24
   832f0:	46bd      	mov	sp, r7
   832f2:	bd80      	pop	{r7, pc}
   832f4:	20002410 	.word	0x20002410
   832f8:	20002438 	.word	0x20002438

000832fc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   832fc:	b5b0      	push	{r4, r5, r7, lr}
   832fe:	b09c      	sub	sp, #112	; 0x70
   83300:	af00      	add	r7, sp, #0
   83302:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   83304:	687b      	ldr	r3, [r7, #4]
   83306:	2b05      	cmp	r3, #5
   83308:	f000 81e8 	beq.w	836dc <pmc_sleep+0x3e0>
   8330c:	687b      	ldr	r3, [r7, #4]
   8330e:	2b05      	cmp	r3, #5
   83310:	f300 81f5 	bgt.w	836fe <pmc_sleep+0x402>
   83314:	687b      	ldr	r3, [r7, #4]
   83316:	2b02      	cmp	r3, #2
   83318:	dc03      	bgt.n	83322 <pmc_sleep+0x26>
   8331a:	687b      	ldr	r3, [r7, #4]
   8331c:	2b00      	cmp	r3, #0
   8331e:	dc06      	bgt.n	8332e <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   83320:	e1ed      	b.n	836fe <pmc_sleep+0x402>
   83322:	687b      	ldr	r3, [r7, #4]
   83324:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   83326:	2b01      	cmp	r3, #1
   83328:	f200 81e9 	bhi.w	836fe <pmc_sleep+0x402>
   8332c:	e01b      	b.n	83366 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   8332e:	4b88      	ldr	r3, [pc, #544]	; (83550 <pmc_sleep+0x254>)
   83330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83332:	4a87      	ldr	r2, [pc, #540]	; (83550 <pmc_sleep+0x254>)
   83334:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   83338:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   8333a:	4b86      	ldr	r3, [pc, #536]	; (83554 <pmc_sleep+0x258>)
   8333c:	691b      	ldr	r3, [r3, #16]
   8333e:	4a85      	ldr	r2, [pc, #532]	; (83554 <pmc_sleep+0x258>)
   83340:	f023 0304 	bic.w	r3, r3, #4
   83344:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   83346:	4b84      	ldr	r3, [pc, #528]	; (83558 <pmc_sleep+0x25c>)
   83348:	2201      	movs	r2, #1
   8334a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8334c:	f3bf 8f5f 	dmb	sy
}
   83350:	bf00      	nop
  __ASM volatile ("cpsie i");
   83352:	b662      	cpsie	i
}
   83354:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   83356:	687b      	ldr	r3, [r7, #4]
   83358:	2b02      	cmp	r3, #2
   8335a:	d101      	bne.n	83360 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   8335c:	bf30      	wfi
}
   8335e:	e001      	b.n	83364 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   83360:	bf20      	wfe
}
   83362:	bf00      	nop
		break;
   83364:	e1cb      	b.n	836fe <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   83366:	b672      	cpsid	i
}
   83368:	bf00      	nop
  __ASM volatile ("dmb");
   8336a:	f3bf 8f5f 	dmb	sy
}
   8336e:	bf00      	nop
		cpu_irq_disable();
   83370:	4b79      	ldr	r3, [pc, #484]	; (83558 <pmc_sleep+0x25c>)
   83372:	2200      	movs	r2, #0
   83374:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   83376:	4b79      	ldr	r3, [pc, #484]	; (8355c <pmc_sleep+0x260>)
   83378:	2201      	movs	r2, #1
   8337a:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   8337c:	687b      	ldr	r3, [r7, #4]
   8337e:	2b04      	cmp	r3, #4
   83380:	bf0c      	ite	eq
   83382:	2301      	moveq	r3, #1
   83384:	2300      	movne	r3, #0
   83386:	b2da      	uxtb	r2, r3
   83388:	f107 0320 	add.w	r3, r7, #32
   8338c:	64fb      	str	r3, [r7, #76]	; 0x4c
   8338e:	f107 031c 	add.w	r3, r7, #28
   83392:	64bb      	str	r3, [r7, #72]	; 0x48
   83394:	f107 0318 	add.w	r3, r7, #24
   83398:	647b      	str	r3, [r7, #68]	; 0x44
   8339a:	f107 0314 	add.w	r3, r7, #20
   8339e:	643b      	str	r3, [r7, #64]	; 0x40
   833a0:	f107 0310 	add.w	r3, r7, #16
   833a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   833a6:	f107 030c 	add.w	r3, r7, #12
   833aa:	63bb      	str	r3, [r7, #56]	; 0x38
   833ac:	4613      	mov	r3, r2
   833ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   833b2:	4b67      	ldr	r3, [pc, #412]	; (83550 <pmc_sleep+0x254>)
   833b4:	6a1b      	ldr	r3, [r3, #32]
   833b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   833b8:	4b65      	ldr	r3, [pc, #404]	; (83550 <pmc_sleep+0x254>)
   833ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   833be:	4b68      	ldr	r3, [pc, #416]	; (83560 <pmc_sleep+0x264>)
   833c0:	681b      	ldr	r3, [r3, #0]
   833c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   833c4:	4b67      	ldr	r3, [pc, #412]	; (83564 <pmc_sleep+0x268>)
   833c6:	681b      	ldr	r3, [r3, #0]
   833c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   833ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   833cc:	2b00      	cmp	r3, #0
   833ce:	d002      	beq.n	833d6 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   833d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   833d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   833d4:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   833d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   833d8:	2b00      	cmp	r3, #0
   833da:	d003      	beq.n	833e4 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   833dc:	4b5c      	ldr	r3, [pc, #368]	; (83550 <pmc_sleep+0x254>)
   833de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   833e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   833e2:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   833e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   833e6:	2b00      	cmp	r3, #0
   833e8:	d003      	beq.n	833f2 <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   833ea:	4b59      	ldr	r3, [pc, #356]	; (83550 <pmc_sleep+0x254>)
   833ec:	69da      	ldr	r2, [r3, #28]
   833ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   833f0:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   833f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   833f4:	2b00      	cmp	r3, #0
   833f6:	d002      	beq.n	833fe <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   833f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   833fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   833fc:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   833fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83400:	2b00      	cmp	r3, #0
   83402:	d002      	beq.n	8340a <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   83404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83406:	6aba      	ldr	r2, [r7, #40]	; 0x28
   83408:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   8340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8340c:	2b00      	cmp	r3, #0
   8340e:	d002      	beq.n	83416 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   83410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   83412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83414:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   83416:	4a4e      	ldr	r2, [pc, #312]	; (83550 <pmc_sleep+0x254>)
   83418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8341a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8341e:	f043 0308 	orr.w	r3, r3, #8
   83422:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   83424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83426:	f003 0302 	and.w	r3, r3, #2
   8342a:	2b00      	cmp	r3, #0
   8342c:	d00f      	beq.n	8344e <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   8342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83430:	f023 0303 	bic.w	r3, r3, #3
   83434:	f043 0301 	orr.w	r3, r3, #1
   83438:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8343a:	4a45      	ldr	r2, [pc, #276]	; (83550 <pmc_sleep+0x254>)
   8343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8343e:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83440:	bf00      	nop
   83442:	4b43      	ldr	r3, [pc, #268]	; (83550 <pmc_sleep+0x254>)
   83444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83446:	f003 0308 	and.w	r3, r3, #8
   8344a:	2b00      	cmp	r3, #0
   8344c:	d0f9      	beq.n	83442 <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   8344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83450:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83454:	2b00      	cmp	r3, #0
   83456:	d00d      	beq.n	83474 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   83458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8345e:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   83460:	4a3b      	ldr	r2, [pc, #236]	; (83550 <pmc_sleep+0x254>)
   83462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83464:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83466:	bf00      	nop
   83468:	4b39      	ldr	r3, [pc, #228]	; (83550 <pmc_sleep+0x254>)
   8346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8346c:	f003 0308 	and.w	r3, r3, #8
   83470:	2b00      	cmp	r3, #0
   83472:	d0f9      	beq.n	83468 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   83474:	4b3c      	ldr	r3, [pc, #240]	; (83568 <pmc_sleep+0x26c>)
   83476:	4798      	blx	r3
	pmc_disable_upll_clock();
   83478:	4b3c      	ldr	r3, [pc, #240]	; (8356c <pmc_sleep+0x270>)
   8347a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8347c:	bf00      	nop
   8347e:	4b34      	ldr	r3, [pc, #208]	; (83550 <pmc_sleep+0x254>)
   83480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83486:	2b00      	cmp	r3, #0
   83488:	d0f9      	beq.n	8347e <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8348a:	4b31      	ldr	r3, [pc, #196]	; (83550 <pmc_sleep+0x254>)
   8348c:	6a1b      	ldr	r3, [r3, #32]
   8348e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83496:	4a2e      	ldr	r2, [pc, #184]	; (83550 <pmc_sleep+0x254>)
   83498:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8349c:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8349e:	bf00      	nop
   834a0:	4b2b      	ldr	r3, [pc, #172]	; (83550 <pmc_sleep+0x254>)
   834a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   834a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   834a8:	2b00      	cmp	r3, #0
   834aa:	d0f9      	beq.n	834a0 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   834ac:	4a2c      	ldr	r2, [pc, #176]	; (83560 <pmc_sleep+0x264>)
   834ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   834b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   834b4:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   834b6:	4a2b      	ldr	r2, [pc, #172]	; (83564 <pmc_sleep+0x268>)
   834b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   834ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   834be:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   834c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   834c4:	2b00      	cmp	r3, #0
   834c6:	d009      	beq.n	834dc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   834c8:	4b21      	ldr	r3, [pc, #132]	; (83550 <pmc_sleep+0x254>)
   834ca:	6a1b      	ldr	r3, [r3, #32]
   834cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   834d0:	f023 0301 	bic.w	r3, r3, #1
   834d4:	4a1e      	ldr	r2, [pc, #120]	; (83550 <pmc_sleep+0x254>)
   834d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834da:	6213      	str	r3, [r2, #32]
}
   834dc:	bf00      	nop
		cpu_irq_enable();
   834de:	4b1e      	ldr	r3, [pc, #120]	; (83558 <pmc_sleep+0x25c>)
   834e0:	2201      	movs	r2, #1
   834e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   834e4:	f3bf 8f5f 	dmb	sy
}
   834e8:	bf00      	nop
  __ASM volatile ("cpsie i");
   834ea:	b662      	cpsie	i
}
   834ec:	bf00      	nop
		pmc_enable_waitmode();
   834ee:	4b20      	ldr	r3, [pc, #128]	; (83570 <pmc_sleep+0x274>)
   834f0:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   834f2:	b672      	cpsid	i
}
   834f4:	bf00      	nop
  __ASM volatile ("dmb");
   834f6:	f3bf 8f5f 	dmb	sy
}
   834fa:	bf00      	nop
		cpu_irq_disable();
   834fc:	4b16      	ldr	r3, [pc, #88]	; (83558 <pmc_sleep+0x25c>)
   834fe:	2200      	movs	r2, #0
   83500:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   83502:	6a3d      	ldr	r5, [r7, #32]
   83504:	69fc      	ldr	r4, [r7, #28]
   83506:	69b8      	ldr	r0, [r7, #24]
   83508:	6979      	ldr	r1, [r7, #20]
   8350a:	693a      	ldr	r2, [r7, #16]
   8350c:	68fb      	ldr	r3, [r7, #12]
   8350e:	66fd      	str	r5, [r7, #108]	; 0x6c
   83510:	66bc      	str	r4, [r7, #104]	; 0x68
   83512:	6678      	str	r0, [r7, #100]	; 0x64
   83514:	6639      	str	r1, [r7, #96]	; 0x60
   83516:	65fa      	str	r2, [r7, #92]	; 0x5c
   83518:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   8351a:	2300      	movs	r3, #0
   8351c:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   8351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   83520:	f003 0302 	and.w	r3, r3, #2
   83524:	2b00      	cmp	r3, #0
   83526:	d029      	beq.n	8357c <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83528:	4b09      	ldr	r3, [pc, #36]	; (83550 <pmc_sleep+0x254>)
   8352a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8352c:	4a11      	ldr	r2, [pc, #68]	; (83574 <pmc_sleep+0x278>)
   8352e:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83530:	4907      	ldr	r1, [pc, #28]	; (83550 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83532:	4b11      	ldr	r3, [pc, #68]	; (83578 <pmc_sleep+0x27c>)
   83534:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83536:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83538:	4b05      	ldr	r3, [pc, #20]	; (83550 <pmc_sleep+0x254>)
   8353a:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   8353c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83540:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83544:	4a02      	ldr	r2, [pc, #8]	; (83550 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   83546:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8354a:	6213      	str	r3, [r2, #32]
   8354c:	e053      	b.n	835f6 <pmc_sleep+0x2fa>
   8354e:	bf00      	nop
   83550:	400e0400 	.word	0x400e0400
   83554:	e000ed00 	.word	0xe000ed00
   83558:	20000284 	.word	0x20000284
   8355c:	200015f0 	.word	0x200015f0
   83560:	400e0800 	.word	0x400e0800
   83564:	400e0a00 	.word	0x400e0a00
   83568:	00083101 	.word	0x00083101
   8356c:	00083131 	.word	0x00083131
   83570:	0008324d 	.word	0x0008324d
   83574:	fec8fffc 	.word	0xfec8fffc
   83578:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   8357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8357e:	f003 0301 	and.w	r3, r3, #1
   83582:	2b00      	cmp	r3, #0
   83584:	d037      	beq.n	835f6 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   83586:	4b60      	ldr	r3, [pc, #384]	; (83708 <pmc_sleep+0x40c>)
   83588:	6a1b      	ldr	r3, [r3, #32]
   8358a:	f003 0301 	and.w	r3, r3, #1
   8358e:	2b00      	cmp	r3, #0
   83590:	d112      	bne.n	835b8 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83592:	4b5d      	ldr	r3, [pc, #372]	; (83708 <pmc_sleep+0x40c>)
   83594:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83596:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8359a:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8359e:	4a5a      	ldr	r2, [pc, #360]	; (83708 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   835a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   835a4:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   835a8:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   835aa:	bf00      	nop
   835ac:	4b56      	ldr	r3, [pc, #344]	; (83708 <pmc_sleep+0x40c>)
   835ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835b0:	f003 0301 	and.w	r3, r3, #1
   835b4:	2b00      	cmp	r3, #0
   835b6:	d0f9      	beq.n	835ac <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   835b8:	4b53      	ldr	r3, [pc, #332]	; (83708 <pmc_sleep+0x40c>)
   835ba:	6a1b      	ldr	r3, [r3, #32]
   835bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   835c0:	2b00      	cmp	r3, #0
   835c2:	d10e      	bne.n	835e2 <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   835c4:	4b50      	ldr	r3, [pc, #320]	; (83708 <pmc_sleep+0x40c>)
   835c6:	6a1b      	ldr	r3, [r3, #32]
   835c8:	4a4f      	ldr	r2, [pc, #316]	; (83708 <pmc_sleep+0x40c>)
   835ca:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   835ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   835d2:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   835d4:	bf00      	nop
   835d6:	4b4c      	ldr	r3, [pc, #304]	; (83708 <pmc_sleep+0x40c>)
   835d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   835de:	2b00      	cmp	r3, #0
   835e0:	d0f9      	beq.n	835d6 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   835e2:	4b49      	ldr	r3, [pc, #292]	; (83708 <pmc_sleep+0x40c>)
   835e4:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   835e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   835ea:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   835ee:	4a46      	ldr	r2, [pc, #280]	; (83708 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   835f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   835f4:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   835f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   835f8:	4b44      	ldr	r3, [pc, #272]	; (8370c <pmc_sleep+0x410>)
   835fa:	4013      	ands	r3, r2
   835fc:	2b00      	cmp	r3, #0
   835fe:	d008      	beq.n	83612 <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   83600:	4a41      	ldr	r2, [pc, #260]	; (83708 <pmc_sleep+0x40c>)
   83602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   83604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83608:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   8360a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8360c:	f043 0302 	orr.w	r3, r3, #2
   83610:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   83612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   83614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83618:	2b00      	cmp	r3, #0
   8361a:	d006      	beq.n	8362a <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   8361c:	4a3a      	ldr	r2, [pc, #232]	; (83708 <pmc_sleep+0x40c>)
   8361e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   83620:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   83622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   83624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83628:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   8362a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8362c:	f003 0303 	and.w	r3, r3, #3
   83630:	2b02      	cmp	r3, #2
   83632:	d002      	beq.n	8363a <pmc_sleep+0x33e>
   83634:	2b03      	cmp	r3, #3
   83636:	d008      	beq.n	8364a <pmc_sleep+0x34e>
   83638:	e00f      	b.n	8365a <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   8363a:	bf00      	nop
   8363c:	4b32      	ldr	r3, [pc, #200]	; (83708 <pmc_sleep+0x40c>)
   8363e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83640:	f003 0302 	and.w	r3, r3, #2
   83644:	2b00      	cmp	r3, #0
   83646:	d0f9      	beq.n	8363c <pmc_sleep+0x340>
		break;
   83648:	e007      	b.n	8365a <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8364a:	bf00      	nop
   8364c:	4b2e      	ldr	r3, [pc, #184]	; (83708 <pmc_sleep+0x40c>)
   8364e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83650:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83654:	2b00      	cmp	r3, #0
   83656:	d0f9      	beq.n	8364c <pmc_sleep+0x350>
		break;
   83658:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   8365a:	4b2b      	ldr	r3, [pc, #172]	; (83708 <pmc_sleep+0x40c>)
   8365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8365e:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   83660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   83662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   83666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83668:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8366c:	4926      	ldr	r1, [pc, #152]	; (83708 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8366e:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   83670:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83672:	bf00      	nop
   83674:	4b24      	ldr	r3, [pc, #144]	; (83708 <pmc_sleep+0x40c>)
   83676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83678:	f003 0308 	and.w	r3, r3, #8
   8367c:	2b00      	cmp	r3, #0
   8367e:	d0f9      	beq.n	83674 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   83680:	4a23      	ldr	r2, [pc, #140]	; (83710 <pmc_sleep+0x414>)
   83682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   83684:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   83686:	4a23      	ldr	r2, [pc, #140]	; (83714 <pmc_sleep+0x418>)
   83688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8368a:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   8368c:	4a1e      	ldr	r2, [pc, #120]	; (83708 <pmc_sleep+0x40c>)
   8368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83690:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83692:	bf00      	nop
   83694:	4b1c      	ldr	r3, [pc, #112]	; (83708 <pmc_sleep+0x40c>)
   83696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83698:	f003 0308 	and.w	r3, r3, #8
   8369c:	2b00      	cmp	r3, #0
   8369e:	d0f9      	beq.n	83694 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   836a0:	bf00      	nop
   836a2:	4b19      	ldr	r3, [pc, #100]	; (83708 <pmc_sleep+0x40c>)
   836a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   836a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   836a8:	4013      	ands	r3, r2
   836aa:	2b00      	cmp	r3, #0
   836ac:	d0f9      	beq.n	836a2 <pmc_sleep+0x3a6>
}
   836ae:	bf00      	nop
		b_is_sleep_clock_used = false;
   836b0:	4b19      	ldr	r3, [pc, #100]	; (83718 <pmc_sleep+0x41c>)
   836b2:	2200      	movs	r2, #0
   836b4:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   836b6:	4b19      	ldr	r3, [pc, #100]	; (8371c <pmc_sleep+0x420>)
   836b8:	681b      	ldr	r3, [r3, #0]
   836ba:	2b00      	cmp	r3, #0
   836bc:	d005      	beq.n	836ca <pmc_sleep+0x3ce>
			callback_clocks_restored();
   836be:	4b17      	ldr	r3, [pc, #92]	; (8371c <pmc_sleep+0x420>)
   836c0:	681b      	ldr	r3, [r3, #0]
   836c2:	4798      	blx	r3
			callback_clocks_restored = NULL;
   836c4:	4b15      	ldr	r3, [pc, #84]	; (8371c <pmc_sleep+0x420>)
   836c6:	2200      	movs	r2, #0
   836c8:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   836ca:	4b15      	ldr	r3, [pc, #84]	; (83720 <pmc_sleep+0x424>)
   836cc:	2201      	movs	r2, #1
   836ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   836d0:	f3bf 8f5f 	dmb	sy
}
   836d4:	bf00      	nop
  __ASM volatile ("cpsie i");
   836d6:	b662      	cpsie	i
}
   836d8:	bf00      	nop
		break;
   836da:	e010      	b.n	836fe <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   836dc:	4b11      	ldr	r3, [pc, #68]	; (83724 <pmc_sleep+0x428>)
   836de:	691b      	ldr	r3, [r3, #16]
   836e0:	4a10      	ldr	r2, [pc, #64]	; (83724 <pmc_sleep+0x428>)
   836e2:	f043 0304 	orr.w	r3, r3, #4
   836e6:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   836e8:	4b0d      	ldr	r3, [pc, #52]	; (83720 <pmc_sleep+0x424>)
   836ea:	2201      	movs	r2, #1
   836ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   836ee:	f3bf 8f5f 	dmb	sy
}
   836f2:	bf00      	nop
  __ASM volatile ("cpsie i");
   836f4:	b662      	cpsie	i
}
   836f6:	bf00      	nop
  __ASM volatile ("wfe");
   836f8:	bf20      	wfe
}
   836fa:	bf00      	nop
		break;
   836fc:	bf00      	nop
}
   836fe:	bf00      	nop
   83700:	3770      	adds	r7, #112	; 0x70
   83702:	46bd      	mov	sp, r7
   83704:	bdb0      	pop	{r4, r5, r7, pc}
   83706:	bf00      	nop
   83708:	400e0400 	.word	0x400e0400
   8370c:	07ff0000 	.word	0x07ff0000
   83710:	400e0800 	.word	0x400e0800
   83714:	400e0a00 	.word	0x400e0a00
   83718:	200015f0 	.word	0x200015f0
   8371c:	200015f4 	.word	0x200015f4
   83720:	20000284 	.word	0x20000284
   83724:	e000ed00 	.word	0xe000ed00

00083728 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   83728:	b480      	push	{r7}
   8372a:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   8372c:	4b08      	ldr	r3, [pc, #32]	; (83750 <pmc_is_wakeup_clocks_restored+0x28>)
   8372e:	781b      	ldrb	r3, [r3, #0]
   83730:	b2db      	uxtb	r3, r3
   83732:	2b00      	cmp	r3, #0
   83734:	bf14      	ite	ne
   83736:	2301      	movne	r3, #1
   83738:	2300      	moveq	r3, #0
   8373a:	b2db      	uxtb	r3, r3
   8373c:	f083 0301 	eor.w	r3, r3, #1
   83740:	b2db      	uxtb	r3, r3
   83742:	f003 0301 	and.w	r3, r3, #1
   83746:	b2db      	uxtb	r3, r3
}
   83748:	4618      	mov	r0, r3
   8374a:	46bd      	mov	sp, r7
   8374c:	bc80      	pop	{r7}
   8374e:	4770      	bx	lr
   83750:	200015f0 	.word	0x200015f0

00083754 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   83754:	b480      	push	{r7}
   83756:	b085      	sub	sp, #20
   83758:	af00      	add	r7, sp, #0
   8375a:	60f8      	str	r0, [r7, #12]
   8375c:	60b9      	str	r1, [r7, #8]
   8375e:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83760:	68f9      	ldr	r1, [r7, #12]
   83762:	68ba      	ldr	r2, [r7, #8]
   83764:	4613      	mov	r3, r2
   83766:	009b      	lsls	r3, r3, #2
   83768:	4413      	add	r3, r2
   8376a:	009b      	lsls	r3, r3, #2
   8376c:	440b      	add	r3, r1
   8376e:	3370      	adds	r3, #112	; 0x70
   83770:	687a      	ldr	r2, [r7, #4]
   83772:	601a      	str	r2, [r3, #0]
}
   83774:	bf00      	nop
   83776:	3714      	adds	r7, #20
   83778:	46bd      	mov	sp, r7
   8377a:	bc80      	pop	{r7}
   8377c:	4770      	bx	lr

0008377e <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   8377e:	b480      	push	{r7}
   83780:	b085      	sub	sp, #20
   83782:	af00      	add	r7, sp, #0
   83784:	60f8      	str	r0, [r7, #12]
   83786:	60b9      	str	r1, [r7, #8]
   83788:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8378a:	68f9      	ldr	r1, [r7, #12]
   8378c:	68ba      	ldr	r2, [r7, #8]
   8378e:	4613      	mov	r3, r2
   83790:	009b      	lsls	r3, r3, #2
   83792:	4413      	add	r3, r2
   83794:	009b      	lsls	r3, r3, #2
   83796:	440b      	add	r3, r1
   83798:	3374      	adds	r3, #116	; 0x74
   8379a:	687a      	ldr	r2, [r7, #4]
   8379c:	601a      	str	r2, [r3, #0]
}
   8379e:	bf00      	nop
   837a0:	3714      	adds	r7, #20
   837a2:	46bd      	mov	sp, r7
   837a4:	bc80      	pop	{r7}
   837a6:	4770      	bx	lr

000837a8 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   837a8:	b480      	push	{r7}
   837aa:	b085      	sub	sp, #20
   837ac:	af00      	add	r7, sp, #0
   837ae:	60f8      	str	r0, [r7, #12]
   837b0:	60b9      	str	r1, [r7, #8]
   837b2:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   837b4:	68f9      	ldr	r1, [r7, #12]
   837b6:	68ba      	ldr	r2, [r7, #8]
   837b8:	4613      	mov	r3, r2
   837ba:	009b      	lsls	r3, r3, #2
   837bc:	4413      	add	r3, r2
   837be:	009b      	lsls	r3, r3, #2
   837c0:	440b      	add	r3, r1
   837c2:	3378      	adds	r3, #120	; 0x78
   837c4:	687a      	ldr	r2, [r7, #4]
   837c6:	601a      	str	r2, [r3, #0]
}
   837c8:	bf00      	nop
   837ca:	3714      	adds	r7, #20
   837cc:	46bd      	mov	sp, r7
   837ce:	bc80      	pop	{r7}
   837d0:	4770      	bx	lr

000837d2 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   837d2:	b480      	push	{r7}
   837d4:	b085      	sub	sp, #20
   837d6:	af00      	add	r7, sp, #0
   837d8:	60f8      	str	r0, [r7, #12]
   837da:	60b9      	str	r1, [r7, #8]
   837dc:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   837de:	68f9      	ldr	r1, [r7, #12]
   837e0:	68ba      	ldr	r2, [r7, #8]
   837e2:	4613      	mov	r3, r2
   837e4:	009b      	lsls	r3, r3, #2
   837e6:	4413      	add	r3, r2
   837e8:	009b      	lsls	r3, r3, #2
   837ea:	440b      	add	r3, r1
   837ec:	3380      	adds	r3, #128	; 0x80
   837ee:	687a      	ldr	r2, [r7, #4]
   837f0:	601a      	str	r2, [r3, #0]
}
   837f2:	bf00      	nop
   837f4:	3714      	adds	r7, #20
   837f6:	46bd      	mov	sp, r7
   837f8:	bc80      	pop	{r7}
   837fa:	4770      	bx	lr

000837fc <sysclk_enable_peripheral_clock>:
{
   837fc:	b580      	push	{r7, lr}
   837fe:	b082      	sub	sp, #8
   83800:	af00      	add	r7, sp, #0
   83802:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83804:	6878      	ldr	r0, [r7, #4]
   83806:	4b03      	ldr	r3, [pc, #12]	; (83814 <sysclk_enable_peripheral_clock+0x18>)
   83808:	4798      	blx	r3
}
   8380a:	bf00      	nop
   8380c:	3708      	adds	r7, #8
   8380e:	46bd      	mov	sp, r7
   83810:	bd80      	pop	{r7, pc}
   83812:	bf00      	nop
   83814:	00083165 	.word	0x00083165

00083818 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   83818:	b580      	push	{r7, lr}
   8381a:	b082      	sub	sp, #8
   8381c:	af00      	add	r7, sp, #0
   8381e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
   83820:	2014      	movs	r0, #20
   83822:	4b03      	ldr	r3, [pc, #12]	; (83830 <spi_enable_clock+0x18>)
   83824:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   83826:	bf00      	nop
   83828:	3708      	adds	r7, #8
   8382a:	46bd      	mov	sp, r7
   8382c:	bd80      	pop	{r7, pc}
   8382e:	bf00      	nop
   83830:	000837fd 	.word	0x000837fd

00083834 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   83834:	b480      	push	{r7}
   83836:	b085      	sub	sp, #20
   83838:	af00      	add	r7, sp, #0
   8383a:	60f8      	str	r0, [r7, #12]
   8383c:	60b9      	str	r1, [r7, #8]
   8383e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   83840:	687b      	ldr	r3, [r7, #4]
   83842:	2b00      	cmp	r3, #0
   83844:	d00c      	beq.n	83860 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   83846:	68fb      	ldr	r3, [r7, #12]
   83848:	68ba      	ldr	r2, [r7, #8]
   8384a:	320c      	adds	r2, #12
   8384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83850:	f043 0101 	orr.w	r1, r3, #1
   83854:	68fb      	ldr	r3, [r7, #12]
   83856:	68ba      	ldr	r2, [r7, #8]
   83858:	320c      	adds	r2, #12
   8385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   8385e:	e00b      	b.n	83878 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   83860:	68fb      	ldr	r3, [r7, #12]
   83862:	68ba      	ldr	r2, [r7, #8]
   83864:	320c      	adds	r2, #12
   83866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8386a:	f023 0101 	bic.w	r1, r3, #1
   8386e:	68fb      	ldr	r3, [r7, #12]
   83870:	68ba      	ldr	r2, [r7, #8]
   83872:	320c      	adds	r2, #12
   83874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83878:	bf00      	nop
   8387a:	3714      	adds	r7, #20
   8387c:	46bd      	mov	sp, r7
   8387e:	bc80      	pop	{r7}
   83880:	4770      	bx	lr

00083882 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   83882:	b480      	push	{r7}
   83884:	b085      	sub	sp, #20
   83886:	af00      	add	r7, sp, #0
   83888:	60f8      	str	r0, [r7, #12]
   8388a:	60b9      	str	r1, [r7, #8]
   8388c:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8388e:	687b      	ldr	r3, [r7, #4]
   83890:	2b00      	cmp	r3, #0
   83892:	d00c      	beq.n	838ae <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   83894:	68fb      	ldr	r3, [r7, #12]
   83896:	68ba      	ldr	r2, [r7, #8]
   83898:	320c      	adds	r2, #12
   8389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8389e:	f043 0102 	orr.w	r1, r3, #2
   838a2:	68fb      	ldr	r3, [r7, #12]
   838a4:	68ba      	ldr	r2, [r7, #8]
   838a6:	320c      	adds	r2, #12
   838a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   838ac:	e00b      	b.n	838c6 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   838ae:	68fb      	ldr	r3, [r7, #12]
   838b0:	68ba      	ldr	r2, [r7, #8]
   838b2:	320c      	adds	r2, #12
   838b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   838b8:	f023 0102 	bic.w	r1, r3, #2
   838bc:	68fb      	ldr	r3, [r7, #12]
   838be:	68ba      	ldr	r2, [r7, #8]
   838c0:	320c      	adds	r2, #12
   838c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   838c6:	bf00      	nop
   838c8:	3714      	adds	r7, #20
   838ca:	46bd      	mov	sp, r7
   838cc:	bc80      	pop	{r7}
   838ce:	4770      	bx	lr

000838d0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   838d0:	b480      	push	{r7}
   838d2:	b085      	sub	sp, #20
   838d4:	af00      	add	r7, sp, #0
   838d6:	60f8      	str	r0, [r7, #12]
   838d8:	60b9      	str	r1, [r7, #8]
   838da:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   838dc:	68fb      	ldr	r3, [r7, #12]
   838de:	68ba      	ldr	r2, [r7, #8]
   838e0:	320c      	adds	r2, #12
   838e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   838e6:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   838ea:	68fb      	ldr	r3, [r7, #12]
   838ec:	68ba      	ldr	r2, [r7, #8]
   838ee:	320c      	adds	r2, #12
   838f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   838f4:	68fb      	ldr	r3, [r7, #12]
   838f6:	68ba      	ldr	r2, [r7, #8]
   838f8:	320c      	adds	r2, #12
   838fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   838fe:	687b      	ldr	r3, [r7, #4]
   83900:	ea42 0103 	orr.w	r1, r2, r3
   83904:	68fb      	ldr	r3, [r7, #12]
   83906:	68ba      	ldr	r2, [r7, #8]
   83908:	320c      	adds	r2, #12
   8390a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8390e:	bf00      	nop
   83910:	3714      	adds	r7, #20
   83912:	46bd      	mov	sp, r7
   83914:	bc80      	pop	{r7}
   83916:	4770      	bx	lr

00083918 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   83918:	b480      	push	{r7}
   8391a:	b085      	sub	sp, #20
   8391c:	af00      	add	r7, sp, #0
   8391e:	6078      	str	r0, [r7, #4]
   83920:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   83922:	683a      	ldr	r2, [r7, #0]
   83924:	687b      	ldr	r3, [r7, #4]
   83926:	4413      	add	r3, r2
   83928:	1e5a      	subs	r2, r3, #1
   8392a:	687b      	ldr	r3, [r7, #4]
   8392c:	fbb2 f3f3 	udiv	r3, r2, r3
   83930:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   83932:	68fb      	ldr	r3, [r7, #12]
   83934:	2b00      	cmp	r3, #0
   83936:	dd02      	ble.n	8393e <spi_calc_baudrate_div+0x26>
   83938:	68fb      	ldr	r3, [r7, #12]
   8393a:	2bff      	cmp	r3, #255	; 0xff
   8393c:	dd02      	ble.n	83944 <spi_calc_baudrate_div+0x2c>
		return -1;
   8393e:	f04f 33ff 	mov.w	r3, #4294967295
   83942:	e001      	b.n	83948 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   83944:	68fb      	ldr	r3, [r7, #12]
   83946:	b21b      	sxth	r3, r3
}
   83948:	4618      	mov	r0, r3
   8394a:	3714      	adds	r7, #20
   8394c:	46bd      	mov	sp, r7
   8394e:	bc80      	pop	{r7}
   83950:	4770      	bx	lr

00083952 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   83952:	b480      	push	{r7}
   83954:	b085      	sub	sp, #20
   83956:	af00      	add	r7, sp, #0
   83958:	60f8      	str	r0, [r7, #12]
   8395a:	60b9      	str	r1, [r7, #8]
   8395c:	4613      	mov	r3, r2
   8395e:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   83960:	68fb      	ldr	r3, [r7, #12]
   83962:	68ba      	ldr	r2, [r7, #8]
   83964:	320c      	adds	r2, #12
   83966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8396a:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   8396e:	68fb      	ldr	r3, [r7, #12]
   83970:	68ba      	ldr	r2, [r7, #8]
   83972:	320c      	adds	r2, #12
   83974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   83978:	68fb      	ldr	r3, [r7, #12]
   8397a:	68ba      	ldr	r2, [r7, #8]
   8397c:	320c      	adds	r2, #12
   8397e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   83982:	79fb      	ldrb	r3, [r7, #7]
   83984:	021b      	lsls	r3, r3, #8
   83986:	b29b      	uxth	r3, r3
   83988:	ea42 0103 	orr.w	r1, r2, r3
   8398c:	68fb      	ldr	r3, [r7, #12]
   8398e:	68ba      	ldr	r2, [r7, #8]
   83990:	320c      	adds	r2, #12
   83992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83996:	bf00      	nop
   83998:	3714      	adds	r7, #20
   8399a:	46bd      	mov	sp, r7
   8399c:	bc80      	pop	{r7}
   8399e:	4770      	bx	lr

000839a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   839a0:	b580      	push	{r7, lr}
   839a2:	b082      	sub	sp, #8
   839a4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   839a6:	4b1e      	ldr	r3, [pc, #120]	; (83a20 <Reset_Handler+0x80>)
   839a8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   839aa:	4b1e      	ldr	r3, [pc, #120]	; (83a24 <Reset_Handler+0x84>)
   839ac:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   839ae:	687a      	ldr	r2, [r7, #4]
   839b0:	683b      	ldr	r3, [r7, #0]
   839b2:	429a      	cmp	r2, r3
   839b4:	d00c      	beq.n	839d0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   839b6:	e007      	b.n	839c8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   839b8:	687a      	ldr	r2, [r7, #4]
   839ba:	1d13      	adds	r3, r2, #4
   839bc:	607b      	str	r3, [r7, #4]
   839be:	683b      	ldr	r3, [r7, #0]
   839c0:	1d19      	adds	r1, r3, #4
   839c2:	6039      	str	r1, [r7, #0]
   839c4:	6812      	ldr	r2, [r2, #0]
   839c6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   839c8:	683b      	ldr	r3, [r7, #0]
   839ca:	4a17      	ldr	r2, [pc, #92]	; (83a28 <Reset_Handler+0x88>)
   839cc:	4293      	cmp	r3, r2
   839ce:	d3f3      	bcc.n	839b8 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   839d0:	4b16      	ldr	r3, [pc, #88]	; (83a2c <Reset_Handler+0x8c>)
   839d2:	603b      	str	r3, [r7, #0]
   839d4:	e004      	b.n	839e0 <Reset_Handler+0x40>
		*pDest++ = 0;
   839d6:	683b      	ldr	r3, [r7, #0]
   839d8:	1d1a      	adds	r2, r3, #4
   839da:	603a      	str	r2, [r7, #0]
   839dc:	2200      	movs	r2, #0
   839de:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   839e0:	683b      	ldr	r3, [r7, #0]
   839e2:	4a13      	ldr	r2, [pc, #76]	; (83a30 <Reset_Handler+0x90>)
   839e4:	4293      	cmp	r3, r2
   839e6:	d3f6      	bcc.n	839d6 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   839e8:	4b12      	ldr	r3, [pc, #72]	; (83a34 <Reset_Handler+0x94>)
   839ea:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   839ec:	687b      	ldr	r3, [r7, #4]
   839ee:	4a12      	ldr	r2, [pc, #72]	; (83a38 <Reset_Handler+0x98>)
   839f0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   839f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   839f8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   839fa:	687b      	ldr	r3, [r7, #4]
   839fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83a00:	d309      	bcc.n	83a16 <Reset_Handler+0x76>
   83a02:	687b      	ldr	r3, [r7, #4]
   83a04:	4a0d      	ldr	r2, [pc, #52]	; (83a3c <Reset_Handler+0x9c>)
   83a06:	4293      	cmp	r3, r2
   83a08:	d205      	bcs.n	83a16 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83a0a:	4b0b      	ldr	r3, [pc, #44]	; (83a38 <Reset_Handler+0x98>)
   83a0c:	689b      	ldr	r3, [r3, #8]
   83a0e:	4a0a      	ldr	r2, [pc, #40]	; (83a38 <Reset_Handler+0x98>)
   83a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83a14:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83a16:	4b0a      	ldr	r3, [pc, #40]	; (83a40 <Reset_Handler+0xa0>)
   83a18:	4798      	blx	r3

	/* Branch to main function */
	main();
   83a1a:	4b0a      	ldr	r3, [pc, #40]	; (83a44 <Reset_Handler+0xa4>)
   83a1c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83a1e:	e7fe      	b.n	83a1e <Reset_Handler+0x7e>
   83a20:	0008ef2c 	.word	0x0008ef2c
   83a24:	20000000 	.word	0x20000000
   83a28:	20000eb0 	.word	0x20000eb0
   83a2c:	20000eb0 	.word	0x20000eb0
   83a30:	20002464 	.word	0x20002464
   83a34:	00080000 	.word	0x00080000
   83a38:	e000ed00 	.word	0xe000ed00
   83a3c:	20004000 	.word	0x20004000
   83a40:	00088089 	.word	0x00088089
   83a44:	00080ab5 	.word	0x00080ab5

00083a48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83a48:	b480      	push	{r7}
   83a4a:	b085      	sub	sp, #20
   83a4c:	af00      	add	r7, sp, #0
   83a4e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83a50:	4b10      	ldr	r3, [pc, #64]	; (83a94 <_sbrk+0x4c>)
   83a52:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83a54:	4b10      	ldr	r3, [pc, #64]	; (83a98 <_sbrk+0x50>)
   83a56:	681b      	ldr	r3, [r3, #0]
   83a58:	2b00      	cmp	r3, #0
   83a5a:	d102      	bne.n	83a62 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83a5c:	4b0e      	ldr	r3, [pc, #56]	; (83a98 <_sbrk+0x50>)
   83a5e:	4a0f      	ldr	r2, [pc, #60]	; (83a9c <_sbrk+0x54>)
   83a60:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83a62:	4b0d      	ldr	r3, [pc, #52]	; (83a98 <_sbrk+0x50>)
   83a64:	681b      	ldr	r3, [r3, #0]
   83a66:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83a68:	68ba      	ldr	r2, [r7, #8]
   83a6a:	687b      	ldr	r3, [r7, #4]
   83a6c:	4413      	add	r3, r2
   83a6e:	68fa      	ldr	r2, [r7, #12]
   83a70:	429a      	cmp	r2, r3
   83a72:	da02      	bge.n	83a7a <_sbrk+0x32>
		return (caddr_t) -1;	
   83a74:	f04f 33ff 	mov.w	r3, #4294967295
   83a78:	e006      	b.n	83a88 <_sbrk+0x40>
	}

	heap += incr;
   83a7a:	4b07      	ldr	r3, [pc, #28]	; (83a98 <_sbrk+0x50>)
   83a7c:	681a      	ldr	r2, [r3, #0]
   83a7e:	687b      	ldr	r3, [r7, #4]
   83a80:	4413      	add	r3, r2
   83a82:	4a05      	ldr	r2, [pc, #20]	; (83a98 <_sbrk+0x50>)
   83a84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83a86:	68bb      	ldr	r3, [r7, #8]
}
   83a88:	4618      	mov	r0, r3
   83a8a:	3714      	adds	r7, #20
   83a8c:	46bd      	mov	sp, r7
   83a8e:	bc80      	pop	{r7}
   83a90:	4770      	bx	lr
   83a92:	bf00      	nop
   83a94:	20083ffc 	.word	0x20083ffc
   83a98:	200015f8 	.word	0x200015f8
   83a9c:	20084000 	.word	0x20084000

00083aa0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   83aa0:	b480      	push	{r7}
   83aa2:	b083      	sub	sp, #12
   83aa4:	af00      	add	r7, sp, #0
   83aa6:	6078      	str	r0, [r7, #4]
	return -1;
   83aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
   83aac:	4618      	mov	r0, r3
   83aae:	370c      	adds	r7, #12
   83ab0:	46bd      	mov	sp, r7
   83ab2:	bc80      	pop	{r7}
   83ab4:	4770      	bx	lr

00083ab6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83ab6:	b480      	push	{r7}
   83ab8:	b083      	sub	sp, #12
   83aba:	af00      	add	r7, sp, #0
   83abc:	6078      	str	r0, [r7, #4]
   83abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   83ac0:	683b      	ldr	r3, [r7, #0]
   83ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83ac6:	605a      	str	r2, [r3, #4]

	return 0;
   83ac8:	2300      	movs	r3, #0
}
   83aca:	4618      	mov	r0, r3
   83acc:	370c      	adds	r7, #12
   83ace:	46bd      	mov	sp, r7
   83ad0:	bc80      	pop	{r7}
   83ad2:	4770      	bx	lr

00083ad4 <_isatty>:

extern int _isatty(int file)
{
   83ad4:	b480      	push	{r7}
   83ad6:	b083      	sub	sp, #12
   83ad8:	af00      	add	r7, sp, #0
   83ada:	6078      	str	r0, [r7, #4]
	return 1;
   83adc:	2301      	movs	r3, #1
}
   83ade:	4618      	mov	r0, r3
   83ae0:	370c      	adds	r7, #12
   83ae2:	46bd      	mov	sp, r7
   83ae4:	bc80      	pop	{r7}
   83ae6:	4770      	bx	lr

00083ae8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83ae8:	b480      	push	{r7}
   83aea:	b085      	sub	sp, #20
   83aec:	af00      	add	r7, sp, #0
   83aee:	60f8      	str	r0, [r7, #12]
   83af0:	60b9      	str	r1, [r7, #8]
   83af2:	607a      	str	r2, [r7, #4]
	return 0;
   83af4:	2300      	movs	r3, #0
}
   83af6:	4618      	mov	r0, r3
   83af8:	3714      	adds	r7, #20
   83afa:	46bd      	mov	sp, r7
   83afc:	bc80      	pop	{r7}
   83afe:	4770      	bx	lr

00083b00 <_exit>:

extern void _exit(int status)
{
   83b00:	b580      	push	{r7, lr}
   83b02:	b082      	sub	sp, #8
   83b04:	af00      	add	r7, sp, #0
   83b06:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   83b08:	6879      	ldr	r1, [r7, #4]
   83b0a:	4802      	ldr	r0, [pc, #8]	; (83b14 <_exit+0x14>)
   83b0c:	4b02      	ldr	r3, [pc, #8]	; (83b18 <_exit+0x18>)
   83b0e:	4798      	blx	r3

	for (;;);
   83b10:	e7fe      	b.n	83b10 <_exit+0x10>
   83b12:	bf00      	nop
   83b14:	0008ea90 	.word	0x0008ea90
   83b18:	000880d1 	.word	0x000880d1

00083b1c <_kill>:
}

extern void _kill(int pid, int sig)
{
   83b1c:	b480      	push	{r7}
   83b1e:	b083      	sub	sp, #12
   83b20:	af00      	add	r7, sp, #0
   83b22:	6078      	str	r0, [r7, #4]
   83b24:	6039      	str	r1, [r7, #0]
	return;
   83b26:	bf00      	nop
}
   83b28:	370c      	adds	r7, #12
   83b2a:	46bd      	mov	sp, r7
   83b2c:	bc80      	pop	{r7}
   83b2e:	4770      	bx	lr

00083b30 <_getpid>:

extern int _getpid(void)
{
   83b30:	b480      	push	{r7}
   83b32:	af00      	add	r7, sp, #0
	return -1;
   83b34:	f04f 33ff 	mov.w	r3, #4294967295
}
   83b38:	4618      	mov	r0, r3
   83b3a:	46bd      	mov	sp, r7
   83b3c:	bc80      	pop	{r7}
   83b3e:	4770      	bx	lr

00083b40 <osc_enable>:
{
   83b40:	b580      	push	{r7, lr}
   83b42:	b082      	sub	sp, #8
   83b44:	af00      	add	r7, sp, #0
   83b46:	6078      	str	r0, [r7, #4]
   83b48:	687b      	ldr	r3, [r7, #4]
   83b4a:	2b07      	cmp	r3, #7
   83b4c:	d82e      	bhi.n	83bac <osc_enable+0x6c>
   83b4e:	a201      	add	r2, pc, #4	; (adr r2, 83b54 <osc_enable+0x14>)
   83b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83b54:	00083bab 	.word	0x00083bab
   83b58:	00083b75 	.word	0x00083b75
   83b5c:	00083b7d 	.word	0x00083b7d
   83b60:	00083b85 	.word	0x00083b85
   83b64:	00083b8d 	.word	0x00083b8d
   83b68:	00083b95 	.word	0x00083b95
   83b6c:	00083b9d 	.word	0x00083b9d
   83b70:	00083ba5 	.word	0x00083ba5
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83b74:	2000      	movs	r0, #0
   83b76:	4b0f      	ldr	r3, [pc, #60]	; (83bb4 <osc_enable+0x74>)
   83b78:	4798      	blx	r3
		break;
   83b7a:	e017      	b.n	83bac <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83b7c:	2001      	movs	r0, #1
   83b7e:	4b0d      	ldr	r3, [pc, #52]	; (83bb4 <osc_enable+0x74>)
   83b80:	4798      	blx	r3
		break;
   83b82:	e013      	b.n	83bac <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83b84:	2000      	movs	r0, #0
   83b86:	4b0c      	ldr	r3, [pc, #48]	; (83bb8 <osc_enable+0x78>)
   83b88:	4798      	blx	r3
		break;
   83b8a:	e00f      	b.n	83bac <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83b8c:	2010      	movs	r0, #16
   83b8e:	4b0a      	ldr	r3, [pc, #40]	; (83bb8 <osc_enable+0x78>)
   83b90:	4798      	blx	r3
		break;
   83b92:	e00b      	b.n	83bac <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83b94:	2020      	movs	r0, #32
   83b96:	4b08      	ldr	r3, [pc, #32]	; (83bb8 <osc_enable+0x78>)
   83b98:	4798      	blx	r3
		break;
   83b9a:	e007      	b.n	83bac <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83b9c:	203e      	movs	r0, #62	; 0x3e
   83b9e:	4b07      	ldr	r3, [pc, #28]	; (83bbc <osc_enable+0x7c>)
   83ba0:	4798      	blx	r3
		break;
   83ba2:	e003      	b.n	83bac <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83ba4:	4b06      	ldr	r3, [pc, #24]	; (83bc0 <osc_enable+0x80>)
   83ba6:	4798      	blx	r3
		break;
   83ba8:	e000      	b.n	83bac <osc_enable+0x6c>
		break;
   83baa:	bf00      	nop
}
   83bac:	bf00      	nop
   83bae:	3708      	adds	r7, #8
   83bb0:	46bd      	mov	sp, r7
   83bb2:	bd80      	pop	{r7, pc}
   83bb4:	00082f15 	.word	0x00082f15
   83bb8:	00082f81 	.word	0x00082f81
   83bbc:	00082ff5 	.word	0x00082ff5
   83bc0:	00083045 	.word	0x00083045

00083bc4 <osc_is_ready>:
{
   83bc4:	b580      	push	{r7, lr}
   83bc6:	b082      	sub	sp, #8
   83bc8:	af00      	add	r7, sp, #0
   83bca:	6078      	str	r0, [r7, #4]
   83bcc:	687b      	ldr	r3, [r7, #4]
   83bce:	2b07      	cmp	r3, #7
   83bd0:	d82f      	bhi.n	83c32 <osc_is_ready+0x6e>
   83bd2:	a201      	add	r2, pc, #4	; (adr r2, 83bd8 <osc_is_ready+0x14>)
   83bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83bd8:	00083bf9 	.word	0x00083bf9
   83bdc:	00083bfd 	.word	0x00083bfd
   83be0:	00083bfd 	.word	0x00083bfd
   83be4:	00083c0f 	.word	0x00083c0f
   83be8:	00083c0f 	.word	0x00083c0f
   83bec:	00083c0f 	.word	0x00083c0f
   83bf0:	00083c21 	.word	0x00083c21
   83bf4:	00083c21 	.word	0x00083c21
		return 1;
   83bf8:	2301      	movs	r3, #1
   83bfa:	e01b      	b.n	83c34 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83bfc:	4b0f      	ldr	r3, [pc, #60]	; (83c3c <osc_is_ready+0x78>)
   83bfe:	4798      	blx	r3
   83c00:	4603      	mov	r3, r0
   83c02:	2b00      	cmp	r3, #0
   83c04:	bf14      	ite	ne
   83c06:	2301      	movne	r3, #1
   83c08:	2300      	moveq	r3, #0
   83c0a:	b2db      	uxtb	r3, r3
   83c0c:	e012      	b.n	83c34 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83c0e:	4b0c      	ldr	r3, [pc, #48]	; (83c40 <osc_is_ready+0x7c>)
   83c10:	4798      	blx	r3
   83c12:	4603      	mov	r3, r0
   83c14:	2b00      	cmp	r3, #0
   83c16:	bf14      	ite	ne
   83c18:	2301      	movne	r3, #1
   83c1a:	2300      	moveq	r3, #0
   83c1c:	b2db      	uxtb	r3, r3
   83c1e:	e009      	b.n	83c34 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83c20:	4b08      	ldr	r3, [pc, #32]	; (83c44 <osc_is_ready+0x80>)
   83c22:	4798      	blx	r3
   83c24:	4603      	mov	r3, r0
   83c26:	2b00      	cmp	r3, #0
   83c28:	bf14      	ite	ne
   83c2a:	2301      	movne	r3, #1
   83c2c:	2300      	moveq	r3, #0
   83c2e:	b2db      	uxtb	r3, r3
   83c30:	e000      	b.n	83c34 <osc_is_ready+0x70>
	return 0;
   83c32:	2300      	movs	r3, #0
}
   83c34:	4618      	mov	r0, r3
   83c36:	3708      	adds	r7, #8
   83c38:	46bd      	mov	sp, r7
   83c3a:	bd80      	pop	{r7, pc}
   83c3c:	00082f4d 	.word	0x00082f4d
   83c40:	00082fdd 	.word	0x00082fdd
   83c44:	00083091 	.word	0x00083091

00083c48 <osc_get_rate>:
{
   83c48:	b480      	push	{r7}
   83c4a:	b083      	sub	sp, #12
   83c4c:	af00      	add	r7, sp, #0
   83c4e:	6078      	str	r0, [r7, #4]
   83c50:	687b      	ldr	r3, [r7, #4]
   83c52:	2b07      	cmp	r3, #7
   83c54:	d823      	bhi.n	83c9e <osc_get_rate+0x56>
   83c56:	a201      	add	r2, pc, #4	; (adr r2, 83c5c <osc_get_rate+0x14>)
   83c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c5c:	00083c7d 	.word	0x00083c7d
   83c60:	00083c83 	.word	0x00083c83
   83c64:	00083c87 	.word	0x00083c87
   83c68:	00083c8b 	.word	0x00083c8b
   83c6c:	00083c8f 	.word	0x00083c8f
   83c70:	00083c93 	.word	0x00083c93
   83c74:	00083c97 	.word	0x00083c97
   83c78:	00083c9b 	.word	0x00083c9b
		return OSC_SLCK_32K_RC_HZ;
   83c7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83c80:	e00e      	b.n	83ca0 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   83c82:	2300      	movs	r3, #0
   83c84:	e00c      	b.n	83ca0 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   83c86:	2300      	movs	r3, #0
   83c88:	e00a      	b.n	83ca0 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83c8a:	4b08      	ldr	r3, [pc, #32]	; (83cac <osc_get_rate+0x64>)
   83c8c:	e008      	b.n	83ca0 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83c8e:	4b08      	ldr	r3, [pc, #32]	; (83cb0 <osc_get_rate+0x68>)
   83c90:	e006      	b.n	83ca0 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   83c92:	4b08      	ldr	r3, [pc, #32]	; (83cb4 <osc_get_rate+0x6c>)
   83c94:	e004      	b.n	83ca0 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   83c96:	4b07      	ldr	r3, [pc, #28]	; (83cb4 <osc_get_rate+0x6c>)
   83c98:	e002      	b.n	83ca0 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83c9a:	4b06      	ldr	r3, [pc, #24]	; (83cb4 <osc_get_rate+0x6c>)
   83c9c:	e000      	b.n	83ca0 <osc_get_rate+0x58>
	return 0;
   83c9e:	2300      	movs	r3, #0
}
   83ca0:	4618      	mov	r0, r3
   83ca2:	370c      	adds	r7, #12
   83ca4:	46bd      	mov	sp, r7
   83ca6:	bc80      	pop	{r7}
   83ca8:	4770      	bx	lr
   83caa:	bf00      	nop
   83cac:	003d0900 	.word	0x003d0900
   83cb0:	007a1200 	.word	0x007a1200
   83cb4:	00b71b00 	.word	0x00b71b00

00083cb8 <osc_wait_ready>:
{
   83cb8:	b580      	push	{r7, lr}
   83cba:	b082      	sub	sp, #8
   83cbc:	af00      	add	r7, sp, #0
   83cbe:	4603      	mov	r3, r0
   83cc0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83cc2:	bf00      	nop
   83cc4:	79fb      	ldrb	r3, [r7, #7]
   83cc6:	4618      	mov	r0, r3
   83cc8:	4b06      	ldr	r3, [pc, #24]	; (83ce4 <osc_wait_ready+0x2c>)
   83cca:	4798      	blx	r3
   83ccc:	4603      	mov	r3, r0
   83cce:	f083 0301 	eor.w	r3, r3, #1
   83cd2:	b2db      	uxtb	r3, r3
   83cd4:	2b00      	cmp	r3, #0
   83cd6:	d1f5      	bne.n	83cc4 <osc_wait_ready+0xc>
}
   83cd8:	bf00      	nop
   83cda:	bf00      	nop
   83cdc:	3708      	adds	r7, #8
   83cde:	46bd      	mov	sp, r7
   83ce0:	bd80      	pop	{r7, pc}
   83ce2:	bf00      	nop
   83ce4:	00083bc5 	.word	0x00083bc5

00083ce8 <pll_config_init>:
{
   83ce8:	b580      	push	{r7, lr}
   83cea:	b086      	sub	sp, #24
   83cec:	af00      	add	r7, sp, #0
   83cee:	60f8      	str	r0, [r7, #12]
   83cf0:	607a      	str	r2, [r7, #4]
   83cf2:	603b      	str	r3, [r7, #0]
   83cf4:	460b      	mov	r3, r1
   83cf6:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83cf8:	687b      	ldr	r3, [r7, #4]
   83cfa:	2b00      	cmp	r3, #0
   83cfc:	d107      	bne.n	83d0e <pll_config_init+0x26>
   83cfe:	683b      	ldr	r3, [r7, #0]
   83d00:	2b00      	cmp	r3, #0
   83d02:	d104      	bne.n	83d0e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83d04:	68fb      	ldr	r3, [r7, #12]
   83d06:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83d0a:	601a      	str	r2, [r3, #0]
   83d0c:	e01a      	b.n	83d44 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   83d0e:	7afb      	ldrb	r3, [r7, #11]
   83d10:	4618      	mov	r0, r3
   83d12:	4b0e      	ldr	r3, [pc, #56]	; (83d4c <pll_config_init+0x64>)
   83d14:	4798      	blx	r3
   83d16:	4602      	mov	r2, r0
   83d18:	687b      	ldr	r3, [r7, #4]
   83d1a:	fbb2 f3f3 	udiv	r3, r2, r3
   83d1e:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83d20:	697b      	ldr	r3, [r7, #20]
   83d22:	683a      	ldr	r2, [r7, #0]
   83d24:	fb02 f303 	mul.w	r3, r2, r3
   83d28:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83d2a:	683b      	ldr	r3, [r7, #0]
   83d2c:	3b01      	subs	r3, #1
   83d2e:	041a      	lsls	r2, r3, #16
   83d30:	4b07      	ldr	r3, [pc, #28]	; (83d50 <pll_config_init+0x68>)
   83d32:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83d34:	687a      	ldr	r2, [r7, #4]
   83d36:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83d38:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83d3a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83d3e:	68fb      	ldr	r3, [r7, #12]
   83d40:	601a      	str	r2, [r3, #0]
}
   83d42:	bf00      	nop
   83d44:	bf00      	nop
   83d46:	3718      	adds	r7, #24
   83d48:	46bd      	mov	sp, r7
   83d4a:	bd80      	pop	{r7, pc}
   83d4c:	00083c49 	.word	0x00083c49
   83d50:	07ff0000 	.word	0x07ff0000

00083d54 <pll_enable>:
{
   83d54:	b580      	push	{r7, lr}
   83d56:	b082      	sub	sp, #8
   83d58:	af00      	add	r7, sp, #0
   83d5a:	6078      	str	r0, [r7, #4]
   83d5c:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   83d5e:	683b      	ldr	r3, [r7, #0]
   83d60:	2b00      	cmp	r3, #0
   83d62:	d108      	bne.n	83d76 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83d64:	4b09      	ldr	r3, [pc, #36]	; (83d8c <pll_enable+0x38>)
   83d66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83d68:	687b      	ldr	r3, [r7, #4]
   83d6a:	681b      	ldr	r3, [r3, #0]
   83d6c:	4a08      	ldr	r2, [pc, #32]	; (83d90 <pll_enable+0x3c>)
   83d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83d72:	6293      	str	r3, [r2, #40]	; 0x28
}
   83d74:	e005      	b.n	83d82 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83d76:	687b      	ldr	r3, [r7, #4]
   83d78:	681b      	ldr	r3, [r3, #0]
   83d7a:	4a05      	ldr	r2, [pc, #20]	; (83d90 <pll_enable+0x3c>)
   83d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83d80:	61d3      	str	r3, [r2, #28]
}
   83d82:	bf00      	nop
   83d84:	3708      	adds	r7, #8
   83d86:	46bd      	mov	sp, r7
   83d88:	bd80      	pop	{r7, pc}
   83d8a:	bf00      	nop
   83d8c:	00083101 	.word	0x00083101
   83d90:	400e0400 	.word	0x400e0400

00083d94 <pll_is_locked>:
{
   83d94:	b580      	push	{r7, lr}
   83d96:	b082      	sub	sp, #8
   83d98:	af00      	add	r7, sp, #0
   83d9a:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83d9c:	687b      	ldr	r3, [r7, #4]
   83d9e:	2b00      	cmp	r3, #0
   83da0:	d103      	bne.n	83daa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83da2:	4b05      	ldr	r3, [pc, #20]	; (83db8 <pll_is_locked+0x24>)
   83da4:	4798      	blx	r3
   83da6:	4603      	mov	r3, r0
   83da8:	e002      	b.n	83db0 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83daa:	4b04      	ldr	r3, [pc, #16]	; (83dbc <pll_is_locked+0x28>)
   83dac:	4798      	blx	r3
   83dae:	4603      	mov	r3, r0
}
   83db0:	4618      	mov	r0, r3
   83db2:	3708      	adds	r7, #8
   83db4:	46bd      	mov	sp, r7
   83db6:	bd80      	pop	{r7, pc}
   83db8:	00083119 	.word	0x00083119
   83dbc:	0008314d 	.word	0x0008314d

00083dc0 <pll_enable_source>:
{
   83dc0:	b580      	push	{r7, lr}
   83dc2:	b082      	sub	sp, #8
   83dc4:	af00      	add	r7, sp, #0
   83dc6:	4603      	mov	r3, r0
   83dc8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83dca:	79fb      	ldrb	r3, [r7, #7]
   83dcc:	3b03      	subs	r3, #3
   83dce:	2b04      	cmp	r3, #4
   83dd0:	d808      	bhi.n	83de4 <pll_enable_source+0x24>
		osc_enable(e_src);
   83dd2:	79fb      	ldrb	r3, [r7, #7]
   83dd4:	4618      	mov	r0, r3
   83dd6:	4b06      	ldr	r3, [pc, #24]	; (83df0 <pll_enable_source+0x30>)
   83dd8:	4798      	blx	r3
		osc_wait_ready(e_src);
   83dda:	79fb      	ldrb	r3, [r7, #7]
   83ddc:	4618      	mov	r0, r3
   83dde:	4b05      	ldr	r3, [pc, #20]	; (83df4 <pll_enable_source+0x34>)
   83de0:	4798      	blx	r3
		break;
   83de2:	e000      	b.n	83de6 <pll_enable_source+0x26>
		break;
   83de4:	bf00      	nop
}
   83de6:	bf00      	nop
   83de8:	3708      	adds	r7, #8
   83dea:	46bd      	mov	sp, r7
   83dec:	bd80      	pop	{r7, pc}
   83dee:	bf00      	nop
   83df0:	00083b41 	.word	0x00083b41
   83df4:	00083cb9 	.word	0x00083cb9

00083df8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83df8:	b580      	push	{r7, lr}
   83dfa:	b082      	sub	sp, #8
   83dfc:	af00      	add	r7, sp, #0
   83dfe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83e00:	bf00      	nop
   83e02:	6878      	ldr	r0, [r7, #4]
   83e04:	4b04      	ldr	r3, [pc, #16]	; (83e18 <pll_wait_for_lock+0x20>)
   83e06:	4798      	blx	r3
   83e08:	4603      	mov	r3, r0
   83e0a:	2b00      	cmp	r3, #0
   83e0c:	d0f9      	beq.n	83e02 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83e0e:	2300      	movs	r3, #0
}
   83e10:	4618      	mov	r0, r3
   83e12:	3708      	adds	r7, #8
   83e14:	46bd      	mov	sp, r7
   83e16:	bd80      	pop	{r7, pc}
   83e18:	00083d95 	.word	0x00083d95

00083e1c <sysclk_get_main_hz>:
{
   83e1c:	b580      	push	{r7, lr}
   83e1e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83e20:	2006      	movs	r0, #6
   83e22:	4b03      	ldr	r3, [pc, #12]	; (83e30 <sysclk_get_main_hz+0x14>)
   83e24:	4798      	blx	r3
   83e26:	4603      	mov	r3, r0
   83e28:	011b      	lsls	r3, r3, #4
}
   83e2a:	4618      	mov	r0, r3
   83e2c:	bd80      	pop	{r7, pc}
   83e2e:	bf00      	nop
   83e30:	00083c49 	.word	0x00083c49

00083e34 <sysclk_get_cpu_hz>:
{
   83e34:	b580      	push	{r7, lr}
   83e36:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83e38:	4b02      	ldr	r3, [pc, #8]	; (83e44 <sysclk_get_cpu_hz+0x10>)
   83e3a:	4798      	blx	r3
   83e3c:	4603      	mov	r3, r0
   83e3e:	085b      	lsrs	r3, r3, #1
}
   83e40:	4618      	mov	r0, r3
   83e42:	bd80      	pop	{r7, pc}
   83e44:	00083e1d 	.word	0x00083e1d

00083e48 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83e48:	b590      	push	{r4, r7, lr}
   83e4a:	b083      	sub	sp, #12
   83e4c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83e4e:	2006      	movs	r0, #6
   83e50:	4b09      	ldr	r3, [pc, #36]	; (83e78 <sysclk_enable_usb+0x30>)
   83e52:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83e54:	1d38      	adds	r0, r7, #4
   83e56:	2300      	movs	r3, #0
   83e58:	2200      	movs	r2, #0
   83e5a:	2106      	movs	r1, #6
   83e5c:	4c07      	ldr	r4, [pc, #28]	; (83e7c <sysclk_enable_usb+0x34>)
   83e5e:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83e60:	1d3b      	adds	r3, r7, #4
   83e62:	2101      	movs	r1, #1
   83e64:	4618      	mov	r0, r3
   83e66:	4b06      	ldr	r3, [pc, #24]	; (83e80 <sysclk_enable_usb+0x38>)
   83e68:	4798      	blx	r3
	pll_wait_for_lock(1);
   83e6a:	2001      	movs	r0, #1
   83e6c:	4b05      	ldr	r3, [pc, #20]	; (83e84 <sysclk_enable_usb+0x3c>)
   83e6e:	4798      	blx	r3
}
   83e70:	bf00      	nop
   83e72:	370c      	adds	r7, #12
   83e74:	46bd      	mov	sp, r7
   83e76:	bd90      	pop	{r4, r7, pc}
   83e78:	00083dc1 	.word	0x00083dc1
   83e7c:	00083ce9 	.word	0x00083ce9
   83e80:	00083d55 	.word	0x00083d55
   83e84:	00083df9 	.word	0x00083df9

00083e88 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83e88:	b590      	push	{r4, r7, lr}
   83e8a:	b083      	sub	sp, #12
   83e8c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83e8e:	4816      	ldr	r0, [pc, #88]	; (83ee8 <sysclk_init+0x60>)
   83e90:	4b16      	ldr	r3, [pc, #88]	; (83eec <sysclk_init+0x64>)
   83e92:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83e94:	2006      	movs	r0, #6
   83e96:	4b16      	ldr	r3, [pc, #88]	; (83ef0 <sysclk_init+0x68>)
   83e98:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83e9a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83e9e:	4b15      	ldr	r3, [pc, #84]	; (83ef4 <sysclk_init+0x6c>)
   83ea0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83ea2:	bf00      	nop
   83ea4:	4b14      	ldr	r3, [pc, #80]	; (83ef8 <sysclk_init+0x70>)
   83ea6:	4798      	blx	r3
   83ea8:	4603      	mov	r3, r0
   83eaa:	2b00      	cmp	r3, #0
   83eac:	d0fa      	beq.n	83ea4 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83eae:	1d38      	adds	r0, r7, #4
   83eb0:	2310      	movs	r3, #16
   83eb2:	2201      	movs	r2, #1
   83eb4:	2106      	movs	r1, #6
   83eb6:	4c11      	ldr	r4, [pc, #68]	; (83efc <sysclk_init+0x74>)
   83eb8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83eba:	1d3b      	adds	r3, r7, #4
   83ebc:	2100      	movs	r1, #0
   83ebe:	4618      	mov	r0, r3
   83ec0:	4b0f      	ldr	r3, [pc, #60]	; (83f00 <sysclk_init+0x78>)
   83ec2:	4798      	blx	r3
		pll_wait_for_lock(0);
   83ec4:	2000      	movs	r0, #0
   83ec6:	4b0f      	ldr	r3, [pc, #60]	; (83f04 <sysclk_init+0x7c>)
   83ec8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83eca:	2010      	movs	r0, #16
   83ecc:	4b0e      	ldr	r3, [pc, #56]	; (83f08 <sysclk_init+0x80>)
   83ece:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83ed0:	4b0e      	ldr	r3, [pc, #56]	; (83f0c <sysclk_init+0x84>)
   83ed2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83ed4:	4b0e      	ldr	r3, [pc, #56]	; (83f10 <sysclk_init+0x88>)
   83ed6:	4798      	blx	r3
   83ed8:	4603      	mov	r3, r0
   83eda:	4618      	mov	r0, r3
   83edc:	4b03      	ldr	r3, [pc, #12]	; (83eec <sysclk_init+0x64>)
   83ede:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83ee0:	bf00      	nop
   83ee2:	370c      	adds	r7, #12
   83ee4:	46bd      	mov	sp, r7
   83ee6:	bd90      	pop	{r4, r7, pc}
   83ee8:	05b8d800 	.word	0x05b8d800
   83eec:	200001bd 	.word	0x200001bd
   83ef0:	00083dc1 	.word	0x00083dc1
   83ef4:	000830c1 	.word	0x000830c1
   83ef8:	000830a9 	.word	0x000830a9
   83efc:	00083ce9 	.word	0x00083ce9
   83f00:	00083d55 	.word	0x00083d55
   83f04:	00083df9 	.word	0x00083df9
   83f08:	00082e95 	.word	0x00082e95
   83f0c:	00083f15 	.word	0x00083f15
   83f10:	00083e35 	.word	0x00083e35

00083f14 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83f14:	b480      	push	{r7}
   83f16:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83f18:	4b58      	ldr	r3, [pc, #352]	; (8407c <SystemCoreClockUpdate+0x168>)
   83f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83f1c:	f003 0303 	and.w	r3, r3, #3
   83f20:	2b03      	cmp	r3, #3
   83f22:	f200 808c 	bhi.w	8403e <SystemCoreClockUpdate+0x12a>
   83f26:	2b02      	cmp	r3, #2
   83f28:	d23f      	bcs.n	83faa <SystemCoreClockUpdate+0x96>
   83f2a:	2b00      	cmp	r3, #0
   83f2c:	d002      	beq.n	83f34 <SystemCoreClockUpdate+0x20>
   83f2e:	2b01      	cmp	r3, #1
   83f30:	d010      	beq.n	83f54 <SystemCoreClockUpdate+0x40>
   83f32:	e084      	b.n	8403e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83f34:	4b52      	ldr	r3, [pc, #328]	; (84080 <SystemCoreClockUpdate+0x16c>)
   83f36:	695b      	ldr	r3, [r3, #20]
   83f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83f3c:	2b00      	cmp	r3, #0
   83f3e:	d004      	beq.n	83f4a <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83f40:	4b50      	ldr	r3, [pc, #320]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83f46:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83f48:	e079      	b.n	8403e <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83f4a:	4b4e      	ldr	r3, [pc, #312]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f4c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83f50:	601a      	str	r2, [r3, #0]
		break;
   83f52:	e074      	b.n	8403e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83f54:	4b49      	ldr	r3, [pc, #292]	; (8407c <SystemCoreClockUpdate+0x168>)
   83f56:	6a1b      	ldr	r3, [r3, #32]
   83f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83f5c:	2b00      	cmp	r3, #0
   83f5e:	d003      	beq.n	83f68 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83f60:	4b48      	ldr	r3, [pc, #288]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f62:	4a49      	ldr	r2, [pc, #292]	; (84088 <SystemCoreClockUpdate+0x174>)
   83f64:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83f66:	e06a      	b.n	8403e <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83f68:	4b46      	ldr	r3, [pc, #280]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f6a:	4a48      	ldr	r2, [pc, #288]	; (8408c <SystemCoreClockUpdate+0x178>)
   83f6c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83f6e:	4b43      	ldr	r3, [pc, #268]	; (8407c <SystemCoreClockUpdate+0x168>)
   83f70:	6a1b      	ldr	r3, [r3, #32]
   83f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83f76:	2b20      	cmp	r3, #32
   83f78:	d00b      	beq.n	83f92 <SystemCoreClockUpdate+0x7e>
   83f7a:	2b20      	cmp	r3, #32
   83f7c:	d811      	bhi.n	83fa2 <SystemCoreClockUpdate+0x8e>
   83f7e:	2b00      	cmp	r3, #0
   83f80:	d011      	beq.n	83fa6 <SystemCoreClockUpdate+0x92>
   83f82:	2b10      	cmp	r3, #16
   83f84:	d10d      	bne.n	83fa2 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   83f86:	4b3f      	ldr	r3, [pc, #252]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f88:	681b      	ldr	r3, [r3, #0]
   83f8a:	005b      	lsls	r3, r3, #1
   83f8c:	4a3d      	ldr	r2, [pc, #244]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f8e:	6013      	str	r3, [r2, #0]
				break;
   83f90:	e00a      	b.n	83fa8 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   83f92:	4b3c      	ldr	r3, [pc, #240]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f94:	681a      	ldr	r2, [r3, #0]
   83f96:	4613      	mov	r3, r2
   83f98:	005b      	lsls	r3, r3, #1
   83f9a:	4413      	add	r3, r2
   83f9c:	4a39      	ldr	r2, [pc, #228]	; (84084 <SystemCoreClockUpdate+0x170>)
   83f9e:	6013      	str	r3, [r2, #0]
				break;
   83fa0:	e002      	b.n	83fa8 <SystemCoreClockUpdate+0x94>
				break;
   83fa2:	bf00      	nop
   83fa4:	e04b      	b.n	8403e <SystemCoreClockUpdate+0x12a>
				break;
   83fa6:	bf00      	nop
		break;
   83fa8:	e049      	b.n	8403e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83faa:	4b34      	ldr	r3, [pc, #208]	; (8407c <SystemCoreClockUpdate+0x168>)
   83fac:	6a1b      	ldr	r3, [r3, #32]
   83fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83fb2:	2b00      	cmp	r3, #0
   83fb4:	d003      	beq.n	83fbe <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83fb6:	4b33      	ldr	r3, [pc, #204]	; (84084 <SystemCoreClockUpdate+0x170>)
   83fb8:	4a33      	ldr	r2, [pc, #204]	; (84088 <SystemCoreClockUpdate+0x174>)
   83fba:	601a      	str	r2, [r3, #0]
   83fbc:	e01f      	b.n	83ffe <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83fbe:	4b31      	ldr	r3, [pc, #196]	; (84084 <SystemCoreClockUpdate+0x170>)
   83fc0:	4a32      	ldr	r2, [pc, #200]	; (8408c <SystemCoreClockUpdate+0x178>)
   83fc2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83fc4:	4b2d      	ldr	r3, [pc, #180]	; (8407c <SystemCoreClockUpdate+0x168>)
   83fc6:	6a1b      	ldr	r3, [r3, #32]
   83fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83fcc:	2b20      	cmp	r3, #32
   83fce:	d00b      	beq.n	83fe8 <SystemCoreClockUpdate+0xd4>
   83fd0:	2b20      	cmp	r3, #32
   83fd2:	d811      	bhi.n	83ff8 <SystemCoreClockUpdate+0xe4>
   83fd4:	2b00      	cmp	r3, #0
   83fd6:	d011      	beq.n	83ffc <SystemCoreClockUpdate+0xe8>
   83fd8:	2b10      	cmp	r3, #16
   83fda:	d10d      	bne.n	83ff8 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83fdc:	4b29      	ldr	r3, [pc, #164]	; (84084 <SystemCoreClockUpdate+0x170>)
   83fde:	681b      	ldr	r3, [r3, #0]
   83fe0:	005b      	lsls	r3, r3, #1
   83fe2:	4a28      	ldr	r2, [pc, #160]	; (84084 <SystemCoreClockUpdate+0x170>)
   83fe4:	6013      	str	r3, [r2, #0]
				break;
   83fe6:	e00a      	b.n	83ffe <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83fe8:	4b26      	ldr	r3, [pc, #152]	; (84084 <SystemCoreClockUpdate+0x170>)
   83fea:	681a      	ldr	r2, [r3, #0]
   83fec:	4613      	mov	r3, r2
   83fee:	005b      	lsls	r3, r3, #1
   83ff0:	4413      	add	r3, r2
   83ff2:	4a24      	ldr	r2, [pc, #144]	; (84084 <SystemCoreClockUpdate+0x170>)
   83ff4:	6013      	str	r3, [r2, #0]
				break;
   83ff6:	e002      	b.n	83ffe <SystemCoreClockUpdate+0xea>
			default:
				break;
   83ff8:	bf00      	nop
   83ffa:	e000      	b.n	83ffe <SystemCoreClockUpdate+0xea>
				break;
   83ffc:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83ffe:	4b1f      	ldr	r3, [pc, #124]	; (8407c <SystemCoreClockUpdate+0x168>)
   84000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84002:	f003 0303 	and.w	r3, r3, #3
   84006:	2b02      	cmp	r3, #2
   84008:	d115      	bne.n	84036 <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8400a:	4b1c      	ldr	r3, [pc, #112]	; (8407c <SystemCoreClockUpdate+0x168>)
   8400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8400e:	0c1b      	lsrs	r3, r3, #16
   84010:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   84014:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84016:	4a1b      	ldr	r2, [pc, #108]	; (84084 <SystemCoreClockUpdate+0x170>)
   84018:	6812      	ldr	r2, [r2, #0]
   8401a:	fb02 f303 	mul.w	r3, r2, r3
   8401e:	4a19      	ldr	r2, [pc, #100]	; (84084 <SystemCoreClockUpdate+0x170>)
   84020:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84022:	4b16      	ldr	r3, [pc, #88]	; (8407c <SystemCoreClockUpdate+0x168>)
   84024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84026:	b2db      	uxtb	r3, r3
   84028:	4a16      	ldr	r2, [pc, #88]	; (84084 <SystemCoreClockUpdate+0x170>)
   8402a:	6812      	ldr	r2, [r2, #0]
   8402c:	fbb2 f3f3 	udiv	r3, r2, r3
   84030:	4a14      	ldr	r2, [pc, #80]	; (84084 <SystemCoreClockUpdate+0x170>)
   84032:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   84034:	e002      	b.n	8403c <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   84036:	4b13      	ldr	r3, [pc, #76]	; (84084 <SystemCoreClockUpdate+0x170>)
   84038:	4a15      	ldr	r2, [pc, #84]	; (84090 <SystemCoreClockUpdate+0x17c>)
   8403a:	601a      	str	r2, [r3, #0]
		break;
   8403c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8403e:	4b0f      	ldr	r3, [pc, #60]	; (8407c <SystemCoreClockUpdate+0x168>)
   84040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84042:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84046:	2b70      	cmp	r3, #112	; 0x70
   84048:	d108      	bne.n	8405c <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   8404a:	4b0e      	ldr	r3, [pc, #56]	; (84084 <SystemCoreClockUpdate+0x170>)
   8404c:	681b      	ldr	r3, [r3, #0]
   8404e:	4a11      	ldr	r2, [pc, #68]	; (84094 <SystemCoreClockUpdate+0x180>)
   84050:	fba2 2303 	umull	r2, r3, r2, r3
   84054:	085b      	lsrs	r3, r3, #1
   84056:	4a0b      	ldr	r2, [pc, #44]	; (84084 <SystemCoreClockUpdate+0x170>)
   84058:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8405a:	e00a      	b.n	84072 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8405c:	4b07      	ldr	r3, [pc, #28]	; (8407c <SystemCoreClockUpdate+0x168>)
   8405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84060:	091b      	lsrs	r3, r3, #4
   84062:	f003 0307 	and.w	r3, r3, #7
   84066:	4a07      	ldr	r2, [pc, #28]	; (84084 <SystemCoreClockUpdate+0x170>)
   84068:	6812      	ldr	r2, [r2, #0]
   8406a:	fa22 f303 	lsr.w	r3, r2, r3
   8406e:	4a05      	ldr	r2, [pc, #20]	; (84084 <SystemCoreClockUpdate+0x170>)
   84070:	6013      	str	r3, [r2, #0]
}
   84072:	bf00      	nop
   84074:	46bd      	mov	sp, r7
   84076:	bc80      	pop	{r7}
   84078:	4770      	bx	lr
   8407a:	bf00      	nop
   8407c:	400e0400 	.word	0x400e0400
   84080:	400e1210 	.word	0x400e1210
   84084:	20000288 	.word	0x20000288
   84088:	00b71b00 	.word	0x00b71b00
   8408c:	003d0900 	.word	0x003d0900
   84090:	0e4e1c00 	.word	0x0e4e1c00
   84094:	aaaaaaab 	.word	0xaaaaaaab

00084098 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   84098:	b480      	push	{r7}
   8409a:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   8409c:	4b02      	ldr	r3, [pc, #8]	; (840a8 <udc_get_string_serial_name+0x10>)
	}
   8409e:	4618      	mov	r0, r3
   840a0:	46bd      	mov	sp, r7
   840a2:	bc80      	pop	{r7}
   840a4:	4770      	bx	lr
   840a6:	bf00      	nop
   840a8:	2000025c 	.word	0x2000025c

000840ac <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   840ac:	b480      	push	{r7}
   840ae:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   840b0:	4b02      	ldr	r3, [pc, #8]	; (840bc <udc_get_interface_desc+0x10>)
   840b2:	681b      	ldr	r3, [r3, #0]
}
   840b4:	4618      	mov	r0, r3
   840b6:	46bd      	mov	sp, r7
   840b8:	bc80      	pop	{r7}
   840ba:	4770      	bx	lr
   840bc:	20001604 	.word	0x20001604

000840c0 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   840c0:	b480      	push	{r7}
   840c2:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   840c4:	4b06      	ldr	r3, [pc, #24]	; (840e0 <udc_get_eof_conf+0x20>)
   840c6:	681b      	ldr	r3, [r3, #0]
   840c8:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   840ca:	4a05      	ldr	r2, [pc, #20]	; (840e0 <udc_get_eof_conf+0x20>)
   840cc:	6812      	ldr	r2, [r2, #0]
   840ce:	6812      	ldr	r2, [r2, #0]
   840d0:	8852      	ldrh	r2, [r2, #2]
   840d2:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   840d4:	4413      	add	r3, r2
}
   840d6:	4618      	mov	r0, r3
   840d8:	46bd      	mov	sp, r7
   840da:	bc80      	pop	{r7}
   840dc:	4770      	bx	lr
   840de:	bf00      	nop
   840e0:	20001600 	.word	0x20001600

000840e4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   840e4:	b580      	push	{r7, lr}
   840e6:	b084      	sub	sp, #16
   840e8:	af00      	add	r7, sp, #0
   840ea:	6078      	str	r0, [r7, #4]
   840ec:	460b      	mov	r3, r1
   840ee:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   840f0:	4b12      	ldr	r3, [pc, #72]	; (8413c <udc_next_desc_in_iface+0x58>)
   840f2:	4798      	blx	r3
   840f4:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   840f6:	687b      	ldr	r3, [r7, #4]
   840f8:	781b      	ldrb	r3, [r3, #0]
   840fa:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   840fc:	687b      	ldr	r3, [r7, #4]
   840fe:	4413      	add	r3, r2
   84100:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   84102:	e010      	b.n	84126 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84104:	687b      	ldr	r3, [r7, #4]
   84106:	785b      	ldrb	r3, [r3, #1]
   84108:	2b04      	cmp	r3, #4
   8410a:	d011      	beq.n	84130 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8410c:	687b      	ldr	r3, [r7, #4]
   8410e:	785b      	ldrb	r3, [r3, #1]
   84110:	78fa      	ldrb	r2, [r7, #3]
   84112:	429a      	cmp	r2, r3
   84114:	d101      	bne.n	8411a <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   84116:	687b      	ldr	r3, [r7, #4]
   84118:	e00c      	b.n	84134 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8411a:	687b      	ldr	r3, [r7, #4]
   8411c:	781b      	ldrb	r3, [r3, #0]
   8411e:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84120:	687b      	ldr	r3, [r7, #4]
   84122:	4413      	add	r3, r2
   84124:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   84126:	68fa      	ldr	r2, [r7, #12]
   84128:	687b      	ldr	r3, [r7, #4]
   8412a:	429a      	cmp	r2, r3
   8412c:	d8ea      	bhi.n	84104 <udc_next_desc_in_iface+0x20>
   8412e:	e000      	b.n	84132 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   84130:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   84132:	2300      	movs	r3, #0
}
   84134:	4618      	mov	r0, r3
   84136:	3710      	adds	r7, #16
   84138:	46bd      	mov	sp, r7
   8413a:	bd80      	pop	{r7, pc}
   8413c:	000840c1 	.word	0x000840c1

00084140 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   84140:	b580      	push	{r7, lr}
   84142:	b084      	sub	sp, #16
   84144:	af00      	add	r7, sp, #0
   84146:	4603      	mov	r3, r0
   84148:	460a      	mov	r2, r1
   8414a:	71fb      	strb	r3, [r7, #7]
   8414c:	4613      	mov	r3, r2
   8414e:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   84150:	4b1e      	ldr	r3, [pc, #120]	; (841cc <udc_update_iface_desc+0x8c>)
   84152:	781b      	ldrb	r3, [r3, #0]
   84154:	2b00      	cmp	r3, #0
   84156:	d101      	bne.n	8415c <udc_update_iface_desc+0x1c>
		return false;
   84158:	2300      	movs	r3, #0
   8415a:	e032      	b.n	841c2 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8415c:	4b1c      	ldr	r3, [pc, #112]	; (841d0 <udc_update_iface_desc+0x90>)
   8415e:	681b      	ldr	r3, [r3, #0]
   84160:	681b      	ldr	r3, [r3, #0]
   84162:	791b      	ldrb	r3, [r3, #4]
   84164:	79fa      	ldrb	r2, [r7, #7]
   84166:	429a      	cmp	r2, r3
   84168:	d301      	bcc.n	8416e <udc_update_iface_desc+0x2e>
		return false;
   8416a:	2300      	movs	r3, #0
   8416c:	e029      	b.n	841c2 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8416e:	4b18      	ldr	r3, [pc, #96]	; (841d0 <udc_update_iface_desc+0x90>)
   84170:	681b      	ldr	r3, [r3, #0]
   84172:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84174:	4a17      	ldr	r2, [pc, #92]	; (841d4 <udc_update_iface_desc+0x94>)
   84176:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   84178:	4b17      	ldr	r3, [pc, #92]	; (841d8 <udc_update_iface_desc+0x98>)
   8417a:	4798      	blx	r3
   8417c:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8417e:	e01a      	b.n	841b6 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   84180:	4b14      	ldr	r3, [pc, #80]	; (841d4 <udc_update_iface_desc+0x94>)
   84182:	681b      	ldr	r3, [r3, #0]
   84184:	785b      	ldrb	r3, [r3, #1]
   84186:	2b04      	cmp	r3, #4
   84188:	d10d      	bne.n	841a6 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8418a:	4b12      	ldr	r3, [pc, #72]	; (841d4 <udc_update_iface_desc+0x94>)
   8418c:	681b      	ldr	r3, [r3, #0]
   8418e:	789b      	ldrb	r3, [r3, #2]
   84190:	79fa      	ldrb	r2, [r7, #7]
   84192:	429a      	cmp	r2, r3
   84194:	d107      	bne.n	841a6 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   84196:	4b0f      	ldr	r3, [pc, #60]	; (841d4 <udc_update_iface_desc+0x94>)
   84198:	681b      	ldr	r3, [r3, #0]
   8419a:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8419c:	79ba      	ldrb	r2, [r7, #6]
   8419e:	429a      	cmp	r2, r3
   841a0:	d101      	bne.n	841a6 <udc_update_iface_desc+0x66>
				return true; // Interface found
   841a2:	2301      	movs	r3, #1
   841a4:	e00d      	b.n	841c2 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   841a6:	4b0b      	ldr	r3, [pc, #44]	; (841d4 <udc_update_iface_desc+0x94>)
   841a8:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   841aa:	4a0a      	ldr	r2, [pc, #40]	; (841d4 <udc_update_iface_desc+0x94>)
   841ac:	6812      	ldr	r2, [r2, #0]
   841ae:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   841b0:	4413      	add	r3, r2
   841b2:	4a08      	ldr	r2, [pc, #32]	; (841d4 <udc_update_iface_desc+0x94>)
   841b4:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   841b6:	4b07      	ldr	r3, [pc, #28]	; (841d4 <udc_update_iface_desc+0x94>)
   841b8:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   841ba:	68fa      	ldr	r2, [r7, #12]
   841bc:	429a      	cmp	r2, r3
   841be:	d8df      	bhi.n	84180 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   841c0:	2300      	movs	r3, #0
}
   841c2:	4618      	mov	r0, r3
   841c4:	3710      	adds	r7, #16
   841c6:	46bd      	mov	sp, r7
   841c8:	bd80      	pop	{r7, pc}
   841ca:	bf00      	nop
   841cc:	200015fe 	.word	0x200015fe
   841d0:	20001600 	.word	0x20001600
   841d4:	20001604 	.word	0x20001604
   841d8:	000840c1 	.word	0x000840c1

000841dc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   841dc:	b580      	push	{r7, lr}
   841de:	b084      	sub	sp, #16
   841e0:	af00      	add	r7, sp, #0
   841e2:	4603      	mov	r3, r0
   841e4:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   841e6:	79fb      	ldrb	r3, [r7, #7]
   841e8:	2100      	movs	r1, #0
   841ea:	4618      	mov	r0, r3
   841ec:	4b1e      	ldr	r3, [pc, #120]	; (84268 <udc_iface_disable+0x8c>)
   841ee:	4798      	blx	r3
   841f0:	4603      	mov	r3, r0
   841f2:	f083 0301 	eor.w	r3, r3, #1
   841f6:	b2db      	uxtb	r3, r3
   841f8:	2b00      	cmp	r3, #0
   841fa:	d001      	beq.n	84200 <udc_iface_disable+0x24>
		return false;
   841fc:	2300      	movs	r3, #0
   841fe:	e02f      	b.n	84260 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84200:	4b1a      	ldr	r3, [pc, #104]	; (8426c <udc_iface_disable+0x90>)
   84202:	681b      	ldr	r3, [r3, #0]
   84204:	685a      	ldr	r2, [r3, #4]
   84206:	79fb      	ldrb	r3, [r7, #7]
   84208:	009b      	lsls	r3, r3, #2
   8420a:	4413      	add	r3, r2
   8420c:	681b      	ldr	r3, [r3, #0]
   8420e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84210:	68bb      	ldr	r3, [r7, #8]
   84212:	68db      	ldr	r3, [r3, #12]
   84214:	4798      	blx	r3
   84216:	4603      	mov	r3, r0
   84218:	461a      	mov	r2, r3
   8421a:	79fb      	ldrb	r3, [r7, #7]
   8421c:	4611      	mov	r1, r2
   8421e:	4618      	mov	r0, r3
   84220:	4b11      	ldr	r3, [pc, #68]	; (84268 <udc_iface_disable+0x8c>)
   84222:	4798      	blx	r3
   84224:	4603      	mov	r3, r0
   84226:	f083 0301 	eor.w	r3, r3, #1
   8422a:	b2db      	uxtb	r3, r3
   8422c:	2b00      	cmp	r3, #0
   8422e:	d001      	beq.n	84234 <udc_iface_disable+0x58>
		return false;
   84230:	2300      	movs	r3, #0
   84232:	e015      	b.n	84260 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84234:	4b0e      	ldr	r3, [pc, #56]	; (84270 <udc_iface_disable+0x94>)
   84236:	681b      	ldr	r3, [r3, #0]
   84238:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8423a:	2105      	movs	r1, #5
   8423c:	68f8      	ldr	r0, [r7, #12]
   8423e:	4b0d      	ldr	r3, [pc, #52]	; (84274 <udc_iface_disable+0x98>)
   84240:	4798      	blx	r3
   84242:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   84244:	68fb      	ldr	r3, [r7, #12]
   84246:	2b00      	cmp	r3, #0
   84248:	d005      	beq.n	84256 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8424a:	68fb      	ldr	r3, [r7, #12]
   8424c:	789b      	ldrb	r3, [r3, #2]
   8424e:	4618      	mov	r0, r3
   84250:	4b09      	ldr	r3, [pc, #36]	; (84278 <udc_iface_disable+0x9c>)
   84252:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84254:	e7f1      	b.n	8423a <udc_iface_disable+0x5e>
				break;
   84256:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   84258:	68bb      	ldr	r3, [r7, #8]
   8425a:	685b      	ldr	r3, [r3, #4]
   8425c:	4798      	blx	r3
	return true;
   8425e:	2301      	movs	r3, #1
}
   84260:	4618      	mov	r0, r3
   84262:	3710      	adds	r7, #16
   84264:	46bd      	mov	sp, r7
   84266:	bd80      	pop	{r7, pc}
   84268:	00084141 	.word	0x00084141
   8426c:	20001600 	.word	0x20001600
   84270:	20001604 	.word	0x20001604
   84274:	000840e5 	.word	0x000840e5
   84278:	00086579 	.word	0x00086579

0008427c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8427c:	b580      	push	{r7, lr}
   8427e:	b084      	sub	sp, #16
   84280:	af00      	add	r7, sp, #0
   84282:	4603      	mov	r3, r0
   84284:	460a      	mov	r2, r1
   84286:	71fb      	strb	r3, [r7, #7]
   84288:	4613      	mov	r3, r2
   8428a:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8428c:	79ba      	ldrb	r2, [r7, #6]
   8428e:	79fb      	ldrb	r3, [r7, #7]
   84290:	4611      	mov	r1, r2
   84292:	4618      	mov	r0, r3
   84294:	4b1a      	ldr	r3, [pc, #104]	; (84300 <udc_iface_enable+0x84>)
   84296:	4798      	blx	r3
   84298:	4603      	mov	r3, r0
   8429a:	f083 0301 	eor.w	r3, r3, #1
   8429e:	b2db      	uxtb	r3, r3
   842a0:	2b00      	cmp	r3, #0
   842a2:	d001      	beq.n	842a8 <udc_iface_enable+0x2c>
		return false;
   842a4:	2300      	movs	r3, #0
   842a6:	e027      	b.n	842f8 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   842a8:	4b16      	ldr	r3, [pc, #88]	; (84304 <udc_iface_enable+0x88>)
   842aa:	681b      	ldr	r3, [r3, #0]
   842ac:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   842ae:	2105      	movs	r1, #5
   842b0:	68f8      	ldr	r0, [r7, #12]
   842b2:	4b15      	ldr	r3, [pc, #84]	; (84308 <udc_iface_enable+0x8c>)
   842b4:	4798      	blx	r3
   842b6:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   842b8:	68fb      	ldr	r3, [r7, #12]
   842ba:	2b00      	cmp	r3, #0
   842bc:	d011      	beq.n	842e2 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   842be:	68fb      	ldr	r3, [r7, #12]
   842c0:	7898      	ldrb	r0, [r3, #2]
   842c2:	68fb      	ldr	r3, [r7, #12]
   842c4:	78d9      	ldrb	r1, [r3, #3]
   842c6:	68fb      	ldr	r3, [r7, #12]
   842c8:	889b      	ldrh	r3, [r3, #4]
   842ca:	b29b      	uxth	r3, r3
   842cc:	461a      	mov	r2, r3
   842ce:	4b0f      	ldr	r3, [pc, #60]	; (8430c <udc_iface_enable+0x90>)
   842d0:	4798      	blx	r3
   842d2:	4603      	mov	r3, r0
   842d4:	f083 0301 	eor.w	r3, r3, #1
   842d8:	b2db      	uxtb	r3, r3
   842da:	2b00      	cmp	r3, #0
   842dc:	d0e7      	beq.n	842ae <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   842de:	2300      	movs	r3, #0
   842e0:	e00a      	b.n	842f8 <udc_iface_enable+0x7c>
			break;
   842e2:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   842e4:	4b0a      	ldr	r3, [pc, #40]	; (84310 <udc_iface_enable+0x94>)
   842e6:	681b      	ldr	r3, [r3, #0]
   842e8:	685a      	ldr	r2, [r3, #4]
   842ea:	79fb      	ldrb	r3, [r7, #7]
   842ec:	009b      	lsls	r3, r3, #2
   842ee:	4413      	add	r3, r2
   842f0:	681b      	ldr	r3, [r3, #0]
   842f2:	681b      	ldr	r3, [r3, #0]
   842f4:	4798      	blx	r3
   842f6:	4603      	mov	r3, r0
}
   842f8:	4618      	mov	r0, r3
   842fa:	3710      	adds	r7, #16
   842fc:	46bd      	mov	sp, r7
   842fe:	bd80      	pop	{r7, pc}
   84300:	00084141 	.word	0x00084141
   84304:	20001604 	.word	0x20001604
   84308:	000840e5 	.word	0x000840e5
   8430c:	000861b9 	.word	0x000861b9
   84310:	20001600 	.word	0x20001600

00084314 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   84314:	b580      	push	{r7, lr}
   84316:	af00      	add	r7, sp, #0
	udd_enable();
   84318:	4b01      	ldr	r3, [pc, #4]	; (84320 <udc_start+0xc>)
   8431a:	4798      	blx	r3
}
   8431c:	bf00      	nop
   8431e:	bd80      	pop	{r7, pc}
   84320:	00085f39 	.word	0x00085f39

00084324 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   84324:	b580      	push	{r7, lr}
   84326:	b082      	sub	sp, #8
   84328:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8432a:	4b0f      	ldr	r3, [pc, #60]	; (84368 <udc_reset+0x44>)
   8432c:	781b      	ldrb	r3, [r3, #0]
   8432e:	2b00      	cmp	r3, #0
   84330:	d010      	beq.n	84354 <udc_reset+0x30>
		for (iface_num = 0;
   84332:	2300      	movs	r3, #0
   84334:	71fb      	strb	r3, [r7, #7]
   84336:	e006      	b.n	84346 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   84338:	79fb      	ldrb	r3, [r7, #7]
   8433a:	4618      	mov	r0, r3
   8433c:	4b0b      	ldr	r3, [pc, #44]	; (8436c <udc_reset+0x48>)
   8433e:	4798      	blx	r3
				iface_num++) {
   84340:	79fb      	ldrb	r3, [r7, #7]
   84342:	3301      	adds	r3, #1
   84344:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84346:	4b0a      	ldr	r3, [pc, #40]	; (84370 <udc_reset+0x4c>)
   84348:	681b      	ldr	r3, [r3, #0]
   8434a:	681b      	ldr	r3, [r3, #0]
   8434c:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   8434e:	79fa      	ldrb	r2, [r7, #7]
   84350:	429a      	cmp	r2, r3
   84352:	d3f1      	bcc.n	84338 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   84354:	4b04      	ldr	r3, [pc, #16]	; (84368 <udc_reset+0x44>)
   84356:	2200      	movs	r2, #0
   84358:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   8435a:	4b06      	ldr	r3, [pc, #24]	; (84374 <udc_reset+0x50>)
   8435c:	2200      	movs	r2, #0
   8435e:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   84360:	bf00      	nop
   84362:	3708      	adds	r7, #8
   84364:	46bd      	mov	sp, r7
   84366:	bd80      	pop	{r7, pc}
   84368:	200015fe 	.word	0x200015fe
   8436c:	000841dd 	.word	0x000841dd
   84370:	20001600 	.word	0x20001600
   84374:	200015fc 	.word	0x200015fc

00084378 <udc_sof_notify>:

void udc_sof_notify(void)
{
   84378:	b580      	push	{r7, lr}
   8437a:	b082      	sub	sp, #8
   8437c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8437e:	4b14      	ldr	r3, [pc, #80]	; (843d0 <udc_sof_notify+0x58>)
   84380:	781b      	ldrb	r3, [r3, #0]
   84382:	2b00      	cmp	r3, #0
   84384:	d01f      	beq.n	843c6 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   84386:	2300      	movs	r3, #0
   84388:	71fb      	strb	r3, [r7, #7]
   8438a:	e015      	b.n	843b8 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8438c:	4b11      	ldr	r3, [pc, #68]	; (843d4 <udc_sof_notify+0x5c>)
   8438e:	681b      	ldr	r3, [r3, #0]
   84390:	685a      	ldr	r2, [r3, #4]
   84392:	79fb      	ldrb	r3, [r7, #7]
   84394:	009b      	lsls	r3, r3, #2
   84396:	4413      	add	r3, r2
   84398:	681b      	ldr	r3, [r3, #0]
   8439a:	691b      	ldr	r3, [r3, #16]
   8439c:	2b00      	cmp	r3, #0
   8439e:	d008      	beq.n	843b2 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   843a0:	4b0c      	ldr	r3, [pc, #48]	; (843d4 <udc_sof_notify+0x5c>)
   843a2:	681b      	ldr	r3, [r3, #0]
   843a4:	685a      	ldr	r2, [r3, #4]
   843a6:	79fb      	ldrb	r3, [r7, #7]
   843a8:	009b      	lsls	r3, r3, #2
   843aa:	4413      	add	r3, r2
   843ac:	681b      	ldr	r3, [r3, #0]
   843ae:	691b      	ldr	r3, [r3, #16]
   843b0:	4798      	blx	r3
				iface_num++) {
   843b2:	79fb      	ldrb	r3, [r7, #7]
   843b4:	3301      	adds	r3, #1
   843b6:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   843b8:	4b06      	ldr	r3, [pc, #24]	; (843d4 <udc_sof_notify+0x5c>)
   843ba:	681b      	ldr	r3, [r3, #0]
   843bc:	681b      	ldr	r3, [r3, #0]
   843be:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   843c0:	79fa      	ldrb	r2, [r7, #7]
   843c2:	429a      	cmp	r2, r3
   843c4:	d3e2      	bcc.n	8438c <udc_sof_notify+0x14>
			}
		}
	}
}
   843c6:	bf00      	nop
   843c8:	3708      	adds	r7, #8
   843ca:	46bd      	mov	sp, r7
   843cc:	bd80      	pop	{r7, pc}
   843ce:	bf00      	nop
   843d0:	200015fe 	.word	0x200015fe
   843d4:	20001600 	.word	0x20001600

000843d8 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   843d8:	b580      	push	{r7, lr}
   843da:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   843dc:	4b06      	ldr	r3, [pc, #24]	; (843f8 <udc_req_std_dev_get_status+0x20>)
   843de:	88db      	ldrh	r3, [r3, #6]
   843e0:	2b02      	cmp	r3, #2
   843e2:	d001      	beq.n	843e8 <udc_req_std_dev_get_status+0x10>
		return false;
   843e4:	2300      	movs	r3, #0
   843e6:	e004      	b.n	843f2 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   843e8:	2102      	movs	r1, #2
   843ea:	4804      	ldr	r0, [pc, #16]	; (843fc <udc_req_std_dev_get_status+0x24>)
   843ec:	4b04      	ldr	r3, [pc, #16]	; (84400 <udc_req_std_dev_get_status+0x28>)
   843ee:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   843f0:	2301      	movs	r3, #1
}
   843f2:	4618      	mov	r0, r3
   843f4:	bd80      	pop	{r7, pc}
   843f6:	bf00      	nop
   843f8:	2000241c 	.word	0x2000241c
   843fc:	200015fc 	.word	0x200015fc
   84400:	00086191 	.word	0x00086191

00084404 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   84404:	b580      	push	{r7, lr}
   84406:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84408:	4b0b      	ldr	r3, [pc, #44]	; (84438 <udc_req_std_ep_get_status+0x34>)
   8440a:	88db      	ldrh	r3, [r3, #6]
   8440c:	2b02      	cmp	r3, #2
   8440e:	d001      	beq.n	84414 <udc_req_std_ep_get_status+0x10>
		return false;
   84410:	2300      	movs	r3, #0
   84412:	e00e      	b.n	84432 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84414:	4b08      	ldr	r3, [pc, #32]	; (84438 <udc_req_std_ep_get_status+0x34>)
   84416:	889b      	ldrh	r3, [r3, #4]
   84418:	b2db      	uxtb	r3, r3
   8441a:	4618      	mov	r0, r3
   8441c:	4b07      	ldr	r3, [pc, #28]	; (8443c <udc_req_std_ep_get_status+0x38>)
   8441e:	4798      	blx	r3
   84420:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84422:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84424:	4b06      	ldr	r3, [pc, #24]	; (84440 <udc_req_std_ep_get_status+0x3c>)
   84426:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84428:	2102      	movs	r1, #2
   8442a:	4805      	ldr	r0, [pc, #20]	; (84440 <udc_req_std_ep_get_status+0x3c>)
   8442c:	4b05      	ldr	r3, [pc, #20]	; (84444 <udc_req_std_ep_get_status+0x40>)
   8442e:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   84430:	2301      	movs	r3, #1
}
   84432:	4618      	mov	r0, r3
   84434:	bd80      	pop	{r7, pc}
   84436:	bf00      	nop
   84438:	2000241c 	.word	0x2000241c
   8443c:	000865f9 	.word	0x000865f9
   84440:	20001608 	.word	0x20001608
   84444:	00086191 	.word	0x00086191

00084448 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   84448:	b480      	push	{r7}
   8444a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8444c:	4b0b      	ldr	r3, [pc, #44]	; (8447c <udc_req_std_dev_clear_feature+0x34>)
   8444e:	88db      	ldrh	r3, [r3, #6]
   84450:	2b00      	cmp	r3, #0
   84452:	d001      	beq.n	84458 <udc_req_std_dev_clear_feature+0x10>
		return false;
   84454:	2300      	movs	r3, #0
   84456:	e00d      	b.n	84474 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84458:	4b08      	ldr	r3, [pc, #32]	; (8447c <udc_req_std_dev_clear_feature+0x34>)
   8445a:	885b      	ldrh	r3, [r3, #2]
   8445c:	2b01      	cmp	r3, #1
   8445e:	d108      	bne.n	84472 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84460:	4b07      	ldr	r3, [pc, #28]	; (84480 <udc_req_std_dev_clear_feature+0x38>)
   84462:	881b      	ldrh	r3, [r3, #0]
   84464:	f023 0302 	bic.w	r3, r3, #2
   84468:	b29a      	uxth	r2, r3
   8446a:	4b05      	ldr	r3, [pc, #20]	; (84480 <udc_req_std_dev_clear_feature+0x38>)
   8446c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   8446e:	2301      	movs	r3, #1
   84470:	e000      	b.n	84474 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   84472:	2300      	movs	r3, #0
}
   84474:	4618      	mov	r0, r3
   84476:	46bd      	mov	sp, r7
   84478:	bc80      	pop	{r7}
   8447a:	4770      	bx	lr
   8447c:	2000241c 	.word	0x2000241c
   84480:	200015fc 	.word	0x200015fc

00084484 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84484:	b580      	push	{r7, lr}
   84486:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84488:	4b0a      	ldr	r3, [pc, #40]	; (844b4 <udc_req_std_ep_clear_feature+0x30>)
   8448a:	88db      	ldrh	r3, [r3, #6]
   8448c:	2b00      	cmp	r3, #0
   8448e:	d001      	beq.n	84494 <udc_req_std_ep_clear_feature+0x10>
		return false;
   84490:	2300      	movs	r3, #0
   84492:	e00c      	b.n	844ae <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84494:	4b07      	ldr	r3, [pc, #28]	; (844b4 <udc_req_std_ep_clear_feature+0x30>)
   84496:	885b      	ldrh	r3, [r3, #2]
   84498:	2b00      	cmp	r3, #0
   8449a:	d107      	bne.n	844ac <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8449c:	4b05      	ldr	r3, [pc, #20]	; (844b4 <udc_req_std_ep_clear_feature+0x30>)
   8449e:	889b      	ldrh	r3, [r3, #4]
   844a0:	b2db      	uxtb	r3, r3
   844a2:	4618      	mov	r0, r3
   844a4:	4b04      	ldr	r3, [pc, #16]	; (844b8 <udc_req_std_ep_clear_feature+0x34>)
   844a6:	4798      	blx	r3
   844a8:	4603      	mov	r3, r0
   844aa:	e000      	b.n	844ae <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   844ac:	2300      	movs	r3, #0
}
   844ae:	4618      	mov	r0, r3
   844b0:	bd80      	pop	{r7, pc}
   844b2:	bf00      	nop
   844b4:	2000241c 	.word	0x2000241c
   844b8:	00086775 	.word	0x00086775

000844bc <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   844bc:	b580      	push	{r7, lr}
   844be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   844c0:	4b26      	ldr	r3, [pc, #152]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   844c2:	88db      	ldrh	r3, [r3, #6]
   844c4:	2b00      	cmp	r3, #0
   844c6:	d001      	beq.n	844cc <udc_req_std_dev_set_feature+0x10>
		return false;
   844c8:	2300      	movs	r3, #0
   844ca:	e045      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   844cc:	4b23      	ldr	r3, [pc, #140]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   844ce:	885b      	ldrh	r3, [r3, #2]
   844d0:	2b01      	cmp	r3, #1
   844d2:	d002      	beq.n	844da <udc_req_std_dev_set_feature+0x1e>
   844d4:	2b02      	cmp	r3, #2
   844d6:	d002      	beq.n	844de <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   844d8:	e03d      	b.n	84556 <udc_req_std_dev_set_feature+0x9a>
		return false;
   844da:	2300      	movs	r3, #0
   844dc:	e03c      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   844de:	4b20      	ldr	r3, [pc, #128]	; (84560 <udc_req_std_dev_set_feature+0xa4>)
   844e0:	4798      	blx	r3
   844e2:	4603      	mov	r3, r0
   844e4:	f083 0301 	eor.w	r3, r3, #1
   844e8:	b2db      	uxtb	r3, r3
   844ea:	2b00      	cmp	r3, #0
   844ec:	d130      	bne.n	84550 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   844ee:	4b1b      	ldr	r3, [pc, #108]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   844f0:	889b      	ldrh	r3, [r3, #4]
   844f2:	b2db      	uxtb	r3, r3
   844f4:	2b00      	cmp	r3, #0
   844f6:	d12d      	bne.n	84554 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   844f8:	4b1a      	ldr	r3, [pc, #104]	; (84564 <udc_req_std_dev_set_feature+0xa8>)
   844fa:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   844fc:	4b17      	ldr	r3, [pc, #92]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   844fe:	889b      	ldrh	r3, [r3, #4]
   84500:	0a1b      	lsrs	r3, r3, #8
   84502:	b29b      	uxth	r3, r3
   84504:	b2db      	uxtb	r3, r3
   84506:	3b01      	subs	r3, #1
   84508:	2b03      	cmp	r3, #3
   8450a:	d81f      	bhi.n	8454c <udc_req_std_dev_set_feature+0x90>
   8450c:	a201      	add	r2, pc, #4	; (adr r2, 84514 <udc_req_std_dev_set_feature+0x58>)
   8450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84512:	bf00      	nop
   84514:	00084525 	.word	0x00084525
   84518:	0008452f 	.word	0x0008452f
   8451c:	00084539 	.word	0x00084539
   84520:	00084543 	.word	0x00084543
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84524:	4b0d      	ldr	r3, [pc, #52]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   84526:	4a10      	ldr	r2, [pc, #64]	; (84568 <udc_req_std_dev_set_feature+0xac>)
   84528:	611a      	str	r2, [r3, #16]
			return true;
   8452a:	2301      	movs	r3, #1
   8452c:	e014      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8452e:	4b0b      	ldr	r3, [pc, #44]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   84530:	4a0e      	ldr	r2, [pc, #56]	; (8456c <udc_req_std_dev_set_feature+0xb0>)
   84532:	611a      	str	r2, [r3, #16]
			return true;
   84534:	2301      	movs	r3, #1
   84536:	e00f      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84538:	4b08      	ldr	r3, [pc, #32]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   8453a:	4a0d      	ldr	r2, [pc, #52]	; (84570 <udc_req_std_dev_set_feature+0xb4>)
   8453c:	611a      	str	r2, [r3, #16]
			return true;
   8453e:	2301      	movs	r3, #1
   84540:	e00a      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84542:	4b06      	ldr	r3, [pc, #24]	; (8455c <udc_req_std_dev_set_feature+0xa0>)
   84544:	4a0b      	ldr	r2, [pc, #44]	; (84574 <udc_req_std_dev_set_feature+0xb8>)
   84546:	611a      	str	r2, [r3, #16]
			return true;
   84548:	2301      	movs	r3, #1
   8454a:	e005      	b.n	84558 <udc_req_std_dev_set_feature+0x9c>
			break;
   8454c:	bf00      	nop
		break;
   8454e:	e002      	b.n	84556 <udc_req_std_dev_set_feature+0x9a>
			break;
   84550:	bf00      	nop
   84552:	e000      	b.n	84556 <udc_req_std_dev_set_feature+0x9a>
			break;
   84554:	bf00      	nop
	}
	return false;
   84556:	2300      	movs	r3, #0
}
   84558:	4618      	mov	r0, r3
   8455a:	bd80      	pop	{r7, pc}
   8455c:	2000241c 	.word	0x2000241c
   84560:	000860d1 	.word	0x000860d1
   84564:	00084325 	.word	0x00084325
   84568:	00086a35 	.word	0x00086a35
   8456c:	00086a69 	.word	0x00086a69
   84570:	00086a9d 	.word	0x00086a9d
   84574:	00086ac1 	.word	0x00086ac1

00084578 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84578:	b580      	push	{r7, lr}
   8457a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8457c:	4b0d      	ldr	r3, [pc, #52]	; (845b4 <udc_req_std_ep_set_feature+0x3c>)
   8457e:	88db      	ldrh	r3, [r3, #6]
   84580:	2b00      	cmp	r3, #0
   84582:	d001      	beq.n	84588 <udc_req_std_ep_set_feature+0x10>
		return false;
   84584:	2300      	movs	r3, #0
   84586:	e012      	b.n	845ae <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84588:	4b0a      	ldr	r3, [pc, #40]	; (845b4 <udc_req_std_ep_set_feature+0x3c>)
   8458a:	885b      	ldrh	r3, [r3, #2]
   8458c:	2b00      	cmp	r3, #0
   8458e:	d10d      	bne.n	845ac <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84590:	4b08      	ldr	r3, [pc, #32]	; (845b4 <udc_req_std_ep_set_feature+0x3c>)
   84592:	889b      	ldrh	r3, [r3, #4]
   84594:	b2db      	uxtb	r3, r3
   84596:	4618      	mov	r0, r3
   84598:	4b07      	ldr	r3, [pc, #28]	; (845b8 <udc_req_std_ep_set_feature+0x40>)
   8459a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8459c:	4b05      	ldr	r3, [pc, #20]	; (845b4 <udc_req_std_ep_set_feature+0x3c>)
   8459e:	889b      	ldrh	r3, [r3, #4]
   845a0:	b2db      	uxtb	r3, r3
   845a2:	4618      	mov	r0, r3
   845a4:	4b05      	ldr	r3, [pc, #20]	; (845bc <udc_req_std_ep_set_feature+0x44>)
   845a6:	4798      	blx	r3
   845a8:	4603      	mov	r3, r0
   845aa:	e000      	b.n	845ae <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   845ac:	2300      	movs	r3, #0
}
   845ae:	4618      	mov	r0, r3
   845b0:	bd80      	pop	{r7, pc}
   845b2:	bf00      	nop
   845b4:	2000241c 	.word	0x2000241c
   845b8:	000869ad 	.word	0x000869ad
   845bc:	00086661 	.word	0x00086661

000845c0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   845c0:	b580      	push	{r7, lr}
   845c2:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   845c4:	4b05      	ldr	r3, [pc, #20]	; (845dc <udc_valid_address+0x1c>)
   845c6:	885b      	ldrh	r3, [r3, #2]
   845c8:	b2db      	uxtb	r3, r3
   845ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   845ce:	b2db      	uxtb	r3, r3
   845d0:	4618      	mov	r0, r3
   845d2:	4b03      	ldr	r3, [pc, #12]	; (845e0 <udc_valid_address+0x20>)
   845d4:	4798      	blx	r3
}
   845d6:	bf00      	nop
   845d8:	bd80      	pop	{r7, pc}
   845da:	bf00      	nop
   845dc:	2000241c 	.word	0x2000241c
   845e0:	000860f5 	.word	0x000860f5

000845e4 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   845e4:	b480      	push	{r7}
   845e6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   845e8:	4b06      	ldr	r3, [pc, #24]	; (84604 <udc_req_std_dev_set_address+0x20>)
   845ea:	88db      	ldrh	r3, [r3, #6]
   845ec:	2b00      	cmp	r3, #0
   845ee:	d001      	beq.n	845f4 <udc_req_std_dev_set_address+0x10>
		return false;
   845f0:	2300      	movs	r3, #0
   845f2:	e003      	b.n	845fc <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   845f4:	4b03      	ldr	r3, [pc, #12]	; (84604 <udc_req_std_dev_set_address+0x20>)
   845f6:	4a04      	ldr	r2, [pc, #16]	; (84608 <udc_req_std_dev_set_address+0x24>)
   845f8:	611a      	str	r2, [r3, #16]
	return true;
   845fa:	2301      	movs	r3, #1
}
   845fc:	4618      	mov	r0, r3
   845fe:	46bd      	mov	sp, r7
   84600:	bc80      	pop	{r7}
   84602:	4770      	bx	lr
   84604:	2000241c 	.word	0x2000241c
   84608:	000845c1 	.word	0x000845c1

0008460c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   8460c:	b580      	push	{r7, lr}
   8460e:	b084      	sub	sp, #16
   84610:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   84612:	2300      	movs	r3, #0
   84614:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84616:	4b29      	ldr	r3, [pc, #164]	; (846bc <udc_req_std_dev_get_str_desc+0xb0>)
   84618:	885b      	ldrh	r3, [r3, #2]
   8461a:	b2db      	uxtb	r3, r3
   8461c:	2b03      	cmp	r3, #3
   8461e:	d820      	bhi.n	84662 <udc_req_std_dev_get_str_desc+0x56>
   84620:	a201      	add	r2, pc, #4	; (adr r2, 84628 <udc_req_std_dev_get_str_desc+0x1c>)
   84622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84626:	bf00      	nop
   84628:	00084639 	.word	0x00084639
   8462c:	00084643 	.word	0x00084643
   84630:	0008464d 	.word	0x0008464d
   84634:	00084657 	.word	0x00084657
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84638:	2104      	movs	r1, #4
   8463a:	4821      	ldr	r0, [pc, #132]	; (846c0 <udc_req_std_dev_get_str_desc+0xb4>)
   8463c:	4b21      	ldr	r3, [pc, #132]	; (846c4 <udc_req_std_dev_get_str_desc+0xb8>)
   8463e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   84640:	e011      	b.n	84666 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84642:	2315      	movs	r3, #21
   84644:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   84646:	4b20      	ldr	r3, [pc, #128]	; (846c8 <udc_req_std_dev_get_str_desc+0xbc>)
   84648:	60bb      	str	r3, [r7, #8]
		break;
   8464a:	e00c      	b.n	84666 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8464c:	2313      	movs	r3, #19
   8464e:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   84650:	4b1e      	ldr	r3, [pc, #120]	; (846cc <udc_req_std_dev_get_str_desc+0xc0>)
   84652:	60bb      	str	r3, [r7, #8]
		break;
   84654:	e007      	b.n	84666 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84656:	2320      	movs	r3, #32
   84658:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   8465a:	4b1d      	ldr	r3, [pc, #116]	; (846d0 <udc_req_std_dev_get_str_desc+0xc4>)
   8465c:	4798      	blx	r3
   8465e:	60b8      	str	r0, [r7, #8]
		break;
   84660:	e001      	b.n	84666 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   84662:	2300      	movs	r3, #0
   84664:	e026      	b.n	846b4 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84666:	79fb      	ldrb	r3, [r7, #7]
   84668:	2b00      	cmp	r3, #0
   8466a:	d022      	beq.n	846b2 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   8466c:	2300      	movs	r3, #0
   8466e:	73fb      	strb	r3, [r7, #15]
   84670:	e00d      	b.n	8468e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84672:	7bfb      	ldrb	r3, [r7, #15]
   84674:	68ba      	ldr	r2, [r7, #8]
   84676:	4413      	add	r3, r2
   84678:	781a      	ldrb	r2, [r3, #0]
   8467a:	7bfb      	ldrb	r3, [r7, #15]
   8467c:	b291      	uxth	r1, r2
   8467e:	4a15      	ldr	r2, [pc, #84]	; (846d4 <udc_req_std_dev_get_str_desc+0xc8>)
   84680:	005b      	lsls	r3, r3, #1
   84682:	4413      	add	r3, r2
   84684:	460a      	mov	r2, r1
   84686:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84688:	7bfb      	ldrb	r3, [r7, #15]
   8468a:	3301      	adds	r3, #1
   8468c:	73fb      	strb	r3, [r7, #15]
   8468e:	7bfa      	ldrb	r2, [r7, #15]
   84690:	79fb      	ldrb	r3, [r7, #7]
   84692:	429a      	cmp	r2, r3
   84694:	d3ed      	bcc.n	84672 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84696:	79fb      	ldrb	r3, [r7, #7]
   84698:	3301      	adds	r3, #1
   8469a:	b2db      	uxtb	r3, r3
   8469c:	005b      	lsls	r3, r3, #1
   8469e:	b2da      	uxtb	r2, r3
   846a0:	4b0c      	ldr	r3, [pc, #48]	; (846d4 <udc_req_std_dev_get_str_desc+0xc8>)
   846a2:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   846a4:	4b0b      	ldr	r3, [pc, #44]	; (846d4 <udc_req_std_dev_get_str_desc+0xc8>)
   846a6:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   846a8:	b29b      	uxth	r3, r3
   846aa:	4619      	mov	r1, r3
   846ac:	4809      	ldr	r0, [pc, #36]	; (846d4 <udc_req_std_dev_get_str_desc+0xc8>)
   846ae:	4b05      	ldr	r3, [pc, #20]	; (846c4 <udc_req_std_dev_get_str_desc+0xb8>)
   846b0:	4798      	blx	r3
	}

	return true;
   846b2:	2301      	movs	r3, #1
}
   846b4:	4618      	mov	r0, r3
   846b6:	3710      	adds	r7, #16
   846b8:	46bd      	mov	sp, r7
   846ba:	bd80      	pop	{r7, pc}
   846bc:	2000241c 	.word	0x2000241c
   846c0:	2000028c 	.word	0x2000028c
   846c4:	00086191 	.word	0x00086191
   846c8:	20000290 	.word	0x20000290
   846cc:	200002a8 	.word	0x200002a8
   846d0:	00084099 	.word	0x00084099
   846d4:	200002bc 	.word	0x200002bc

000846d8 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH_LOW, WINUSB_PLATFORM_DESCRIPTOR_LENGTH_HIGH, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   846d8:	b580      	push	{r7, lr}
   846da:	b082      	sub	sp, #8
   846dc:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   846de:	4b7f      	ldr	r3, [pc, #508]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   846e0:	885b      	ldrh	r3, [r3, #2]
   846e2:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   846e4:	4b7d      	ldr	r3, [pc, #500]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   846e6:	885b      	ldrh	r3, [r3, #2]
   846e8:	0a1b      	lsrs	r3, r3, #8
   846ea:	b29b      	uxth	r3, r3
   846ec:	b2db      	uxtb	r3, r3
   846ee:	3b01      	subs	r3, #1
   846f0:	2b0e      	cmp	r3, #14
   846f2:	f200 80e0 	bhi.w	848b6 <udc_req_std_dev_get_descriptor+0x1de>
   846f6:	a201      	add	r2, pc, #4	; (adr r2, 846fc <udc_req_std_dev_get_descriptor+0x24>)
   846f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   846fc:	00084739 	.word	0x00084739
   84700:	00084789 	.word	0x00084789
   84704:	000848a3 	.word	0x000848a3
   84708:	000848b7 	.word	0x000848b7
   8470c:	000848b7 	.word	0x000848b7
   84710:	00084803 	.word	0x00084803
   84714:	00084819 	.word	0x00084819
   84718:	000848b7 	.word	0x000848b7
   8471c:	000848b7 	.word	0x000848b7
   84720:	000848b7 	.word	0x000848b7
   84724:	000848b7 	.word	0x000848b7
   84728:	000848b7 	.word	0x000848b7
   8472c:	000848b7 	.word	0x000848b7
   84730:	000848b7 	.word	0x000848b7
   84734:	00084899 	.word	0x00084899
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   84738:	4b69      	ldr	r3, [pc, #420]	; (848e0 <udc_req_std_dev_get_descriptor+0x208>)
   8473a:	4798      	blx	r3
   8473c:	4603      	mov	r3, r0
   8473e:	f083 0301 	eor.w	r3, r3, #1
   84742:	b2db      	uxtb	r3, r3
   84744:	2b00      	cmp	r3, #0
   84746:	d00a      	beq.n	8475e <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   84748:	4b66      	ldr	r3, [pc, #408]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8474a:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   8474c:	4b65      	ldr	r3, [pc, #404]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8474e:	689b      	ldr	r3, [r3, #8]
   84750:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84752:	b29b      	uxth	r3, r3
   84754:	4619      	mov	r1, r3
   84756:	4610      	mov	r0, r2
   84758:	4b63      	ldr	r3, [pc, #396]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   8475a:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   8475c:	e0ae      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8475e:	4b61      	ldr	r3, [pc, #388]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84760:	681b      	ldr	r3, [r3, #0]
   84762:	2200      	movs	r2, #0
   84764:	f042 0210 	orr.w	r2, r2, #16
   84768:	709a      	strb	r2, [r3, #2]
   8476a:	2200      	movs	r2, #0
   8476c:	f042 0202 	orr.w	r2, r2, #2
   84770:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   84772:	4b5c      	ldr	r3, [pc, #368]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84774:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   84776:	4b5b      	ldr	r3, [pc, #364]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84778:	681b      	ldr	r3, [r3, #0]
   8477a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   8477c:	b29b      	uxth	r3, r3
   8477e:	4619      	mov	r1, r3
   84780:	4610      	mov	r0, r2
   84782:	4b59      	ldr	r3, [pc, #356]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   84784:	4798      	blx	r3
		break;
   84786:	e099      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84788:	4b55      	ldr	r3, [pc, #340]	; (848e0 <udc_req_std_dev_get_descriptor+0x208>)
   8478a:	4798      	blx	r3
   8478c:	4603      	mov	r3, r0
   8478e:	2b00      	cmp	r3, #0
   84790:	d019      	beq.n	847c6 <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84792:	4b54      	ldr	r3, [pc, #336]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84794:	689b      	ldr	r3, [r3, #8]
   84796:	7c5b      	ldrb	r3, [r3, #17]
   84798:	79fa      	ldrb	r2, [r7, #7]
   8479a:	429a      	cmp	r2, r3
   8479c:	d301      	bcc.n	847a2 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   8479e:	2300      	movs	r3, #0
   847a0:	e097      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   847a2:	4b50      	ldr	r3, [pc, #320]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   847a4:	691a      	ldr	r2, [r3, #16]
   847a6:	79fb      	ldrb	r3, [r7, #7]
   847a8:	00db      	lsls	r3, r3, #3
   847aa:	4413      	add	r3, r2
   847ac:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   847ae:	4b4d      	ldr	r3, [pc, #308]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   847b0:	691a      	ldr	r2, [r3, #16]
   847b2:	79fb      	ldrb	r3, [r7, #7]
   847b4:	00db      	lsls	r3, r3, #3
   847b6:	4413      	add	r3, r2
   847b8:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   847ba:	885b      	ldrh	r3, [r3, #2]
   847bc:	b29b      	uxth	r3, r3
   847be:	4619      	mov	r1, r3
   847c0:	4b49      	ldr	r3, [pc, #292]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   847c2:	4798      	blx	r3
   847c4:	e018      	b.n	847f8 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   847c6:	4b47      	ldr	r3, [pc, #284]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   847c8:	681b      	ldr	r3, [r3, #0]
   847ca:	7c5b      	ldrb	r3, [r3, #17]
   847cc:	79fa      	ldrb	r2, [r7, #7]
   847ce:	429a      	cmp	r2, r3
   847d0:	d301      	bcc.n	847d6 <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   847d2:	2300      	movs	r3, #0
   847d4:	e07d      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   847d6:	4b43      	ldr	r3, [pc, #268]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   847d8:	685a      	ldr	r2, [r3, #4]
   847da:	79fb      	ldrb	r3, [r7, #7]
   847dc:	00db      	lsls	r3, r3, #3
   847de:	4413      	add	r3, r2
   847e0:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   847e2:	4b40      	ldr	r3, [pc, #256]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   847e4:	685a      	ldr	r2, [r3, #4]
   847e6:	79fb      	ldrb	r3, [r7, #7]
   847e8:	00db      	lsls	r3, r3, #3
   847ea:	4413      	add	r3, r2
   847ec:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   847ee:	885b      	ldrh	r3, [r3, #2]
   847f0:	b29b      	uxth	r3, r3
   847f2:	4619      	mov	r1, r3
   847f4:	4b3c      	ldr	r3, [pc, #240]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   847f6:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   847f8:	4b38      	ldr	r3, [pc, #224]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   847fa:	689b      	ldr	r3, [r3, #8]
   847fc:	2202      	movs	r2, #2
   847fe:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   84800:	e05c      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84802:	4b38      	ldr	r3, [pc, #224]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84804:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   84806:	4b37      	ldr	r3, [pc, #220]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84808:	68db      	ldr	r3, [r3, #12]
   8480a:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8480c:	b29b      	uxth	r3, r3
   8480e:	4619      	mov	r1, r3
   84810:	4610      	mov	r0, r2
   84812:	4b35      	ldr	r3, [pc, #212]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   84814:	4798      	blx	r3
		break;
   84816:	e051      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   84818:	4b31      	ldr	r3, [pc, #196]	; (848e0 <udc_req_std_dev_get_descriptor+0x208>)
   8481a:	4798      	blx	r3
   8481c:	4603      	mov	r3, r0
   8481e:	f083 0301 	eor.w	r3, r3, #1
   84822:	b2db      	uxtb	r3, r3
   84824:	2b00      	cmp	r3, #0
   84826:	d019      	beq.n	8485c <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84828:	4b2e      	ldr	r3, [pc, #184]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8482a:	689b      	ldr	r3, [r3, #8]
   8482c:	7c5b      	ldrb	r3, [r3, #17]
   8482e:	79fa      	ldrb	r2, [r7, #7]
   84830:	429a      	cmp	r2, r3
   84832:	d301      	bcc.n	84838 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   84834:	2300      	movs	r3, #0
   84836:	e04c      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84838:	4b2a      	ldr	r3, [pc, #168]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8483a:	691a      	ldr	r2, [r3, #16]
   8483c:	79fb      	ldrb	r3, [r7, #7]
   8483e:	00db      	lsls	r3, r3, #3
   84840:	4413      	add	r3, r2
   84842:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84844:	4b27      	ldr	r3, [pc, #156]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   84846:	691a      	ldr	r2, [r3, #16]
   84848:	79fb      	ldrb	r3, [r7, #7]
   8484a:	00db      	lsls	r3, r3, #3
   8484c:	4413      	add	r3, r2
   8484e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84850:	885b      	ldrh	r3, [r3, #2]
   84852:	b29b      	uxth	r3, r3
   84854:	4619      	mov	r1, r3
   84856:	4b24      	ldr	r3, [pc, #144]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   84858:	4798      	blx	r3
   8485a:	e018      	b.n	8488e <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8485c:	4b21      	ldr	r3, [pc, #132]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8485e:	681b      	ldr	r3, [r3, #0]
   84860:	7c5b      	ldrb	r3, [r3, #17]
   84862:	79fa      	ldrb	r2, [r7, #7]
   84864:	429a      	cmp	r2, r3
   84866:	d301      	bcc.n	8486c <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   84868:	2300      	movs	r3, #0
   8486a:	e032      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8486c:	4b1d      	ldr	r3, [pc, #116]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8486e:	685a      	ldr	r2, [r3, #4]
   84870:	79fb      	ldrb	r3, [r7, #7]
   84872:	00db      	lsls	r3, r3, #3
   84874:	4413      	add	r3, r2
   84876:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84878:	4b1a      	ldr	r3, [pc, #104]	; (848e4 <udc_req_std_dev_get_descriptor+0x20c>)
   8487a:	685a      	ldr	r2, [r3, #4]
   8487c:	79fb      	ldrb	r3, [r7, #7]
   8487e:	00db      	lsls	r3, r3, #3
   84880:	4413      	add	r3, r2
   84882:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84884:	885b      	ldrh	r3, [r3, #2]
   84886:	b29b      	uxth	r3, r3
   84888:	4619      	mov	r1, r3
   8488a:	4b17      	ldr	r3, [pc, #92]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   8488c:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8488e:	4b13      	ldr	r3, [pc, #76]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   84890:	689b      	ldr	r3, [r3, #8]
   84892:	2207      	movs	r2, #7
   84894:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   84896:	e011      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84898:	2121      	movs	r1, #33	; 0x21
   8489a:	4814      	ldr	r0, [pc, #80]	; (848ec <udc_req_std_dev_get_descriptor+0x214>)
   8489c:	4b12      	ldr	r3, [pc, #72]	; (848e8 <udc_req_std_dev_get_descriptor+0x210>)
   8489e:	4798      	blx	r3
			0x21);
		break;
   848a0:	e00c      	b.n	848bc <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   848a2:	4b13      	ldr	r3, [pc, #76]	; (848f0 <udc_req_std_dev_get_descriptor+0x218>)
   848a4:	4798      	blx	r3
   848a6:	4603      	mov	r3, r0
   848a8:	f083 0301 	eor.w	r3, r3, #1
   848ac:	b2db      	uxtb	r3, r3
   848ae:	2b00      	cmp	r3, #0
   848b0:	d003      	beq.n	848ba <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   848b2:	2300      	movs	r3, #0
   848b4:	e00d      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   848b6:	2300      	movs	r3, #0
   848b8:	e00b      	b.n	848d2 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   848ba:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   848bc:	4b07      	ldr	r3, [pc, #28]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   848be:	88da      	ldrh	r2, [r3, #6]
   848c0:	4b06      	ldr	r3, [pc, #24]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   848c2:	899b      	ldrh	r3, [r3, #12]
   848c4:	429a      	cmp	r2, r3
   848c6:	d203      	bcs.n	848d0 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   848c8:	4b04      	ldr	r3, [pc, #16]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   848ca:	88da      	ldrh	r2, [r3, #6]
   848cc:	4b03      	ldr	r3, [pc, #12]	; (848dc <udc_req_std_dev_get_descriptor+0x204>)
   848ce:	819a      	strh	r2, [r3, #12]
	}
	return true;
   848d0:	2301      	movs	r3, #1
}
   848d2:	4618      	mov	r0, r3
   848d4:	3708      	adds	r7, #8
   848d6:	46bd      	mov	sp, r7
   848d8:	bd80      	pop	{r7, pc}
   848da:	bf00      	nop
   848dc:	2000241c 	.word	0x2000241c
   848e0:	000860d1 	.word	0x000860d1
   848e4:	200004d8 	.word	0x200004d8
   848e8:	00086191 	.word	0x00086191
   848ec:	0008eaac 	.word	0x0008eaac
   848f0:	0008460d 	.word	0x0008460d

000848f4 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   848f4:	b580      	push	{r7, lr}
   848f6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   848f8:	4b06      	ldr	r3, [pc, #24]	; (84914 <udc_req_std_dev_get_configuration+0x20>)
   848fa:	88db      	ldrh	r3, [r3, #6]
   848fc:	2b01      	cmp	r3, #1
   848fe:	d001      	beq.n	84904 <udc_req_std_dev_get_configuration+0x10>
		return false;
   84900:	2300      	movs	r3, #0
   84902:	e004      	b.n	8490e <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   84904:	2101      	movs	r1, #1
   84906:	4804      	ldr	r0, [pc, #16]	; (84918 <udc_req_std_dev_get_configuration+0x24>)
   84908:	4b04      	ldr	r3, [pc, #16]	; (8491c <udc_req_std_dev_get_configuration+0x28>)
   8490a:	4798      	blx	r3
	return true;
   8490c:	2301      	movs	r3, #1
}
   8490e:	4618      	mov	r0, r3
   84910:	bd80      	pop	{r7, pc}
   84912:	bf00      	nop
   84914:	2000241c 	.word	0x2000241c
   84918:	200015fe 	.word	0x200015fe
   8491c:	00086191 	.word	0x00086191

00084920 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   84920:	b580      	push	{r7, lr}
   84922:	b082      	sub	sp, #8
   84924:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   84926:	4b37      	ldr	r3, [pc, #220]	; (84a04 <udc_req_std_dev_set_configuration+0xe4>)
   84928:	88db      	ldrh	r3, [r3, #6]
   8492a:	2b00      	cmp	r3, #0
   8492c:	d001      	beq.n	84932 <udc_req_std_dev_set_configuration+0x12>
		return false;
   8492e:	2300      	movs	r3, #0
   84930:	e063      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   84932:	4b35      	ldr	r3, [pc, #212]	; (84a08 <udc_req_std_dev_set_configuration+0xe8>)
   84934:	4798      	blx	r3
   84936:	4603      	mov	r3, r0
   84938:	2b00      	cmp	r3, #0
   8493a:	d101      	bne.n	84940 <udc_req_std_dev_set_configuration+0x20>
		return false;
   8493c:	2300      	movs	r3, #0
   8493e:	e05c      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84940:	4b32      	ldr	r3, [pc, #200]	; (84a0c <udc_req_std_dev_set_configuration+0xec>)
   84942:	4798      	blx	r3
   84944:	4603      	mov	r3, r0
   84946:	2b00      	cmp	r3, #0
   84948:	d009      	beq.n	8495e <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8494a:	4b2e      	ldr	r3, [pc, #184]	; (84a04 <udc_req_std_dev_set_configuration+0xe4>)
   8494c:	885b      	ldrh	r3, [r3, #2]
   8494e:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84950:	4a2f      	ldr	r2, [pc, #188]	; (84a10 <udc_req_std_dev_set_configuration+0xf0>)
   84952:	6892      	ldr	r2, [r2, #8]
   84954:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84956:	4293      	cmp	r3, r2
   84958:	dd0b      	ble.n	84972 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8495a:	2300      	movs	r3, #0
   8495c:	e04d      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8495e:	4b29      	ldr	r3, [pc, #164]	; (84a04 <udc_req_std_dev_set_configuration+0xe4>)
   84960:	885b      	ldrh	r3, [r3, #2]
   84962:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84964:	4a2a      	ldr	r2, [pc, #168]	; (84a10 <udc_req_std_dev_set_configuration+0xf0>)
   84966:	6812      	ldr	r2, [r2, #0]
   84968:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8496a:	4293      	cmp	r3, r2
   8496c:	dd01      	ble.n	84972 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8496e:	2300      	movs	r3, #0
   84970:	e043      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   84972:	4b28      	ldr	r3, [pc, #160]	; (84a14 <udc_req_std_dev_set_configuration+0xf4>)
   84974:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84976:	4b23      	ldr	r3, [pc, #140]	; (84a04 <udc_req_std_dev_set_configuration+0xe4>)
   84978:	885b      	ldrh	r3, [r3, #2]
   8497a:	b2da      	uxtb	r2, r3
   8497c:	4b26      	ldr	r3, [pc, #152]	; (84a18 <udc_req_std_dev_set_configuration+0xf8>)
   8497e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84980:	4b25      	ldr	r3, [pc, #148]	; (84a18 <udc_req_std_dev_set_configuration+0xf8>)
   84982:	781b      	ldrb	r3, [r3, #0]
   84984:	2b00      	cmp	r3, #0
   84986:	d101      	bne.n	8498c <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84988:	2301      	movs	r3, #1
   8498a:	e036      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8498c:	4b1f      	ldr	r3, [pc, #124]	; (84a0c <udc_req_std_dev_set_configuration+0xec>)
   8498e:	4798      	blx	r3
   84990:	4603      	mov	r3, r0
   84992:	2b00      	cmp	r3, #0
   84994:	d00b      	beq.n	849ae <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84996:	4b1e      	ldr	r3, [pc, #120]	; (84a10 <udc_req_std_dev_set_configuration+0xf0>)
   84998:	691a      	ldr	r2, [r3, #16]
   8499a:	4b1f      	ldr	r3, [pc, #124]	; (84a18 <udc_req_std_dev_set_configuration+0xf8>)
   8499c:	781b      	ldrb	r3, [r3, #0]
   8499e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   849a2:	3b01      	subs	r3, #1
   849a4:	00db      	lsls	r3, r3, #3
   849a6:	4413      	add	r3, r2
   849a8:	4a1c      	ldr	r2, [pc, #112]	; (84a1c <udc_req_std_dev_set_configuration+0xfc>)
   849aa:	6013      	str	r3, [r2, #0]
   849ac:	e00a      	b.n	849c4 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   849ae:	4b18      	ldr	r3, [pc, #96]	; (84a10 <udc_req_std_dev_set_configuration+0xf0>)
   849b0:	685a      	ldr	r2, [r3, #4]
   849b2:	4b19      	ldr	r3, [pc, #100]	; (84a18 <udc_req_std_dev_set_configuration+0xf8>)
   849b4:	781b      	ldrb	r3, [r3, #0]
   849b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   849ba:	3b01      	subs	r3, #1
   849bc:	00db      	lsls	r3, r3, #3
   849be:	4413      	add	r3, r2
   849c0:	4a16      	ldr	r2, [pc, #88]	; (84a1c <udc_req_std_dev_set_configuration+0xfc>)
   849c2:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   849c4:	2300      	movs	r3, #0
   849c6:	71fb      	strb	r3, [r7, #7]
   849c8:	e00f      	b.n	849ea <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   849ca:	79fb      	ldrb	r3, [r7, #7]
   849cc:	2100      	movs	r1, #0
   849ce:	4618      	mov	r0, r3
   849d0:	4b13      	ldr	r3, [pc, #76]	; (84a20 <udc_req_std_dev_set_configuration+0x100>)
   849d2:	4798      	blx	r3
   849d4:	4603      	mov	r3, r0
   849d6:	f083 0301 	eor.w	r3, r3, #1
   849da:	b2db      	uxtb	r3, r3
   849dc:	2b00      	cmp	r3, #0
   849de:	d001      	beq.n	849e4 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   849e0:	2300      	movs	r3, #0
   849e2:	e00a      	b.n	849fa <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   849e4:	79fb      	ldrb	r3, [r7, #7]
   849e6:	3301      	adds	r3, #1
   849e8:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   849ea:	4b0c      	ldr	r3, [pc, #48]	; (84a1c <udc_req_std_dev_set_configuration+0xfc>)
   849ec:	681b      	ldr	r3, [r3, #0]
   849ee:	681b      	ldr	r3, [r3, #0]
   849f0:	791b      	ldrb	r3, [r3, #4]
   849f2:	79fa      	ldrb	r2, [r7, #7]
   849f4:	429a      	cmp	r2, r3
   849f6:	d3e8      	bcc.n	849ca <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   849f8:	2301      	movs	r3, #1
}
   849fa:	4618      	mov	r0, r3
   849fc:	3708      	adds	r7, #8
   849fe:	46bd      	mov	sp, r7
   84a00:	bd80      	pop	{r7, pc}
   84a02:	bf00      	nop
   84a04:	2000241c 	.word	0x2000241c
   84a08:	00086139 	.word	0x00086139
   84a0c:	000860d1 	.word	0x000860d1
   84a10:	200004d8 	.word	0x200004d8
   84a14:	00084325 	.word	0x00084325
   84a18:	200015fe 	.word	0x200015fe
   84a1c:	20001600 	.word	0x20001600
   84a20:	0008427d 	.word	0x0008427d

00084a24 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   84a24:	b580      	push	{r7, lr}
   84a26:	b082      	sub	sp, #8
   84a28:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   84a2a:	4b1e      	ldr	r3, [pc, #120]	; (84aa4 <udc_req_std_iface_get_setting+0x80>)
   84a2c:	88db      	ldrh	r3, [r3, #6]
   84a2e:	2b01      	cmp	r3, #1
   84a30:	d001      	beq.n	84a36 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   84a32:	2300      	movs	r3, #0
   84a34:	e032      	b.n	84a9c <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   84a36:	4b1c      	ldr	r3, [pc, #112]	; (84aa8 <udc_req_std_iface_get_setting+0x84>)
   84a38:	781b      	ldrb	r3, [r3, #0]
   84a3a:	2b00      	cmp	r3, #0
   84a3c:	d101      	bne.n	84a42 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   84a3e:	2300      	movs	r3, #0
   84a40:	e02c      	b.n	84a9c <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84a42:	4b18      	ldr	r3, [pc, #96]	; (84aa4 <udc_req_std_iface_get_setting+0x80>)
   84a44:	889b      	ldrh	r3, [r3, #4]
   84a46:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84a48:	4b18      	ldr	r3, [pc, #96]	; (84aac <udc_req_std_iface_get_setting+0x88>)
   84a4a:	681b      	ldr	r3, [r3, #0]
   84a4c:	681b      	ldr	r3, [r3, #0]
   84a4e:	791b      	ldrb	r3, [r3, #4]
   84a50:	79fa      	ldrb	r2, [r7, #7]
   84a52:	429a      	cmp	r2, r3
   84a54:	d301      	bcc.n	84a5a <udc_req_std_iface_get_setting+0x36>
		return false;
   84a56:	2300      	movs	r3, #0
   84a58:	e020      	b.n	84a9c <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84a5a:	79fb      	ldrb	r3, [r7, #7]
   84a5c:	2100      	movs	r1, #0
   84a5e:	4618      	mov	r0, r3
   84a60:	4b13      	ldr	r3, [pc, #76]	; (84ab0 <udc_req_std_iface_get_setting+0x8c>)
   84a62:	4798      	blx	r3
   84a64:	4603      	mov	r3, r0
   84a66:	f083 0301 	eor.w	r3, r3, #1
   84a6a:	b2db      	uxtb	r3, r3
   84a6c:	2b00      	cmp	r3, #0
   84a6e:	d001      	beq.n	84a74 <udc_req_std_iface_get_setting+0x50>
		return false;
   84a70:	2300      	movs	r3, #0
   84a72:	e013      	b.n	84a9c <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84a74:	4b0d      	ldr	r3, [pc, #52]	; (84aac <udc_req_std_iface_get_setting+0x88>)
   84a76:	681b      	ldr	r3, [r3, #0]
   84a78:	685a      	ldr	r2, [r3, #4]
   84a7a:	79fb      	ldrb	r3, [r7, #7]
   84a7c:	009b      	lsls	r3, r3, #2
   84a7e:	4413      	add	r3, r2
   84a80:	681b      	ldr	r3, [r3, #0]
   84a82:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   84a84:	683b      	ldr	r3, [r7, #0]
   84a86:	68db      	ldr	r3, [r3, #12]
   84a88:	4798      	blx	r3
   84a8a:	4603      	mov	r3, r0
   84a8c:	461a      	mov	r2, r3
   84a8e:	4b09      	ldr	r3, [pc, #36]	; (84ab4 <udc_req_std_iface_get_setting+0x90>)
   84a90:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   84a92:	2101      	movs	r1, #1
   84a94:	4807      	ldr	r0, [pc, #28]	; (84ab4 <udc_req_std_iface_get_setting+0x90>)
   84a96:	4b08      	ldr	r3, [pc, #32]	; (84ab8 <udc_req_std_iface_get_setting+0x94>)
   84a98:	4798      	blx	r3
	return true;
   84a9a:	2301      	movs	r3, #1
}
   84a9c:	4618      	mov	r0, r3
   84a9e:	3708      	adds	r7, #8
   84aa0:	46bd      	mov	sp, r7
   84aa2:	bd80      	pop	{r7, pc}
   84aa4:	2000241c 	.word	0x2000241c
   84aa8:	200015fe 	.word	0x200015fe
   84aac:	20001600 	.word	0x20001600
   84ab0:	00084141 	.word	0x00084141
   84ab4:	2000160a 	.word	0x2000160a
   84ab8:	00086191 	.word	0x00086191

00084abc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84abc:	b580      	push	{r7, lr}
   84abe:	b082      	sub	sp, #8
   84ac0:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   84ac2:	4b14      	ldr	r3, [pc, #80]	; (84b14 <udc_req_std_iface_set_setting+0x58>)
   84ac4:	88db      	ldrh	r3, [r3, #6]
   84ac6:	2b00      	cmp	r3, #0
   84ac8:	d001      	beq.n	84ace <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   84aca:	2300      	movs	r3, #0
   84acc:	e01e      	b.n	84b0c <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   84ace:	4b12      	ldr	r3, [pc, #72]	; (84b18 <udc_req_std_iface_set_setting+0x5c>)
   84ad0:	781b      	ldrb	r3, [r3, #0]
   84ad2:	2b00      	cmp	r3, #0
   84ad4:	d101      	bne.n	84ada <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   84ad6:	2300      	movs	r3, #0
   84ad8:	e018      	b.n	84b0c <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84ada:	4b0e      	ldr	r3, [pc, #56]	; (84b14 <udc_req_std_iface_set_setting+0x58>)
   84adc:	889b      	ldrh	r3, [r3, #4]
   84ade:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84ae0:	4b0c      	ldr	r3, [pc, #48]	; (84b14 <udc_req_std_iface_set_setting+0x58>)
   84ae2:	885b      	ldrh	r3, [r3, #2]
   84ae4:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   84ae6:	79fb      	ldrb	r3, [r7, #7]
   84ae8:	4618      	mov	r0, r3
   84aea:	4b0c      	ldr	r3, [pc, #48]	; (84b1c <udc_req_std_iface_set_setting+0x60>)
   84aec:	4798      	blx	r3
   84aee:	4603      	mov	r3, r0
   84af0:	f083 0301 	eor.w	r3, r3, #1
   84af4:	b2db      	uxtb	r3, r3
   84af6:	2b00      	cmp	r3, #0
   84af8:	d001      	beq.n	84afe <udc_req_std_iface_set_setting+0x42>
		return false;
   84afa:	2300      	movs	r3, #0
   84afc:	e006      	b.n	84b0c <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   84afe:	79ba      	ldrb	r2, [r7, #6]
   84b00:	79fb      	ldrb	r3, [r7, #7]
   84b02:	4611      	mov	r1, r2
   84b04:	4618      	mov	r0, r3
   84b06:	4b06      	ldr	r3, [pc, #24]	; (84b20 <udc_req_std_iface_set_setting+0x64>)
   84b08:	4798      	blx	r3
   84b0a:	4603      	mov	r3, r0
}
   84b0c:	4618      	mov	r0, r3
   84b0e:	3708      	adds	r7, #8
   84b10:	46bd      	mov	sp, r7
   84b12:	bd80      	pop	{r7, pc}
   84b14:	2000241c 	.word	0x2000241c
   84b18:	200015fe 	.word	0x200015fe
   84b1c:	000841dd 	.word	0x000841dd
   84b20:	0008427d 	.word	0x0008427d

00084b24 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   84b24:	b580      	push	{r7, lr}
   84b26:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84b28:	4b55      	ldr	r3, [pc, #340]	; (84c80 <udc_reqstd+0x15c>)
   84b2a:	781b      	ldrb	r3, [r3, #0]
   84b2c:	b25b      	sxtb	r3, r3
   84b2e:	2b00      	cmp	r3, #0
   84b30:	da44      	bge.n	84bbc <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   84b32:	4b53      	ldr	r3, [pc, #332]	; (84c80 <udc_reqstd+0x15c>)
   84b34:	88db      	ldrh	r3, [r3, #6]
   84b36:	2b00      	cmp	r3, #0
   84b38:	d101      	bne.n	84b3e <udc_reqstd+0x1a>
			return false; // Error for USB host
   84b3a:	2300      	movs	r3, #0
   84b3c:	e09d      	b.n	84c7a <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84b3e:	4b50      	ldr	r3, [pc, #320]	; (84c80 <udc_reqstd+0x15c>)
   84b40:	781b      	ldrb	r3, [r3, #0]
   84b42:	f003 031f 	and.w	r3, r3, #31
   84b46:	2b00      	cmp	r3, #0
   84b48:	d116      	bne.n	84b78 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84b4a:	4b4d      	ldr	r3, [pc, #308]	; (84c80 <udc_reqstd+0x15c>)
   84b4c:	785b      	ldrb	r3, [r3, #1]
   84b4e:	2b08      	cmp	r3, #8
   84b50:	d00e      	beq.n	84b70 <udc_reqstd+0x4c>
   84b52:	2b08      	cmp	r3, #8
   84b54:	dc12      	bgt.n	84b7c <udc_reqstd+0x58>
   84b56:	2b00      	cmp	r3, #0
   84b58:	d002      	beq.n	84b60 <udc_reqstd+0x3c>
   84b5a:	2b06      	cmp	r3, #6
   84b5c:	d004      	beq.n	84b68 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   84b5e:	e00d      	b.n	84b7c <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   84b60:	4b48      	ldr	r3, [pc, #288]	; (84c84 <udc_reqstd+0x160>)
   84b62:	4798      	blx	r3
   84b64:	4603      	mov	r3, r0
   84b66:	e088      	b.n	84c7a <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   84b68:	4b47      	ldr	r3, [pc, #284]	; (84c88 <udc_reqstd+0x164>)
   84b6a:	4798      	blx	r3
   84b6c:	4603      	mov	r3, r0
   84b6e:	e084      	b.n	84c7a <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   84b70:	4b46      	ldr	r3, [pc, #280]	; (84c8c <udc_reqstd+0x168>)
   84b72:	4798      	blx	r3
   84b74:	4603      	mov	r3, r0
   84b76:	e080      	b.n	84c7a <udc_reqstd+0x156>
			}
		}
   84b78:	bf00      	nop
   84b7a:	e000      	b.n	84b7e <udc_reqstd+0x5a>
				break;
   84b7c:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84b7e:	4b40      	ldr	r3, [pc, #256]	; (84c80 <udc_reqstd+0x15c>)
   84b80:	781b      	ldrb	r3, [r3, #0]
   84b82:	f003 031f 	and.w	r3, r3, #31
   84b86:	2b01      	cmp	r3, #1
   84b88:	d107      	bne.n	84b9a <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84b8a:	4b3d      	ldr	r3, [pc, #244]	; (84c80 <udc_reqstd+0x15c>)
   84b8c:	785b      	ldrb	r3, [r3, #1]
   84b8e:	2b0a      	cmp	r3, #10
   84b90:	d105      	bne.n	84b9e <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   84b92:	4b3f      	ldr	r3, [pc, #252]	; (84c90 <udc_reqstd+0x16c>)
   84b94:	4798      	blx	r3
   84b96:	4603      	mov	r3, r0
   84b98:	e06f      	b.n	84c7a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84b9a:	bf00      	nop
   84b9c:	e000      	b.n	84ba0 <udc_reqstd+0x7c>
				break;
   84b9e:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84ba0:	4b37      	ldr	r3, [pc, #220]	; (84c80 <udc_reqstd+0x15c>)
   84ba2:	781b      	ldrb	r3, [r3, #0]
   84ba4:	f003 031f 	and.w	r3, r3, #31
   84ba8:	2b02      	cmp	r3, #2
   84baa:	d160      	bne.n	84c6e <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84bac:	4b34      	ldr	r3, [pc, #208]	; (84c80 <udc_reqstd+0x15c>)
   84bae:	785b      	ldrb	r3, [r3, #1]
   84bb0:	2b00      	cmp	r3, #0
   84bb2:	d15e      	bne.n	84c72 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   84bb4:	4b37      	ldr	r3, [pc, #220]	; (84c94 <udc_reqstd+0x170>)
   84bb6:	4798      	blx	r3
   84bb8:	4603      	mov	r3, r0
   84bba:	e05e      	b.n	84c7a <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84bbc:	4b30      	ldr	r3, [pc, #192]	; (84c80 <udc_reqstd+0x15c>)
   84bbe:	781b      	ldrb	r3, [r3, #0]
   84bc0:	f003 031f 	and.w	r3, r3, #31
   84bc4:	2b00      	cmp	r3, #0
   84bc6:	d129      	bne.n	84c1c <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84bc8:	4b2d      	ldr	r3, [pc, #180]	; (84c80 <udc_reqstd+0x15c>)
   84bca:	785b      	ldrb	r3, [r3, #1]
   84bcc:	3b01      	subs	r3, #1
   84bce:	2b08      	cmp	r3, #8
   84bd0:	d826      	bhi.n	84c20 <udc_reqstd+0xfc>
   84bd2:	a201      	add	r2, pc, #4	; (adr r2, 84bd8 <udc_reqstd+0xb4>)
   84bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84bd8:	00084c05 	.word	0x00084c05
   84bdc:	00084c21 	.word	0x00084c21
   84be0:	00084c0d 	.word	0x00084c0d
   84be4:	00084c21 	.word	0x00084c21
   84be8:	00084bfd 	.word	0x00084bfd
   84bec:	00084c21 	.word	0x00084c21
   84bf0:	00084c21 	.word	0x00084c21
   84bf4:	00084c21 	.word	0x00084c21
   84bf8:	00084c15 	.word	0x00084c15
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   84bfc:	4b26      	ldr	r3, [pc, #152]	; (84c98 <udc_reqstd+0x174>)
   84bfe:	4798      	blx	r3
   84c00:	4603      	mov	r3, r0
   84c02:	e03a      	b.n	84c7a <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   84c04:	4b25      	ldr	r3, [pc, #148]	; (84c9c <udc_reqstd+0x178>)
   84c06:	4798      	blx	r3
   84c08:	4603      	mov	r3, r0
   84c0a:	e036      	b.n	84c7a <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   84c0c:	4b24      	ldr	r3, [pc, #144]	; (84ca0 <udc_reqstd+0x17c>)
   84c0e:	4798      	blx	r3
   84c10:	4603      	mov	r3, r0
   84c12:	e032      	b.n	84c7a <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   84c14:	4b23      	ldr	r3, [pc, #140]	; (84ca4 <udc_reqstd+0x180>)
   84c16:	4798      	blx	r3
   84c18:	4603      	mov	r3, r0
   84c1a:	e02e      	b.n	84c7a <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   84c1c:	bf00      	nop
   84c1e:	e000      	b.n	84c22 <udc_reqstd+0xfe>
				break;
   84c20:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84c22:	4b17      	ldr	r3, [pc, #92]	; (84c80 <udc_reqstd+0x15c>)
   84c24:	781b      	ldrb	r3, [r3, #0]
   84c26:	f003 031f 	and.w	r3, r3, #31
   84c2a:	2b01      	cmp	r3, #1
   84c2c:	d107      	bne.n	84c3e <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c2e:	4b14      	ldr	r3, [pc, #80]	; (84c80 <udc_reqstd+0x15c>)
   84c30:	785b      	ldrb	r3, [r3, #1]
   84c32:	2b0b      	cmp	r3, #11
   84c34:	d105      	bne.n	84c42 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   84c36:	4b1c      	ldr	r3, [pc, #112]	; (84ca8 <udc_reqstd+0x184>)
   84c38:	4798      	blx	r3
   84c3a:	4603      	mov	r3, r0
   84c3c:	e01d      	b.n	84c7a <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84c3e:	bf00      	nop
   84c40:	e000      	b.n	84c44 <udc_reqstd+0x120>
				break;
   84c42:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84c44:	4b0e      	ldr	r3, [pc, #56]	; (84c80 <udc_reqstd+0x15c>)
   84c46:	781b      	ldrb	r3, [r3, #0]
   84c48:	f003 031f 	and.w	r3, r3, #31
   84c4c:	2b02      	cmp	r3, #2
   84c4e:	d112      	bne.n	84c76 <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c50:	4b0b      	ldr	r3, [pc, #44]	; (84c80 <udc_reqstd+0x15c>)
   84c52:	785b      	ldrb	r3, [r3, #1]
   84c54:	2b01      	cmp	r3, #1
   84c56:	d002      	beq.n	84c5e <udc_reqstd+0x13a>
   84c58:	2b03      	cmp	r3, #3
   84c5a:	d004      	beq.n	84c66 <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   84c5c:	e00c      	b.n	84c78 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   84c5e:	4b13      	ldr	r3, [pc, #76]	; (84cac <udc_reqstd+0x188>)
   84c60:	4798      	blx	r3
   84c62:	4603      	mov	r3, r0
   84c64:	e009      	b.n	84c7a <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   84c66:	4b12      	ldr	r3, [pc, #72]	; (84cb0 <udc_reqstd+0x18c>)
   84c68:	4798      	blx	r3
   84c6a:	4603      	mov	r3, r0
   84c6c:	e005      	b.n	84c7a <udc_reqstd+0x156>
		}
   84c6e:	bf00      	nop
   84c70:	e002      	b.n	84c78 <udc_reqstd+0x154>
				break;
   84c72:	bf00      	nop
   84c74:	e000      	b.n	84c78 <udc_reqstd+0x154>
			}
		}
   84c76:	bf00      	nop
#endif
	}
	return false;
   84c78:	2300      	movs	r3, #0
}
   84c7a:	4618      	mov	r0, r3
   84c7c:	bd80      	pop	{r7, pc}
   84c7e:	bf00      	nop
   84c80:	2000241c 	.word	0x2000241c
   84c84:	000843d9 	.word	0x000843d9
   84c88:	000846d9 	.word	0x000846d9
   84c8c:	000848f5 	.word	0x000848f5
   84c90:	00084a25 	.word	0x00084a25
   84c94:	00084405 	.word	0x00084405
   84c98:	000845e5 	.word	0x000845e5
   84c9c:	00084449 	.word	0x00084449
   84ca0:	000844bd 	.word	0x000844bd
   84ca4:	00084921 	.word	0x00084921
   84ca8:	00084abd 	.word	0x00084abd
   84cac:	00084485 	.word	0x00084485
   84cb0:	00084579 	.word	0x00084579

00084cb4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   84cb4:	b580      	push	{r7, lr}
   84cb6:	b082      	sub	sp, #8
   84cb8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84cba:	4b20      	ldr	r3, [pc, #128]	; (84d3c <udc_req_iface+0x88>)
   84cbc:	781b      	ldrb	r3, [r3, #0]
   84cbe:	2b00      	cmp	r3, #0
   84cc0:	d101      	bne.n	84cc6 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   84cc2:	2300      	movs	r3, #0
   84cc4:	e036      	b.n	84d34 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84cc6:	4b1e      	ldr	r3, [pc, #120]	; (84d40 <udc_req_iface+0x8c>)
   84cc8:	889b      	ldrh	r3, [r3, #4]
   84cca:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84ccc:	4b1d      	ldr	r3, [pc, #116]	; (84d44 <udc_req_iface+0x90>)
   84cce:	681b      	ldr	r3, [r3, #0]
   84cd0:	681b      	ldr	r3, [r3, #0]
   84cd2:	791b      	ldrb	r3, [r3, #4]
   84cd4:	79fa      	ldrb	r2, [r7, #7]
   84cd6:	429a      	cmp	r2, r3
   84cd8:	d301      	bcc.n	84cde <udc_req_iface+0x2a>
		return false;
   84cda:	2300      	movs	r3, #0
   84cdc:	e02a      	b.n	84d34 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84cde:	79fb      	ldrb	r3, [r7, #7]
   84ce0:	2100      	movs	r1, #0
   84ce2:	4618      	mov	r0, r3
   84ce4:	4b18      	ldr	r3, [pc, #96]	; (84d48 <udc_req_iface+0x94>)
   84ce6:	4798      	blx	r3
   84ce8:	4603      	mov	r3, r0
   84cea:	f083 0301 	eor.w	r3, r3, #1
   84cee:	b2db      	uxtb	r3, r3
   84cf0:	2b00      	cmp	r3, #0
   84cf2:	d001      	beq.n	84cf8 <udc_req_iface+0x44>
		return false;
   84cf4:	2300      	movs	r3, #0
   84cf6:	e01d      	b.n	84d34 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84cf8:	4b12      	ldr	r3, [pc, #72]	; (84d44 <udc_req_iface+0x90>)
   84cfa:	681b      	ldr	r3, [r3, #0]
   84cfc:	685a      	ldr	r2, [r3, #4]
   84cfe:	79fb      	ldrb	r3, [r7, #7]
   84d00:	009b      	lsls	r3, r3, #2
   84d02:	4413      	add	r3, r2
   84d04:	681b      	ldr	r3, [r3, #0]
   84d06:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84d08:	683b      	ldr	r3, [r7, #0]
   84d0a:	68db      	ldr	r3, [r3, #12]
   84d0c:	4798      	blx	r3
   84d0e:	4603      	mov	r3, r0
   84d10:	461a      	mov	r2, r3
   84d12:	79fb      	ldrb	r3, [r7, #7]
   84d14:	4611      	mov	r1, r2
   84d16:	4618      	mov	r0, r3
   84d18:	4b0b      	ldr	r3, [pc, #44]	; (84d48 <udc_req_iface+0x94>)
   84d1a:	4798      	blx	r3
   84d1c:	4603      	mov	r3, r0
   84d1e:	f083 0301 	eor.w	r3, r3, #1
   84d22:	b2db      	uxtb	r3, r3
   84d24:	2b00      	cmp	r3, #0
   84d26:	d001      	beq.n	84d2c <udc_req_iface+0x78>
		return false;
   84d28:	2300      	movs	r3, #0
   84d2a:	e003      	b.n	84d34 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   84d2c:	683b      	ldr	r3, [r7, #0]
   84d2e:	689b      	ldr	r3, [r3, #8]
   84d30:	4798      	blx	r3
   84d32:	4603      	mov	r3, r0
}
   84d34:	4618      	mov	r0, r3
   84d36:	3708      	adds	r7, #8
   84d38:	46bd      	mov	sp, r7
   84d3a:	bd80      	pop	{r7, pc}
   84d3c:	200015fe 	.word	0x200015fe
   84d40:	2000241c 	.word	0x2000241c
   84d44:	20001600 	.word	0x20001600
   84d48:	00084141 	.word	0x00084141

00084d4c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   84d4c:	b580      	push	{r7, lr}
   84d4e:	b082      	sub	sp, #8
   84d50:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84d52:	4b1e      	ldr	r3, [pc, #120]	; (84dcc <udc_req_ep+0x80>)
   84d54:	781b      	ldrb	r3, [r3, #0]
   84d56:	2b00      	cmp	r3, #0
   84d58:	d101      	bne.n	84d5e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   84d5a:	2300      	movs	r3, #0
   84d5c:	e032      	b.n	84dc4 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d5e:	4b1c      	ldr	r3, [pc, #112]	; (84dd0 <udc_req_ep+0x84>)
   84d60:	889b      	ldrh	r3, [r3, #4]
   84d62:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d64:	2300      	movs	r3, #0
   84d66:	71fb      	strb	r3, [r7, #7]
   84d68:	e024      	b.n	84db4 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84d6a:	4b1a      	ldr	r3, [pc, #104]	; (84dd4 <udc_req_ep+0x88>)
   84d6c:	681b      	ldr	r3, [r3, #0]
   84d6e:	685a      	ldr	r2, [r3, #4]
   84d70:	79fb      	ldrb	r3, [r7, #7]
   84d72:	009b      	lsls	r3, r3, #2
   84d74:	4413      	add	r3, r2
   84d76:	681b      	ldr	r3, [r3, #0]
   84d78:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84d7a:	683b      	ldr	r3, [r7, #0]
   84d7c:	68db      	ldr	r3, [r3, #12]
   84d7e:	4798      	blx	r3
   84d80:	4603      	mov	r3, r0
   84d82:	461a      	mov	r2, r3
   84d84:	79fb      	ldrb	r3, [r7, #7]
   84d86:	4611      	mov	r1, r2
   84d88:	4618      	mov	r0, r3
   84d8a:	4b13      	ldr	r3, [pc, #76]	; (84dd8 <udc_req_ep+0x8c>)
   84d8c:	4798      	blx	r3
   84d8e:	4603      	mov	r3, r0
   84d90:	f083 0301 	eor.w	r3, r3, #1
   84d94:	b2db      	uxtb	r3, r3
   84d96:	2b00      	cmp	r3, #0
   84d98:	d001      	beq.n	84d9e <udc_req_ep+0x52>
			return false;
   84d9a:	2300      	movs	r3, #0
   84d9c:	e012      	b.n	84dc4 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   84d9e:	683b      	ldr	r3, [r7, #0]
   84da0:	689b      	ldr	r3, [r3, #8]
   84da2:	4798      	blx	r3
   84da4:	4603      	mov	r3, r0
   84da6:	2b00      	cmp	r3, #0
   84da8:	d001      	beq.n	84dae <udc_req_ep+0x62>
			return true;
   84daa:	2301      	movs	r3, #1
   84dac:	e00a      	b.n	84dc4 <udc_req_ep+0x78>
			iface_num++) {
   84dae:	79fb      	ldrb	r3, [r7, #7]
   84db0:	3301      	adds	r3, #1
   84db2:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84db4:	4b07      	ldr	r3, [pc, #28]	; (84dd4 <udc_req_ep+0x88>)
   84db6:	681b      	ldr	r3, [r3, #0]
   84db8:	681b      	ldr	r3, [r3, #0]
   84dba:	791b      	ldrb	r3, [r3, #4]
   84dbc:	79fa      	ldrb	r2, [r7, #7]
   84dbe:	429a      	cmp	r2, r3
   84dc0:	d3d3      	bcc.n	84d6a <udc_req_ep+0x1e>
		}
	}
	return false;
   84dc2:	2300      	movs	r3, #0
}
   84dc4:	4618      	mov	r0, r3
   84dc6:	3708      	adds	r7, #8
   84dc8:	46bd      	mov	sp, r7
   84dca:	bd80      	pop	{r7, pc}
   84dcc:	200015fe 	.word	0x200015fe
   84dd0:	2000241c 	.word	0x2000241c
   84dd4:	20001600 	.word	0x20001600
   84dd8:	00084141 	.word	0x00084141

00084ddc <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   84ddc:	b580      	push	{r7, lr}
   84dde:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84de0:	4b25      	ldr	r3, [pc, #148]	; (84e78 <udc_process_setup+0x9c>)
   84de2:	2200      	movs	r2, #0
   84de4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   84de6:	4b24      	ldr	r3, [pc, #144]	; (84e78 <udc_process_setup+0x9c>)
   84de8:	2200      	movs	r2, #0
   84dea:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84dec:	4b22      	ldr	r3, [pc, #136]	; (84e78 <udc_process_setup+0x9c>)
   84dee:	2200      	movs	r2, #0
   84df0:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   84df2:	4b21      	ldr	r3, [pc, #132]	; (84e78 <udc_process_setup+0x9c>)
   84df4:	781b      	ldrb	r3, [r3, #0]
   84df6:	2bc0      	cmp	r3, #192	; 0xc0
   84df8:	d109      	bne.n	84e0e <udc_process_setup+0x32>
   84dfa:	4b1f      	ldr	r3, [pc, #124]	; (84e78 <udc_process_setup+0x9c>)
   84dfc:	785b      	ldrb	r3, [r3, #1]
   84dfe:	2b01      	cmp	r3, #1
   84e00:	d105      	bne.n	84e0e <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   84e02:	21ae      	movs	r1, #174	; 0xae
   84e04:	481d      	ldr	r0, [pc, #116]	; (84e7c <udc_process_setup+0xa0>)
   84e06:	4b1e      	ldr	r3, [pc, #120]	; (84e80 <udc_process_setup+0xa4>)
   84e08:	4798      	blx	r3
		return true;
   84e0a:	2301      	movs	r3, #1
   84e0c:	e032      	b.n	84e74 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   84e0e:	4b1a      	ldr	r3, [pc, #104]	; (84e78 <udc_process_setup+0x9c>)
   84e10:	781b      	ldrb	r3, [r3, #0]
   84e12:	b25b      	sxtb	r3, r3
   84e14:	2b00      	cmp	r3, #0
   84e16:	da05      	bge.n	84e24 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84e18:	4b17      	ldr	r3, [pc, #92]	; (84e78 <udc_process_setup+0x9c>)
   84e1a:	88db      	ldrh	r3, [r3, #6]
   84e1c:	2b00      	cmp	r3, #0
   84e1e:	d101      	bne.n	84e24 <udc_process_setup+0x48>
			return false; // Error from USB host
   84e20:	2300      	movs	r3, #0
   84e22:	e027      	b.n	84e74 <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84e24:	4b14      	ldr	r3, [pc, #80]	; (84e78 <udc_process_setup+0x9c>)
   84e26:	781b      	ldrb	r3, [r3, #0]
   84e28:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84e2c:	2b00      	cmp	r3, #0
   84e2e:	d106      	bne.n	84e3e <udc_process_setup+0x62>
		if (udc_reqstd()) {
   84e30:	4b14      	ldr	r3, [pc, #80]	; (84e84 <udc_process_setup+0xa8>)
   84e32:	4798      	blx	r3
   84e34:	4603      	mov	r3, r0
   84e36:	2b00      	cmp	r3, #0
   84e38:	d001      	beq.n	84e3e <udc_process_setup+0x62>
			return true;
   84e3a:	2301      	movs	r3, #1
   84e3c:	e01a      	b.n	84e74 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84e3e:	4b0e      	ldr	r3, [pc, #56]	; (84e78 <udc_process_setup+0x9c>)
   84e40:	781b      	ldrb	r3, [r3, #0]
   84e42:	f003 031f 	and.w	r3, r3, #31
   84e46:	2b01      	cmp	r3, #1
   84e48:	d106      	bne.n	84e58 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   84e4a:	4b0f      	ldr	r3, [pc, #60]	; (84e88 <udc_process_setup+0xac>)
   84e4c:	4798      	blx	r3
   84e4e:	4603      	mov	r3, r0
   84e50:	2b00      	cmp	r3, #0
   84e52:	d001      	beq.n	84e58 <udc_process_setup+0x7c>
			return true;
   84e54:	2301      	movs	r3, #1
   84e56:	e00d      	b.n	84e74 <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84e58:	4b07      	ldr	r3, [pc, #28]	; (84e78 <udc_process_setup+0x9c>)
   84e5a:	781b      	ldrb	r3, [r3, #0]
   84e5c:	f003 031f 	and.w	r3, r3, #31
   84e60:	2b02      	cmp	r3, #2
   84e62:	d106      	bne.n	84e72 <udc_process_setup+0x96>
		if (udc_req_ep()) {
   84e64:	4b09      	ldr	r3, [pc, #36]	; (84e8c <udc_process_setup+0xb0>)
   84e66:	4798      	blx	r3
   84e68:	4603      	mov	r3, r0
   84e6a:	2b00      	cmp	r3, #0
   84e6c:	d001      	beq.n	84e72 <udc_process_setup+0x96>
			return true;
   84e6e:	2301      	movs	r3, #1
   84e70:	e000      	b.n	84e74 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84e72:	2300      	movs	r3, #0
#endif
}
   84e74:	4618      	mov	r0, r3
   84e76:	bd80      	pop	{r7, pc}
   84e78:	2000241c 	.word	0x2000241c
   84e7c:	20000300 	.word	0x20000300
   84e80:	00086191 	.word	0x00086191
   84e84:	00084b25 	.word	0x00084b25
   84e88:	00084cb5 	.word	0x00084cb5
   84e8c:	00084d4d 	.word	0x00084d4d

00084e90 <cpu_irq_save>:
{
   84e90:	b480      	push	{r7}
   84e92:	b083      	sub	sp, #12
   84e94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e96:	f3ef 8310 	mrs	r3, PRIMASK
   84e9a:	603b      	str	r3, [r7, #0]
  return(result);
   84e9c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84e9e:	2b00      	cmp	r3, #0
   84ea0:	bf0c      	ite	eq
   84ea2:	2301      	moveq	r3, #1
   84ea4:	2300      	movne	r3, #0
   84ea6:	b2db      	uxtb	r3, r3
   84ea8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84eaa:	b672      	cpsid	i
}
   84eac:	bf00      	nop
  __ASM volatile ("dmb");
   84eae:	f3bf 8f5f 	dmb	sy
}
   84eb2:	bf00      	nop
	cpu_irq_disable();
   84eb4:	4b04      	ldr	r3, [pc, #16]	; (84ec8 <cpu_irq_save+0x38>)
   84eb6:	2200      	movs	r2, #0
   84eb8:	701a      	strb	r2, [r3, #0]
	return flags;
   84eba:	687b      	ldr	r3, [r7, #4]
}
   84ebc:	4618      	mov	r0, r3
   84ebe:	370c      	adds	r7, #12
   84ec0:	46bd      	mov	sp, r7
   84ec2:	bc80      	pop	{r7}
   84ec4:	4770      	bx	lr
   84ec6:	bf00      	nop
   84ec8:	20000284 	.word	0x20000284

00084ecc <cpu_irq_is_enabled_flags>:
{
   84ecc:	b480      	push	{r7}
   84ece:	b083      	sub	sp, #12
   84ed0:	af00      	add	r7, sp, #0
   84ed2:	6078      	str	r0, [r7, #4]
	return (flags);
   84ed4:	687b      	ldr	r3, [r7, #4]
   84ed6:	2b00      	cmp	r3, #0
   84ed8:	bf14      	ite	ne
   84eda:	2301      	movne	r3, #1
   84edc:	2300      	moveq	r3, #0
   84ede:	b2db      	uxtb	r3, r3
}
   84ee0:	4618      	mov	r0, r3
   84ee2:	370c      	adds	r7, #12
   84ee4:	46bd      	mov	sp, r7
   84ee6:	bc80      	pop	{r7}
   84ee8:	4770      	bx	lr
   84eea:	0000      	movs	r0, r0

00084eec <cpu_irq_restore>:
{
   84eec:	b580      	push	{r7, lr}
   84eee:	b082      	sub	sp, #8
   84ef0:	af00      	add	r7, sp, #0
   84ef2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84ef4:	6878      	ldr	r0, [r7, #4]
   84ef6:	4b08      	ldr	r3, [pc, #32]	; (84f18 <cpu_irq_restore+0x2c>)
   84ef8:	4798      	blx	r3
   84efa:	4603      	mov	r3, r0
   84efc:	2b00      	cmp	r3, #0
   84efe:	d007      	beq.n	84f10 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84f00:	4b06      	ldr	r3, [pc, #24]	; (84f1c <cpu_irq_restore+0x30>)
   84f02:	2201      	movs	r2, #1
   84f04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84f06:	f3bf 8f5f 	dmb	sy
}
   84f0a:	bf00      	nop
  __ASM volatile ("cpsie i");
   84f0c:	b662      	cpsie	i
}
   84f0e:	bf00      	nop
}
   84f10:	bf00      	nop
   84f12:	3708      	adds	r7, #8
   84f14:	46bd      	mov	sp, r7
   84f16:	bd80      	pop	{r7, pc}
   84f18:	00084ecd 	.word	0x00084ecd
   84f1c:	20000284 	.word	0x20000284

00084f20 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   84f20:	b580      	push	{r7, lr}
   84f22:	b082      	sub	sp, #8
   84f24:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   84f26:	2300      	movs	r3, #0
   84f28:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
   84f2a:	4b4f      	ldr	r3, [pc, #316]	; (85068 <udi_cdc_comm_enable+0x148>)
   84f2c:	2200      	movs	r2, #0
   84f2e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   84f30:	79bb      	ldrb	r3, [r7, #6]
   84f32:	4a4e      	ldr	r2, [pc, #312]	; (8506c <udi_cdc_comm_enable+0x14c>)
   84f34:	2100      	movs	r1, #0
   84f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
   84f3a:	79ba      	ldrb	r2, [r7, #6]
   84f3c:	494c      	ldr	r1, [pc, #304]	; (85070 <udi_cdc_comm_enable+0x150>)
   84f3e:	4613      	mov	r3, r2
   84f40:	009b      	lsls	r3, r3, #2
   84f42:	4413      	add	r3, r2
   84f44:	005b      	lsls	r3, r3, #1
   84f46:	440b      	add	r3, r1
   84f48:	22a1      	movs	r2, #161	; 0xa1
   84f4a:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   84f4c:	79ba      	ldrb	r2, [r7, #6]
   84f4e:	4948      	ldr	r1, [pc, #288]	; (85070 <udi_cdc_comm_enable+0x150>)
   84f50:	4613      	mov	r3, r2
   84f52:	009b      	lsls	r3, r3, #2
   84f54:	4413      	add	r3, r2
   84f56:	005b      	lsls	r3, r3, #1
   84f58:	440b      	add	r3, r1
   84f5a:	3301      	adds	r3, #1
   84f5c:	2220      	movs	r2, #32
   84f5e:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   84f60:	79ba      	ldrb	r2, [r7, #6]
   84f62:	4943      	ldr	r1, [pc, #268]	; (85070 <udi_cdc_comm_enable+0x150>)
   84f64:	4613      	mov	r3, r2
   84f66:	009b      	lsls	r3, r3, #2
   84f68:	4413      	add	r3, r2
   84f6a:	005b      	lsls	r3, r3, #1
   84f6c:	440b      	add	r3, r1
   84f6e:	3302      	adds	r3, #2
   84f70:	2200      	movs	r2, #0
   84f72:	801a      	strh	r2, [r3, #0]

	switch (port) {
   84f74:	79bb      	ldrb	r3, [r7, #6]
   84f76:	2b00      	cmp	r3, #0
   84f78:	d102      	bne.n	84f80 <udi_cdc_comm_enable+0x60>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
   84f7a:	2301      	movs	r3, #1
   84f7c:	71fb      	strb	r3, [r7, #7]
   84f7e:	e002      	b.n	84f86 <udi_cdc_comm_enable+0x66>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
   84f80:	2301      	movs	r3, #1
   84f82:	71fb      	strb	r3, [r7, #7]
		break;
   84f84:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   84f86:	79ba      	ldrb	r2, [r7, #6]
   84f88:	79fb      	ldrb	r3, [r7, #7]
   84f8a:	b298      	uxth	r0, r3
   84f8c:	4938      	ldr	r1, [pc, #224]	; (85070 <udi_cdc_comm_enable+0x150>)
   84f8e:	4613      	mov	r3, r2
   84f90:	009b      	lsls	r3, r3, #2
   84f92:	4413      	add	r3, r2
   84f94:	005b      	lsls	r3, r3, #1
   84f96:	440b      	add	r3, r1
   84f98:	3304      	adds	r3, #4
   84f9a:	4602      	mov	r2, r0
   84f9c:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   84f9e:	79ba      	ldrb	r2, [r7, #6]
   84fa0:	4933      	ldr	r1, [pc, #204]	; (85070 <udi_cdc_comm_enable+0x150>)
   84fa2:	4613      	mov	r3, r2
   84fa4:	009b      	lsls	r3, r3, #2
   84fa6:	4413      	add	r3, r2
   84fa8:	005b      	lsls	r3, r3, #1
   84faa:	440b      	add	r3, r1
   84fac:	3306      	adds	r3, #6
   84fae:	2202      	movs	r2, #2
   84fb0:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   84fb2:	79ba      	ldrb	r2, [r7, #6]
   84fb4:	492e      	ldr	r1, [pc, #184]	; (85070 <udi_cdc_comm_enable+0x150>)
   84fb6:	4613      	mov	r3, r2
   84fb8:	009b      	lsls	r3, r3, #2
   84fba:	4413      	add	r3, r2
   84fbc:	005b      	lsls	r3, r3, #1
   84fbe:	440b      	add	r3, r1
   84fc0:	3308      	adds	r3, #8
   84fc2:	2200      	movs	r2, #0
   84fc4:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   84fc6:	79ba      	ldrb	r2, [r7, #6]
   84fc8:	492a      	ldr	r1, [pc, #168]	; (85074 <udi_cdc_comm_enable+0x154>)
   84fca:	4613      	mov	r3, r2
   84fcc:	00db      	lsls	r3, r3, #3
   84fce:	1a9b      	subs	r3, r3, r2
   84fd0:	440b      	add	r3, r1
   84fd2:	2200      	movs	r2, #0
   84fd4:	701a      	strb	r2, [r3, #0]
   84fd6:	2200      	movs	r2, #0
   84fd8:	f062 023d 	orn	r2, r2, #61	; 0x3d
   84fdc:	705a      	strb	r2, [r3, #1]
   84fde:	2200      	movs	r2, #0
   84fe0:	f042 0201 	orr.w	r2, r2, #1
   84fe4:	709a      	strb	r2, [r3, #2]
   84fe6:	2200      	movs	r2, #0
   84fe8:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   84fea:	79ba      	ldrb	r2, [r7, #6]
   84fec:	4921      	ldr	r1, [pc, #132]	; (85074 <udi_cdc_comm_enable+0x154>)
   84fee:	4613      	mov	r3, r2
   84ff0:	00db      	lsls	r3, r3, #3
   84ff2:	1a9b      	subs	r3, r3, r2
   84ff4:	440b      	add	r3, r1
   84ff6:	3304      	adds	r3, #4
   84ff8:	2200      	movs	r2, #0
   84ffa:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   84ffc:	79ba      	ldrb	r2, [r7, #6]
   84ffe:	491d      	ldr	r1, [pc, #116]	; (85074 <udi_cdc_comm_enable+0x154>)
   85000:	4613      	mov	r3, r2
   85002:	00db      	lsls	r3, r3, #3
   85004:	1a9b      	subs	r3, r3, r2
   85006:	440b      	add	r3, r1
   85008:	3305      	adds	r3, #5
   8500a:	2200      	movs	r2, #0
   8500c:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8500e:	79ba      	ldrb	r2, [r7, #6]
   85010:	4918      	ldr	r1, [pc, #96]	; (85074 <udi_cdc_comm_enable+0x154>)
   85012:	4613      	mov	r3, r2
   85014:	00db      	lsls	r3, r3, #3
   85016:	1a9b      	subs	r3, r3, r2
   85018:	440b      	add	r3, r1
   8501a:	3306      	adds	r3, #6
   8501c:	2208      	movs	r2, #8
   8501e:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85020:	79ba      	ldrb	r2, [r7, #6]
   85022:	4613      	mov	r3, r2
   85024:	00db      	lsls	r3, r3, #3
   85026:	1a9b      	subs	r3, r3, r2
   85028:	4a12      	ldr	r2, [pc, #72]	; (85074 <udi_cdc_comm_enable+0x154>)
   8502a:	441a      	add	r2, r3
   8502c:	79bb      	ldrb	r3, [r7, #6]
   8502e:	4611      	mov	r1, r2
   85030:	4618      	mov	r0, r3
   85032:	4b11      	ldr	r3, [pc, #68]	; (85078 <udi_cdc_comm_enable+0x158>)
   85034:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   85036:	79bb      	ldrb	r3, [r7, #6]
   85038:	4618      	mov	r0, r3
   8503a:	4b10      	ldr	r3, [pc, #64]	; (8507c <udi_cdc_comm_enable+0x15c>)
   8503c:	4798      	blx	r3
   8503e:	4603      	mov	r3, r0
   85040:	f083 0301 	eor.w	r3, r3, #1
   85044:	b2db      	uxtb	r3, r3
   85046:	2b00      	cmp	r3, #0
   85048:	d001      	beq.n	8504e <udi_cdc_comm_enable+0x12e>
		return false;
   8504a:	2300      	movs	r3, #0
   8504c:	e007      	b.n	8505e <udi_cdc_comm_enable+0x13e>
	}
	udi_cdc_nb_comm_enabled++;
   8504e:	4b06      	ldr	r3, [pc, #24]	; (85068 <udi_cdc_comm_enable+0x148>)
   85050:	781b      	ldrb	r3, [r3, #0]
   85052:	b2db      	uxtb	r3, r3
   85054:	3301      	adds	r3, #1
   85056:	b2da      	uxtb	r2, r3
   85058:	4b03      	ldr	r3, [pc, #12]	; (85068 <udi_cdc_comm_enable+0x148>)
   8505a:	701a      	strb	r2, [r3, #0]
	return true;
   8505c:	2301      	movs	r3, #1
}
   8505e:	4618      	mov	r0, r3
   85060:	3708      	adds	r7, #8
   85062:	46bd      	mov	sp, r7
   85064:	bd80      	pop	{r7, pc}
   85066:	bf00      	nop
   85068:	20001622 	.word	0x20001622
   8506c:	20001614 	.word	0x20001614
   85070:	20001618 	.word	0x20001618
   85074:	2000160c 	.word	0x2000160c
   85078:	0008171d 	.word	0x0008171d
   8507c:	00081639 	.word	0x00081639

00085080 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
   85080:	b580      	push	{r7, lr}
   85082:	b082      	sub	sp, #8
   85084:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   85086:	2300      	movs	r3, #0
   85088:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
   8508a:	4b2d      	ldr	r3, [pc, #180]	; (85140 <udi_cdc_data_enable+0xc0>)
   8508c:	2200      	movs	r2, #0
   8508e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85090:	79fb      	ldrb	r3, [r7, #7]
   85092:	4a2c      	ldr	r2, [pc, #176]	; (85144 <udi_cdc_data_enable+0xc4>)
   85094:	2100      	movs	r1, #0
   85096:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85098:	79fb      	ldrb	r3, [r7, #7]
   8509a:	4a2b      	ldr	r2, [pc, #172]	; (85148 <udi_cdc_data_enable+0xc8>)
   8509c:	2100      	movs	r1, #0
   8509e:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
   850a0:	79fb      	ldrb	r3, [r7, #7]
   850a2:	4a2a      	ldr	r2, [pc, #168]	; (8514c <udi_cdc_data_enable+0xcc>)
   850a4:	2100      	movs	r1, #0
   850a6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
   850a8:	79fb      	ldrb	r3, [r7, #7]
   850aa:	4a29      	ldr	r2, [pc, #164]	; (85150 <udi_cdc_data_enable+0xd0>)
   850ac:	2100      	movs	r1, #0
   850ae:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
   850b2:	79fb      	ldrb	r3, [r7, #7]
   850b4:	4a26      	ldr	r2, [pc, #152]	; (85150 <udi_cdc_data_enable+0xd0>)
   850b6:	009b      	lsls	r3, r3, #2
   850b8:	4413      	add	r3, r2
   850ba:	2200      	movs	r2, #0
   850bc:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   850be:	79fb      	ldrb	r3, [r7, #7]
   850c0:	4a24      	ldr	r2, [pc, #144]	; (85154 <udi_cdc_data_enable+0xd4>)
   850c2:	2100      	movs	r1, #0
   850c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_send(port);
   850c8:	79fb      	ldrb	r3, [r7, #7]
   850ca:	4618      	mov	r0, r3
   850cc:	4b22      	ldr	r3, [pc, #136]	; (85158 <udi_cdc_data_enable+0xd8>)
   850ce:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   850d0:	79fb      	ldrb	r3, [r7, #7]
   850d2:	4a22      	ldr	r2, [pc, #136]	; (8515c <udi_cdc_data_enable+0xdc>)
   850d4:	2100      	movs	r1, #0
   850d6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
   850d8:	79fb      	ldrb	r3, [r7, #7]
   850da:	4a21      	ldr	r2, [pc, #132]	; (85160 <udi_cdc_data_enable+0xe0>)
   850dc:	2100      	movs	r1, #0
   850de:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
   850e0:	79fb      	ldrb	r3, [r7, #7]
   850e2:	4a20      	ldr	r2, [pc, #128]	; (85164 <udi_cdc_data_enable+0xe4>)
   850e4:	2100      	movs	r1, #0
   850e6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   850ea:	79fb      	ldrb	r3, [r7, #7]
   850ec:	4a1d      	ldr	r2, [pc, #116]	; (85164 <udi_cdc_data_enable+0xe4>)
   850ee:	009b      	lsls	r3, r3, #2
   850f0:	4413      	add	r3, r2
   850f2:	2200      	movs	r2, #0
   850f4:	805a      	strh	r2, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   850f6:	79fb      	ldrb	r3, [r7, #7]
   850f8:	4a1b      	ldr	r2, [pc, #108]	; (85168 <udi_cdc_data_enable+0xe8>)
   850fa:	2100      	movs	r1, #0
   850fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   85100:	79fb      	ldrb	r3, [r7, #7]
   85102:	4618      	mov	r0, r3
   85104:	4b19      	ldr	r3, [pc, #100]	; (8516c <udi_cdc_data_enable+0xec>)
   85106:	4798      	blx	r3
   85108:	4603      	mov	r3, r0
   8510a:	f083 0301 	eor.w	r3, r3, #1
   8510e:	b2db      	uxtb	r3, r3
   85110:	2b00      	cmp	r3, #0
   85112:	d001      	beq.n	85118 <udi_cdc_data_enable+0x98>
		return false;
   85114:	2300      	movs	r3, #0
   85116:	e00f      	b.n	85138 <udi_cdc_data_enable+0xb8>
	}
	udi_cdc_nb_data_enabled++;
   85118:	4b09      	ldr	r3, [pc, #36]	; (85140 <udi_cdc_data_enable+0xc0>)
   8511a:	781b      	ldrb	r3, [r3, #0]
   8511c:	b2db      	uxtb	r3, r3
   8511e:	3301      	adds	r3, #1
   85120:	b2da      	uxtb	r2, r3
   85122:	4b07      	ldr	r3, [pc, #28]	; (85140 <udi_cdc_data_enable+0xc0>)
   85124:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85126:	4b06      	ldr	r3, [pc, #24]	; (85140 <udi_cdc_data_enable+0xc0>)
   85128:	781b      	ldrb	r3, [r3, #0]
   8512a:	b2db      	uxtb	r3, r3
   8512c:	2b01      	cmp	r3, #1
   8512e:	d102      	bne.n	85136 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   85130:	4b0f      	ldr	r3, [pc, #60]	; (85170 <udi_cdc_data_enable+0xf0>)
   85132:	2201      	movs	r2, #1
   85134:	701a      	strb	r2, [r3, #0]
	}
	return true;
   85136:	2301      	movs	r3, #1
}
   85138:	4618      	mov	r0, r3
   8513a:	3708      	adds	r7, #8
   8513c:	46bd      	mov	sp, r7
   8513e:	bd80      	pop	{r7, pc}
   85140:	20001623 	.word	0x20001623
   85144:	20001e44 	.word	0x20001e44
   85148:	20001e48 	.word	0x20001e48
   8514c:	20001e3c 	.word	0x20001e3c
   85150:	20001e38 	.word	0x20001e38
   85154:	20001e40 	.word	0x20001e40
   85158:	00085551 	.word	0x00085551
   8515c:	20001a34 	.word	0x20001a34
   85160:	20001a2c 	.word	0x20001a2c
   85164:	20001a28 	.word	0x20001a28
   85168:	20001a30 	.word	0x20001a30
   8516c:	0008532d 	.word	0x0008532d
   85170:	20001624 	.word	0x20001624

00085174 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
   85174:	b480      	push	{r7}
   85176:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   85178:	4b05      	ldr	r3, [pc, #20]	; (85190 <udi_cdc_comm_disable+0x1c>)
   8517a:	781b      	ldrb	r3, [r3, #0]
   8517c:	b2db      	uxtb	r3, r3
   8517e:	3b01      	subs	r3, #1
   85180:	b2da      	uxtb	r2, r3
   85182:	4b03      	ldr	r3, [pc, #12]	; (85190 <udi_cdc_comm_disable+0x1c>)
   85184:	701a      	strb	r2, [r3, #0]
}
   85186:	bf00      	nop
   85188:	46bd      	mov	sp, r7
   8518a:	bc80      	pop	{r7}
   8518c:	4770      	bx	lr
   8518e:	bf00      	nop
   85190:	20001622 	.word	0x20001622

00085194 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
   85194:	b580      	push	{r7, lr}
   85196:	b082      	sub	sp, #8
   85198:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   8519a:	4b0a      	ldr	r3, [pc, #40]	; (851c4 <udi_cdc_data_disable+0x30>)
   8519c:	781b      	ldrb	r3, [r3, #0]
   8519e:	b2db      	uxtb	r3, r3
   851a0:	3b01      	subs	r3, #1
   851a2:	b2da      	uxtb	r2, r3
   851a4:	4b07      	ldr	r3, [pc, #28]	; (851c4 <udi_cdc_data_disable+0x30>)
   851a6:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   851a8:	4b06      	ldr	r3, [pc, #24]	; (851c4 <udi_cdc_data_disable+0x30>)
   851aa:	781b      	ldrb	r3, [r3, #0]
   851ac:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
   851ae:	79fb      	ldrb	r3, [r7, #7]
   851b0:	4618      	mov	r0, r3
   851b2:	4b05      	ldr	r3, [pc, #20]	; (851c8 <udi_cdc_data_disable+0x34>)
   851b4:	4798      	blx	r3
	udi_cdc_data_running = false;
   851b6:	4b05      	ldr	r3, [pc, #20]	; (851cc <udi_cdc_data_disable+0x38>)
   851b8:	2200      	movs	r2, #0
   851ba:	701a      	strb	r2, [r3, #0]
}
   851bc:	bf00      	nop
   851be:	3708      	adds	r7, #8
   851c0:	46bd      	mov	sp, r7
   851c2:	bd80      	pop	{r7, pc}
   851c4:	20001623 	.word	0x20001623
   851c8:	0008165d 	.word	0x0008165d
   851cc:	20001624 	.word	0x20001624

000851d0 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
   851d0:	b580      	push	{r7, lr}
   851d2:	b082      	sub	sp, #8
   851d4:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
   851d6:	4b2a      	ldr	r3, [pc, #168]	; (85280 <udi_cdc_comm_setup+0xb0>)
   851d8:	4798      	blx	r3
   851da:	4603      	mov	r3, r0
   851dc:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
   851de:	4b29      	ldr	r3, [pc, #164]	; (85284 <udi_cdc_comm_setup+0xb4>)
   851e0:	781b      	ldrb	r3, [r3, #0]
   851e2:	b25b      	sxtb	r3, r3
   851e4:	2b00      	cmp	r3, #0
   851e6:	da1c      	bge.n	85222 <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   851e8:	4b26      	ldr	r3, [pc, #152]	; (85284 <udi_cdc_comm_setup+0xb4>)
   851ea:	781b      	ldrb	r3, [r3, #0]
   851ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
   851f0:	2b20      	cmp	r3, #32
   851f2:	d116      	bne.n	85222 <udi_cdc_comm_setup+0x52>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   851f4:	4b23      	ldr	r3, [pc, #140]	; (85284 <udi_cdc_comm_setup+0xb4>)
   851f6:	785b      	ldrb	r3, [r3, #1]
   851f8:	2b21      	cmp	r3, #33	; 0x21
   851fa:	d112      	bne.n	85222 <udi_cdc_comm_setup+0x52>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   851fc:	4b21      	ldr	r3, [pc, #132]	; (85284 <udi_cdc_comm_setup+0xb4>)
   851fe:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
   85200:	2b07      	cmp	r3, #7
   85202:	d001      	beq.n	85208 <udi_cdc_comm_setup+0x38>
					return false; // Error for USB host
   85204:	2300      	movs	r3, #0
   85206:	e037      	b.n	85278 <udi_cdc_comm_setup+0xa8>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
   85208:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
   8520a:	4613      	mov	r3, r2
   8520c:	00db      	lsls	r3, r3, #3
   8520e:	1a9b      	subs	r3, r3, r2
   85210:	4a1d      	ldr	r2, [pc, #116]	; (85288 <udi_cdc_comm_setup+0xb8>)
   85212:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
   85214:	4a1b      	ldr	r2, [pc, #108]	; (85284 <udi_cdc_comm_setup+0xb4>)
   85216:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
   85218:	4b1a      	ldr	r3, [pc, #104]	; (85284 <udi_cdc_comm_setup+0xb4>)
   8521a:	2207      	movs	r2, #7
   8521c:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8521e:	2301      	movs	r3, #1
   85220:	e02a      	b.n	85278 <udi_cdc_comm_setup+0xa8>
			}
		}
	}
	if (Udd_setup_is_out()) {
   85222:	4b18      	ldr	r3, [pc, #96]	; (85284 <udi_cdc_comm_setup+0xb4>)
   85224:	781b      	ldrb	r3, [r3, #0]
   85226:	b25b      	sxtb	r3, r3
   85228:	2b00      	cmp	r3, #0
   8522a:	db24      	blt.n	85276 <udi_cdc_comm_setup+0xa6>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8522c:	4b15      	ldr	r3, [pc, #84]	; (85284 <udi_cdc_comm_setup+0xb4>)
   8522e:	781b      	ldrb	r3, [r3, #0]
   85230:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85234:	2b20      	cmp	r3, #32
   85236:	d11e      	bne.n	85276 <udi_cdc_comm_setup+0xa6>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85238:	4b12      	ldr	r3, [pc, #72]	; (85284 <udi_cdc_comm_setup+0xb4>)
   8523a:	785b      	ldrb	r3, [r3, #1]
   8523c:	2b20      	cmp	r3, #32
   8523e:	d002      	beq.n	85246 <udi_cdc_comm_setup+0x76>
   85240:	2b22      	cmp	r3, #34	; 0x22
   85242:	d016      	beq.n	85272 <udi_cdc_comm_setup+0xa2>
   85244:	e017      	b.n	85276 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   85246:	4b0f      	ldr	r3, [pc, #60]	; (85284 <udi_cdc_comm_setup+0xb4>)
   85248:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
   8524a:	2b07      	cmp	r3, #7
   8524c:	d001      	beq.n	85252 <udi_cdc_comm_setup+0x82>
					return false; // Error for USB host
   8524e:	2300      	movs	r3, #0
   85250:	e012      	b.n	85278 <udi_cdc_comm_setup+0xa8>
				udd_g_ctrlreq.callback =
   85252:	4b0c      	ldr	r3, [pc, #48]	; (85284 <udi_cdc_comm_setup+0xb4>)
   85254:	4a0d      	ldr	r2, [pc, #52]	; (8528c <udi_cdc_comm_setup+0xbc>)
   85256:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
   85258:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
   8525a:	4613      	mov	r3, r2
   8525c:	00db      	lsls	r3, r3, #3
   8525e:	1a9b      	subs	r3, r3, r2
   85260:	4a09      	ldr	r2, [pc, #36]	; (85288 <udi_cdc_comm_setup+0xb8>)
   85262:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
   85264:	4a07      	ldr	r2, [pc, #28]	; (85284 <udi_cdc_comm_setup+0xb4>)
   85266:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
   85268:	4b06      	ldr	r3, [pc, #24]	; (85284 <udi_cdc_comm_setup+0xb4>)
   8526a:	2207      	movs	r2, #7
   8526c:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8526e:	2301      	movs	r3, #1
   85270:	e002      	b.n	85278 <udi_cdc_comm_setup+0xa8>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   85272:	2301      	movs	r3, #1
   85274:	e000      	b.n	85278 <udi_cdc_comm_setup+0xa8>
			}
		}
	}
	return false;  // request Not supported
   85276:	2300      	movs	r3, #0
}
   85278:	4618      	mov	r0, r3
   8527a:	3708      	adds	r7, #8
   8527c:	46bd      	mov	sp, r7
   8527e:	bd80      	pop	{r7, pc}
   85280:	000852c9 	.word	0x000852c9
   85284:	2000241c 	.word	0x2000241c
   85288:	2000160c 	.word	0x2000160c
   8528c:	000852f5 	.word	0x000852f5

00085290 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
   85290:	b480      	push	{r7}
   85292:	af00      	add	r7, sp, #0
	return false;  // request Not supported
   85294:	2300      	movs	r3, #0
}
   85296:	4618      	mov	r0, r3
   85298:	46bd      	mov	sp, r7
   8529a:	bc80      	pop	{r7}
   8529c:	4770      	bx	lr

0008529e <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
   8529e:	b480      	push	{r7}
   852a0:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
   852a2:	2300      	movs	r3, #0
}
   852a4:	4618      	mov	r0, r3
   852a6:	46bd      	mov	sp, r7
   852a8:	bc80      	pop	{r7}
   852aa:	4770      	bx	lr

000852ac <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
   852ac:	b580      	push	{r7, lr}
   852ae:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   852b0:	4b03      	ldr	r3, [pc, #12]	; (852c0 <udi_cdc_data_sof_notify+0x14>)
   852b2:	781b      	ldrb	r3, [r3, #0]
   852b4:	4618      	mov	r0, r3
   852b6:	4b03      	ldr	r3, [pc, #12]	; (852c4 <udi_cdc_data_sof_notify+0x18>)
   852b8:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
   852ba:	bf00      	nop
   852bc:	bd80      	pop	{r7, pc}
   852be:	bf00      	nop
   852c0:	20001e49 	.word	0x20001e49
   852c4:	00085551 	.word	0x00085551

000852c8 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
   852c8:	b480      	push	{r7}
   852ca:	b083      	sub	sp, #12
   852cc:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   852ce:	4b08      	ldr	r3, [pc, #32]	; (852f0 <udi_cdc_setup_to_port+0x28>)
   852d0:	889b      	ldrh	r3, [r3, #4]
   852d2:	b2db      	uxtb	r3, r3
   852d4:	2b01      	cmp	r3, #1
   852d6:	d102      	bne.n	852de <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
   852d8:	2300      	movs	r3, #0
   852da:	71fb      	strb	r3, [r7, #7]
   852dc:	e002      	b.n	852e4 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
   852de:	2300      	movs	r3, #0
   852e0:	71fb      	strb	r3, [r7, #7]
		break;
   852e2:	bf00      	nop
	}
	return port;
   852e4:	79fb      	ldrb	r3, [r7, #7]
}
   852e6:	4618      	mov	r0, r3
   852e8:	370c      	adds	r7, #12
   852ea:	46bd      	mov	sp, r7
   852ec:	bc80      	pop	{r7}
   852ee:	4770      	bx	lr
   852f0:	2000241c 	.word	0x2000241c

000852f4 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
   852f4:	b580      	push	{r7, lr}
   852f6:	b082      	sub	sp, #8
   852f8:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
   852fa:	4b09      	ldr	r3, [pc, #36]	; (85320 <udi_cdc_line_coding_received+0x2c>)
   852fc:	4798      	blx	r3
   852fe:	4603      	mov	r3, r0
   85300:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85302:	79fa      	ldrb	r2, [r7, #7]
   85304:	4613      	mov	r3, r2
   85306:	00db      	lsls	r3, r3, #3
   85308:	1a9b      	subs	r3, r3, r2
   8530a:	4a06      	ldr	r2, [pc, #24]	; (85324 <udi_cdc_line_coding_received+0x30>)
   8530c:	441a      	add	r2, r3
   8530e:	79fb      	ldrb	r3, [r7, #7]
   85310:	4611      	mov	r1, r2
   85312:	4618      	mov	r0, r3
   85314:	4b04      	ldr	r3, [pc, #16]	; (85328 <udi_cdc_line_coding_received+0x34>)
   85316:	4798      	blx	r3
}
   85318:	bf00      	nop
   8531a:	3708      	adds	r7, #8
   8531c:	46bd      	mov	sp, r7
   8531e:	bd80      	pop	{r7, pc}
   85320:	000852c9 	.word	0x000852c9
   85324:	2000160c 	.word	0x2000160c
   85328:	0008171d 	.word	0x0008171d

0008532c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   8532c:	b590      	push	{r4, r7, lr}
   8532e:	b089      	sub	sp, #36	; 0x24
   85330:	af02      	add	r7, sp, #8
   85332:	4603      	mov	r3, r0
   85334:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   85336:	2300      	movs	r3, #0
   85338:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
   8533a:	4b2f      	ldr	r3, [pc, #188]	; (853f8 <udi_cdc_rx_start+0xcc>)
   8533c:	4798      	blx	r3
   8533e:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   85340:	79fb      	ldrb	r3, [r7, #7]
   85342:	4a2e      	ldr	r2, [pc, #184]	; (853fc <udi_cdc_rx_start+0xd0>)
   85344:	5cd3      	ldrb	r3, [r2, r3]
   85346:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
   85348:	79fb      	ldrb	r3, [r7, #7]
   8534a:	4a2d      	ldr	r2, [pc, #180]	; (85400 <udi_cdc_rx_start+0xd4>)
   8534c:	5cd3      	ldrb	r3, [r2, r3]
   8534e:	b2db      	uxtb	r3, r3
   85350:	2b00      	cmp	r3, #0
   85352:	d10e      	bne.n	85372 <udi_cdc_rx_start+0x46>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   85354:	79fb      	ldrb	r3, [r7, #7]
   85356:	4a2b      	ldr	r2, [pc, #172]	; (85404 <udi_cdc_rx_start+0xd8>)
   85358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8535c:	b29a      	uxth	r2, r3
   8535e:	79f9      	ldrb	r1, [r7, #7]
   85360:	7bfb      	ldrb	r3, [r7, #15]
   85362:	4829      	ldr	r0, [pc, #164]	; (85408 <udi_cdc_rx_start+0xdc>)
   85364:	0049      	lsls	r1, r1, #1
   85366:	440b      	add	r3, r1
   85368:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   8536c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8536e:	429a      	cmp	r2, r3
   85370:	d204      	bcs.n	8537c <udi_cdc_rx_start+0x50>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
   85372:	6938      	ldr	r0, [r7, #16]
   85374:	4b25      	ldr	r3, [pc, #148]	; (8540c <udi_cdc_rx_start+0xe0>)
   85376:	4798      	blx	r3
		return false;
   85378:	2300      	movs	r3, #0
   8537a:	e039      	b.n	853f0 <udi_cdc_rx_start+0xc4>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   8537c:	79fb      	ldrb	r3, [r7, #7]
   8537e:	4a21      	ldr	r2, [pc, #132]	; (85404 <udi_cdc_rx_start+0xd8>)
   85380:	2100      	movs	r1, #0
   85382:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85386:	7bfb      	ldrb	r3, [r7, #15]
   85388:	2b00      	cmp	r3, #0
   8538a:	bf0c      	ite	eq
   8538c:	2301      	moveq	r3, #1
   8538e:	2300      	movne	r3, #0
   85390:	b2da      	uxtb	r2, r3
   85392:	79fb      	ldrb	r3, [r7, #7]
   85394:	4611      	mov	r1, r2
   85396:	4a19      	ldr	r2, [pc, #100]	; (853fc <udi_cdc_rx_start+0xd0>)
   85398:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   8539a:	79fb      	ldrb	r3, [r7, #7]
   8539c:	4a18      	ldr	r2, [pc, #96]	; (85400 <udi_cdc_rx_start+0xd4>)
   8539e:	2101      	movs	r1, #1
   853a0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   853a2:	6938      	ldr	r0, [r7, #16]
   853a4:	4b19      	ldr	r3, [pc, #100]	; (8540c <udi_cdc_rx_start+0xe0>)
   853a6:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
   853a8:	79fb      	ldrb	r3, [r7, #7]
   853aa:	4618      	mov	r0, r3
   853ac:	4b18      	ldr	r3, [pc, #96]	; (85410 <udi_cdc_rx_start+0xe4>)
   853ae:	4798      	blx	r3
   853b0:	4603      	mov	r3, r0
   853b2:	2b00      	cmp	r3, #0
   853b4:	d003      	beq.n	853be <udi_cdc_rx_start+0x92>
		UDI_CDC_RX_NOTIFY(port);
   853b6:	79fb      	ldrb	r3, [r7, #7]
   853b8:	4618      	mov	r0, r3
   853ba:	4b16      	ldr	r3, [pc, #88]	; (85414 <udi_cdc_rx_start+0xe8>)
   853bc:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
   853be:	79fb      	ldrb	r3, [r7, #7]
   853c0:	2b00      	cmp	r3, #0
   853c2:	d102      	bne.n	853ca <udi_cdc_rx_start+0x9e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   853c4:	2306      	movs	r3, #6
   853c6:	75fb      	strb	r3, [r7, #23]
   853c8:	e002      	b.n	853d0 <udi_cdc_rx_start+0xa4>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
   853ca:	2306      	movs	r3, #6
   853cc:	75fb      	strb	r3, [r7, #23]
		break;
   853ce:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
   853d0:	79fa      	ldrb	r2, [r7, #7]
   853d2:	7bfb      	ldrb	r3, [r7, #15]
   853d4:	0052      	lsls	r2, r2, #1
   853d6:	4413      	add	r3, r2
   853d8:	025b      	lsls	r3, r3, #9
   853da:	4a0f      	ldr	r2, [pc, #60]	; (85418 <udi_cdc_rx_start+0xec>)
   853dc:	441a      	add	r2, r3
	return udd_ep_run(ep,
   853de:	7df8      	ldrb	r0, [r7, #23]
   853e0:	4b0e      	ldr	r3, [pc, #56]	; (8541c <udi_cdc_rx_start+0xf0>)
   853e2:	9300      	str	r3, [sp, #0]
   853e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   853e8:	2101      	movs	r1, #1
   853ea:	4c0d      	ldr	r4, [pc, #52]	; (85420 <udi_cdc_rx_start+0xf4>)
   853ec:	47a0      	blx	r4
   853ee:	4603      	mov	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   853f0:	4618      	mov	r0, r3
   853f2:	371c      	adds	r7, #28
   853f4:	46bd      	mov	sp, r7
   853f6:	bd90      	pop	{r4, r7, pc}
   853f8:	00084e91 	.word	0x00084e91
   853fc:	20001a2c 	.word	0x20001a2c
   85400:	20001a34 	.word	0x20001a34
   85404:	20001a30 	.word	0x20001a30
   85408:	20001a28 	.word	0x20001a28
   8540c:	00084eed 	.word	0x00084eed
   85410:	0008578d 	.word	0x0008578d
   85414:	0008167d 	.word	0x0008167d
   85418:	20001628 	.word	0x20001628
   8541c:	00085425 	.word	0x00085425
   85420:	000868a5 	.word	0x000868a5

00085424 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85424:	b590      	push	{r4, r7, lr}
   85426:	b087      	sub	sp, #28
   85428:	af02      	add	r7, sp, #8
   8542a:	4603      	mov	r3, r0
   8542c:	6039      	str	r1, [r7, #0]
   8542e:	71fb      	strb	r3, [r7, #7]
   85430:	4613      	mov	r3, r2
   85432:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
   85434:	79bb      	ldrb	r3, [r7, #6]
   85436:	2b06      	cmp	r3, #6
   85438:	d102      	bne.n	85440 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
   8543a:	2300      	movs	r3, #0
   8543c:	73fb      	strb	r3, [r7, #15]
   8543e:	e002      	b.n	85446 <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
   85440:	2300      	movs	r3, #0
   85442:	73fb      	strb	r3, [r7, #15]
		break;
   85444:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85446:	79fb      	ldrb	r3, [r7, #7]
   85448:	2b00      	cmp	r3, #0
   8544a:	d12f      	bne.n	854ac <udi_cdc_data_received+0x88>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8544c:	7bfb      	ldrb	r3, [r7, #15]
   8544e:	4a19      	ldr	r2, [pc, #100]	; (854b4 <udi_cdc_data_received+0x90>)
   85450:	5cd3      	ldrb	r3, [r2, r3]
   85452:	b2db      	uxtb	r3, r3
   85454:	2b00      	cmp	r3, #0
   85456:	bf0c      	ite	eq
   85458:	2301      	moveq	r3, #1
   8545a:	2300      	movne	r3, #0
   8545c:	b2db      	uxtb	r3, r3
   8545e:	73bb      	strb	r3, [r7, #14]
	if (!n) {
   85460:	683b      	ldr	r3, [r7, #0]
   85462:	2b00      	cmp	r3, #0
   85464:	d10f      	bne.n	85486 <udi_cdc_data_received+0x62>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
   85466:	7bfa      	ldrb	r2, [r7, #15]
   85468:	7bbb      	ldrb	r3, [r7, #14]
   8546a:	0052      	lsls	r2, r2, #1
   8546c:	4413      	add	r3, r2
   8546e:	025b      	lsls	r3, r3, #9
   85470:	4a11      	ldr	r2, [pc, #68]	; (854b8 <udi_cdc_data_received+0x94>)
   85472:	441a      	add	r2, r3
		udd_ep_run( ep,
   85474:	79b8      	ldrb	r0, [r7, #6]
   85476:	4b11      	ldr	r3, [pc, #68]	; (854bc <udi_cdc_data_received+0x98>)
   85478:	9300      	str	r3, [sp, #0]
   8547a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8547e:	2101      	movs	r1, #1
   85480:	4c0f      	ldr	r4, [pc, #60]	; (854c0 <udi_cdc_data_received+0x9c>)
   85482:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   85484:	e013      	b.n	854ae <udi_cdc_data_received+0x8a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85486:	7bfa      	ldrb	r2, [r7, #15]
   85488:	7bbb      	ldrb	r3, [r7, #14]
   8548a:	6839      	ldr	r1, [r7, #0]
   8548c:	b288      	uxth	r0, r1
   8548e:	490d      	ldr	r1, [pc, #52]	; (854c4 <udi_cdc_data_received+0xa0>)
   85490:	0052      	lsls	r2, r2, #1
   85492:	4413      	add	r3, r2
   85494:	4602      	mov	r2, r0
   85496:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   8549a:	7bfb      	ldrb	r3, [r7, #15]
   8549c:	4a0a      	ldr	r2, [pc, #40]	; (854c8 <udi_cdc_data_received+0xa4>)
   8549e:	2100      	movs	r1, #0
   854a0:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
   854a2:	7bfb      	ldrb	r3, [r7, #15]
   854a4:	4618      	mov	r0, r3
   854a6:	4b09      	ldr	r3, [pc, #36]	; (854cc <udi_cdc_data_received+0xa8>)
   854a8:	4798      	blx	r3
   854aa:	e000      	b.n	854ae <udi_cdc_data_received+0x8a>
		return;
   854ac:	bf00      	nop
}
   854ae:	3714      	adds	r7, #20
   854b0:	46bd      	mov	sp, r7
   854b2:	bd90      	pop	{r4, r7, pc}
   854b4:	20001a2c 	.word	0x20001a2c
   854b8:	20001628 	.word	0x20001628
   854bc:	00085425 	.word	0x00085425
   854c0:	000868a5 	.word	0x000868a5
   854c4:	20001a28 	.word	0x20001a28
   854c8:	20001a34 	.word	0x20001a34
   854cc:	0008532d 	.word	0x0008532d

000854d0 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   854d0:	b580      	push	{r7, lr}
   854d2:	b084      	sub	sp, #16
   854d4:	af00      	add	r7, sp, #0
   854d6:	4603      	mov	r3, r0
   854d8:	6039      	str	r1, [r7, #0]
   854da:	71fb      	strb	r3, [r7, #7]
   854dc:	4613      	mov	r3, r2
   854de:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
   854e0:	79bb      	ldrb	r3, [r7, #6]
   854e2:	2b85      	cmp	r3, #133	; 0x85
   854e4:	d102      	bne.n	854ec <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
   854e6:	2300      	movs	r3, #0
   854e8:	73fb      	strb	r3, [r7, #15]
   854ea:	e002      	b.n	854f2 <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
   854ec:	2300      	movs	r3, #0
   854ee:	73fb      	strb	r3, [r7, #15]
		break;
   854f0:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
   854f2:	79fb      	ldrb	r3, [r7, #7]
   854f4:	2b00      	cmp	r3, #0
   854f6:	d11d      	bne.n	85534 <udi_cdc_data_sent+0x64>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   854f8:	7bfb      	ldrb	r3, [r7, #15]
   854fa:	7bfa      	ldrb	r2, [r7, #15]
   854fc:	490f      	ldr	r1, [pc, #60]	; (8553c <udi_cdc_data_sent+0x6c>)
   854fe:	5c8a      	ldrb	r2, [r1, r2]
   85500:	b2d2      	uxtb	r2, r2
   85502:	2a00      	cmp	r2, #0
   85504:	bf0c      	ite	eq
   85506:	2201      	moveq	r2, #1
   85508:	2200      	movne	r2, #0
   8550a:	b2d2      	uxtb	r2, r2
   8550c:	4611      	mov	r1, r2
   8550e:	4a0c      	ldr	r2, [pc, #48]	; (85540 <udi_cdc_data_sent+0x70>)
   85510:	005b      	lsls	r3, r3, #1
   85512:	440b      	add	r3, r1
   85514:	2100      	movs	r1, #0
   85516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8551a:	7bfb      	ldrb	r3, [r7, #15]
   8551c:	4a09      	ldr	r2, [pc, #36]	; (85544 <udi_cdc_data_sent+0x74>)
   8551e:	2100      	movs	r1, #0
   85520:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
   85522:	7bfb      	ldrb	r3, [r7, #15]
   85524:	4a08      	ldr	r2, [pc, #32]	; (85548 <udi_cdc_data_sent+0x78>)
   85526:	2100      	movs	r1, #0
   85528:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   8552a:	7bfb      	ldrb	r3, [r7, #15]
   8552c:	4618      	mov	r0, r3
   8552e:	4b07      	ldr	r3, [pc, #28]	; (8554c <udi_cdc_data_sent+0x7c>)
   85530:	4798      	blx	r3
   85532:	e000      	b.n	85536 <udi_cdc_data_sent+0x66>
		return;
   85534:	bf00      	nop
}
   85536:	3710      	adds	r7, #16
   85538:	46bd      	mov	sp, r7
   8553a:	bd80      	pop	{r7, pc}
   8553c:	20001e3c 	.word	0x20001e3c
   85540:	20001e38 	.word	0x20001e38
   85544:	20001e48 	.word	0x20001e48
   85548:	20001e44 	.word	0x20001e44
   8554c:	00085551 	.word	0x00085551

00085550 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
   85550:	b590      	push	{r4, r7, lr}
   85552:	b089      	sub	sp, #36	; 0x24
   85554:	af02      	add	r7, sp, #8
   85556:	4603      	mov	r3, r0
   85558:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   8555a:	2300      	movs	r3, #0
   8555c:	71fb      	strb	r3, [r7, #7]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8555e:	79fb      	ldrb	r3, [r7, #7]
   85560:	4a63      	ldr	r2, [pc, #396]	; (856f0 <udi_cdc_tx_send+0x1a0>)
   85562:	5cd3      	ldrb	r3, [r2, r3]
   85564:	b2db      	uxtb	r3, r3
   85566:	2b00      	cmp	r3, #0
   85568:	f040 80bb 	bne.w	856e2 <udi_cdc_tx_send+0x192>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8556c:	4b61      	ldr	r3, [pc, #388]	; (856f4 <udi_cdc_tx_send+0x1a4>)
   8556e:	4798      	blx	r3
   85570:	4603      	mov	r3, r0
   85572:	2b00      	cmp	r3, #0
   85574:	d009      	beq.n	8558a <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   85576:	79fb      	ldrb	r3, [r7, #7]
   85578:	4a5f      	ldr	r2, [pc, #380]	; (856f8 <udi_cdc_tx_send+0x1a8>)
   8557a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8557e:	4b5f      	ldr	r3, [pc, #380]	; (856fc <udi_cdc_tx_send+0x1ac>)
   85580:	4798      	blx	r3
   85582:	4603      	mov	r3, r0
   85584:	429c      	cmp	r4, r3
   85586:	d10a      	bne.n	8559e <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
   85588:	e0ae      	b.n	856e8 <udi_cdc_tx_send+0x198>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8558a:	79fb      	ldrb	r3, [r7, #7]
   8558c:	4a5a      	ldr	r2, [pc, #360]	; (856f8 <udi_cdc_tx_send+0x1a8>)
   8558e:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   85592:	4b5b      	ldr	r3, [pc, #364]	; (85700 <udi_cdc_tx_send+0x1b0>)
   85594:	4798      	blx	r3
   85596:	4603      	mov	r3, r0
   85598:	429c      	cmp	r4, r3
   8559a:	f000 80a4 	beq.w	856e6 <udi_cdc_tx_send+0x196>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
   8559e:	4b59      	ldr	r3, [pc, #356]	; (85704 <udi_cdc_tx_send+0x1b4>)
   855a0:	4798      	blx	r3
   855a2:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   855a4:	79fb      	ldrb	r3, [r7, #7]
   855a6:	4a58      	ldr	r2, [pc, #352]	; (85708 <udi_cdc_tx_send+0x1b8>)
   855a8:	5cd3      	ldrb	r3, [r2, r3]
   855aa:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   855ac:	79fa      	ldrb	r2, [r7, #7]
   855ae:	7dfb      	ldrb	r3, [r7, #23]
   855b0:	4956      	ldr	r1, [pc, #344]	; (8570c <udi_cdc_tx_send+0x1bc>)
   855b2:	0052      	lsls	r2, r2, #1
   855b4:	4413      	add	r3, r2
   855b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   855ba:	2b00      	cmp	r3, #0
   855bc:	d11f      	bne.n	855fe <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
   855be:	4b54      	ldr	r3, [pc, #336]	; (85710 <udi_cdc_tx_send+0x1c0>)
   855c0:	881b      	ldrh	r3, [r3, #0]
   855c2:	3301      	adds	r3, #1
   855c4:	b29a      	uxth	r2, r3
   855c6:	4b52      	ldr	r3, [pc, #328]	; (85710 <udi_cdc_tx_send+0x1c0>)
   855c8:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   855ca:	4b4a      	ldr	r3, [pc, #296]	; (856f4 <udi_cdc_tx_send+0x1a4>)
   855cc:	4798      	blx	r3
   855ce:	4603      	mov	r3, r0
   855d0:	f083 0301 	eor.w	r3, r3, #1
   855d4:	b2db      	uxtb	r3, r3
   855d6:	2b00      	cmp	r3, #0
   855d8:	d003      	beq.n	855e2 <udi_cdc_tx_send+0x92>
   855da:	4b4d      	ldr	r3, [pc, #308]	; (85710 <udi_cdc_tx_send+0x1c0>)
   855dc:	881b      	ldrh	r3, [r3, #0]
   855de:	2b63      	cmp	r3, #99	; 0x63
   855e0:	d909      	bls.n	855f6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   855e2:	4b44      	ldr	r3, [pc, #272]	; (856f4 <udi_cdc_tx_send+0x1a4>)
   855e4:	4798      	blx	r3
   855e6:	4603      	mov	r3, r0
   855e8:	2b00      	cmp	r3, #0
   855ea:	d008      	beq.n	855fe <udi_cdc_tx_send+0xae>
   855ec:	4b48      	ldr	r3, [pc, #288]	; (85710 <udi_cdc_tx_send+0x1c0>)
   855ee:	881b      	ldrh	r3, [r3, #0]
   855f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   855f4:	d203      	bcs.n	855fe <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
   855f6:	6938      	ldr	r0, [r7, #16]
   855f8:	4b46      	ldr	r3, [pc, #280]	; (85714 <udi_cdc_tx_send+0x1c4>)
   855fa:	4798      	blx	r3
			return;
   855fc:	e074      	b.n	856e8 <udi_cdc_tx_send+0x198>
		}
	}
	sof_zlp_counter = 0;
   855fe:	4b44      	ldr	r3, [pc, #272]	; (85710 <udi_cdc_tx_send+0x1c0>)
   85600:	2200      	movs	r2, #0
   85602:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   85604:	79fb      	ldrb	r3, [r7, #7]
   85606:	4a44      	ldr	r2, [pc, #272]	; (85718 <udi_cdc_tx_send+0x1c8>)
   85608:	5cd3      	ldrb	r3, [r2, r3]
   8560a:	b2db      	uxtb	r3, r3
   8560c:	f083 0301 	eor.w	r3, r3, #1
   85610:	b2db      	uxtb	r3, r3
   85612:	2b00      	cmp	r3, #0
   85614:	d00a      	beq.n	8562c <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85616:	7dfb      	ldrb	r3, [r7, #23]
   85618:	2b00      	cmp	r3, #0
   8561a:	bf0c      	ite	eq
   8561c:	2301      	moveq	r3, #1
   8561e:	2300      	movne	r3, #0
   85620:	b2da      	uxtb	r2, r3
   85622:	79fb      	ldrb	r3, [r7, #7]
   85624:	4611      	mov	r1, r2
   85626:	4a38      	ldr	r2, [pc, #224]	; (85708 <udi_cdc_tx_send+0x1b8>)
   85628:	54d1      	strb	r1, [r2, r3]
   8562a:	e006      	b.n	8563a <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   8562c:	7dfb      	ldrb	r3, [r7, #23]
   8562e:	2b00      	cmp	r3, #0
   85630:	bf0c      	ite	eq
   85632:	2301      	moveq	r3, #1
   85634:	2300      	movne	r3, #0
   85636:	b2db      	uxtb	r3, r3
   85638:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8563a:	79fb      	ldrb	r3, [r7, #7]
   8563c:	4a2c      	ldr	r2, [pc, #176]	; (856f0 <udi_cdc_tx_send+0x1a0>)
   8563e:	2101      	movs	r1, #1
   85640:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   85642:	6938      	ldr	r0, [r7, #16]
   85644:	4b33      	ldr	r3, [pc, #204]	; (85714 <udi_cdc_tx_send+0x1c4>)
   85646:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85648:	79fa      	ldrb	r2, [r7, #7]
   8564a:	7dfb      	ldrb	r3, [r7, #23]
   8564c:	492f      	ldr	r1, [pc, #188]	; (8570c <udi_cdc_tx_send+0x1bc>)
   8564e:	0052      	lsls	r2, r2, #1
   85650:	4413      	add	r3, r2
   85652:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   85656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8565a:	bf14      	ite	ne
   8565c:	2301      	movne	r3, #1
   8565e:	2300      	moveq	r3, #0
   85660:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
   85662:	7bfb      	ldrb	r3, [r7, #15]
   85664:	2b00      	cmp	r3, #0
   85666:	d016      	beq.n	85696 <udi_cdc_tx_send+0x146>
		if (udd_is_high_speed()) {
   85668:	4b22      	ldr	r3, [pc, #136]	; (856f4 <udi_cdc_tx_send+0x1a4>)
   8566a:	4798      	blx	r3
   8566c:	4603      	mov	r3, r0
   8566e:	2b00      	cmp	r3, #0
   85670:	d008      	beq.n	85684 <udi_cdc_tx_send+0x134>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85672:	79fc      	ldrb	r4, [r7, #7]
   85674:	4b21      	ldr	r3, [pc, #132]	; (856fc <udi_cdc_tx_send+0x1ac>)
   85676:	4798      	blx	r3
   85678:	4603      	mov	r3, r0
   8567a:	461a      	mov	r2, r3
   8567c:	4b1e      	ldr	r3, [pc, #120]	; (856f8 <udi_cdc_tx_send+0x1a8>)
   8567e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
   85682:	e00d      	b.n	856a0 <udi_cdc_tx_send+0x150>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85684:	79fc      	ldrb	r4, [r7, #7]
   85686:	4b1e      	ldr	r3, [pc, #120]	; (85700 <udi_cdc_tx_send+0x1b0>)
   85688:	4798      	blx	r3
   8568a:	4603      	mov	r3, r0
   8568c:	461a      	mov	r2, r3
   8568e:	4b1a      	ldr	r3, [pc, #104]	; (856f8 <udi_cdc_tx_send+0x1a8>)
   85690:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
   85694:	e004      	b.n	856a0 <udi_cdc_tx_send+0x150>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   85696:	79fb      	ldrb	r3, [r7, #7]
   85698:	4a17      	ldr	r2, [pc, #92]	; (856f8 <udi_cdc_tx_send+0x1a8>)
   8569a:	2100      	movs	r1, #0
   8569c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
   856a0:	79fb      	ldrb	r3, [r7, #7]
   856a2:	2b00      	cmp	r3, #0
   856a4:	d102      	bne.n	856ac <udi_cdc_tx_send+0x15c>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   856a6:	2385      	movs	r3, #133	; 0x85
   856a8:	75bb      	strb	r3, [r7, #22]
   856aa:	e002      	b.n	856b2 <udi_cdc_tx_send+0x162>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
   856ac:	2385      	movs	r3, #133	; 0x85
   856ae:	75bb      	strb	r3, [r7, #22]
		break;
   856b0:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
   856b2:	79fa      	ldrb	r2, [r7, #7]
   856b4:	7dfb      	ldrb	r3, [r7, #23]
   856b6:	0052      	lsls	r2, r2, #1
   856b8:	4413      	add	r3, r2
   856ba:	025b      	lsls	r3, r3, #9
   856bc:	4a17      	ldr	r2, [pc, #92]	; (8571c <udi_cdc_tx_send+0x1cc>)
   856be:	189c      	adds	r4, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   856c0:	79fa      	ldrb	r2, [r7, #7]
   856c2:	7dfb      	ldrb	r3, [r7, #23]
   856c4:	4911      	ldr	r1, [pc, #68]	; (8570c <udi_cdc_tx_send+0x1bc>)
   856c6:	0052      	lsls	r2, r2, #1
   856c8:	4413      	add	r3, r2
   856ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
	udd_ep_run( ep,
   856ce:	461a      	mov	r2, r3
   856d0:	7bf9      	ldrb	r1, [r7, #15]
   856d2:	7db8      	ldrb	r0, [r7, #22]
   856d4:	4b12      	ldr	r3, [pc, #72]	; (85720 <udi_cdc_tx_send+0x1d0>)
   856d6:	9300      	str	r3, [sp, #0]
   856d8:	4613      	mov	r3, r2
   856da:	4622      	mov	r2, r4
   856dc:	4c11      	ldr	r4, [pc, #68]	; (85724 <udi_cdc_tx_send+0x1d4>)
   856de:	47a0      	blx	r4
   856e0:	e002      	b.n	856e8 <udi_cdc_tx_send+0x198>
		return; // Already on going or wait next SOF to send next data
   856e2:	bf00      	nop
   856e4:	e000      	b.n	856e8 <udi_cdc_tx_send+0x198>
			return; // Wait next SOF to send next data
   856e6:	bf00      	nop
			udi_cdc_data_sent);
}
   856e8:	371c      	adds	r7, #28
   856ea:	46bd      	mov	sp, r7
   856ec:	bd90      	pop	{r4, r7, pc}
   856ee:	bf00      	nop
   856f0:	20001e44 	.word	0x20001e44
   856f4:	000860d1 	.word	0x000860d1
   856f8:	20001e40 	.word	0x20001e40
   856fc:	00086175 	.word	0x00086175
   85700:	00086155 	.word	0x00086155
   85704:	00084e91 	.word	0x00084e91
   85708:	20001e3c 	.word	0x20001e3c
   8570c:	20001e38 	.word	0x20001e38
   85710:	20001e4a 	.word	0x20001e4a
   85714:	00084eed 	.word	0x00084eed
   85718:	20001e48 	.word	0x20001e48
   8571c:	20001a38 	.word	0x20001a38
   85720:	000854d1 	.word	0x000854d1
   85724:	000868a5 	.word	0x000868a5

00085728 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
   85728:	b580      	push	{r7, lr}
   8572a:	b086      	sub	sp, #24
   8572c:	af00      	add	r7, sp, #0
   8572e:	4603      	mov	r3, r0
   85730:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   85732:	2300      	movs	r3, #0
   85734:	71fb      	strb	r3, [r7, #7]
#endif
	flags = cpu_irq_save();
   85736:	4b10      	ldr	r3, [pc, #64]	; (85778 <udi_cdc_multi_get_nb_received_data+0x50>)
   85738:	4798      	blx	r3
   8573a:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
   8573c:	79fb      	ldrb	r3, [r7, #7]
   8573e:	4a0f      	ldr	r2, [pc, #60]	; (8577c <udi_cdc_multi_get_nb_received_data+0x54>)
   85740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   85744:	827b      	strh	r3, [r7, #18]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85746:	79fb      	ldrb	r3, [r7, #7]
   85748:	79fa      	ldrb	r2, [r7, #7]
   8574a:	490d      	ldr	r1, [pc, #52]	; (85780 <udi_cdc_multi_get_nb_received_data+0x58>)
   8574c:	5c8a      	ldrb	r2, [r1, r2]
   8574e:	b2d2      	uxtb	r2, r2
   85750:	4611      	mov	r1, r2
   85752:	4a0c      	ldr	r2, [pc, #48]	; (85784 <udi_cdc_multi_get_nb_received_data+0x5c>)
   85754:	005b      	lsls	r3, r3, #1
   85756:	440b      	add	r3, r1
   85758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8575c:	b29b      	uxth	r3, r3
   8575e:	461a      	mov	r2, r3
   85760:	8a7b      	ldrh	r3, [r7, #18]
   85762:	1ad3      	subs	r3, r2, r3
   85764:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
   85766:	6978      	ldr	r0, [r7, #20]
   85768:	4b07      	ldr	r3, [pc, #28]	; (85788 <udi_cdc_multi_get_nb_received_data+0x60>)
   8576a:	4798      	blx	r3
	return nb_received;
   8576c:	68fb      	ldr	r3, [r7, #12]
}
   8576e:	4618      	mov	r0, r3
   85770:	3718      	adds	r7, #24
   85772:	46bd      	mov	sp, r7
   85774:	bd80      	pop	{r7, pc}
   85776:	bf00      	nop
   85778:	00084e91 	.word	0x00084e91
   8577c:	20001a30 	.word	0x20001a30
   85780:	20001a2c 	.word	0x20001a2c
   85784:	20001a28 	.word	0x20001a28
   85788:	00084eed 	.word	0x00084eed

0008578c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8578c:	b580      	push	{r7, lr}
   8578e:	b082      	sub	sp, #8
   85790:	af00      	add	r7, sp, #0
   85792:	4603      	mov	r3, r0
   85794:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   85796:	79fb      	ldrb	r3, [r7, #7]
   85798:	4618      	mov	r0, r3
   8579a:	4b06      	ldr	r3, [pc, #24]	; (857b4 <udi_cdc_multi_is_rx_ready+0x28>)
   8579c:	4798      	blx	r3
   8579e:	4603      	mov	r3, r0
   857a0:	2b00      	cmp	r3, #0
   857a2:	bf14      	ite	ne
   857a4:	2301      	movne	r3, #1
   857a6:	2300      	moveq	r3, #0
   857a8:	b2db      	uxtb	r3, r3
}
   857aa:	4618      	mov	r0, r3
   857ac:	3708      	adds	r7, #8
   857ae:	46bd      	mov	sp, r7
   857b0:	bd80      	pop	{r7, pc}
   857b2:	bf00      	nop
   857b4:	00085729 	.word	0x00085729

000857b8 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   857b8:	b580      	push	{r7, lr}
   857ba:	b088      	sub	sp, #32
   857bc:	af00      	add	r7, sp, #0
   857be:	4603      	mov	r3, r0
   857c0:	60b9      	str	r1, [r7, #8]
   857c2:	607a      	str	r2, [r7, #4]
   857c4:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   857c6:	68bb      	ldr	r3, [r7, #8]
   857c8:	61fb      	str	r3, [r7, #28]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   857ca:	2300      	movs	r3, #0
   857cc:	73fb      	strb	r3, [r7, #15]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
   857ce:	4b36      	ldr	r3, [pc, #216]	; (858a8 <udi_cdc_multi_read_buf+0xf0>)
   857d0:	4798      	blx	r3
   857d2:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
   857d4:	7bfb      	ldrb	r3, [r7, #15]
   857d6:	4a35      	ldr	r2, [pc, #212]	; (858ac <udi_cdc_multi_read_buf+0xf4>)
   857d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   857dc:	827b      	strh	r3, [r7, #18]
	buf_sel = udi_cdc_rx_buf_sel[port];
   857de:	7bfb      	ldrb	r3, [r7, #15]
   857e0:	4a33      	ldr	r2, [pc, #204]	; (858b0 <udi_cdc_multi_read_buf+0xf8>)
   857e2:	5cd3      	ldrb	r3, [r2, r3]
   857e4:	747b      	strb	r3, [r7, #17]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   857e6:	7bfa      	ldrb	r2, [r7, #15]
   857e8:	7c7b      	ldrb	r3, [r7, #17]
   857ea:	4932      	ldr	r1, [pc, #200]	; (858b4 <udi_cdc_multi_read_buf+0xfc>)
   857ec:	0052      	lsls	r2, r2, #1
   857ee:	4413      	add	r3, r2
   857f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   857f4:	b29b      	uxth	r3, r3
   857f6:	8a7a      	ldrh	r2, [r7, #18]
   857f8:	429a      	cmp	r2, r3
   857fa:	bf2c      	ite	cs
   857fc:	2301      	movcs	r3, #1
   857fe:	2300      	movcc	r3, #0
   85800:	743b      	strb	r3, [r7, #16]
	cpu_irq_restore(flags);
   85802:	6978      	ldr	r0, [r7, #20]
   85804:	4b2c      	ldr	r3, [pc, #176]	; (858b8 <udi_cdc_multi_read_buf+0x100>)
   85806:	4798      	blx	r3
	while (again) {
   85808:	7c3b      	ldrb	r3, [r7, #16]
   8580a:	2b00      	cmp	r3, #0
   8580c:	d009      	beq.n	85822 <udi_cdc_multi_read_buf+0x6a>
		if (!udi_cdc_data_running) {
   8580e:	4b2b      	ldr	r3, [pc, #172]	; (858bc <udi_cdc_multi_read_buf+0x104>)
   85810:	781b      	ldrb	r3, [r3, #0]
   85812:	b2db      	uxtb	r3, r3
   85814:	f083 0301 	eor.w	r3, r3, #1
   85818:	b2db      	uxtb	r3, r3
   8581a:	2b00      	cmp	r3, #0
   8581c:	d0d7      	beq.n	857ce <udi_cdc_multi_read_buf+0x16>
			return size;
   8581e:	687b      	ldr	r3, [r7, #4]
   85820:	e03d      	b.n	8589e <udi_cdc_multi_read_buf+0xe6>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85822:	7bfa      	ldrb	r2, [r7, #15]
   85824:	7c7b      	ldrb	r3, [r7, #17]
   85826:	4923      	ldr	r1, [pc, #140]	; (858b4 <udi_cdc_multi_read_buf+0xfc>)
   85828:	0052      	lsls	r2, r2, #1
   8582a:	4413      	add	r3, r2
   8582c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   85830:	b29b      	uxth	r3, r3
   85832:	461a      	mov	r2, r3
   85834:	8a7b      	ldrh	r3, [r7, #18]
   85836:	1ad3      	subs	r3, r2, r3
   85838:	61bb      	str	r3, [r7, #24]
	if (copy_nb>size) {
   8583a:	69ba      	ldr	r2, [r7, #24]
   8583c:	687b      	ldr	r3, [r7, #4]
   8583e:	429a      	cmp	r2, r3
   85840:	d901      	bls.n	85846 <udi_cdc_multi_read_buf+0x8e>
		copy_nb = size;
   85842:	687b      	ldr	r3, [r7, #4]
   85844:	61bb      	str	r3, [r7, #24]
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85846:	7bf9      	ldrb	r1, [r7, #15]
   85848:	7c7a      	ldrb	r2, [r7, #17]
   8584a:	8a7b      	ldrh	r3, [r7, #18]
   8584c:	0049      	lsls	r1, r1, #1
   8584e:	440a      	add	r2, r1
   85850:	0252      	lsls	r2, r2, #9
   85852:	4413      	add	r3, r2
   85854:	4a1a      	ldr	r2, [pc, #104]	; (858c0 <udi_cdc_multi_read_buf+0x108>)
   85856:	4413      	add	r3, r2
   85858:	69ba      	ldr	r2, [r7, #24]
   8585a:	4619      	mov	r1, r3
   8585c:	69f8      	ldr	r0, [r7, #28]
   8585e:	4b19      	ldr	r3, [pc, #100]	; (858c4 <udi_cdc_multi_read_buf+0x10c>)
   85860:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85862:	7bfb      	ldrb	r3, [r7, #15]
   85864:	4a11      	ldr	r2, [pc, #68]	; (858ac <udi_cdc_multi_read_buf+0xf4>)
   85866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8586a:	b299      	uxth	r1, r3
   8586c:	69bb      	ldr	r3, [r7, #24]
   8586e:	b29a      	uxth	r2, r3
   85870:	7bfb      	ldrb	r3, [r7, #15]
   85872:	440a      	add	r2, r1
   85874:	b291      	uxth	r1, r2
   85876:	4a0d      	ldr	r2, [pc, #52]	; (858ac <udi_cdc_multi_read_buf+0xf4>)
   85878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptr_buf += copy_nb;
   8587c:	69fa      	ldr	r2, [r7, #28]
   8587e:	69bb      	ldr	r3, [r7, #24]
   85880:	4413      	add	r3, r2
   85882:	61fb      	str	r3, [r7, #28]
	size -= copy_nb;
   85884:	687a      	ldr	r2, [r7, #4]
   85886:	69bb      	ldr	r3, [r7, #24]
   85888:	1ad3      	subs	r3, r2, r3
   8588a:	607b      	str	r3, [r7, #4]
	udi_cdc_rx_start(port);
   8588c:	7bfb      	ldrb	r3, [r7, #15]
   8588e:	4618      	mov	r0, r3
   85890:	4b0d      	ldr	r3, [pc, #52]	; (858c8 <udi_cdc_multi_read_buf+0x110>)
   85892:	4798      	blx	r3

	if (size) {
   85894:	687b      	ldr	r3, [r7, #4]
   85896:	2b00      	cmp	r3, #0
   85898:	d000      	beq.n	8589c <udi_cdc_multi_read_buf+0xe4>
		goto udi_cdc_read_buf_loop_wait;
   8589a:	e798      	b.n	857ce <udi_cdc_multi_read_buf+0x16>
	}
	return 0;
   8589c:	2300      	movs	r3, #0
}
   8589e:	4618      	mov	r0, r3
   858a0:	3720      	adds	r7, #32
   858a2:	46bd      	mov	sp, r7
   858a4:	bd80      	pop	{r7, pc}
   858a6:	bf00      	nop
   858a8:	00084e91 	.word	0x00084e91
   858ac:	20001a30 	.word	0x20001a30
   858b0:	20001a2c 	.word	0x20001a2c
   858b4:	20001a28 	.word	0x20001a28
   858b8:	00084eed 	.word	0x00084eed
   858bc:	20001624 	.word	0x20001624
   858c0:	20001628 	.word	0x20001628
   858c4:	000880f9 	.word	0x000880f9
   858c8:	0008532d 	.word	0x0008532d

000858cc <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   858cc:	b580      	push	{r7, lr}
   858ce:	b086      	sub	sp, #24
   858d0:	af00      	add	r7, sp, #0
   858d2:	4603      	mov	r3, r0
   858d4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   858d6:	2300      	movs	r3, #0
   858d8:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
   858da:	4b20      	ldr	r3, [pc, #128]	; (8595c <udi_cdc_multi_get_free_tx_buffer+0x90>)
   858dc:	4798      	blx	r3
   858de:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
   858e0:	79fb      	ldrb	r3, [r7, #7]
   858e2:	4a1f      	ldr	r2, [pc, #124]	; (85960 <udi_cdc_multi_get_free_tx_buffer+0x94>)
   858e4:	5cd3      	ldrb	r3, [r2, r3]
   858e6:	73fb      	strb	r3, [r7, #15]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   858e8:	79fa      	ldrb	r2, [r7, #7]
   858ea:	7bfb      	ldrb	r3, [r7, #15]
   858ec:	491d      	ldr	r1, [pc, #116]	; (85964 <udi_cdc_multi_get_free_tx_buffer+0x98>)
   858ee:	0052      	lsls	r2, r2, #1
   858f0:	4413      	add	r3, r2
   858f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   858f6:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   858f8:	697b      	ldr	r3, [r7, #20]
   858fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   858fe:	d121      	bne.n	85944 <udi_cdc_multi_get_free_tx_buffer+0x78>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85900:	79fb      	ldrb	r3, [r7, #7]
   85902:	4a19      	ldr	r2, [pc, #100]	; (85968 <udi_cdc_multi_get_free_tx_buffer+0x9c>)
   85904:	5cd3      	ldrb	r3, [r2, r3]
   85906:	b2db      	uxtb	r3, r3
   85908:	f083 0301 	eor.w	r3, r3, #1
   8590c:	b2db      	uxtb	r3, r3
   8590e:	2b00      	cmp	r3, #0
   85910:	d018      	beq.n	85944 <udi_cdc_multi_get_free_tx_buffer+0x78>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85912:	79fb      	ldrb	r3, [r7, #7]
   85914:	4a15      	ldr	r2, [pc, #84]	; (8596c <udi_cdc_multi_get_free_tx_buffer+0xa0>)
   85916:	5cd3      	ldrb	r3, [r2, r3]
   85918:	b2db      	uxtb	r3, r3
   8591a:	f083 0301 	eor.w	r3, r3, #1
   8591e:	b2db      	uxtb	r3, r3
   85920:	2b00      	cmp	r3, #0
   85922:	d00f      	beq.n	85944 <udi_cdc_multi_get_free_tx_buffer+0x78>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   85924:	79fb      	ldrb	r3, [r7, #7]
   85926:	4a11      	ldr	r2, [pc, #68]	; (8596c <udi_cdc_multi_get_free_tx_buffer+0xa0>)
   85928:	2101      	movs	r1, #1
   8592a:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   8592c:	7bfb      	ldrb	r3, [r7, #15]
   8592e:	2b00      	cmp	r3, #0
   85930:	bf0c      	ite	eq
   85932:	2301      	moveq	r3, #1
   85934:	2300      	movne	r3, #0
   85936:	b2da      	uxtb	r2, r3
   85938:	79fb      	ldrb	r3, [r7, #7]
   8593a:	4611      	mov	r1, r2
   8593c:	4a08      	ldr	r2, [pc, #32]	; (85960 <udi_cdc_multi_get_free_tx_buffer+0x94>)
   8593e:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
   85940:	2300      	movs	r3, #0
   85942:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   85944:	697b      	ldr	r3, [r7, #20]
   85946:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   8594a:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
   8594c:	6938      	ldr	r0, [r7, #16]
   8594e:	4b08      	ldr	r3, [pc, #32]	; (85970 <udi_cdc_multi_get_free_tx_buffer+0xa4>)
   85950:	4798      	blx	r3
	return retval;
   85952:	68bb      	ldr	r3, [r7, #8]
}
   85954:	4618      	mov	r0, r3
   85956:	3718      	adds	r7, #24
   85958:	46bd      	mov	sp, r7
   8595a:	bd80      	pop	{r7, pc}
   8595c:	00084e91 	.word	0x00084e91
   85960:	20001e3c 	.word	0x20001e3c
   85964:	20001e38 	.word	0x20001e38
   85968:	20001e44 	.word	0x20001e44
   8596c:	20001e48 	.word	0x20001e48
   85970:	00084eed 	.word	0x00084eed

00085974 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85974:	b580      	push	{r7, lr}
   85976:	b082      	sub	sp, #8
   85978:	af00      	add	r7, sp, #0
   8597a:	4603      	mov	r3, r0
   8597c:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8597e:	79fb      	ldrb	r3, [r7, #7]
   85980:	4618      	mov	r0, r3
   85982:	4b06      	ldr	r3, [pc, #24]	; (8599c <udi_cdc_multi_is_tx_ready+0x28>)
   85984:	4798      	blx	r3
   85986:	4603      	mov	r3, r0
   85988:	2b00      	cmp	r3, #0
   8598a:	bf14      	ite	ne
   8598c:	2301      	movne	r3, #1
   8598e:	2300      	moveq	r3, #0
   85990:	b2db      	uxtb	r3, r3
}
   85992:	4618      	mov	r0, r3
   85994:	3708      	adds	r7, #8
   85996:	46bd      	mov	sp, r7
   85998:	bd80      	pop	{r7, pc}
   8599a:	bf00      	nop
   8599c:	000858cd 	.word	0x000858cd

000859a0 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   859a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   859a2:	b087      	sub	sp, #28
   859a4:	af00      	add	r7, sp, #0
   859a6:	4603      	mov	r3, r0
   859a8:	6039      	str	r1, [r7, #0]
   859aa:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
   859ac:	2300      	movs	r3, #0
   859ae:	71fb      	strb	r3, [r7, #7]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   859b0:	79fa      	ldrb	r2, [r7, #7]
   859b2:	492a      	ldr	r1, [pc, #168]	; (85a5c <udi_cdc_multi_putc+0xbc>)
   859b4:	4613      	mov	r3, r2
   859b6:	00db      	lsls	r3, r3, #3
   859b8:	1a9b      	subs	r3, r3, r2
   859ba:	440b      	add	r3, r1
   859bc:	3306      	adds	r3, #6
   859be:	781b      	ldrb	r3, [r3, #0]
   859c0:	2b09      	cmp	r3, #9
   859c2:	bf0c      	ite	eq
   859c4:	2301      	moveq	r3, #1
   859c6:	2300      	movne	r3, #0
   859c8:	75fb      	strb	r3, [r7, #23]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   859ca:	79fb      	ldrb	r3, [r7, #7]
   859cc:	4618      	mov	r0, r3
   859ce:	4b24      	ldr	r3, [pc, #144]	; (85a60 <udi_cdc_multi_putc+0xc0>)
   859d0:	4798      	blx	r3
   859d2:	4603      	mov	r3, r0
   859d4:	f083 0301 	eor.w	r3, r3, #1
   859d8:	b2db      	uxtb	r3, r3
   859da:	2b00      	cmp	r3, #0
   859dc:	d009      	beq.n	859f2 <udi_cdc_multi_putc+0x52>
		if (!udi_cdc_data_running) {
   859de:	4b21      	ldr	r3, [pc, #132]	; (85a64 <udi_cdc_multi_putc+0xc4>)
   859e0:	781b      	ldrb	r3, [r3, #0]
   859e2:	b2db      	uxtb	r3, r3
   859e4:	f083 0301 	eor.w	r3, r3, #1
   859e8:	b2db      	uxtb	r3, r3
   859ea:	2b00      	cmp	r3, #0
   859ec:	d0ed      	beq.n	859ca <udi_cdc_multi_putc+0x2a>
			return false;
   859ee:	2300      	movs	r3, #0
   859f0:	e02f      	b.n	85a52 <udi_cdc_multi_putc+0xb2>
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
   859f2:	4b1d      	ldr	r3, [pc, #116]	; (85a68 <udi_cdc_multi_putc+0xc8>)
   859f4:	4798      	blx	r3
   859f6:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
   859f8:	79fb      	ldrb	r3, [r7, #7]
   859fa:	4a1c      	ldr	r2, [pc, #112]	; (85a6c <udi_cdc_multi_putc+0xcc>)
   859fc:	5cd3      	ldrb	r3, [r2, r3]
   859fe:	73fb      	strb	r3, [r7, #15]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85a00:	79fc      	ldrb	r4, [r7, #7]
   85a02:	7bf8      	ldrb	r0, [r7, #15]
   85a04:	79fa      	ldrb	r2, [r7, #7]
   85a06:	7bfb      	ldrb	r3, [r7, #15]
   85a08:	4d19      	ldr	r5, [pc, #100]	; (85a70 <udi_cdc_multi_putc+0xd0>)
   85a0a:	0051      	lsls	r1, r2, #1
   85a0c:	4419      	add	r1, r3
   85a0e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
   85a12:	1c4d      	adds	r5, r1, #1
   85a14:	b2ae      	uxth	r6, r5
   85a16:	4d16      	ldr	r5, [pc, #88]	; (85a70 <udi_cdc_multi_putc+0xd0>)
   85a18:	0052      	lsls	r2, r2, #1
   85a1a:	4413      	add	r3, r2
   85a1c:	4632      	mov	r2, r6
   85a1e:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
   85a22:	460d      	mov	r5, r1
   85a24:	683b      	ldr	r3, [r7, #0]
   85a26:	b2d9      	uxtb	r1, r3
   85a28:	4a12      	ldr	r2, [pc, #72]	; (85a74 <udi_cdc_multi_putc+0xd4>)
   85a2a:	0063      	lsls	r3, r4, #1
   85a2c:	4403      	add	r3, r0
   85a2e:	025b      	lsls	r3, r3, #9
   85a30:	4413      	add	r3, r2
   85a32:	442b      	add	r3, r5
   85a34:	460a      	mov	r2, r1
   85a36:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
   85a38:	6938      	ldr	r0, [r7, #16]
   85a3a:	4b0f      	ldr	r3, [pc, #60]	; (85a78 <udi_cdc_multi_putc+0xd8>)
   85a3c:	4798      	blx	r3

	if (b_databit_9) {
   85a3e:	7dfb      	ldrb	r3, [r7, #23]
   85a40:	2b00      	cmp	r3, #0
   85a42:	d005      	beq.n	85a50 <udi_cdc_multi_putc+0xb0>
		// Send MSB
		b_databit_9 = false;
   85a44:	2300      	movs	r3, #0
   85a46:	75fb      	strb	r3, [r7, #23]
		value = value >> 8;
   85a48:	683b      	ldr	r3, [r7, #0]
   85a4a:	121b      	asrs	r3, r3, #8
   85a4c:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
   85a4e:	e7bc      	b.n	859ca <udi_cdc_multi_putc+0x2a>
	}
	return true;
   85a50:	2301      	movs	r3, #1
}
   85a52:	4618      	mov	r0, r3
   85a54:	371c      	adds	r7, #28
   85a56:	46bd      	mov	sp, r7
   85a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85a5a:	bf00      	nop
   85a5c:	2000160c 	.word	0x2000160c
   85a60:	00085975 	.word	0x00085975
   85a64:	20001624 	.word	0x20001624
   85a68:	00084e91 	.word	0x00084e91
   85a6c:	20001e3c 	.word	0x20001e3c
   85a70:	20001e38 	.word	0x20001e38
   85a74:	20001a38 	.word	0x20001a38
   85a78:	00084eed 	.word	0x00084eed

00085a7c <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   85a7c:	b580      	push	{r7, lr}
   85a7e:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   85a80:	4b0b      	ldr	r3, [pc, #44]	; (85ab0 <udi_vendor_enable+0x34>)
   85a82:	4798      	blx	r3
   85a84:	4603      	mov	r3, r0
   85a86:	78da      	ldrb	r2, [r3, #3]
   85a88:	4b0a      	ldr	r3, [pc, #40]	; (85ab4 <udi_vendor_enable+0x38>)
   85a8a:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   85a8c:	4b09      	ldr	r3, [pc, #36]	; (85ab4 <udi_vendor_enable+0x38>)
   85a8e:	781b      	ldrb	r3, [r3, #0]
   85a90:	2b00      	cmp	r3, #0
   85a92:	d109      	bne.n	85aa8 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   85a94:	4b08      	ldr	r3, [pc, #32]	; (85ab8 <udi_vendor_enable+0x3c>)
   85a96:	4798      	blx	r3
   85a98:	4603      	mov	r3, r0
   85a9a:	f083 0301 	eor.w	r3, r3, #1
   85a9e:	b2db      	uxtb	r3, r3
   85aa0:	2b00      	cmp	r3, #0
   85aa2:	d001      	beq.n	85aa8 <udi_vendor_enable+0x2c>
			return false;
   85aa4:	2300      	movs	r3, #0
   85aa6:	e000      	b.n	85aaa <udi_vendor_enable+0x2e>
		}
	}
	return true;
   85aa8:	2301      	movs	r3, #1
}
   85aaa:	4618      	mov	r0, r3
   85aac:	bd80      	pop	{r7, pc}
   85aae:	bf00      	nop
   85ab0:	000840ad 	.word	0x000840ad
   85ab4:	20001e4c 	.word	0x20001e4c
   85ab8:	00080ed5 	.word	0x00080ed5

00085abc <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   85abc:	b580      	push	{r7, lr}
   85abe:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   85ac0:	4b03      	ldr	r3, [pc, #12]	; (85ad0 <udi_vendor_disable+0x14>)
   85ac2:	781b      	ldrb	r3, [r3, #0]
   85ac4:	2b00      	cmp	r3, #0
   85ac6:	d101      	bne.n	85acc <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   85ac8:	4b02      	ldr	r3, [pc, #8]	; (85ad4 <udi_vendor_disable+0x18>)
   85aca:	4798      	blx	r3
	}
}
   85acc:	bf00      	nop
   85ace:	bd80      	pop	{r7, pc}
   85ad0:	20001e4c 	.word	0x20001e4c
   85ad4:	00080f0d 	.word	0x00080f0d

00085ad8 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   85ad8:	b580      	push	{r7, lr}
   85ada:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   85adc:	4b10      	ldr	r3, [pc, #64]	; (85b20 <udi_vendor_setup+0x48>)
   85ade:	781b      	ldrb	r3, [r3, #0]
   85ae0:	b25b      	sxtb	r3, r3
   85ae2:	2b00      	cmp	r3, #0
   85ae4:	da09      	bge.n	85afa <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85ae6:	4b0e      	ldr	r3, [pc, #56]	; (85b20 <udi_vendor_setup+0x48>)
   85ae8:	781b      	ldrb	r3, [r3, #0]
   85aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85aee:	2b40      	cmp	r3, #64	; 0x40
   85af0:	d103      	bne.n	85afa <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   85af2:	4b0c      	ldr	r3, [pc, #48]	; (85b24 <udi_vendor_setup+0x4c>)
   85af4:	4798      	blx	r3
   85af6:	4603      	mov	r3, r0
   85af8:	e00f      	b.n	85b1a <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   85afa:	4b09      	ldr	r3, [pc, #36]	; (85b20 <udi_vendor_setup+0x48>)
   85afc:	781b      	ldrb	r3, [r3, #0]
   85afe:	b25b      	sxtb	r3, r3
   85b00:	2b00      	cmp	r3, #0
   85b02:	db09      	blt.n	85b18 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85b04:	4b06      	ldr	r3, [pc, #24]	; (85b20 <udi_vendor_setup+0x48>)
   85b06:	781b      	ldrb	r3, [r3, #0]
   85b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85b0c:	2b40      	cmp	r3, #64	; 0x40
   85b0e:	d103      	bne.n	85b18 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   85b10:	4b05      	ldr	r3, [pc, #20]	; (85b28 <udi_vendor_setup+0x50>)
   85b12:	4798      	blx	r3
   85b14:	4603      	mov	r3, r0
   85b16:	e000      	b.n	85b1a <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   85b18:	2300      	movs	r3, #0
}
   85b1a:	4618      	mov	r0, r3
   85b1c:	bd80      	pop	{r7, pc}
   85b1e:	bf00      	nop
   85b20:	2000241c 	.word	0x2000241c
   85b24:	0008139d 	.word	0x0008139d
   85b28:	0008122d 	.word	0x0008122d

00085b2c <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   85b2c:	b480      	push	{r7}
   85b2e:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   85b30:	4b02      	ldr	r3, [pc, #8]	; (85b3c <udi_vendor_getsetting+0x10>)
   85b32:	781b      	ldrb	r3, [r3, #0]
}
   85b34:	4618      	mov	r0, r3
   85b36:	46bd      	mov	sp, r7
   85b38:	bc80      	pop	{r7}
   85b3a:	4770      	bx	lr
   85b3c:	20001e4c 	.word	0x20001e4c

00085b40 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85b40:	b590      	push	{r4, r7, lr}
   85b42:	b087      	sub	sp, #28
   85b44:	af02      	add	r7, sp, #8
   85b46:	60f8      	str	r0, [r7, #12]
   85b48:	60b9      	str	r1, [r7, #8]
   85b4a:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   85b4c:	687b      	ldr	r3, [r7, #4]
   85b4e:	9300      	str	r3, [sp, #0]
   85b50:	68bb      	ldr	r3, [r7, #8]
   85b52:	68fa      	ldr	r2, [r7, #12]
   85b54:	2100      	movs	r1, #0
   85b56:	2081      	movs	r0, #129	; 0x81
   85b58:	4c03      	ldr	r4, [pc, #12]	; (85b68 <udi_vendor_bulk_in_run+0x28>)
   85b5a:	47a0      	blx	r4
   85b5c:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   85b5e:	4618      	mov	r0, r3
   85b60:	3714      	adds	r7, #20
   85b62:	46bd      	mov	sp, r7
   85b64:	bd90      	pop	{r4, r7, pc}
   85b66:	bf00      	nop
   85b68:	000868a5 	.word	0x000868a5

00085b6c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85b6c:	b590      	push	{r4, r7, lr}
   85b6e:	b087      	sub	sp, #28
   85b70:	af02      	add	r7, sp, #8
   85b72:	60f8      	str	r0, [r7, #12]
   85b74:	60b9      	str	r1, [r7, #8]
   85b76:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   85b78:	687b      	ldr	r3, [r7, #4]
   85b7a:	9300      	str	r3, [sp, #0]
   85b7c:	68bb      	ldr	r3, [r7, #8]
   85b7e:	68fa      	ldr	r2, [r7, #12]
   85b80:	2100      	movs	r1, #0
   85b82:	2002      	movs	r0, #2
   85b84:	4c03      	ldr	r4, [pc, #12]	; (85b94 <udi_vendor_bulk_out_run+0x28>)
   85b86:	47a0      	blx	r4
   85b88:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   85b8a:	4618      	mov	r0, r3
   85b8c:	3714      	adds	r7, #20
   85b8e:	46bd      	mov	sp, r7
   85b90:	bd90      	pop	{r4, r7, pc}
   85b92:	bf00      	nop
   85b94:	000868a5 	.word	0x000868a5

00085b98 <NVIC_EnableIRQ>:
{
   85b98:	b480      	push	{r7}
   85b9a:	b083      	sub	sp, #12
   85b9c:	af00      	add	r7, sp, #0
   85b9e:	4603      	mov	r3, r0
   85ba0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85ba2:	79fb      	ldrb	r3, [r7, #7]
   85ba4:	f003 031f 	and.w	r3, r3, #31
   85ba8:	2201      	movs	r2, #1
   85baa:	fa02 f103 	lsl.w	r1, r2, r3
   85bae:	4a05      	ldr	r2, [pc, #20]	; (85bc4 <NVIC_EnableIRQ+0x2c>)
   85bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85bb4:	095b      	lsrs	r3, r3, #5
   85bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   85bba:	bf00      	nop
   85bbc:	370c      	adds	r7, #12
   85bbe:	46bd      	mov	sp, r7
   85bc0:	bc80      	pop	{r7}
   85bc2:	4770      	bx	lr
   85bc4:	e000e100 	.word	0xe000e100

00085bc8 <NVIC_SetPriority>:
{
   85bc8:	b480      	push	{r7}
   85bca:	b083      	sub	sp, #12
   85bcc:	af00      	add	r7, sp, #0
   85bce:	4603      	mov	r3, r0
   85bd0:	6039      	str	r1, [r7, #0]
   85bd2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   85bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85bd8:	2b00      	cmp	r3, #0
   85bda:	da0b      	bge.n	85bf4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   85bdc:	683b      	ldr	r3, [r7, #0]
   85bde:	b2da      	uxtb	r2, r3
   85be0:	490c      	ldr	r1, [pc, #48]	; (85c14 <NVIC_SetPriority+0x4c>)
   85be2:	79fb      	ldrb	r3, [r7, #7]
   85be4:	f003 030f 	and.w	r3, r3, #15
   85be8:	3b04      	subs	r3, #4
   85bea:	0112      	lsls	r2, r2, #4
   85bec:	b2d2      	uxtb	r2, r2
   85bee:	440b      	add	r3, r1
   85bf0:	761a      	strb	r2, [r3, #24]
}
   85bf2:	e009      	b.n	85c08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   85bf4:	683b      	ldr	r3, [r7, #0]
   85bf6:	b2da      	uxtb	r2, r3
   85bf8:	4907      	ldr	r1, [pc, #28]	; (85c18 <NVIC_SetPriority+0x50>)
   85bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85bfe:	0112      	lsls	r2, r2, #4
   85c00:	b2d2      	uxtb	r2, r2
   85c02:	440b      	add	r3, r1
   85c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   85c08:	bf00      	nop
   85c0a:	370c      	adds	r7, #12
   85c0c:	46bd      	mov	sp, r7
   85c0e:	bc80      	pop	{r7}
   85c10:	4770      	bx	lr
   85c12:	bf00      	nop
   85c14:	e000ed00 	.word	0xe000ed00
   85c18:	e000e100 	.word	0xe000e100

00085c1c <cpu_irq_save>:
{
   85c1c:	b480      	push	{r7}
   85c1e:	b083      	sub	sp, #12
   85c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c22:	f3ef 8310 	mrs	r3, PRIMASK
   85c26:	603b      	str	r3, [r7, #0]
  return(result);
   85c28:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   85c2a:	2b00      	cmp	r3, #0
   85c2c:	bf0c      	ite	eq
   85c2e:	2301      	moveq	r3, #1
   85c30:	2300      	movne	r3, #0
   85c32:	b2db      	uxtb	r3, r3
   85c34:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   85c36:	b672      	cpsid	i
}
   85c38:	bf00      	nop
  __ASM volatile ("dmb");
   85c3a:	f3bf 8f5f 	dmb	sy
}
   85c3e:	bf00      	nop
	cpu_irq_disable();
   85c40:	4b04      	ldr	r3, [pc, #16]	; (85c54 <cpu_irq_save+0x38>)
   85c42:	2200      	movs	r2, #0
   85c44:	701a      	strb	r2, [r3, #0]
	return flags;
   85c46:	687b      	ldr	r3, [r7, #4]
}
   85c48:	4618      	mov	r0, r3
   85c4a:	370c      	adds	r7, #12
   85c4c:	46bd      	mov	sp, r7
   85c4e:	bc80      	pop	{r7}
   85c50:	4770      	bx	lr
   85c52:	bf00      	nop
   85c54:	20000284 	.word	0x20000284

00085c58 <cpu_irq_is_enabled_flags>:
{
   85c58:	b480      	push	{r7}
   85c5a:	b083      	sub	sp, #12
   85c5c:	af00      	add	r7, sp, #0
   85c5e:	6078      	str	r0, [r7, #4]
	return (flags);
   85c60:	687b      	ldr	r3, [r7, #4]
   85c62:	2b00      	cmp	r3, #0
   85c64:	bf14      	ite	ne
   85c66:	2301      	movne	r3, #1
   85c68:	2300      	moveq	r3, #0
   85c6a:	b2db      	uxtb	r3, r3
}
   85c6c:	4618      	mov	r0, r3
   85c6e:	370c      	adds	r7, #12
   85c70:	46bd      	mov	sp, r7
   85c72:	bc80      	pop	{r7}
   85c74:	4770      	bx	lr
   85c76:	0000      	movs	r0, r0

00085c78 <cpu_irq_restore>:
{
   85c78:	b580      	push	{r7, lr}
   85c7a:	b082      	sub	sp, #8
   85c7c:	af00      	add	r7, sp, #0
   85c7e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   85c80:	6878      	ldr	r0, [r7, #4]
   85c82:	4b08      	ldr	r3, [pc, #32]	; (85ca4 <cpu_irq_restore+0x2c>)
   85c84:	4798      	blx	r3
   85c86:	4603      	mov	r3, r0
   85c88:	2b00      	cmp	r3, #0
   85c8a:	d007      	beq.n	85c9c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   85c8c:	4b06      	ldr	r3, [pc, #24]	; (85ca8 <cpu_irq_restore+0x30>)
   85c8e:	2201      	movs	r2, #1
   85c90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85c92:	f3bf 8f5f 	dmb	sy
}
   85c96:	bf00      	nop
  __ASM volatile ("cpsie i");
   85c98:	b662      	cpsie	i
}
   85c9a:	bf00      	nop
}
   85c9c:	bf00      	nop
   85c9e:	3708      	adds	r7, #8
   85ca0:	46bd      	mov	sp, r7
   85ca2:	bd80      	pop	{r7, pc}
   85ca4:	00085c59 	.word	0x00085c59
   85ca8:	20000284 	.word	0x20000284

00085cac <sleepmgr_lock_mode>:
{
   85cac:	b580      	push	{r7, lr}
   85cae:	b084      	sub	sp, #16
   85cb0:	af00      	add	r7, sp, #0
   85cb2:	4603      	mov	r3, r0
   85cb4:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   85cb6:	4b08      	ldr	r3, [pc, #32]	; (85cd8 <sleepmgr_lock_mode+0x2c>)
   85cb8:	4798      	blx	r3
   85cba:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   85cbc:	79fb      	ldrb	r3, [r7, #7]
   85cbe:	4a07      	ldr	r2, [pc, #28]	; (85cdc <sleepmgr_lock_mode+0x30>)
   85cc0:	5cd2      	ldrb	r2, [r2, r3]
   85cc2:	3201      	adds	r2, #1
   85cc4:	b2d1      	uxtb	r1, r2
   85cc6:	4a05      	ldr	r2, [pc, #20]	; (85cdc <sleepmgr_lock_mode+0x30>)
   85cc8:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   85cca:	68f8      	ldr	r0, [r7, #12]
   85ccc:	4b04      	ldr	r3, [pc, #16]	; (85ce0 <sleepmgr_lock_mode+0x34>)
   85cce:	4798      	blx	r3
}
   85cd0:	bf00      	nop
   85cd2:	3710      	adds	r7, #16
   85cd4:	46bd      	mov	sp, r7
   85cd6:	bd80      	pop	{r7, pc}
   85cd8:	00085c1d 	.word	0x00085c1d
   85cdc:	20002414 	.word	0x20002414
   85ce0:	00085c79 	.word	0x00085c79

00085ce4 <sleepmgr_unlock_mode>:
{
   85ce4:	b580      	push	{r7, lr}
   85ce6:	b084      	sub	sp, #16
   85ce8:	af00      	add	r7, sp, #0
   85cea:	4603      	mov	r3, r0
   85cec:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   85cee:	4b08      	ldr	r3, [pc, #32]	; (85d10 <sleepmgr_unlock_mode+0x2c>)
   85cf0:	4798      	blx	r3
   85cf2:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   85cf4:	79fb      	ldrb	r3, [r7, #7]
   85cf6:	4a07      	ldr	r2, [pc, #28]	; (85d14 <sleepmgr_unlock_mode+0x30>)
   85cf8:	5cd2      	ldrb	r2, [r2, r3]
   85cfa:	3a01      	subs	r2, #1
   85cfc:	b2d1      	uxtb	r1, r2
   85cfe:	4a05      	ldr	r2, [pc, #20]	; (85d14 <sleepmgr_unlock_mode+0x30>)
   85d00:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   85d02:	68f8      	ldr	r0, [r7, #12]
   85d04:	4b04      	ldr	r3, [pc, #16]	; (85d18 <sleepmgr_unlock_mode+0x34>)
   85d06:	4798      	blx	r3
}
   85d08:	bf00      	nop
   85d0a:	3710      	adds	r7, #16
   85d0c:	46bd      	mov	sp, r7
   85d0e:	bd80      	pop	{r7, pc}
   85d10:	00085c1d 	.word	0x00085c1d
   85d14:	20002414 	.word	0x20002414
   85d18:	00085c79 	.word	0x00085c79

00085d1c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   85d1c:	b580      	push	{r7, lr}
   85d1e:	b082      	sub	sp, #8
   85d20:	af00      	add	r7, sp, #0
   85d22:	4603      	mov	r3, r0
   85d24:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   85d26:	79fb      	ldrb	r3, [r7, #7]
   85d28:	f083 0301 	eor.w	r3, r3, #1
   85d2c:	b2db      	uxtb	r3, r3
   85d2e:	2b00      	cmp	r3, #0
   85d30:	d006      	beq.n	85d40 <udd_sleep_mode+0x24>
   85d32:	4b0d      	ldr	r3, [pc, #52]	; (85d68 <udd_sleep_mode+0x4c>)
   85d34:	781b      	ldrb	r3, [r3, #0]
   85d36:	2b00      	cmp	r3, #0
   85d38:	d002      	beq.n	85d40 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   85d3a:	2002      	movs	r0, #2
   85d3c:	4b0b      	ldr	r3, [pc, #44]	; (85d6c <udd_sleep_mode+0x50>)
   85d3e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   85d40:	79fb      	ldrb	r3, [r7, #7]
   85d42:	2b00      	cmp	r3, #0
   85d44:	d009      	beq.n	85d5a <udd_sleep_mode+0x3e>
   85d46:	4b08      	ldr	r3, [pc, #32]	; (85d68 <udd_sleep_mode+0x4c>)
   85d48:	781b      	ldrb	r3, [r3, #0]
   85d4a:	f083 0301 	eor.w	r3, r3, #1
   85d4e:	b2db      	uxtb	r3, r3
   85d50:	2b00      	cmp	r3, #0
   85d52:	d002      	beq.n	85d5a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   85d54:	2002      	movs	r0, #2
   85d56:	4b06      	ldr	r3, [pc, #24]	; (85d70 <udd_sleep_mode+0x54>)
   85d58:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   85d5a:	4a03      	ldr	r2, [pc, #12]	; (85d68 <udd_sleep_mode+0x4c>)
   85d5c:	79fb      	ldrb	r3, [r7, #7]
   85d5e:	7013      	strb	r3, [r2, #0]
}
   85d60:	bf00      	nop
   85d62:	3708      	adds	r7, #8
   85d64:	46bd      	mov	sp, r7
   85d66:	bd80      	pop	{r7, pc}
   85d68:	20001e4d 	.word	0x20001e4d
   85d6c:	00085ce5 	.word	0x00085ce5
   85d70:	00085cad 	.word	0x00085cad

00085d74 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   85d74:	b580      	push	{r7, lr}
   85d76:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   85d78:	201d      	movs	r0, #29
   85d7a:	4b5f      	ldr	r3, [pc, #380]	; (85ef8 <UDPHS_Handler+0x184>)
   85d7c:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85d7e:	4b5f      	ldr	r3, [pc, #380]	; (85efc <UDPHS_Handler+0x188>)
   85d80:	4798      	blx	r3
   85d82:	4603      	mov	r3, r0
   85d84:	f083 0301 	eor.w	r3, r3, #1
   85d88:	b2db      	uxtb	r3, r3
   85d8a:	2b00      	cmp	r3, #0
   85d8c:	d00e      	beq.n	85dac <UDPHS_Handler+0x38>
   85d8e:	4b5c      	ldr	r3, [pc, #368]	; (85f00 <UDPHS_Handler+0x18c>)
   85d90:	695b      	ldr	r3, [r3, #20]
   85d92:	f003 0302 	and.w	r3, r3, #2
   85d96:	2b00      	cmp	r3, #0
   85d98:	d108      	bne.n	85dac <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   85d9a:	b672      	cpsid	i
}
   85d9c:	bf00      	nop
  __ASM volatile ("dmb");
   85d9e:	f3bf 8f5f 	dmb	sy
}
   85da2:	bf00      	nop
		cpu_irq_disable();
   85da4:	4b57      	ldr	r3, [pc, #348]	; (85f04 <UDPHS_Handler+0x190>)
   85da6:	2200      	movs	r2, #0
   85da8:	701a      	strb	r2, [r3, #0]
		return;
   85daa:	e0a4      	b.n	85ef6 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   85dac:	4b54      	ldr	r3, [pc, #336]	; (85f00 <UDPHS_Handler+0x18c>)
   85dae:	695b      	ldr	r3, [r3, #20]
   85db0:	f003 0308 	and.w	r3, r3, #8
   85db4:	2b00      	cmp	r3, #0
   85db6:	d00d      	beq.n	85dd4 <UDPHS_Handler+0x60>
		udd_ack_sof();
   85db8:	4b51      	ldr	r3, [pc, #324]	; (85f00 <UDPHS_Handler+0x18c>)
   85dba:	2208      	movs	r2, #8
   85dbc:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85dbe:	4b50      	ldr	r3, [pc, #320]	; (85f00 <UDPHS_Handler+0x18c>)
   85dc0:	695b      	ldr	r3, [r3, #20]
   85dc2:	f003 0301 	and.w	r3, r3, #1
   85dc6:	2b00      	cmp	r3, #0
   85dc8:	d101      	bne.n	85dce <UDPHS_Handler+0x5a>
			udc_sof_notify();
   85dca:	4b4f      	ldr	r3, [pc, #316]	; (85f08 <UDPHS_Handler+0x194>)
   85dcc:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   85dce:	4b4f      	ldr	r3, [pc, #316]	; (85f0c <UDPHS_Handler+0x198>)
   85dd0:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   85dd2:	e08f      	b.n	85ef4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   85dd4:	4b4a      	ldr	r3, [pc, #296]	; (85f00 <UDPHS_Handler+0x18c>)
   85dd6:	695b      	ldr	r3, [r3, #20]
   85dd8:	f003 0304 	and.w	r3, r3, #4
   85ddc:	2b00      	cmp	r3, #0
   85dde:	d005      	beq.n	85dec <UDPHS_Handler+0x78>
		udd_ack_msof();
   85de0:	4b47      	ldr	r3, [pc, #284]	; (85f00 <UDPHS_Handler+0x18c>)
   85de2:	2204      	movs	r2, #4
   85de4:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85de6:	4b48      	ldr	r3, [pc, #288]	; (85f08 <UDPHS_Handler+0x194>)
   85de8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85dea:	e083      	b.n	85ef4 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   85dec:	4b48      	ldr	r3, [pc, #288]	; (85f10 <UDPHS_Handler+0x19c>)
   85dee:	4798      	blx	r3
   85df0:	4603      	mov	r3, r0
   85df2:	2b00      	cmp	r3, #0
   85df4:	d179      	bne.n	85eea <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   85df6:	4b47      	ldr	r3, [pc, #284]	; (85f14 <UDPHS_Handler+0x1a0>)
   85df8:	4798      	blx	r3
   85dfa:	4603      	mov	r3, r0
   85dfc:	2b00      	cmp	r3, #0
   85dfe:	d176      	bne.n	85eee <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   85e00:	4b3f      	ldr	r3, [pc, #252]	; (85f00 <UDPHS_Handler+0x18c>)
   85e02:	695b      	ldr	r3, [r3, #20]
   85e04:	f003 0310 	and.w	r3, r3, #16
   85e08:	2b00      	cmp	r3, #0
   85e0a:	d01d      	beq.n	85e48 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   85e0c:	4b3c      	ldr	r3, [pc, #240]	; (85f00 <UDPHS_Handler+0x18c>)
   85e0e:	2210      	movs	r2, #16
   85e10:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   85e12:	4b41      	ldr	r3, [pc, #260]	; (85f18 <UDPHS_Handler+0x1a4>)
   85e14:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   85e16:	4b41      	ldr	r3, [pc, #260]	; (85f1c <UDPHS_Handler+0x1a8>)
   85e18:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   85e1a:	4b41      	ldr	r3, [pc, #260]	; (85f20 <UDPHS_Handler+0x1ac>)
   85e1c:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   85e1e:	4b41      	ldr	r3, [pc, #260]	; (85f24 <UDPHS_Handler+0x1b0>)
   85e20:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   85e22:	4b37      	ldr	r3, [pc, #220]	; (85f00 <UDPHS_Handler+0x18c>)
   85e24:	691b      	ldr	r3, [r3, #16]
   85e26:	4a36      	ldr	r2, [pc, #216]	; (85f00 <UDPHS_Handler+0x18c>)
   85e28:	f043 0308 	orr.w	r3, r3, #8
   85e2c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   85e2e:	4b34      	ldr	r3, [pc, #208]	; (85f00 <UDPHS_Handler+0x18c>)
   85e30:	691b      	ldr	r3, [r3, #16]
   85e32:	4a33      	ldr	r2, [pc, #204]	; (85f00 <UDPHS_Handler+0x18c>)
   85e34:	f043 0304 	orr.w	r3, r3, #4
   85e38:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   85e3a:	4b31      	ldr	r3, [pc, #196]	; (85f00 <UDPHS_Handler+0x18c>)
   85e3c:	691b      	ldr	r3, [r3, #16]
   85e3e:	4a30      	ldr	r2, [pc, #192]	; (85f00 <UDPHS_Handler+0x18c>)
   85e40:	f043 0302 	orr.w	r3, r3, #2
   85e44:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   85e46:	e055      	b.n	85ef4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   85e48:	4b2d      	ldr	r3, [pc, #180]	; (85f00 <UDPHS_Handler+0x18c>)
   85e4a:	691b      	ldr	r3, [r3, #16]
   85e4c:	f003 0302 	and.w	r3, r3, #2
   85e50:	2b00      	cmp	r3, #0
   85e52:	d020      	beq.n	85e96 <UDPHS_Handler+0x122>
   85e54:	4b2a      	ldr	r3, [pc, #168]	; (85f00 <UDPHS_Handler+0x18c>)
   85e56:	695b      	ldr	r3, [r3, #20]
   85e58:	f003 0302 	and.w	r3, r3, #2
   85e5c:	2b00      	cmp	r3, #0
   85e5e:	d01a      	beq.n	85e96 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   85e60:	4b27      	ldr	r3, [pc, #156]	; (85f00 <UDPHS_Handler+0x18c>)
   85e62:	2220      	movs	r2, #32
   85e64:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   85e66:	4b26      	ldr	r3, [pc, #152]	; (85f00 <UDPHS_Handler+0x18c>)
   85e68:	691b      	ldr	r3, [r3, #16]
   85e6a:	4a25      	ldr	r2, [pc, #148]	; (85f00 <UDPHS_Handler+0x18c>)
   85e6c:	f023 0302 	bic.w	r3, r3, #2
   85e70:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   85e72:	4b23      	ldr	r3, [pc, #140]	; (85f00 <UDPHS_Handler+0x18c>)
   85e74:	691b      	ldr	r3, [r3, #16]
   85e76:	4a22      	ldr	r2, [pc, #136]	; (85f00 <UDPHS_Handler+0x18c>)
   85e78:	f043 0320 	orr.w	r3, r3, #32
   85e7c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   85e7e:	4b20      	ldr	r3, [pc, #128]	; (85f00 <UDPHS_Handler+0x18c>)
   85e80:	2202      	movs	r2, #2
   85e82:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   85e84:	201d      	movs	r0, #29
   85e86:	4b28      	ldr	r3, [pc, #160]	; (85f28 <UDPHS_Handler+0x1b4>)
   85e88:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   85e8a:	4b28      	ldr	r3, [pc, #160]	; (85f2c <UDPHS_Handler+0x1b8>)
   85e8c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   85e8e:	2000      	movs	r0, #0
   85e90:	4b27      	ldr	r3, [pc, #156]	; (85f30 <UDPHS_Handler+0x1bc>)
   85e92:	4798      	blx	r3
		goto udd_interrupt_end;
   85e94:	e02e      	b.n	85ef4 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   85e96:	4b1a      	ldr	r3, [pc, #104]	; (85f00 <UDPHS_Handler+0x18c>)
   85e98:	695b      	ldr	r3, [r3, #20]
   85e9a:	f003 0320 	and.w	r3, r3, #32
   85e9e:	2b00      	cmp	r3, #0
   85ea0:	d027      	beq.n	85ef2 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   85ea2:	2001      	movs	r0, #1
   85ea4:	4b22      	ldr	r3, [pc, #136]	; (85f30 <UDPHS_Handler+0x1bc>)
   85ea6:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   85ea8:	4b15      	ldr	r3, [pc, #84]	; (85f00 <UDPHS_Handler+0x18c>)
   85eaa:	2202      	movs	r2, #2
   85eac:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   85eae:	4b14      	ldr	r3, [pc, #80]	; (85f00 <UDPHS_Handler+0x18c>)
   85eb0:	2220      	movs	r2, #32
   85eb2:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   85eb4:	4b12      	ldr	r3, [pc, #72]	; (85f00 <UDPHS_Handler+0x18c>)
   85eb6:	691b      	ldr	r3, [r3, #16]
   85eb8:	4a11      	ldr	r2, [pc, #68]	; (85f00 <UDPHS_Handler+0x18c>)
   85eba:	f023 0320 	bic.w	r3, r3, #32
   85ebe:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   85ec0:	4b0f      	ldr	r3, [pc, #60]	; (85f00 <UDPHS_Handler+0x18c>)
   85ec2:	691b      	ldr	r3, [r3, #16]
   85ec4:	4a0e      	ldr	r2, [pc, #56]	; (85f00 <UDPHS_Handler+0x18c>)
   85ec6:	f043 0302 	orr.w	r3, r3, #2
   85eca:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   85ecc:	4b0c      	ldr	r3, [pc, #48]	; (85f00 <UDPHS_Handler+0x18c>)
   85ece:	691b      	ldr	r3, [r3, #16]
   85ed0:	4a0b      	ldr	r2, [pc, #44]	; (85f00 <UDPHS_Handler+0x18c>)
   85ed2:	f043 0308 	orr.w	r3, r3, #8
   85ed6:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   85ed8:	4b09      	ldr	r3, [pc, #36]	; (85f00 <UDPHS_Handler+0x18c>)
   85eda:	691b      	ldr	r3, [r3, #16]
   85edc:	4a08      	ldr	r2, [pc, #32]	; (85f00 <UDPHS_Handler+0x18c>)
   85ede:	f043 0304 	orr.w	r3, r3, #4
   85ee2:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   85ee4:	4b13      	ldr	r3, [pc, #76]	; (85f34 <UDPHS_Handler+0x1c0>)
   85ee6:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   85ee8:	e004      	b.n	85ef4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   85eea:	bf00      	nop
   85eec:	e002      	b.n	85ef4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   85eee:	bf00      	nop
   85ef0:	e000      	b.n	85ef4 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   85ef2:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   85ef4:	bf00      	nop
}
   85ef6:	bd80      	pop	{r7, pc}
   85ef8:	00083165 	.word	0x00083165
   85efc:	00083729 	.word	0x00083729
   85f00:	400a4000 	.word	0x400a4000
   85f04:	20000284 	.word	0x20000284
   85f08:	00084379 	.word	0x00084379
   85f0c:	00080ea1 	.word	0x00080ea1
   85f10:	0008722d 	.word	0x0008722d
   85f14:	00087649 	.word	0x00087649
   85f18:	0008736d 	.word	0x0008736d
   85f1c:	00084325 	.word	0x00084325
   85f20:	00086b8d 	.word	0x00086b8d
   85f24:	00086c0d 	.word	0x00086c0d
   85f28:	000831b1 	.word	0x000831b1
   85f2c:	00080e75 	.word	0x00080e75
   85f30:	00085d1d 	.word	0x00085d1d
   85f34:	00080e91 	.word	0x00080e91

00085f38 <udd_enable>:
#endif
}


void udd_enable(void)
{
   85f38:	b580      	push	{r7, lr}
   85f3a:	b082      	sub	sp, #8
   85f3c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   85f3e:	4b19      	ldr	r3, [pc, #100]	; (85fa4 <udd_enable+0x6c>)
   85f40:	4798      	blx	r3

	udd_enable_periph_ck();
   85f42:	201d      	movs	r0, #29
   85f44:	4b18      	ldr	r3, [pc, #96]	; (85fa8 <udd_enable+0x70>)
   85f46:	4798      	blx	r3

	flags = cpu_irq_save();
   85f48:	4b18      	ldr	r3, [pc, #96]	; (85fac <udd_enable+0x74>)
   85f4a:	4798      	blx	r3
   85f4c:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   85f4e:	4b18      	ldr	r3, [pc, #96]	; (85fb0 <udd_enable+0x78>)
   85f50:	681b      	ldr	r3, [r3, #0]
   85f52:	4a17      	ldr	r2, [pc, #92]	; (85fb0 <udd_enable+0x78>)
   85f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85f58:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   85f5a:	2105      	movs	r1, #5
   85f5c:	201d      	movs	r0, #29
   85f5e:	4b15      	ldr	r3, [pc, #84]	; (85fb4 <udd_enable+0x7c>)
   85f60:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   85f62:	201d      	movs	r0, #29
   85f64:	4b14      	ldr	r3, [pc, #80]	; (85fb8 <udd_enable+0x80>)
   85f66:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   85f68:	4b14      	ldr	r3, [pc, #80]	; (85fbc <udd_enable+0x84>)
   85f6a:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   85f6c:	4b10      	ldr	r3, [pc, #64]	; (85fb0 <udd_enable+0x78>)
   85f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85f72:	4a0f      	ldr	r2, [pc, #60]	; (85fb0 <udd_enable+0x78>)
   85f74:	f023 0303 	bic.w	r3, r3, #3
   85f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   85f7c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   85f80:	4b0f      	ldr	r3, [pc, #60]	; (85fc0 <udd_enable+0x88>)
   85f82:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   85f84:	4b0f      	ldr	r3, [pc, #60]	; (85fc4 <udd_enable+0x8c>)
   85f86:	2200      	movs	r2, #0
   85f88:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   85f8a:	2003      	movs	r0, #3
   85f8c:	4b0e      	ldr	r3, [pc, #56]	; (85fc8 <udd_enable+0x90>)
   85f8e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   85f90:	4b0e      	ldr	r3, [pc, #56]	; (85fcc <udd_enable+0x94>)
   85f92:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   85f94:	6878      	ldr	r0, [r7, #4]
   85f96:	4b0e      	ldr	r3, [pc, #56]	; (85fd0 <udd_enable+0x98>)
   85f98:	4798      	blx	r3
}
   85f9a:	bf00      	nop
   85f9c:	3708      	adds	r7, #8
   85f9e:	46bd      	mov	sp, r7
   85fa0:	bd80      	pop	{r7, pc}
   85fa2:	bf00      	nop
   85fa4:	00083e49 	.word	0x00083e49
   85fa8:	00083165 	.word	0x00083165
   85fac:	00085c1d 	.word	0x00085c1d
   85fb0:	400a4000 	.word	0x400a4000
   85fb4:	00085bc9 	.word	0x00085bc9
   85fb8:	00085b99 	.word	0x00085b99
   85fbc:	00087311 	.word	0x00087311
   85fc0:	00083221 	.word	0x00083221
   85fc4:	20001e4d 	.word	0x20001e4d
   85fc8:	00085cad 	.word	0x00085cad
   85fcc:	00085fd5 	.word	0x00085fd5
   85fd0:	00085c79 	.word	0x00085c79

00085fd4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   85fd4:	b580      	push	{r7, lr}
   85fd6:	b082      	sub	sp, #8
   85fd8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   85fda:	4b26      	ldr	r3, [pc, #152]	; (86074 <udd_attach+0xa0>)
   85fdc:	4798      	blx	r3
   85fde:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   85fe0:	2001      	movs	r0, #1
   85fe2:	4b25      	ldr	r3, [pc, #148]	; (86078 <udd_attach+0xa4>)
   85fe4:	4798      	blx	r3
	udd_enable_periph_ck();
   85fe6:	201d      	movs	r0, #29
   85fe8:	4b24      	ldr	r3, [pc, #144]	; (8607c <udd_attach+0xa8>)
   85fea:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   85fec:	4b24      	ldr	r3, [pc, #144]	; (86080 <udd_attach+0xac>)
   85fee:	681b      	ldr	r3, [r3, #0]
   85ff0:	4a23      	ldr	r2, [pc, #140]	; (86080 <udd_attach+0xac>)
   85ff2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85ff6:	6013      	str	r3, [r2, #0]
   85ff8:	4b21      	ldr	r3, [pc, #132]	; (86080 <udd_attach+0xac>)
   85ffa:	681b      	ldr	r3, [r3, #0]
   85ffc:	4a20      	ldr	r2, [pc, #128]	; (86080 <udd_attach+0xac>)
   85ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   86002:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   86004:	4b1e      	ldr	r3, [pc, #120]	; (86080 <udd_attach+0xac>)
   86006:	691b      	ldr	r3, [r3, #16]
   86008:	4a1d      	ldr	r2, [pc, #116]	; (86080 <udd_attach+0xac>)
   8600a:	f043 0310 	orr.w	r3, r3, #16
   8600e:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   86010:	4b1b      	ldr	r3, [pc, #108]	; (86080 <udd_attach+0xac>)
   86012:	691b      	ldr	r3, [r3, #16]
   86014:	4a1a      	ldr	r2, [pc, #104]	; (86080 <udd_attach+0xac>)
   86016:	f043 0302 	orr.w	r3, r3, #2
   8601a:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   8601c:	4b18      	ldr	r3, [pc, #96]	; (86080 <udd_attach+0xac>)
   8601e:	691b      	ldr	r3, [r3, #16]
   86020:	4a17      	ldr	r2, [pc, #92]	; (86080 <udd_attach+0xac>)
   86022:	f043 0320 	orr.w	r3, r3, #32
   86026:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   86028:	4b15      	ldr	r3, [pc, #84]	; (86080 <udd_attach+0xac>)
   8602a:	691b      	ldr	r3, [r3, #16]
   8602c:	4a14      	ldr	r2, [pc, #80]	; (86080 <udd_attach+0xac>)
   8602e:	f043 0308 	orr.w	r3, r3, #8
   86032:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   86034:	4b12      	ldr	r3, [pc, #72]	; (86080 <udd_attach+0xac>)
   86036:	691b      	ldr	r3, [r3, #16]
   86038:	4a11      	ldr	r2, [pc, #68]	; (86080 <udd_attach+0xac>)
   8603a:	f043 0304 	orr.w	r3, r3, #4
   8603e:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   86040:	4b0f      	ldr	r3, [pc, #60]	; (86080 <udd_attach+0xac>)
   86042:	2208      	movs	r2, #8
   86044:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   86046:	4b0e      	ldr	r3, [pc, #56]	; (86080 <udd_attach+0xac>)
   86048:	2204      	movs	r2, #4
   8604a:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   8604c:	4b0c      	ldr	r3, [pc, #48]	; (86080 <udd_attach+0xac>)
   8604e:	2210      	movs	r2, #16
   86050:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   86052:	4b0b      	ldr	r3, [pc, #44]	; (86080 <udd_attach+0xac>)
   86054:	2202      	movs	r2, #2
   86056:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   86058:	4b09      	ldr	r3, [pc, #36]	; (86080 <udd_attach+0xac>)
   8605a:	2220      	movs	r2, #32
   8605c:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   8605e:	201d      	movs	r0, #29
   86060:	4b08      	ldr	r3, [pc, #32]	; (86084 <udd_attach+0xb0>)
   86062:	4798      	blx	r3
	cpu_irq_restore(flags);
   86064:	6878      	ldr	r0, [r7, #4]
   86066:	4b08      	ldr	r3, [pc, #32]	; (86088 <udd_attach+0xb4>)
   86068:	4798      	blx	r3
}
   8606a:	bf00      	nop
   8606c:	3708      	adds	r7, #8
   8606e:	46bd      	mov	sp, r7
   86070:	bd80      	pop	{r7, pc}
   86072:	bf00      	nop
   86074:	00085c1d 	.word	0x00085c1d
   86078:	00085d1d 	.word	0x00085d1d
   8607c:	00083165 	.word	0x00083165
   86080:	400a4000 	.word	0x400a4000
   86084:	000831b1 	.word	0x000831b1
   86088:	00085c79 	.word	0x00085c79

0008608c <udd_detach>:


void udd_detach(void)
{
   8608c:	b580      	push	{r7, lr}
   8608e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   86090:	201d      	movs	r0, #29
   86092:	4b0b      	ldr	r3, [pc, #44]	; (860c0 <udd_detach+0x34>)
   86094:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   86096:	4b0b      	ldr	r3, [pc, #44]	; (860c4 <udd_detach+0x38>)
   86098:	681b      	ldr	r3, [r3, #0]
   8609a:	4a0a      	ldr	r2, [pc, #40]	; (860c4 <udd_detach+0x38>)
   8609c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   860a0:	6013      	str	r3, [r2, #0]
   860a2:	4b08      	ldr	r3, [pc, #32]	; (860c4 <udd_detach+0x38>)
   860a4:	681b      	ldr	r3, [r3, #0]
   860a6:	4a07      	ldr	r2, [pc, #28]	; (860c4 <udd_detach+0x38>)
   860a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   860ac:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   860ae:	201d      	movs	r0, #29
   860b0:	4b05      	ldr	r3, [pc, #20]	; (860c8 <udd_detach+0x3c>)
   860b2:	4798      	blx	r3
	udd_sleep_mode(false);
   860b4:	2000      	movs	r0, #0
   860b6:	4b05      	ldr	r3, [pc, #20]	; (860cc <udd_detach+0x40>)
   860b8:	4798      	blx	r3
}
   860ba:	bf00      	nop
   860bc:	bd80      	pop	{r7, pc}
   860be:	bf00      	nop
   860c0:	00083165 	.word	0x00083165
   860c4:	400a4000 	.word	0x400a4000
   860c8:	000831b1 	.word	0x000831b1
   860cc:	00085d1d 	.word	0x00085d1d

000860d0 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   860d0:	b480      	push	{r7}
   860d2:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   860d4:	4b06      	ldr	r3, [pc, #24]	; (860f0 <udd_is_high_speed+0x20>)
   860d6:	695b      	ldr	r3, [r3, #20]
   860d8:	f003 0301 	and.w	r3, r3, #1
   860dc:	2b00      	cmp	r3, #0
   860de:	bf14      	ite	ne
   860e0:	2301      	movne	r3, #1
   860e2:	2300      	moveq	r3, #0
   860e4:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   860e6:	4618      	mov	r0, r3
   860e8:	46bd      	mov	sp, r7
   860ea:	bc80      	pop	{r7}
   860ec:	4770      	bx	lr
   860ee:	bf00      	nop
   860f0:	400a4000 	.word	0x400a4000

000860f4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   860f4:	b480      	push	{r7}
   860f6:	b083      	sub	sp, #12
   860f8:	af00      	add	r7, sp, #0
   860fa:	4603      	mov	r3, r0
   860fc:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   860fe:	4b0d      	ldr	r3, [pc, #52]	; (86134 <udd_set_address+0x40>)
   86100:	681b      	ldr	r3, [r3, #0]
   86102:	4a0c      	ldr	r2, [pc, #48]	; (86134 <udd_set_address+0x40>)
   86104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86108:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   8610a:	4b0a      	ldr	r3, [pc, #40]	; (86134 <udd_set_address+0x40>)
   8610c:	681b      	ldr	r3, [r3, #0]
   8610e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   86112:	79fb      	ldrb	r3, [r7, #7]
   86114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   86118:	4906      	ldr	r1, [pc, #24]	; (86134 <udd_set_address+0x40>)
   8611a:	4313      	orrs	r3, r2
   8611c:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   8611e:	4b05      	ldr	r3, [pc, #20]	; (86134 <udd_set_address+0x40>)
   86120:	681b      	ldr	r3, [r3, #0]
   86122:	4a04      	ldr	r2, [pc, #16]	; (86134 <udd_set_address+0x40>)
   86124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86128:	6013      	str	r3, [r2, #0]
}
   8612a:	bf00      	nop
   8612c:	370c      	adds	r7, #12
   8612e:	46bd      	mov	sp, r7
   86130:	bc80      	pop	{r7}
   86132:	4770      	bx	lr
   86134:	400a4000 	.word	0x400a4000

00086138 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   86138:	b480      	push	{r7}
   8613a:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   8613c:	4b04      	ldr	r3, [pc, #16]	; (86150 <udd_getaddress+0x18>)
   8613e:	681b      	ldr	r3, [r3, #0]
   86140:	b2db      	uxtb	r3, r3
   86142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   86146:	b2db      	uxtb	r3, r3
}
   86148:	4618      	mov	r0, r3
   8614a:	46bd      	mov	sp, r7
   8614c:	bc80      	pop	{r7}
   8614e:	4770      	bx	lr
   86150:	400a4000 	.word	0x400a4000

00086154 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   86154:	b480      	push	{r7}
   86156:	af00      	add	r7, sp, #0
	return udd_frame_number();
   86158:	4b05      	ldr	r3, [pc, #20]	; (86170 <udd_get_frame_number+0x1c>)
   8615a:	685b      	ldr	r3, [r3, #4]
   8615c:	08db      	lsrs	r3, r3, #3
   8615e:	b29b      	uxth	r3, r3
   86160:	f3c3 030a 	ubfx	r3, r3, #0, #11
   86164:	b29b      	uxth	r3, r3
}
   86166:	4618      	mov	r0, r3
   86168:	46bd      	mov	sp, r7
   8616a:	bc80      	pop	{r7}
   8616c:	4770      	bx	lr
   8616e:	bf00      	nop
   86170:	400a4000 	.word	0x400a4000

00086174 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
   86174:	b480      	push	{r7}
   86176:	af00      	add	r7, sp, #0
	return udd_micro_frame_number();
   86178:	4b04      	ldr	r3, [pc, #16]	; (8618c <udd_get_micro_frame_number+0x18>)
   8617a:	685b      	ldr	r3, [r3, #4]
   8617c:	b29b      	uxth	r3, r3
   8617e:	f003 0307 	and.w	r3, r3, #7
   86182:	b29b      	uxth	r3, r3
}
   86184:	4618      	mov	r0, r3
   86186:	46bd      	mov	sp, r7
   86188:	bc80      	pop	{r7}
   8618a:	4770      	bx	lr
   8618c:	400a4000 	.word	0x400a4000

00086190 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   86190:	b480      	push	{r7}
   86192:	b083      	sub	sp, #12
   86194:	af00      	add	r7, sp, #0
   86196:	6078      	str	r0, [r7, #4]
   86198:	460b      	mov	r3, r1
   8619a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   8619c:	4a05      	ldr	r2, [pc, #20]	; (861b4 <udd_set_setup_payload+0x24>)
   8619e:	687b      	ldr	r3, [r7, #4]
   861a0:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   861a2:	4a04      	ldr	r2, [pc, #16]	; (861b4 <udd_set_setup_payload+0x24>)
   861a4:	887b      	ldrh	r3, [r7, #2]
   861a6:	8193      	strh	r3, [r2, #12]
}
   861a8:	bf00      	nop
   861aa:	370c      	adds	r7, #12
   861ac:	46bd      	mov	sp, r7
   861ae:	bc80      	pop	{r7}
   861b0:	4770      	bx	lr
   861b2:	bf00      	nop
   861b4:	2000241c 	.word	0x2000241c

000861b8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   861b8:	b590      	push	{r4, r7, lr}
   861ba:	b089      	sub	sp, #36	; 0x24
   861bc:	af02      	add	r7, sp, #8
   861be:	4603      	mov	r3, r0
   861c0:	71fb      	strb	r3, [r7, #7]
   861c2:	460b      	mov	r3, r1
   861c4:	71bb      	strb	r3, [r7, #6]
   861c6:	4613      	mov	r3, r2
   861c8:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   861ca:	2300      	movs	r3, #0
   861cc:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   861ce:	2300      	movs	r3, #0
   861d0:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   861d2:	79fb      	ldrb	r3, [r7, #7]
   861d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   861d8:	2b00      	cmp	r3, #0
   861da:	bf14      	ite	ne
   861dc:	2301      	movne	r3, #1
   861de:	2300      	moveq	r3, #0
   861e0:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   861e2:	79fb      	ldrb	r3, [r7, #7]
   861e4:	f003 030f 	and.w	r3, r3, #15
   861e8:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   861ea:	79fb      	ldrb	r3, [r7, #7]
   861ec:	2b06      	cmp	r3, #6
   861ee:	d901      	bls.n	861f4 <udd_ep_alloc+0x3c>
		return false;
   861f0:	2300      	movs	r3, #0
   861f2:	e1b9      	b.n	86568 <udd_ep_alloc+0x3b0>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   861f4:	4aaa      	ldr	r2, [pc, #680]	; (864a0 <udd_ep_alloc+0x2e8>)
   861f6:	79fb      	ldrb	r3, [r7, #7]
   861f8:	015b      	lsls	r3, r3, #5
   861fa:	4413      	add	r3, r2
   861fc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86200:	681b      	ldr	r3, [r3, #0]
   86202:	f003 0301 	and.w	r3, r3, #1
   86206:	2b00      	cmp	r3, #0
   86208:	d001      	beq.n	8620e <udd_ep_alloc+0x56>
		return false;
   8620a:	2300      	movs	r3, #0
   8620c:	e1ac      	b.n	86568 <udd_ep_alloc+0x3b0>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8620e:	79bb      	ldrb	r3, [r7, #6]
   86210:	f003 0303 	and.w	r3, r3, #3
   86214:	2b03      	cmp	r3, #3
   86216:	d01a      	beq.n	8624e <udd_ep_alloc+0x96>
   86218:	2b03      	cmp	r3, #3
   8621a:	dc23      	bgt.n	86264 <udd_ep_alloc+0xac>
   8621c:	2b01      	cmp	r3, #1
   8621e:	d002      	beq.n	86226 <udd_ep_alloc+0x6e>
   86220:	2b02      	cmp	r3, #2
   86222:	d017      	beq.n	86254 <udd_ep_alloc+0x9c>
   86224:	e01e      	b.n	86264 <udd_ep_alloc+0xac>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   86226:	79fb      	ldrb	r3, [r7, #7]
   86228:	2b00      	cmp	r3, #0
   8622a:	d007      	beq.n	8623c <udd_ep_alloc+0x84>
   8622c:	79fb      	ldrb	r3, [r7, #7]
   8622e:	2b03      	cmp	r3, #3
   86230:	d004      	beq.n	8623c <udd_ep_alloc+0x84>
   86232:	79fb      	ldrb	r3, [r7, #7]
   86234:	2b04      	cmp	r3, #4
   86236:	d001      	beq.n	8623c <udd_ep_alloc+0x84>
   86238:	2301      	movs	r3, #1
   8623a:	e000      	b.n	8623e <udd_ep_alloc+0x86>
   8623c:	2300      	movs	r3, #0
   8623e:	747b      	strb	r3, [r7, #17]
   86240:	7c7b      	ldrb	r3, [r7, #17]
   86242:	f003 0301 	and.w	r3, r3, #1
   86246:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   86248:	2302      	movs	r3, #2
   8624a:	757b      	strb	r3, [r7, #21]
		break;
   8624c:	e00c      	b.n	86268 <udd_ep_alloc+0xb0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   8624e:	2301      	movs	r3, #1
   86250:	757b      	strb	r3, [r7, #21]
		break;
   86252:	e009      	b.n	86268 <udd_ep_alloc+0xb0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   86254:	79fb      	ldrb	r3, [r7, #7]
   86256:	2b02      	cmp	r3, #2
   86258:	d801      	bhi.n	8625e <udd_ep_alloc+0xa6>
   8625a:	2302      	movs	r3, #2
   8625c:	e000      	b.n	86260 <udd_ep_alloc+0xa8>
   8625e:	2301      	movs	r3, #1
   86260:	757b      	strb	r3, [r7, #21]
		break;
   86262:	e001      	b.n	86268 <udd_ep_alloc+0xb0>
	default:
		Assert(false);
		return false;
   86264:	2300      	movs	r3, #0
   86266:	e17f      	b.n	86568 <udd_ep_alloc+0x3b0>
	}
	switch (nb_bank) {
   86268:	7d7b      	ldrb	r3, [r7, #21]
   8626a:	2b03      	cmp	r3, #3
   8626c:	d00c      	beq.n	86288 <udd_ep_alloc+0xd0>
   8626e:	2b03      	cmp	r3, #3
   86270:	dc0d      	bgt.n	8628e <udd_ep_alloc+0xd6>
   86272:	2b01      	cmp	r3, #1
   86274:	d002      	beq.n	8627c <udd_ep_alloc+0xc4>
   86276:	2b02      	cmp	r3, #2
   86278:	d003      	beq.n	86282 <udd_ep_alloc+0xca>
   8627a:	e008      	b.n	8628e <udd_ep_alloc+0xd6>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8627c:	2301      	movs	r3, #1
   8627e:	753b      	strb	r3, [r7, #20]
		break;
   86280:	e007      	b.n	86292 <udd_ep_alloc+0xda>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86282:	2302      	movs	r3, #2
   86284:	753b      	strb	r3, [r7, #20]
		break;
   86286:	e004      	b.n	86292 <udd_ep_alloc+0xda>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86288:	2303      	movs	r3, #3
   8628a:	753b      	strb	r3, [r7, #20]
		break;
   8628c:	e001      	b.n	86292 <udd_ep_alloc+0xda>
	default:
		Assert(false);
		return false;
   8628e:	2300      	movs	r3, #0
   86290:	e16a      	b.n	86568 <udd_ep_alloc+0x3b0>
	}
	if (b_iso_hbw) {
   86292:	7c7b      	ldrb	r3, [r7, #17]
   86294:	2b00      	cmp	r3, #0
   86296:	d017      	beq.n	862c8 <udd_ep_alloc+0x110>
		switch(MaxEndpointSize & (0x3u << 11)) {
   86298:	88bb      	ldrh	r3, [r7, #4]
   8629a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   8629e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   862a2:	d003      	beq.n	862ac <udd_ep_alloc+0xf4>
   862a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   862a8:	d003      	beq.n	862b2 <udd_ep_alloc+0xfa>
   862aa:	e005      	b.n	862b8 <udd_ep_alloc+0x100>
		case (0x1u << 11):
			nb_tran = 2;
   862ac:	2302      	movs	r3, #2
   862ae:	74fb      	strb	r3, [r7, #19]
			break;
   862b0:	e005      	b.n	862be <udd_ep_alloc+0x106>
		case (0x2u << 11):
			nb_tran = 3;
   862b2:	2303      	movs	r3, #3
   862b4:	74fb      	strb	r3, [r7, #19]
			break;
   862b6:	e002      	b.n	862be <udd_ep_alloc+0x106>
		default:
			nb_tran = 1;
   862b8:	2301      	movs	r3, #1
   862ba:	74fb      	strb	r3, [r7, #19]
			break;
   862bc:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   862be:	88bb      	ldrh	r3, [r7, #4]
   862c0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   862c4:	80bb      	strh	r3, [r7, #4]
   862c6:	e006      	b.n	862d6 <udd_ep_alloc+0x11e>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   862c8:	88bb      	ldrh	r3, [r7, #4]
   862ca:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   862ce:	2b00      	cmp	r3, #0
   862d0:	d001      	beq.n	862d6 <udd_ep_alloc+0x11e>
		// High BW not supported
		return false;
   862d2:	2300      	movs	r3, #0
   862d4:	e148      	b.n	86568 <udd_ep_alloc+0x3b0>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   862d6:	4a72      	ldr	r2, [pc, #456]	; (864a0 <udd_ep_alloc+0x2e8>)
   862d8:	79fb      	ldrb	r3, [r7, #7]
   862da:	3308      	adds	r3, #8
   862dc:	015b      	lsls	r3, r3, #5
   862de:	4413      	add	r3, r2
   862e0:	681b      	ldr	r3, [r3, #0]
   862e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   862e6:	f023 0303 	bic.w	r3, r3, #3
   862ea:	79ba      	ldrb	r2, [r7, #6]
   862ec:	0112      	lsls	r2, r2, #4
   862ee:	f002 0230 	and.w	r2, r2, #48	; 0x30
   862f2:	7c39      	ldrb	r1, [r7, #16]
   862f4:	2900      	cmp	r1, #0
   862f6:	d001      	beq.n	862fc <udd_ep_alloc+0x144>
   862f8:	2108      	movs	r1, #8
   862fa:	e000      	b.n	862fe <udd_ep_alloc+0x146>
   862fc:	2100      	movs	r1, #0
   862fe:	4311      	orrs	r1, r2
   86300:	88ba      	ldrh	r2, [r7, #4]
   86302:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   86306:	d207      	bcs.n	86318 <udd_ep_alloc+0x160>
   86308:	88ba      	ldrh	r2, [r7, #4]
   8630a:	2a08      	cmp	r2, #8
   8630c:	bf38      	it	cc
   8630e:	2208      	movcc	r2, #8
   86310:	b292      	uxth	r2, r2
   86312:	0052      	lsls	r2, r2, #1
   86314:	3a01      	subs	r2, #1
   86316:	e001      	b.n	8631c <udd_ep_alloc+0x164>
   86318:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8631c:	fab2 f282 	clz	r2, r2
   86320:	f1c2 021c 	rsb	r2, r2, #28
   86324:	4311      	orrs	r1, r2
   86326:	7d3a      	ldrb	r2, [r7, #20]
   86328:	0192      	lsls	r2, r2, #6
   8632a:	b2d2      	uxtb	r2, r2
   8632c:	4311      	orrs	r1, r2
   8632e:	7c7a      	ldrb	r2, [r7, #17]
   86330:	2a00      	cmp	r2, #0
   86332:	d004      	beq.n	8633e <udd_ep_alloc+0x186>
   86334:	7cfa      	ldrb	r2, [r7, #19]
   86336:	0212      	lsls	r2, r2, #8
   86338:	f402 7240 	and.w	r2, r2, #768	; 0x300
   8633c:	e000      	b.n	86340 <udd_ep_alloc+0x188>
   8633e:	2200      	movs	r2, #0
   86340:	430a      	orrs	r2, r1
   86342:	f3c2 0209 	ubfx	r2, r2, #0, #10
   86346:	4856      	ldr	r0, [pc, #344]	; (864a0 <udd_ep_alloc+0x2e8>)
   86348:	79f9      	ldrb	r1, [r7, #7]
   8634a:	431a      	orrs	r2, r3
   8634c:	f101 0308 	add.w	r3, r1, #8
   86350:	015b      	lsls	r3, r3, #5
   86352:	4403      	add	r3, r0
   86354:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   86356:	4a52      	ldr	r2, [pc, #328]	; (864a0 <udd_ep_alloc+0x2e8>)
   86358:	79fb      	ldrb	r3, [r7, #7]
   8635a:	3308      	adds	r3, #8
   8635c:	015b      	lsls	r3, r3, #5
   8635e:	4413      	add	r3, r2
   86360:	681b      	ldr	r3, [r3, #0]
   86362:	2b00      	cmp	r3, #0
   86364:	db01      	blt.n	8636a <udd_ep_alloc+0x1b2>
		return false;
   86366:	2300      	movs	r3, #0
   86368:	e0fe      	b.n	86568 <udd_ep_alloc+0x3b0>
	}
	udd_enable_endpoint(ep);
   8636a:	4a4d      	ldr	r2, [pc, #308]	; (864a0 <udd_ep_alloc+0x2e8>)
   8636c:	79fb      	ldrb	r3, [r7, #7]
   8636e:	3308      	adds	r3, #8
   86370:	015b      	lsls	r3, r3, #5
   86372:	4413      	add	r3, r2
   86374:	3304      	adds	r3, #4
   86376:	2201      	movs	r2, #1
   86378:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   8637a:	2300      	movs	r3, #0
   8637c:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8637e:	2306      	movs	r3, #6
   86380:	74bb      	strb	r3, [r7, #18]
   86382:	e039      	b.n	863f8 <udd_ep_alloc+0x240>
		if (Is_udd_endpoint_enabled(i)) {
   86384:	4a46      	ldr	r2, [pc, #280]	; (864a0 <udd_ep_alloc+0x2e8>)
   86386:	7cbb      	ldrb	r3, [r7, #18]
   86388:	015b      	lsls	r3, r3, #5
   8638a:	4413      	add	r3, r2
   8638c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86390:	681b      	ldr	r3, [r3, #0]
   86392:	f003 0301 	and.w	r3, r3, #1
   86396:	2b00      	cmp	r3, #0
   86398:	d02b      	beq.n	863f2 <udd_ep_alloc+0x23a>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   8639a:	4a41      	ldr	r2, [pc, #260]	; (864a0 <udd_ep_alloc+0x2e8>)
   8639c:	7cbb      	ldrb	r3, [r7, #18]
   8639e:	3308      	adds	r3, #8
   863a0:	015b      	lsls	r3, r3, #5
   863a2:	4413      	add	r3, r2
   863a4:	681b      	ldr	r3, [r3, #0]
   863a6:	099b      	lsrs	r3, r3, #6
   863a8:	b2db      	uxtb	r3, r3
   863aa:	f003 0303 	and.w	r3, r3, #3
   863ae:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   863b0:	7d3a      	ldrb	r2, [r7, #20]
   863b2:	7cbb      	ldrb	r3, [r7, #18]
   863b4:	005b      	lsls	r3, r3, #1
   863b6:	fa02 f303 	lsl.w	r3, r2, r3
   863ba:	b21a      	sxth	r2, r3
   863bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   863c0:	4313      	orrs	r3, r2
   863c2:	b21b      	sxth	r3, r3
   863c4:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   863c6:	4a36      	ldr	r2, [pc, #216]	; (864a0 <udd_ep_alloc+0x2e8>)
   863c8:	7cbb      	ldrb	r3, [r7, #18]
   863ca:	015b      	lsls	r3, r3, #5
   863cc:	4413      	add	r3, r2
   863ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
   863d2:	2201      	movs	r2, #1
   863d4:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   863d6:	4a32      	ldr	r2, [pc, #200]	; (864a0 <udd_ep_alloc+0x2e8>)
   863d8:	7cbb      	ldrb	r3, [r7, #18]
   863da:	3308      	adds	r3, #8
   863dc:	015b      	lsls	r3, r3, #5
   863de:	4413      	add	r3, r2
   863e0:	681a      	ldr	r2, [r3, #0]
   863e2:	492f      	ldr	r1, [pc, #188]	; (864a0 <udd_ep_alloc+0x2e8>)
   863e4:	7cbb      	ldrb	r3, [r7, #18]
   863e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   863ea:	3308      	adds	r3, #8
   863ec:	015b      	lsls	r3, r3, #5
   863ee:	440b      	add	r3, r1
   863f0:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   863f2:	7cbb      	ldrb	r3, [r7, #18]
   863f4:	3b01      	subs	r3, #1
   863f6:	74bb      	strb	r3, [r7, #18]
   863f8:	7cba      	ldrb	r2, [r7, #18]
   863fa:	79fb      	ldrb	r3, [r7, #7]
   863fc:	429a      	cmp	r2, r3
   863fe:	d2c1      	bcs.n	86384 <udd_ep_alloc+0x1cc>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   86400:	79fb      	ldrb	r3, [r7, #7]
   86402:	74bb      	strb	r3, [r7, #18]
   86404:	e0ab      	b.n	8655e <udd_ep_alloc+0x3a6>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   86406:	7cbb      	ldrb	r3, [r7, #18]
   86408:	1e5a      	subs	r2, r3, #1
   8640a:	4613      	mov	r3, r2
   8640c:	005b      	lsls	r3, r3, #1
   8640e:	4413      	add	r3, r2
   86410:	00db      	lsls	r3, r3, #3
   86412:	4a24      	ldr	r2, [pc, #144]	; (864a4 <udd_ep_alloc+0x2ec>)
   86414:	4413      	add	r3, r2
   86416:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   86418:	68fb      	ldr	r3, [r7, #12]
   8641a:	7d1b      	ldrb	r3, [r3, #20]
   8641c:	f3c3 0300 	ubfx	r3, r3, #0, #1
   86420:	b2db      	uxtb	r3, r3
   86422:	2b00      	cmp	r3, #0
   86424:	bf14      	ite	ne
   86426:	2301      	movne	r3, #1
   86428:	2300      	moveq	r3, #0
   8642a:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8642c:	8afa      	ldrh	r2, [r7, #22]
   8642e:	7cbb      	ldrb	r3, [r7, #18]
   86430:	005b      	lsls	r3, r3, #1
   86432:	fa42 f303 	asr.w	r3, r2, r3
   86436:	b2db      	uxtb	r3, r3
   86438:	f003 0303 	and.w	r3, r3, #3
   8643c:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   8643e:	7d3b      	ldrb	r3, [r7, #20]
   86440:	2b00      	cmp	r3, #0
   86442:	f000 8088 	beq.w	86556 <udd_ep_alloc+0x39e>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   86446:	68fa      	ldr	r2, [r7, #12]
   86448:	7d13      	ldrb	r3, [r2, #20]
   8644a:	f36f 0300 	bfc	r3, #0, #1
   8644e:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   86450:	4a13      	ldr	r2, [pc, #76]	; (864a0 <udd_ep_alloc+0x2e8>)
   86452:	7cbb      	ldrb	r3, [r7, #18]
   86454:	3308      	adds	r3, #8
   86456:	015b      	lsls	r3, r3, #5
   86458:	4413      	add	r3, r2
   8645a:	681b      	ldr	r3, [r3, #0]
   8645c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   86460:	7d3b      	ldrb	r3, [r7, #20]
   86462:	019b      	lsls	r3, r3, #6
   86464:	b2da      	uxtb	r2, r3
   86466:	480e      	ldr	r0, [pc, #56]	; (864a0 <udd_ep_alloc+0x2e8>)
   86468:	7cbb      	ldrb	r3, [r7, #18]
   8646a:	430a      	orrs	r2, r1
   8646c:	3308      	adds	r3, #8
   8646e:	015b      	lsls	r3, r3, #5
   86470:	4403      	add	r3, r0
   86472:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   86474:	4a0a      	ldr	r2, [pc, #40]	; (864a0 <udd_ep_alloc+0x2e8>)
   86476:	7cbb      	ldrb	r3, [r7, #18]
   86478:	3308      	adds	r3, #8
   8647a:	015b      	lsls	r3, r3, #5
   8647c:	4413      	add	r3, r2
   8647e:	3304      	adds	r3, #4
   86480:	2201      	movs	r2, #1
   86482:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   86484:	4a06      	ldr	r2, [pc, #24]	; (864a0 <udd_ep_alloc+0x2e8>)
   86486:	7cbb      	ldrb	r3, [r7, #18]
   86488:	3308      	adds	r3, #8
   8648a:	015b      	lsls	r3, r3, #5
   8648c:	4413      	add	r3, r2
   8648e:	681b      	ldr	r3, [r3, #0]
   86490:	2b00      	cmp	r3, #0
   86492:	db20      	blt.n	864d6 <udd_ep_alloc+0x31e>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   86494:	68fb      	ldr	r3, [r7, #12]
   86496:	681b      	ldr	r3, [r3, #0]
   86498:	2b00      	cmp	r3, #0
   8649a:	d105      	bne.n	864a8 <udd_ep_alloc+0x2f0>
				return false;
   8649c:	2300      	movs	r3, #0
   8649e:	e063      	b.n	86568 <udd_ep_alloc+0x3b0>
   864a0:	400a4000 	.word	0x400a4000
   864a4:	20001e54 	.word	0x20001e54
			}
			if (Is_udd_endpoint_in(i)) {
   864a8:	4a31      	ldr	r2, [pc, #196]	; (86570 <udd_ep_alloc+0x3b8>)
   864aa:	7cbb      	ldrb	r3, [r7, #18]
   864ac:	3308      	adds	r3, #8
   864ae:	015b      	lsls	r3, r3, #5
   864b0:	4413      	add	r3, r2
   864b2:	681b      	ldr	r3, [r3, #0]
   864b4:	f003 0308 	and.w	r3, r3, #8
   864b8:	2b00      	cmp	r3, #0
   864ba:	d003      	beq.n	864c4 <udd_ep_alloc+0x30c>
				i |= USB_EP_DIR_IN;
   864bc:	7cbb      	ldrb	r3, [r7, #18]
   864be:	f063 037f 	orn	r3, r3, #127	; 0x7f
   864c2:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   864c4:	68fb      	ldr	r3, [r7, #12]
   864c6:	681b      	ldr	r3, [r3, #0]
   864c8:	68fa      	ldr	r2, [r7, #12]
   864ca:	68d1      	ldr	r1, [r2, #12]
   864cc:	7cba      	ldrb	r2, [r7, #18]
   864ce:	2001      	movs	r0, #1
   864d0:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   864d2:	2300      	movs	r3, #0
   864d4:	e048      	b.n	86568 <udd_ep_alloc+0x3b0>
		}
		udd_enable_endpoint_bank_autoswitch(i);
   864d6:	4a26      	ldr	r2, [pc, #152]	; (86570 <udd_ep_alloc+0x3b8>)
   864d8:	7cbb      	ldrb	r3, [r7, #18]
   864da:	3308      	adds	r3, #8
   864dc:	015b      	lsls	r3, r3, #5
   864de:	4413      	add	r3, r2
   864e0:	3304      	adds	r3, #4
   864e2:	681a      	ldr	r2, [r3, #0]
   864e4:	4922      	ldr	r1, [pc, #136]	; (86570 <udd_ep_alloc+0x3b8>)
   864e6:	7cbb      	ldrb	r3, [r7, #18]
   864e8:	f042 0202 	orr.w	r2, r2, #2
   864ec:	3308      	adds	r3, #8
   864ee:	015b      	lsls	r3, r3, #5
   864f0:	440b      	add	r3, r1
   864f2:	3304      	adds	r3, #4
   864f4:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   864f6:	7afb      	ldrb	r3, [r7, #11]
   864f8:	2b00      	cmp	r3, #0
   864fa:	d02d      	beq.n	86558 <udd_ep_alloc+0x3a0>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   864fc:	68fb      	ldr	r3, [r7, #12]
   864fe:	68da      	ldr	r2, [r3, #12]
   86500:	68fb      	ldr	r3, [r7, #12]
   86502:	691b      	ldr	r3, [r3, #16]
   86504:	1ad2      	subs	r2, r2, r3
   86506:	68fb      	ldr	r3, [r7, #12]
   86508:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   8650a:	68fb      	ldr	r3, [r7, #12]
   8650c:	7d1b      	ldrb	r3, [r3, #20]
   8650e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   86512:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   86514:	2b00      	cmp	r3, #0
   86516:	bf14      	ite	ne
   86518:	2301      	movne	r3, #1
   8651a:	2300      	moveq	r3, #0
   8651c:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   8651e:	68fb      	ldr	r3, [r7, #12]
   86520:	685a      	ldr	r2, [r3, #4]
   86522:	68fb      	ldr	r3, [r7, #12]
   86524:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   86526:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   86528:	68fb      	ldr	r3, [r7, #12]
   8652a:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   8652c:	68fb      	ldr	r3, [r7, #12]
   8652e:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   86530:	1ad2      	subs	r2, r2, r3
   86532:	68fb      	ldr	r3, [r7, #12]
   86534:	681b      	ldr	r3, [r3, #0]
   86536:	7cb8      	ldrb	r0, [r7, #18]
   86538:	9300      	str	r3, [sp, #0]
   8653a:	4613      	mov	r3, r2
   8653c:	4622      	mov	r2, r4
   8653e:	4c0d      	ldr	r4, [pc, #52]	; (86574 <udd_ep_alloc+0x3bc>)
   86540:	47a0      	blx	r4
   86542:	4603      	mov	r3, r0
   86544:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   86546:	7afb      	ldrb	r3, [r7, #11]
   86548:	f083 0301 	eor.w	r3, r3, #1
   8654c:	b2db      	uxtb	r3, r3
   8654e:	2b00      	cmp	r3, #0
   86550:	d002      	beq.n	86558 <udd_ep_alloc+0x3a0>
				dbg_print("ErrReRun%d ", i);
				return false;
   86552:	2300      	movs	r3, #0
   86554:	e008      	b.n	86568 <udd_ep_alloc+0x3b0>
			continue;
   86556:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   86558:	7cbb      	ldrb	r3, [r7, #18]
   8655a:	3301      	adds	r3, #1
   8655c:	74bb      	strb	r3, [r7, #18]
   8655e:	7cbb      	ldrb	r3, [r7, #18]
   86560:	2b06      	cmp	r3, #6
   86562:	f67f af50 	bls.w	86406 <udd_ep_alloc+0x24e>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   86566:	2301      	movs	r3, #1
}
   86568:	4618      	mov	r0, r3
   8656a:	371c      	adds	r7, #28
   8656c:	46bd      	mov	sp, r7
   8656e:	bd90      	pop	{r4, r7, pc}
   86570:	400a4000 	.word	0x400a4000
   86574:	000868a5 	.word	0x000868a5

00086578 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   86578:	b580      	push	{r7, lr}
   8657a:	b084      	sub	sp, #16
   8657c:	af00      	add	r7, sp, #0
   8657e:	4603      	mov	r3, r0
   86580:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86582:	79fb      	ldrb	r3, [r7, #7]
   86584:	f003 030f 	and.w	r3, r3, #15
   86588:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8658a:	7bfb      	ldrb	r3, [r7, #15]
   8658c:	2b06      	cmp	r3, #6
   8658e:	d828      	bhi.n	865e2 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   86590:	4a16      	ldr	r2, [pc, #88]	; (865ec <udd_ep_free+0x74>)
   86592:	7bfb      	ldrb	r3, [r7, #15]
   86594:	015b      	lsls	r3, r3, #5
   86596:	4413      	add	r3, r2
   86598:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8659c:	2201      	movs	r2, #1
   8659e:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   865a0:	4a12      	ldr	r2, [pc, #72]	; (865ec <udd_ep_free+0x74>)
   865a2:	7bfb      	ldrb	r3, [r7, #15]
   865a4:	3308      	adds	r3, #8
   865a6:	015b      	lsls	r3, r3, #5
   865a8:	4413      	add	r3, r2
   865aa:	681a      	ldr	r2, [r3, #0]
   865ac:	490f      	ldr	r1, [pc, #60]	; (865ec <udd_ep_free+0x74>)
   865ae:	7bfb      	ldrb	r3, [r7, #15]
   865b0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   865b4:	3308      	adds	r3, #8
   865b6:	015b      	lsls	r3, r3, #5
   865b8:	440b      	add	r3, r1
   865ba:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   865bc:	79fb      	ldrb	r3, [r7, #7]
   865be:	4618      	mov	r0, r3
   865c0:	4b0b      	ldr	r3, [pc, #44]	; (865f0 <udd_ep_free+0x78>)
   865c2:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   865c4:	7bfb      	ldrb	r3, [r7, #15]
   865c6:	1e5a      	subs	r2, r3, #1
   865c8:	490a      	ldr	r1, [pc, #40]	; (865f4 <udd_ep_free+0x7c>)
   865ca:	4613      	mov	r3, r2
   865cc:	005b      	lsls	r3, r3, #1
   865ce:	4413      	add	r3, r2
   865d0:	00db      	lsls	r3, r3, #3
   865d2:	440b      	add	r3, r1
   865d4:	f103 0210 	add.w	r2, r3, #16
   865d8:	7913      	ldrb	r3, [r2, #4]
   865da:	f36f 0382 	bfc	r3, #2, #1
   865de:	7113      	strb	r3, [r2, #4]
   865e0:	e000      	b.n	865e4 <udd_ep_free+0x6c>
		return;
   865e2:	bf00      	nop
}
   865e4:	3710      	adds	r7, #16
   865e6:	46bd      	mov	sp, r7
   865e8:	bd80      	pop	{r7, pc}
   865ea:	bf00      	nop
   865ec:	400a4000 	.word	0x400a4000
   865f0:	000873b5 	.word	0x000873b5
   865f4:	20001e54 	.word	0x20001e54

000865f8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   865f8:	b480      	push	{r7}
   865fa:	b085      	sub	sp, #20
   865fc:	af00      	add	r7, sp, #0
   865fe:	4603      	mov	r3, r0
   86600:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86602:	79fb      	ldrb	r3, [r7, #7]
   86604:	f003 030f 	and.w	r3, r3, #15
   86608:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8660a:	7bfb      	ldrb	r3, [r7, #15]
   8660c:	1e5a      	subs	r2, r3, #1
   8660e:	4613      	mov	r3, r2
   86610:	005b      	lsls	r3, r3, #1
   86612:	4413      	add	r3, r2
   86614:	00db      	lsls	r3, r3, #3
   86616:	4a10      	ldr	r2, [pc, #64]	; (86658 <udd_ep_is_halted+0x60>)
   86618:	4413      	add	r3, r2
   8661a:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   8661c:	4a0f      	ldr	r2, [pc, #60]	; (8665c <udd_ep_is_halted+0x64>)
   8661e:	7bfb      	ldrb	r3, [r7, #15]
   86620:	015b      	lsls	r3, r3, #5
   86622:	4413      	add	r3, r2
   86624:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86628:	681b      	ldr	r3, [r3, #0]
   8662a:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   8662e:	2b00      	cmp	r3, #0
   86630:	d106      	bne.n	86640 <udd_ep_is_halted+0x48>
   86632:	68bb      	ldr	r3, [r7, #8]
   86634:	7d1b      	ldrb	r3, [r3, #20]
   86636:	f003 0304 	and.w	r3, r3, #4
   8663a:	b2db      	uxtb	r3, r3
   8663c:	2b00      	cmp	r3, #0
   8663e:	d001      	beq.n	86644 <udd_ep_is_halted+0x4c>
   86640:	2301      	movs	r3, #1
   86642:	e000      	b.n	86646 <udd_ep_is_halted+0x4e>
   86644:	2300      	movs	r3, #0
   86646:	f003 0301 	and.w	r3, r3, #1
   8664a:	b2db      	uxtb	r3, r3
}
   8664c:	4618      	mov	r0, r3
   8664e:	3714      	adds	r7, #20
   86650:	46bd      	mov	sp, r7
   86652:	bc80      	pop	{r7}
   86654:	4770      	bx	lr
   86656:	bf00      	nop
   86658:	20001e54 	.word	0x20001e54
   8665c:	400a4000 	.word	0x400a4000

00086660 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   86660:	b480      	push	{r7}
   86662:	b085      	sub	sp, #20
   86664:	af00      	add	r7, sp, #0
   86666:	4603      	mov	r3, r0
   86668:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8666a:	79fb      	ldrb	r3, [r7, #7]
   8666c:	f003 030f 	and.w	r3, r3, #15
   86670:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   86672:	7bfb      	ldrb	r3, [r7, #15]
   86674:	2b06      	cmp	r3, #6
   86676:	d901      	bls.n	8667c <udd_ep_set_halt+0x1c>
		return false;
   86678:	2300      	movs	r3, #0
   8667a:	e071      	b.n	86760 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   8667c:	7bfb      	ldrb	r3, [r7, #15]
   8667e:	1e5a      	subs	r2, r3, #1
   86680:	4613      	mov	r3, r2
   86682:	005b      	lsls	r3, r3, #1
   86684:	4413      	add	r3, r2
   86686:	00db      	lsls	r3, r3, #3
   86688:	4a38      	ldr	r2, [pc, #224]	; (8676c <udd_ep_set_halt+0x10c>)
   8668a:	4413      	add	r3, r2
   8668c:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8668e:	4a38      	ldr	r2, [pc, #224]	; (86770 <udd_ep_set_halt+0x110>)
   86690:	7bfb      	ldrb	r3, [r7, #15]
   86692:	015b      	lsls	r3, r3, #5
   86694:	4413      	add	r3, r2
   86696:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8669a:	681b      	ldr	r3, [r3, #0]
   8669c:	f003 0320 	and.w	r3, r3, #32
   866a0:	2b00      	cmp	r3, #0
   866a2:	d106      	bne.n	866b2 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   866a4:	68bb      	ldr	r3, [r7, #8]
   866a6:	7d1b      	ldrb	r3, [r3, #20]
   866a8:	f003 0304 	and.w	r3, r3, #4
   866ac:	b2db      	uxtb	r3, r3
   866ae:	2b00      	cmp	r3, #0
   866b0:	d001      	beq.n	866b6 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   866b2:	2301      	movs	r3, #1
   866b4:	e054      	b.n	86760 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   866b6:	68bb      	ldr	r3, [r7, #8]
   866b8:	7d1b      	ldrb	r3, [r3, #20]
   866ba:	f003 0301 	and.w	r3, r3, #1
   866be:	b2db      	uxtb	r3, r3
   866c0:	2b00      	cmp	r3, #0
   866c2:	d001      	beq.n	866c8 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   866c4:	2300      	movs	r3, #0
   866c6:	e04b      	b.n	86760 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   866c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   866cc:	2b00      	cmp	r3, #0
   866ce:	da25      	bge.n	8671c <udd_ep_set_halt+0xbc>
   866d0:	4a27      	ldr	r2, [pc, #156]	; (86770 <udd_ep_set_halt+0x110>)
   866d2:	7bfb      	ldrb	r3, [r7, #15]
   866d4:	015b      	lsls	r3, r3, #5
   866d6:	4413      	add	r3, r2
   866d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   866dc:	681b      	ldr	r3, [r3, #0]
   866de:	0c9b      	lsrs	r3, r3, #18
   866e0:	f003 0303 	and.w	r3, r3, #3
   866e4:	2b00      	cmp	r3, #0
   866e6:	d019      	beq.n	8671c <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   866e8:	68ba      	ldr	r2, [r7, #8]
   866ea:	7d13      	ldrb	r3, [r2, #20]
   866ec:	f043 0304 	orr.w	r3, r3, #4
   866f0:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   866f2:	4a1f      	ldr	r2, [pc, #124]	; (86770 <udd_ep_set_halt+0x110>)
   866f4:	7bfb      	ldrb	r3, [r7, #15]
   866f6:	3308      	adds	r3, #8
   866f8:	015b      	lsls	r3, r3, #5
   866fa:	4413      	add	r3, r2
   866fc:	3304      	adds	r3, #4
   866fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86702:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   86704:	4b1a      	ldr	r3, [pc, #104]	; (86770 <udd_ep_set_halt+0x110>)
   86706:	691a      	ldr	r2, [r3, #16]
   86708:	7bfb      	ldrb	r3, [r7, #15]
   8670a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8670e:	fa01 f303 	lsl.w	r3, r1, r3
   86712:	4917      	ldr	r1, [pc, #92]	; (86770 <udd_ep_set_halt+0x110>)
   86714:	4313      	orrs	r3, r2
   86716:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   86718:	2301      	movs	r3, #1
   8671a:	e021      	b.n	86760 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8671c:	4a14      	ldr	r2, [pc, #80]	; (86770 <udd_ep_set_halt+0x110>)
   8671e:	7bfb      	ldrb	r3, [r7, #15]
   86720:	015b      	lsls	r3, r3, #5
   86722:	4413      	add	r3, r2
   86724:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86728:	681a      	ldr	r2, [r3, #0]
   8672a:	4911      	ldr	r1, [pc, #68]	; (86770 <udd_ep_set_halt+0x110>)
   8672c:	7bfb      	ldrb	r3, [r7, #15]
   8672e:	f022 0202 	bic.w	r2, r2, #2
   86732:	015b      	lsls	r3, r3, #5
   86734:	440b      	add	r3, r1
   86736:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8673a:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   8673c:	4a0c      	ldr	r2, [pc, #48]	; (86770 <udd_ep_set_halt+0x110>)
   8673e:	7bfb      	ldrb	r3, [r7, #15]
   86740:	015b      	lsls	r3, r3, #5
   86742:	4413      	add	r3, r2
   86744:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8674c:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   8674e:	4a08      	ldr	r2, [pc, #32]	; (86770 <udd_ep_set_halt+0x110>)
   86750:	7bfb      	ldrb	r3, [r7, #15]
   86752:	015b      	lsls	r3, r3, #5
   86754:	4413      	add	r3, r2
   86756:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8675a:	2220      	movs	r2, #32
   8675c:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   8675e:	2301      	movs	r3, #1
}
   86760:	4618      	mov	r0, r3
   86762:	3714      	adds	r7, #20
   86764:	46bd      	mov	sp, r7
   86766:	bc80      	pop	{r7}
   86768:	4770      	bx	lr
   8676a:	bf00      	nop
   8676c:	20001e54 	.word	0x20001e54
   86770:	400a4000 	.word	0x400a4000

00086774 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   86774:	b580      	push	{r7, lr}
   86776:	b084      	sub	sp, #16
   86778:	af00      	add	r7, sp, #0
   8677a:	4603      	mov	r3, r0
   8677c:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   8677e:	2300      	movs	r3, #0
   86780:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   86782:	79fb      	ldrb	r3, [r7, #7]
   86784:	f003 030f 	and.w	r3, r3, #15
   86788:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   8678a:	79fb      	ldrb	r3, [r7, #7]
   8678c:	2b06      	cmp	r3, #6
   8678e:	d901      	bls.n	86794 <udd_ep_clear_halt+0x20>
		return false;
   86790:	2300      	movs	r3, #0
   86792:	e07e      	b.n	86892 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   86794:	79fb      	ldrb	r3, [r7, #7]
   86796:	1e5a      	subs	r2, r3, #1
   86798:	4613      	mov	r3, r2
   8679a:	005b      	lsls	r3, r3, #1
   8679c:	4413      	add	r3, r2
   8679e:	00db      	lsls	r3, r3, #3
   867a0:	4a3e      	ldr	r2, [pc, #248]	; (8689c <udd_ep_clear_halt+0x128>)
   867a2:	4413      	add	r3, r2
   867a4:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   867a6:	68bb      	ldr	r3, [r7, #8]
   867a8:	7d1b      	ldrb	r3, [r3, #20]
   867aa:	f003 0304 	and.w	r3, r3, #4
   867ae:	b2db      	uxtb	r3, r3
   867b0:	2b00      	cmp	r3, #0
   867b2:	d01a      	beq.n	867ea <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   867b4:	68ba      	ldr	r2, [r7, #8]
   867b6:	7d13      	ldrb	r3, [r2, #20]
   867b8:	f36f 0382 	bfc	r3, #2, #1
   867bc:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   867be:	4a38      	ldr	r2, [pc, #224]	; (868a0 <udd_ep_clear_halt+0x12c>)
   867c0:	79fb      	ldrb	r3, [r7, #7]
   867c2:	015b      	lsls	r3, r3, #5
   867c4:	4413      	add	r3, r2
   867c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
   867ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   867ce:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   867d0:	4b33      	ldr	r3, [pc, #204]	; (868a0 <udd_ep_clear_halt+0x12c>)
   867d2:	691a      	ldr	r2, [r3, #16]
   867d4:	79fb      	ldrb	r3, [r7, #7]
   867d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   867da:	fa01 f303 	lsl.w	r3, r1, r3
   867de:	43db      	mvns	r3, r3
   867e0:	492f      	ldr	r1, [pc, #188]	; (868a0 <udd_ep_clear_halt+0x12c>)
   867e2:	4013      	ands	r3, r2
   867e4:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   867e6:	2301      	movs	r3, #1
   867e8:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   867ea:	4a2d      	ldr	r2, [pc, #180]	; (868a0 <udd_ep_clear_halt+0x12c>)
   867ec:	79fb      	ldrb	r3, [r7, #7]
   867ee:	015b      	lsls	r3, r3, #5
   867f0:	4413      	add	r3, r2
   867f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   867f6:	681b      	ldr	r3, [r3, #0]
   867f8:	f003 0320 	and.w	r3, r3, #32
   867fc:	2b00      	cmp	r3, #0
   867fe:	d035      	beq.n	8686c <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   86800:	4a27      	ldr	r2, [pc, #156]	; (868a0 <udd_ep_clear_halt+0x12c>)
   86802:	79fb      	ldrb	r3, [r7, #7]
   86804:	015b      	lsls	r3, r3, #5
   86806:	4413      	add	r3, r2
   86808:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8680c:	681b      	ldr	r3, [r3, #0]
   8680e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   86812:	2b00      	cmp	r3, #0
   86814:	d010      	beq.n	86838 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   86816:	4a22      	ldr	r2, [pc, #136]	; (868a0 <udd_ep_clear_halt+0x12c>)
   86818:	79fb      	ldrb	r3, [r7, #7]
   8681a:	015b      	lsls	r3, r3, #5
   8681c:	4413      	add	r3, r2
   8681e:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   86826:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   86828:	4a1d      	ldr	r2, [pc, #116]	; (868a0 <udd_ep_clear_halt+0x12c>)
   8682a:	79fb      	ldrb	r3, [r7, #7]
   8682c:	015b      	lsls	r3, r3, #5
   8682e:	4413      	add	r3, r2
   86830:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86834:	2240      	movs	r2, #64	; 0x40
   86836:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   86838:	4a19      	ldr	r2, [pc, #100]	; (868a0 <udd_ep_clear_halt+0x12c>)
   8683a:	79fb      	ldrb	r3, [r7, #7]
   8683c:	015b      	lsls	r3, r3, #5
   8683e:	4413      	add	r3, r2
   86840:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86844:	2220      	movs	r2, #32
   86846:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   86848:	4a15      	ldr	r2, [pc, #84]	; (868a0 <udd_ep_clear_halt+0x12c>)
   8684a:	79fb      	ldrb	r3, [r7, #7]
   8684c:	3308      	adds	r3, #8
   8684e:	015b      	lsls	r3, r3, #5
   86850:	4413      	add	r3, r2
   86852:	3304      	adds	r3, #4
   86854:	681a      	ldr	r2, [r3, #0]
   86856:	4912      	ldr	r1, [pc, #72]	; (868a0 <udd_ep_clear_halt+0x12c>)
   86858:	79fb      	ldrb	r3, [r7, #7]
   8685a:	f042 0202 	orr.w	r2, r2, #2
   8685e:	3308      	adds	r3, #8
   86860:	015b      	lsls	r3, r3, #5
   86862:	440b      	add	r3, r1
   86864:	3304      	adds	r3, #4
   86866:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   86868:	2301      	movs	r3, #1
   8686a:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   8686c:	7bfb      	ldrb	r3, [r7, #15]
   8686e:	2b00      	cmp	r3, #0
   86870:	d00e      	beq.n	86890 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   86872:	68bb      	ldr	r3, [r7, #8]
   86874:	7d1b      	ldrb	r3, [r3, #20]
   86876:	f003 0301 	and.w	r3, r3, #1
   8687a:	b2db      	uxtb	r3, r3
   8687c:	2b00      	cmp	r3, #0
   8687e:	d007      	beq.n	86890 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   86880:	68ba      	ldr	r2, [r7, #8]
   86882:	7d13      	ldrb	r3, [r2, #20]
   86884:	f36f 0300 	bfc	r3, #0, #1
   86888:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   8688a:	68bb      	ldr	r3, [r7, #8]
   8688c:	681b      	ldr	r3, [r3, #0]
   8688e:	4798      	blx	r3
		}
	}
	return true;
   86890:	2301      	movs	r3, #1
}
   86892:	4618      	mov	r0, r3
   86894:	3710      	adds	r7, #16
   86896:	46bd      	mov	sp, r7
   86898:	bd80      	pop	{r7, pc}
   8689a:	bf00      	nop
   8689c:	20001e54 	.word	0x20001e54
   868a0:	400a4000 	.word	0x400a4000

000868a4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   868a4:	b580      	push	{r7, lr}
   868a6:	b086      	sub	sp, #24
   868a8:	af00      	add	r7, sp, #0
   868aa:	60ba      	str	r2, [r7, #8]
   868ac:	607b      	str	r3, [r7, #4]
   868ae:	4603      	mov	r3, r0
   868b0:	73fb      	strb	r3, [r7, #15]
   868b2:	460b      	mov	r3, r1
   868b4:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   868b6:	7bfb      	ldrb	r3, [r7, #15]
   868b8:	f003 030f 	and.w	r3, r3, #15
   868bc:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   868be:	7bfb      	ldrb	r3, [r7, #15]
   868c0:	2b06      	cmp	r3, #6
   868c2:	d901      	bls.n	868c8 <udd_ep_run+0x24>
		return false;
   868c4:	2300      	movs	r3, #0
   868c6:	e063      	b.n	86990 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   868c8:	7bfb      	ldrb	r3, [r7, #15]
   868ca:	1e5a      	subs	r2, r3, #1
   868cc:	4613      	mov	r3, r2
   868ce:	005b      	lsls	r3, r3, #1
   868d0:	4413      	add	r3, r2
   868d2:	00db      	lsls	r3, r3, #3
   868d4:	4a30      	ldr	r2, [pc, #192]	; (86998 <udd_ep_run+0xf4>)
   868d6:	4413      	add	r3, r2
   868d8:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   868da:	4a30      	ldr	r2, [pc, #192]	; (8699c <udd_ep_run+0xf8>)
   868dc:	7bfb      	ldrb	r3, [r7, #15]
   868de:	015b      	lsls	r3, r3, #5
   868e0:	4413      	add	r3, r2
   868e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   868e6:	681b      	ldr	r3, [r3, #0]
   868e8:	f003 0301 	and.w	r3, r3, #1
   868ec:	2b00      	cmp	r3, #0
   868ee:	d011      	beq.n	86914 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   868f0:	4a2a      	ldr	r2, [pc, #168]	; (8699c <udd_ep_run+0xf8>)
   868f2:	7bfb      	ldrb	r3, [r7, #15]
   868f4:	015b      	lsls	r3, r3, #5
   868f6:	4413      	add	r3, r2
   868f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   868fc:	681b      	ldr	r3, [r3, #0]
   868fe:	f003 0320 	and.w	r3, r3, #32
   86902:	2b00      	cmp	r3, #0
   86904:	d106      	bne.n	86914 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   86906:	697b      	ldr	r3, [r7, #20]
   86908:	7d1b      	ldrb	r3, [r3, #20]
   8690a:	f003 0304 	and.w	r3, r3, #4
   8690e:	b2db      	uxtb	r3, r3
   86910:	2b00      	cmp	r3, #0
   86912:	d001      	beq.n	86918 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   86914:	2300      	movs	r3, #0
   86916:	e03b      	b.n	86990 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   86918:	4b21      	ldr	r3, [pc, #132]	; (869a0 <udd_ep_run+0xfc>)
   8691a:	4798      	blx	r3
   8691c:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   8691e:	697b      	ldr	r3, [r7, #20]
   86920:	7d1b      	ldrb	r3, [r3, #20]
   86922:	f003 0301 	and.w	r3, r3, #1
   86926:	b2db      	uxtb	r3, r3
   86928:	2b00      	cmp	r3, #0
   8692a:	d004      	beq.n	86936 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   8692c:	6938      	ldr	r0, [r7, #16]
   8692e:	4b1d      	ldr	r3, [pc, #116]	; (869a4 <udd_ep_run+0x100>)
   86930:	4798      	blx	r3
		return false; // Job already on going
   86932:	2300      	movs	r3, #0
   86934:	e02c      	b.n	86990 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   86936:	697a      	ldr	r2, [r7, #20]
   86938:	7d13      	ldrb	r3, [r2, #20]
   8693a:	f043 0301 	orr.w	r3, r3, #1
   8693e:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   86940:	6938      	ldr	r0, [r7, #16]
   86942:	4b18      	ldr	r3, [pc, #96]	; (869a4 <udd_ep_run+0x100>)
   86944:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   86946:	697b      	ldr	r3, [r7, #20]
   86948:	68ba      	ldr	r2, [r7, #8]
   8694a:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   8694c:	697b      	ldr	r3, [r7, #20]
   8694e:	687a      	ldr	r2, [r7, #4]
   86950:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   86952:	697b      	ldr	r3, [r7, #20]
   86954:	2200      	movs	r2, #0
   86956:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   86958:	697b      	ldr	r3, [r7, #20]
   8695a:	2200      	movs	r2, #0
   8695c:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   8695e:	697b      	ldr	r3, [r7, #20]
   86960:	6a3a      	ldr	r2, [r7, #32]
   86962:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   86964:	7bbb      	ldrb	r3, [r7, #14]
   86966:	2b00      	cmp	r3, #0
   86968:	d102      	bne.n	86970 <udd_ep_run+0xcc>
   8696a:	687b      	ldr	r3, [r7, #4]
   8696c:	2b00      	cmp	r3, #0
   8696e:	d101      	bne.n	86974 <udd_ep_run+0xd0>
   86970:	2301      	movs	r3, #1
   86972:	e000      	b.n	86976 <udd_ep_run+0xd2>
   86974:	2300      	movs	r3, #0
   86976:	f003 0301 	and.w	r3, r3, #1
   8697a:	b2d9      	uxtb	r1, r3
   8697c:	697a      	ldr	r2, [r7, #20]
   8697e:	7d13      	ldrb	r3, [r2, #20]
   86980:	f361 0341 	bfi	r3, r1, #1, #1
   86984:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   86986:	7bfb      	ldrb	r3, [r7, #15]
   86988:	4618      	mov	r0, r3
   8698a:	4b07      	ldr	r3, [pc, #28]	; (869a8 <udd_ep_run+0x104>)
   8698c:	4798      	blx	r3
	return true;
   8698e:	2301      	movs	r3, #1
}
   86990:	4618      	mov	r0, r3
   86992:	3718      	adds	r7, #24
   86994:	46bd      	mov	sp, r7
   86996:	bd80      	pop	{r7, pc}
   86998:	20001e54 	.word	0x20001e54
   8699c:	400a4000 	.word	0x400a4000
   869a0:	00085c1d 	.word	0x00085c1d
   869a4:	00085c79 	.word	0x00085c79
   869a8:	00087461 	.word	0x00087461

000869ac <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   869ac:	b580      	push	{r7, lr}
   869ae:	b084      	sub	sp, #16
   869b0:	af00      	add	r7, sp, #0
   869b2:	4603      	mov	r3, r0
   869b4:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   869b6:	79fb      	ldrb	r3, [r7, #7]
   869b8:	f003 030f 	and.w	r3, r3, #15
   869bc:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   869be:	7bfb      	ldrb	r3, [r7, #15]
   869c0:	011a      	lsls	r2, r3, #4
   869c2:	4b19      	ldr	r3, [pc, #100]	; (86a28 <udd_ep_abort+0x7c>)
   869c4:	4413      	add	r3, r2
   869c6:	2200      	movs	r2, #0
   869c8:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   869ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
   869ce:	2b00      	cmp	r3, #0
   869d0:	da21      	bge.n	86a16 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   869d2:	e014      	b.n	869fe <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   869d4:	4a15      	ldr	r2, [pc, #84]	; (86a2c <udd_ep_abort+0x80>)
   869d6:	7bfb      	ldrb	r3, [r7, #15]
   869d8:	015b      	lsls	r3, r3, #5
   869da:	4413      	add	r3, r2
   869dc:	f503 738a 	add.w	r3, r3, #276	; 0x114
   869e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   869e4:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   869e6:	bf00      	nop
   869e8:	4a10      	ldr	r2, [pc, #64]	; (86a2c <udd_ep_abort+0x80>)
   869ea:	7bfb      	ldrb	r3, [r7, #15]
   869ec:	015b      	lsls	r3, r3, #5
   869ee:	4413      	add	r3, r2
   869f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   869f4:	681b      	ldr	r3, [r3, #0]
   869f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
   869fa:	2b00      	cmp	r3, #0
   869fc:	d1f4      	bne.n	869e8 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   869fe:	4a0b      	ldr	r2, [pc, #44]	; (86a2c <udd_ep_abort+0x80>)
   86a00:	7bfb      	ldrb	r3, [r7, #15]
   86a02:	015b      	lsls	r3, r3, #5
   86a04:	4413      	add	r3, r2
   86a06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86a0a:	681b      	ldr	r3, [r3, #0]
   86a0c:	0c9b      	lsrs	r3, r3, #18
   86a0e:	f003 0303 	and.w	r3, r3, #3
   86a12:	2b00      	cmp	r3, #0
   86a14:	d1de      	bne.n	869d4 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   86a16:	79fb      	ldrb	r3, [r7, #7]
   86a18:	4618      	mov	r0, r3
   86a1a:	4b05      	ldr	r3, [pc, #20]	; (86a30 <udd_ep_abort+0x84>)
   86a1c:	4798      	blx	r3
}
   86a1e:	bf00      	nop
   86a20:	3710      	adds	r7, #16
   86a22:	46bd      	mov	sp, r7
   86a24:	bd80      	pop	{r7, pc}
   86a26:	bf00      	nop
   86a28:	400a4300 	.word	0x400a4300
   86a2c:	400a4000 	.word	0x400a4000
   86a30:	000873b5 	.word	0x000873b5

00086a34 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   86a34:	b480      	push	{r7}
   86a36:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   86a38:	4b0a      	ldr	r3, [pc, #40]	; (86a64 <udd_test_mode_j+0x30>)
   86a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86a3e:	f023 0303 	bic.w	r3, r3, #3
   86a42:	4a08      	ldr	r2, [pc, #32]	; (86a64 <udd_test_mode_j+0x30>)
   86a44:	f043 0302 	orr.w	r3, r3, #2
   86a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   86a4c:	4b05      	ldr	r3, [pc, #20]	; (86a64 <udd_test_mode_j+0x30>)
   86a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86a52:	4a04      	ldr	r2, [pc, #16]	; (86a64 <udd_test_mode_j+0x30>)
   86a54:	f043 0304 	orr.w	r3, r3, #4
   86a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a5c:	bf00      	nop
   86a5e:	46bd      	mov	sp, r7
   86a60:	bc80      	pop	{r7}
   86a62:	4770      	bx	lr
   86a64:	400a4000 	.word	0x400a4000

00086a68 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   86a68:	b480      	push	{r7}
   86a6a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   86a6c:	4b0a      	ldr	r3, [pc, #40]	; (86a98 <udd_test_mode_k+0x30>)
   86a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86a72:	f023 0303 	bic.w	r3, r3, #3
   86a76:	4a08      	ldr	r2, [pc, #32]	; (86a98 <udd_test_mode_k+0x30>)
   86a78:	f043 0302 	orr.w	r3, r3, #2
   86a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   86a80:	4b05      	ldr	r3, [pc, #20]	; (86a98 <udd_test_mode_k+0x30>)
   86a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86a86:	4a04      	ldr	r2, [pc, #16]	; (86a98 <udd_test_mode_k+0x30>)
   86a88:	f043 0308 	orr.w	r3, r3, #8
   86a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a90:	bf00      	nop
   86a92:	46bd      	mov	sp, r7
   86a94:	bc80      	pop	{r7}
   86a96:	4770      	bx	lr
   86a98:	400a4000 	.word	0x400a4000

00086a9c <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   86a9c:	b480      	push	{r7}
   86a9e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   86aa0:	4b06      	ldr	r3, [pc, #24]	; (86abc <udd_test_mode_se0_nak+0x20>)
   86aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86aa6:	f023 0303 	bic.w	r3, r3, #3
   86aaa:	4a04      	ldr	r2, [pc, #16]	; (86abc <udd_test_mode_se0_nak+0x20>)
   86aac:	f043 0302 	orr.w	r3, r3, #2
   86ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86ab4:	bf00      	nop
   86ab6:	46bd      	mov	sp, r7
   86ab8:	bc80      	pop	{r7}
   86aba:	4770      	bx	lr
   86abc:	400a4000 	.word	0x400a4000

00086ac0 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   86ac0:	b4b0      	push	{r4, r5, r7}
   86ac2:	b093      	sub	sp, #76	; 0x4c
   86ac4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   86ac6:	4b2e      	ldr	r3, [pc, #184]	; (86b80 <udd_test_mode_packet+0xc0>)
   86ac8:	1d3c      	adds	r4, r7, #4
   86aca:	461d      	mov	r5, r3
   86acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86ad8:	e895 0003 	ldmia.w	r5, {r0, r1}
   86adc:	6020      	str	r0, [r4, #0]
   86ade:	3404      	adds	r4, #4
   86ae0:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   86ae2:	4b28      	ldr	r3, [pc, #160]	; (86b84 <udd_test_mode_packet+0xc4>)
   86ae4:	2201      	movs	r2, #1
   86ae6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   86aea:	4b26      	ldr	r3, [pc, #152]	; (86b84 <udd_test_mode_packet+0xc4>)
   86aec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   86af0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   86af4:	f023 0303 	bic.w	r3, r3, #3
   86af8:	4a22      	ldr	r2, [pc, #136]	; (86b84 <udd_test_mode_packet+0xc4>)
   86afa:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   86afe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   86b02:	4b20      	ldr	r3, [pc, #128]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b04:	2201      	movs	r2, #1
   86b06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   86b0a:	4b1e      	ldr	r3, [pc, #120]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86b10:	f023 0303 	bic.w	r3, r3, #3
   86b14:	4a1b      	ldr	r2, [pc, #108]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b16:	f043 0302 	orr.w	r3, r3, #2
   86b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86b1e:	4b19      	ldr	r3, [pc, #100]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   86b24:	4a17      	ldr	r2, [pc, #92]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b26:	f043 0310 	orr.w	r3, r3, #16
   86b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   86b2e:	4b16      	ldr	r3, [pc, #88]	; (86b88 <udd_test_mode_packet+0xc8>)
   86b30:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   86b32:	1d3b      	adds	r3, r7, #4
   86b34:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   86b36:	2300      	movs	r3, #0
   86b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   86b3c:	e00c      	b.n	86b58 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   86b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   86b40:	1c53      	adds	r3, r2, #1
   86b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   86b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   86b46:	1c59      	adds	r1, r3, #1
   86b48:	6439      	str	r1, [r7, #64]	; 0x40
   86b4a:	7812      	ldrb	r2, [r2, #0]
   86b4c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   86b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86b52:	3301      	adds	r3, #1
   86b54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   86b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86b5c:	2b34      	cmp	r3, #52	; 0x34
   86b5e:	d9ee      	bls.n	86b3e <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   86b60:	4b08      	ldr	r3, [pc, #32]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86b66:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86b6a:	4b06      	ldr	r3, [pc, #24]	; (86b84 <udd_test_mode_packet+0xc4>)
   86b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86b70:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86b74:	bf00      	nop
   86b76:	374c      	adds	r7, #76	; 0x4c
   86b78:	46bd      	mov	sp, r7
   86b7a:	bcb0      	pop	{r4, r5, r7}
   86b7c:	4770      	bx	lr
   86b7e:	bf00      	nop
   86b80:	0008ead0 	.word	0x0008ead0
   86b84:	400a4000 	.word	0x400a4000
   86b88:	20180000 	.word	0x20180000

00086b8c <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   86b8c:	b580      	push	{r7, lr}
   86b8e:	b082      	sub	sp, #8
   86b90:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   86b92:	4b1b      	ldr	r3, [pc, #108]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86b94:	681b      	ldr	r3, [r3, #0]
   86b96:	4a1a      	ldr	r2, [pc, #104]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86b98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   86b9c:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   86b9e:	4b18      	ldr	r3, [pc, #96]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86ba0:	681b      	ldr	r3, [r3, #0]
   86ba2:	4a17      	ldr	r2, [pc, #92]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86ba8:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   86baa:	4b15      	ldr	r3, [pc, #84]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   86bb0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   86bb4:	f023 0303 	bic.w	r3, r3, #3
   86bb8:	4a11      	ldr	r2, [pc, #68]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bba:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   86bbe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   86bc2:	4b0f      	ldr	r3, [pc, #60]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bc4:	2201      	movs	r2, #1
   86bc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   86bca:	4b0e      	ldr	r3, [pc, #56]	; (86c04 <udd_reset_ep_ctrl+0x78>)
   86bcc:	4798      	blx	r3
   86bce:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   86bd0:	4b0b      	ldr	r3, [pc, #44]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   86bd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   86bda:	4b09      	ldr	r3, [pc, #36]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
   86be0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   86be4:	4b06      	ldr	r3, [pc, #24]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86be6:	691b      	ldr	r3, [r3, #16]
   86be8:	4a05      	ldr	r2, [pc, #20]	; (86c00 <udd_reset_ep_ctrl+0x74>)
   86bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86bee:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   86bf0:	6878      	ldr	r0, [r7, #4]
   86bf2:	4b05      	ldr	r3, [pc, #20]	; (86c08 <udd_reset_ep_ctrl+0x7c>)
   86bf4:	4798      	blx	r3
}
   86bf6:	bf00      	nop
   86bf8:	3708      	adds	r7, #8
   86bfa:	46bd      	mov	sp, r7
   86bfc:	bd80      	pop	{r7, pc}
   86bfe:	bf00      	nop
   86c00:	400a4000 	.word	0x400a4000
   86c04:	00085c1d 	.word	0x00085c1d
   86c08:	00085c79 	.word	0x00085c79

00086c0c <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   86c0c:	b580      	push	{r7, lr}
   86c0e:	b082      	sub	sp, #8
   86c10:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   86c12:	4b10      	ldr	r3, [pc, #64]	; (86c54 <udd_ctrl_init+0x48>)
   86c14:	4798      	blx	r3
   86c16:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   86c18:	4b0f      	ldr	r3, [pc, #60]	; (86c58 <udd_ctrl_init+0x4c>)
   86c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86c1e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   86c22:	6878      	ldr	r0, [r7, #4]
   86c24:	4b0d      	ldr	r3, [pc, #52]	; (86c5c <udd_ctrl_init+0x50>)
   86c26:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   86c28:	4b0b      	ldr	r3, [pc, #44]	; (86c58 <udd_ctrl_init+0x4c>)
   86c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   86c2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   86c32:	4b0b      	ldr	r3, [pc, #44]	; (86c60 <udd_ctrl_init+0x54>)
   86c34:	2200      	movs	r2, #0
   86c36:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   86c38:	4b09      	ldr	r3, [pc, #36]	; (86c60 <udd_ctrl_init+0x54>)
   86c3a:	2200      	movs	r2, #0
   86c3c:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   86c3e:	4b08      	ldr	r3, [pc, #32]	; (86c60 <udd_ctrl_init+0x54>)
   86c40:	2200      	movs	r2, #0
   86c42:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   86c44:	4b07      	ldr	r3, [pc, #28]	; (86c64 <udd_ctrl_init+0x58>)
   86c46:	2200      	movs	r2, #0
   86c48:	701a      	strb	r2, [r3, #0]
}
   86c4a:	bf00      	nop
   86c4c:	3708      	adds	r7, #8
   86c4e:	46bd      	mov	sp, r7
   86c50:	bd80      	pop	{r7, pc}
   86c52:	bf00      	nop
   86c54:	00085c1d 	.word	0x00085c1d
   86c58:	400a4000 	.word	0x400a4000
   86c5c:	00085c79 	.word	0x00085c79
   86c60:	2000241c 	.word	0x2000241c
   86c64:	20001e4e 	.word	0x20001e4e

00086c68 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   86c68:	b580      	push	{r7, lr}
   86c6a:	b084      	sub	sp, #16
   86c6c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   86c6e:	4b40      	ldr	r3, [pc, #256]	; (86d70 <udd_ctrl_setup_received+0x108>)
   86c70:	781b      	ldrb	r3, [r3, #0]
   86c72:	2b00      	cmp	r3, #0
   86c74:	d003      	beq.n	86c7e <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   86c76:	4b3f      	ldr	r3, [pc, #252]	; (86d74 <udd_ctrl_setup_received+0x10c>)
   86c78:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   86c7a:	4b3f      	ldr	r3, [pc, #252]	; (86d78 <udd_ctrl_setup_received+0x110>)
   86c7c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   86c7e:	4b3f      	ldr	r3, [pc, #252]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86c80:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86c84:	0d1b      	lsrs	r3, r3, #20
   86c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
   86c8a:	2b08      	cmp	r3, #8
   86c8c:	d007      	beq.n	86c9e <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   86c8e:	4b3c      	ldr	r3, [pc, #240]	; (86d80 <udd_ctrl_setup_received+0x118>)
   86c90:	4798      	blx	r3
		udd_ack_setup_received(0);
   86c92:	4b3a      	ldr	r3, [pc, #232]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   86c98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   86c9c:	e064      	b.n	86d68 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   86c9e:	4b39      	ldr	r3, [pc, #228]	; (86d84 <udd_ctrl_setup_received+0x11c>)
   86ca0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   86ca2:	2300      	movs	r3, #0
   86ca4:	73fb      	strb	r3, [r7, #15]
   86ca6:	e00a      	b.n	86cbe <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   86ca8:	68bb      	ldr	r3, [r7, #8]
   86caa:	1c5a      	adds	r2, r3, #1
   86cac:	60ba      	str	r2, [r7, #8]
   86cae:	7bfa      	ldrb	r2, [r7, #15]
   86cb0:	4935      	ldr	r1, [pc, #212]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cb2:	440a      	add	r2, r1
   86cb4:	781b      	ldrb	r3, [r3, #0]
   86cb6:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   86cb8:	7bfb      	ldrb	r3, [r7, #15]
   86cba:	3301      	adds	r3, #1
   86cbc:	73fb      	strb	r3, [r7, #15]
   86cbe:	7bfb      	ldrb	r3, [r7, #15]
   86cc0:	2b07      	cmp	r3, #7
   86cc2:	d9f1      	bls.n	86ca8 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   86cc4:	4b30      	ldr	r3, [pc, #192]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cc6:	885a      	ldrh	r2, [r3, #2]
   86cc8:	4b2f      	ldr	r3, [pc, #188]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cca:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   86ccc:	4b2e      	ldr	r3, [pc, #184]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cce:	889a      	ldrh	r2, [r3, #4]
   86cd0:	4b2d      	ldr	r3, [pc, #180]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cd2:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   86cd4:	4b2c      	ldr	r3, [pc, #176]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cd6:	88da      	ldrh	r2, [r3, #6]
   86cd8:	4b2b      	ldr	r3, [pc, #172]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86cda:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   86cdc:	4b2b      	ldr	r3, [pc, #172]	; (86d8c <udd_ctrl_setup_received+0x124>)
   86cde:	4798      	blx	r3
   86ce0:	4603      	mov	r3, r0
   86ce2:	f083 0301 	eor.w	r3, r3, #1
   86ce6:	b2db      	uxtb	r3, r3
   86ce8:	2b00      	cmp	r3, #0
   86cea:	d007      	beq.n	86cfc <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   86cec:	4b24      	ldr	r3, [pc, #144]	; (86d80 <udd_ctrl_setup_received+0x118>)
   86cee:	4798      	blx	r3
		udd_ack_setup_received(0);
   86cf0:	4b22      	ldr	r3, [pc, #136]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   86cf6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   86cfa:	e035      	b.n	86d68 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   86cfc:	4b1f      	ldr	r3, [pc, #124]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   86d02:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   86d06:	4b20      	ldr	r3, [pc, #128]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86d08:	781b      	ldrb	r3, [r3, #0]
   86d0a:	b25b      	sxtb	r3, r3
   86d0c:	2b00      	cmp	r3, #0
   86d0e:	da0b      	bge.n	86d28 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   86d10:	4b1f      	ldr	r3, [pc, #124]	; (86d90 <udd_ctrl_setup_received+0x128>)
   86d12:	2200      	movs	r2, #0
   86d14:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86d16:	4b1f      	ldr	r3, [pc, #124]	; (86d94 <udd_ctrl_setup_received+0x12c>)
   86d18:	2200      	movs	r2, #0
   86d1a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   86d1c:	4b14      	ldr	r3, [pc, #80]	; (86d70 <udd_ctrl_setup_received+0x108>)
   86d1e:	2202      	movs	r2, #2
   86d20:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   86d22:	4b1d      	ldr	r3, [pc, #116]	; (86d98 <udd_ctrl_setup_received+0x130>)
   86d24:	4798      	blx	r3
   86d26:	e01f      	b.n	86d68 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   86d28:	4b17      	ldr	r3, [pc, #92]	; (86d88 <udd_ctrl_setup_received+0x120>)
   86d2a:	88db      	ldrh	r3, [r3, #6]
   86d2c:	2b00      	cmp	r3, #0
   86d2e:	d102      	bne.n	86d36 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   86d30:	4b1a      	ldr	r3, [pc, #104]	; (86d9c <udd_ctrl_setup_received+0x134>)
   86d32:	4798      	blx	r3
			return;
   86d34:	e018      	b.n	86d68 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   86d36:	4b16      	ldr	r3, [pc, #88]	; (86d90 <udd_ctrl_setup_received+0x128>)
   86d38:	2200      	movs	r2, #0
   86d3a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86d3c:	4b15      	ldr	r3, [pc, #84]	; (86d94 <udd_ctrl_setup_received+0x12c>)
   86d3e:	2200      	movs	r2, #0
   86d40:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   86d42:	4b0b      	ldr	r3, [pc, #44]	; (86d70 <udd_ctrl_setup_received+0x108>)
   86d44:	2201      	movs	r2, #1
   86d46:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   86d48:	4b0c      	ldr	r3, [pc, #48]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86d4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   86d52:	4b13      	ldr	r3, [pc, #76]	; (86da0 <udd_ctrl_setup_received+0x138>)
   86d54:	4798      	blx	r3
   86d56:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   86d58:	4b08      	ldr	r3, [pc, #32]	; (86d7c <udd_ctrl_setup_received+0x114>)
   86d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86d5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   86d62:	6878      	ldr	r0, [r7, #4]
   86d64:	4b0f      	ldr	r3, [pc, #60]	; (86da4 <udd_ctrl_setup_received+0x13c>)
   86d66:	4798      	blx	r3
	}
}
   86d68:	3710      	adds	r7, #16
   86d6a:	46bd      	mov	sp, r7
   86d6c:	bd80      	pop	{r7, pc}
   86d6e:	bf00      	nop
   86d70:	20001e4e 	.word	0x20001e4e
   86d74:	00087211 	.word	0x00087211
   86d78:	00086c0d 	.word	0x00086c0d
   86d7c:	400a4000 	.word	0x400a4000
   86d80:	00087145 	.word	0x00087145
   86d84:	20180000 	.word	0x20180000
   86d88:	2000241c 	.word	0x2000241c
   86d8c:	00084ddd 	.word	0x00084ddd
   86d90:	20001e50 	.word	0x20001e50
   86d94:	20001e52 	.word	0x20001e52
   86d98:	00086da9 	.word	0x00086da9
   86d9c:	00087169 	.word	0x00087169
   86da0:	00085c1d 	.word	0x00085c1d
   86da4:	00085c79 	.word	0x00085c79

00086da8 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   86da8:	b580      	push	{r7, lr}
   86daa:	b084      	sub	sp, #16
   86dac:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   86dae:	4b4c      	ldr	r3, [pc, #304]	; (86ee0 <udd_ctrl_in_sent+0x138>)
   86db0:	4798      	blx	r3
   86db2:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   86db4:	4b4b      	ldr	r3, [pc, #300]	; (86ee4 <udd_ctrl_in_sent+0x13c>)
   86db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86dba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   86dbe:	6838      	ldr	r0, [r7, #0]
   86dc0:	4b49      	ldr	r3, [pc, #292]	; (86ee8 <udd_ctrl_in_sent+0x140>)
   86dc2:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   86dc4:	4b49      	ldr	r3, [pc, #292]	; (86eec <udd_ctrl_in_sent+0x144>)
   86dc6:	781b      	ldrb	r3, [r3, #0]
   86dc8:	2b03      	cmp	r3, #3
   86dca:	d104      	bne.n	86dd6 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   86dcc:	4b48      	ldr	r3, [pc, #288]	; (86ef0 <udd_ctrl_in_sent+0x148>)
   86dce:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   86dd0:	4b48      	ldr	r3, [pc, #288]	; (86ef4 <udd_ctrl_in_sent+0x14c>)
   86dd2:	4798      	blx	r3
		return;
   86dd4:	e081      	b.n	86eda <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   86dd6:	4b48      	ldr	r3, [pc, #288]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86dd8:	899a      	ldrh	r2, [r3, #12]
   86dda:	4b48      	ldr	r3, [pc, #288]	; (86efc <udd_ctrl_in_sent+0x154>)
   86ddc:	881b      	ldrh	r3, [r3, #0]
   86dde:	1ad3      	subs	r3, r2, r3
   86de0:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   86de2:	89fb      	ldrh	r3, [r7, #14]
   86de4:	2b00      	cmp	r3, #0
   86de6:	d127      	bne.n	86e38 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   86de8:	4b45      	ldr	r3, [pc, #276]	; (86f00 <udd_ctrl_in_sent+0x158>)
   86dea:	881a      	ldrh	r2, [r3, #0]
   86dec:	4b43      	ldr	r3, [pc, #268]	; (86efc <udd_ctrl_in_sent+0x154>)
   86dee:	881b      	ldrh	r3, [r3, #0]
   86df0:	4413      	add	r3, r2
   86df2:	b29a      	uxth	r2, r3
   86df4:	4b42      	ldr	r3, [pc, #264]	; (86f00 <udd_ctrl_in_sent+0x158>)
   86df6:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   86df8:	4b3f      	ldr	r3, [pc, #252]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86dfa:	88da      	ldrh	r2, [r3, #6]
   86dfc:	4b40      	ldr	r3, [pc, #256]	; (86f00 <udd_ctrl_in_sent+0x158>)
   86dfe:	881b      	ldrh	r3, [r3, #0]
   86e00:	429a      	cmp	r2, r3
   86e02:	d003      	beq.n	86e0c <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   86e04:	4b3f      	ldr	r3, [pc, #252]	; (86f04 <udd_ctrl_in_sent+0x15c>)
   86e06:	781b      	ldrb	r3, [r3, #0]
   86e08:	2b00      	cmp	r3, #0
   86e0a:	d002      	beq.n	86e12 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   86e0c:	4b3e      	ldr	r3, [pc, #248]	; (86f08 <udd_ctrl_in_sent+0x160>)
   86e0e:	4798      	blx	r3
			return;
   86e10:	e063      	b.n	86eda <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   86e12:	4b39      	ldr	r3, [pc, #228]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86e14:	695b      	ldr	r3, [r3, #20]
   86e16:	2b00      	cmp	r3, #0
   86e18:	d00e      	beq.n	86e38 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   86e1a:	4b37      	ldr	r3, [pc, #220]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86e1c:	695b      	ldr	r3, [r3, #20]
   86e1e:	4798      	blx	r3
   86e20:	4603      	mov	r3, r0
   86e22:	f083 0301 	eor.w	r3, r3, #1
   86e26:	b2db      	uxtb	r3, r3
   86e28:	2b00      	cmp	r3, #0
   86e2a:	d105      	bne.n	86e38 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   86e2c:	4b33      	ldr	r3, [pc, #204]	; (86efc <udd_ctrl_in_sent+0x154>)
   86e2e:	2200      	movs	r2, #0
   86e30:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   86e32:	4b31      	ldr	r3, [pc, #196]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86e34:	899b      	ldrh	r3, [r3, #12]
   86e36:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   86e38:	89fb      	ldrh	r3, [r7, #14]
   86e3a:	2b3f      	cmp	r3, #63	; 0x3f
   86e3c:	d905      	bls.n	86e4a <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   86e3e:	2340      	movs	r3, #64	; 0x40
   86e40:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   86e42:	4b30      	ldr	r3, [pc, #192]	; (86f04 <udd_ctrl_in_sent+0x15c>)
   86e44:	2200      	movs	r2, #0
   86e46:	701a      	strb	r2, [r3, #0]
   86e48:	e002      	b.n	86e50 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   86e4a:	4b2e      	ldr	r3, [pc, #184]	; (86f04 <udd_ctrl_in_sent+0x15c>)
   86e4c:	2201      	movs	r2, #1
   86e4e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   86e50:	4b2e      	ldr	r3, [pc, #184]	; (86f0c <udd_ctrl_in_sent+0x164>)
   86e52:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86e54:	4b28      	ldr	r3, [pc, #160]	; (86ef8 <udd_ctrl_in_sent+0x150>)
   86e56:	689b      	ldr	r3, [r3, #8]
   86e58:	4a28      	ldr	r2, [pc, #160]	; (86efc <udd_ctrl_in_sent+0x154>)
   86e5a:	8812      	ldrh	r2, [r2, #0]
   86e5c:	4413      	add	r3, r2
   86e5e:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   86e60:	4b1f      	ldr	r3, [pc, #124]	; (86ee0 <udd_ctrl_in_sent+0x138>)
   86e62:	4798      	blx	r3
   86e64:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   86e66:	4b1f      	ldr	r3, [pc, #124]	; (86ee4 <udd_ctrl_in_sent+0x13c>)
   86e68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   86e70:	2b00      	cmp	r3, #0
   86e72:	d006      	beq.n	86e82 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   86e74:	6838      	ldr	r0, [r7, #0]
   86e76:	4b1c      	ldr	r3, [pc, #112]	; (86ee8 <udd_ctrl_in_sent+0x140>)
   86e78:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   86e7a:	4b1c      	ldr	r3, [pc, #112]	; (86eec <udd_ctrl_in_sent+0x144>)
   86e7c:	2204      	movs	r2, #4
   86e7e:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   86e80:	e02b      	b.n	86eda <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86e82:	2300      	movs	r3, #0
   86e84:	737b      	strb	r3, [r7, #13]
   86e86:	e00a      	b.n	86e9e <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   86e88:	687a      	ldr	r2, [r7, #4]
   86e8a:	1c53      	adds	r3, r2, #1
   86e8c:	607b      	str	r3, [r7, #4]
   86e8e:	68bb      	ldr	r3, [r7, #8]
   86e90:	1c59      	adds	r1, r3, #1
   86e92:	60b9      	str	r1, [r7, #8]
   86e94:	7812      	ldrb	r2, [r2, #0]
   86e96:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   86e98:	7b7b      	ldrb	r3, [r7, #13]
   86e9a:	3301      	adds	r3, #1
   86e9c:	737b      	strb	r3, [r7, #13]
   86e9e:	7b7b      	ldrb	r3, [r7, #13]
   86ea0:	b29b      	uxth	r3, r3
   86ea2:	89fa      	ldrh	r2, [r7, #14]
   86ea4:	429a      	cmp	r2, r3
   86ea6:	d8ef      	bhi.n	86e88 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   86ea8:	4b14      	ldr	r3, [pc, #80]	; (86efc <udd_ctrl_in_sent+0x154>)
   86eaa:	881a      	ldrh	r2, [r3, #0]
   86eac:	89fb      	ldrh	r3, [r7, #14]
   86eae:	4413      	add	r3, r2
   86eb0:	b29a      	uxth	r2, r3
   86eb2:	4b12      	ldr	r3, [pc, #72]	; (86efc <udd_ctrl_in_sent+0x154>)
   86eb4:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   86eb6:	4b0b      	ldr	r3, [pc, #44]	; (86ee4 <udd_ctrl_in_sent+0x13c>)
   86eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86ebc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86ec0:	4b08      	ldr	r3, [pc, #32]	; (86ee4 <udd_ctrl_in_sent+0x13c>)
   86ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86ec6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   86eca:	4b06      	ldr	r3, [pc, #24]	; (86ee4 <udd_ctrl_in_sent+0x13c>)
   86ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86ed0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   86ed4:	6838      	ldr	r0, [r7, #0]
   86ed6:	4b04      	ldr	r3, [pc, #16]	; (86ee8 <udd_ctrl_in_sent+0x140>)
   86ed8:	4798      	blx	r3
}
   86eda:	3710      	adds	r7, #16
   86edc:	46bd      	mov	sp, r7
   86ede:	bd80      	pop	{r7, pc}
   86ee0:	00085c1d 	.word	0x00085c1d
   86ee4:	400a4000 	.word	0x400a4000
   86ee8:	00085c79 	.word	0x00085c79
   86eec:	20001e4e 	.word	0x20001e4e
   86ef0:	00087211 	.word	0x00087211
   86ef4:	00086c0d 	.word	0x00086c0d
   86ef8:	2000241c 	.word	0x2000241c
   86efc:	20001e52 	.word	0x20001e52
   86f00:	20001e50 	.word	0x20001e50
   86f04:	20001ee4 	.word	0x20001ee4
   86f08:	000871cd 	.word	0x000871cd
   86f0c:	20180000 	.word	0x20180000

00086f10 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   86f10:	b580      	push	{r7, lr}
   86f12:	b084      	sub	sp, #16
   86f14:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   86f16:	4b61      	ldr	r3, [pc, #388]	; (8709c <udd_ctrl_out_received+0x18c>)
   86f18:	781b      	ldrb	r3, [r3, #0]
   86f1a:	2b01      	cmp	r3, #1
   86f1c:	d00f      	beq.n	86f3e <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   86f1e:	4b5f      	ldr	r3, [pc, #380]	; (8709c <udd_ctrl_out_received+0x18c>)
   86f20:	781b      	ldrb	r3, [r3, #0]
   86f22:	2b02      	cmp	r3, #2
   86f24:	d003      	beq.n	86f2e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   86f26:	4b5d      	ldr	r3, [pc, #372]	; (8709c <udd_ctrl_out_received+0x18c>)
   86f28:	781b      	ldrb	r3, [r3, #0]
   86f2a:	2b04      	cmp	r3, #4
   86f2c:	d102      	bne.n	86f34 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   86f2e:	4b5c      	ldr	r3, [pc, #368]	; (870a0 <udd_ctrl_out_received+0x190>)
   86f30:	4798      	blx	r3
   86f32:	e001      	b.n	86f38 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   86f34:	4b5b      	ldr	r3, [pc, #364]	; (870a4 <udd_ctrl_out_received+0x194>)
   86f36:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   86f38:	4b5b      	ldr	r3, [pc, #364]	; (870a8 <udd_ctrl_out_received+0x198>)
   86f3a:	4798      	blx	r3
		return;
   86f3c:	e0ab      	b.n	87096 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   86f3e:	4b5b      	ldr	r3, [pc, #364]	; (870ac <udd_ctrl_out_received+0x19c>)
   86f40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86f44:	0d1b      	lsrs	r3, r3, #20
   86f46:	b29b      	uxth	r3, r3
   86f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
   86f4c:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   86f4e:	4b58      	ldr	r3, [pc, #352]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86f50:	899b      	ldrh	r3, [r3, #12]
   86f52:	461a      	mov	r2, r3
   86f54:	4b57      	ldr	r3, [pc, #348]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86f56:	881b      	ldrh	r3, [r3, #0]
   86f58:	4619      	mov	r1, r3
   86f5a:	89bb      	ldrh	r3, [r7, #12]
   86f5c:	440b      	add	r3, r1
   86f5e:	429a      	cmp	r2, r3
   86f60:	da05      	bge.n	86f6e <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   86f62:	4b53      	ldr	r3, [pc, #332]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86f64:	899a      	ldrh	r2, [r3, #12]
   86f66:	4b53      	ldr	r3, [pc, #332]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86f68:	881b      	ldrh	r3, [r3, #0]
   86f6a:	1ad3      	subs	r3, r2, r3
   86f6c:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   86f6e:	4b52      	ldr	r3, [pc, #328]	; (870b8 <udd_ctrl_out_received+0x1a8>)
   86f70:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86f72:	4b4f      	ldr	r3, [pc, #316]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86f74:	689b      	ldr	r3, [r3, #8]
   86f76:	4a4f      	ldr	r2, [pc, #316]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86f78:	8812      	ldrh	r2, [r2, #0]
   86f7a:	4413      	add	r3, r2
   86f7c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   86f7e:	2300      	movs	r3, #0
   86f80:	73fb      	strb	r3, [r7, #15]
   86f82:	e00a      	b.n	86f9a <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   86f84:	68ba      	ldr	r2, [r7, #8]
   86f86:	1c53      	adds	r3, r2, #1
   86f88:	60bb      	str	r3, [r7, #8]
   86f8a:	687b      	ldr	r3, [r7, #4]
   86f8c:	1c59      	adds	r1, r3, #1
   86f8e:	6079      	str	r1, [r7, #4]
   86f90:	7812      	ldrb	r2, [r2, #0]
   86f92:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   86f94:	7bfb      	ldrb	r3, [r7, #15]
   86f96:	3301      	adds	r3, #1
   86f98:	73fb      	strb	r3, [r7, #15]
   86f9a:	7bfb      	ldrb	r3, [r7, #15]
   86f9c:	b29b      	uxth	r3, r3
   86f9e:	89ba      	ldrh	r2, [r7, #12]
   86fa0:	429a      	cmp	r2, r3
   86fa2:	d8ef      	bhi.n	86f84 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   86fa4:	4b43      	ldr	r3, [pc, #268]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86fa6:	881a      	ldrh	r2, [r3, #0]
   86fa8:	89bb      	ldrh	r3, [r7, #12]
   86faa:	4413      	add	r3, r2
   86fac:	b29a      	uxth	r2, r3
   86fae:	4b41      	ldr	r3, [pc, #260]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86fb0:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   86fb2:	89bb      	ldrh	r3, [r7, #12]
   86fb4:	2b40      	cmp	r3, #64	; 0x40
   86fb6:	d10a      	bne.n	86fce <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   86fb8:	4b3d      	ldr	r3, [pc, #244]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86fba:	88db      	ldrh	r3, [r3, #6]
   86fbc:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   86fbe:	4b3f      	ldr	r3, [pc, #252]	; (870bc <udd_ctrl_out_received+0x1ac>)
   86fc0:	881b      	ldrh	r3, [r3, #0]
   86fc2:	4619      	mov	r1, r3
   86fc4:	4b3b      	ldr	r3, [pc, #236]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86fc6:	881b      	ldrh	r3, [r3, #0]
   86fc8:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   86fca:	429a      	cmp	r2, r3
   86fcc:	dc20      	bgt.n	87010 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   86fce:	4b39      	ldr	r3, [pc, #228]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   86fd0:	881a      	ldrh	r2, [r3, #0]
   86fd2:	4b37      	ldr	r3, [pc, #220]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86fd4:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   86fd6:	4b36      	ldr	r3, [pc, #216]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86fd8:	695b      	ldr	r3, [r3, #20]
   86fda:	2b00      	cmp	r3, #0
   86fdc:	d010      	beq.n	87000 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   86fde:	4b34      	ldr	r3, [pc, #208]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   86fe0:	695b      	ldr	r3, [r3, #20]
   86fe2:	4798      	blx	r3
   86fe4:	4603      	mov	r3, r0
   86fe6:	f083 0301 	eor.w	r3, r3, #1
   86fea:	b2db      	uxtb	r3, r3
   86fec:	2b00      	cmp	r3, #0
   86fee:	d007      	beq.n	87000 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   86ff0:	4b2c      	ldr	r3, [pc, #176]	; (870a4 <udd_ctrl_out_received+0x194>)
   86ff2:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   86ff4:	4b2d      	ldr	r3, [pc, #180]	; (870ac <udd_ctrl_out_received+0x19c>)
   86ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
   86ffa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   86ffe:	e04a      	b.n	87096 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   87000:	4b2a      	ldr	r3, [pc, #168]	; (870ac <udd_ctrl_out_received+0x19c>)
   87002:	f44f 7200 	mov.w	r2, #512	; 0x200
   87006:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8700a:	4b2d      	ldr	r3, [pc, #180]	; (870c0 <udd_ctrl_out_received+0x1b0>)
   8700c:	4798      	blx	r3
		return;
   8700e:	e042      	b.n	87096 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   87010:	4b27      	ldr	r3, [pc, #156]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   87012:	899a      	ldrh	r2, [r3, #12]
   87014:	4b27      	ldr	r3, [pc, #156]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   87016:	881b      	ldrh	r3, [r3, #0]
   87018:	429a      	cmp	r2, r3
   8701a:	d127      	bne.n	8706c <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   8701c:	4b24      	ldr	r3, [pc, #144]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   8701e:	695b      	ldr	r3, [r3, #20]
   87020:	2b00      	cmp	r3, #0
   87022:	d107      	bne.n	87034 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   87024:	4b1f      	ldr	r3, [pc, #124]	; (870a4 <udd_ctrl_out_received+0x194>)
   87026:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   87028:	4b20      	ldr	r3, [pc, #128]	; (870ac <udd_ctrl_out_received+0x19c>)
   8702a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8702e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   87032:	e030      	b.n	87096 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   87034:	4b1e      	ldr	r3, [pc, #120]	; (870b0 <udd_ctrl_out_received+0x1a0>)
   87036:	695b      	ldr	r3, [r3, #20]
   87038:	4798      	blx	r3
   8703a:	4603      	mov	r3, r0
   8703c:	f083 0301 	eor.w	r3, r3, #1
   87040:	b2db      	uxtb	r3, r3
   87042:	2b00      	cmp	r3, #0
   87044:	d007      	beq.n	87056 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   87046:	4b17      	ldr	r3, [pc, #92]	; (870a4 <udd_ctrl_out_received+0x194>)
   87048:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8704a:	4b18      	ldr	r3, [pc, #96]	; (870ac <udd_ctrl_out_received+0x19c>)
   8704c:	f44f 7200 	mov.w	r2, #512	; 0x200
   87050:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   87054:	e01f      	b.n	87096 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87056:	4b19      	ldr	r3, [pc, #100]	; (870bc <udd_ctrl_out_received+0x1ac>)
   87058:	881a      	ldrh	r2, [r3, #0]
   8705a:	4b16      	ldr	r3, [pc, #88]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   8705c:	881b      	ldrh	r3, [r3, #0]
   8705e:	4413      	add	r3, r2
   87060:	b29a      	uxth	r2, r3
   87062:	4b16      	ldr	r3, [pc, #88]	; (870bc <udd_ctrl_out_received+0x1ac>)
   87064:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   87066:	4b13      	ldr	r3, [pc, #76]	; (870b4 <udd_ctrl_out_received+0x1a4>)
   87068:	2200      	movs	r2, #0
   8706a:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   8706c:	4b0f      	ldr	r3, [pc, #60]	; (870ac <udd_ctrl_out_received+0x19c>)
   8706e:	f44f 7200 	mov.w	r2, #512	; 0x200
   87072:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   87076:	4b0d      	ldr	r3, [pc, #52]	; (870ac <udd_ctrl_out_received+0x19c>)
   87078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8707c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   87080:	4b10      	ldr	r3, [pc, #64]	; (870c4 <udd_ctrl_out_received+0x1b4>)
   87082:	4798      	blx	r3
   87084:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   87086:	4b09      	ldr	r3, [pc, #36]	; (870ac <udd_ctrl_out_received+0x19c>)
   87088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8708c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   87090:	6838      	ldr	r0, [r7, #0]
   87092:	4b0d      	ldr	r3, [pc, #52]	; (870c8 <udd_ctrl_out_received+0x1b8>)
   87094:	4798      	blx	r3
}
   87096:	3710      	adds	r7, #16
   87098:	46bd      	mov	sp, r7
   8709a:	bd80      	pop	{r7, pc}
   8709c:	20001e4e 	.word	0x20001e4e
   870a0:	00087211 	.word	0x00087211
   870a4:	00087145 	.word	0x00087145
   870a8:	00086c0d 	.word	0x00086c0d
   870ac:	400a4000 	.word	0x400a4000
   870b0:	2000241c 	.word	0x2000241c
   870b4:	20001e52 	.word	0x20001e52
   870b8:	20180000 	.word	0x20180000
   870bc:	20001e50 	.word	0x20001e50
   870c0:	00087169 	.word	0x00087169
   870c4:	00085c1d 	.word	0x00085c1d
   870c8:	00085c79 	.word	0x00085c79

000870cc <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   870cc:	b580      	push	{r7, lr}
   870ce:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   870d0:	4b0c      	ldr	r3, [pc, #48]	; (87104 <udd_ctrl_underflow+0x38>)
   870d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   870d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
   870da:	2b00      	cmp	r3, #0
   870dc:	d10f      	bne.n	870fe <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   870de:	4b0a      	ldr	r3, [pc, #40]	; (87108 <udd_ctrl_underflow+0x3c>)
   870e0:	781b      	ldrb	r3, [r3, #0]
   870e2:	2b01      	cmp	r3, #1
   870e4:	d102      	bne.n	870ec <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   870e6:	4b09      	ldr	r3, [pc, #36]	; (8710c <udd_ctrl_underflow+0x40>)
   870e8:	4798      	blx	r3
   870ea:	e009      	b.n	87100 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   870ec:	4b06      	ldr	r3, [pc, #24]	; (87108 <udd_ctrl_underflow+0x3c>)
   870ee:	781b      	ldrb	r3, [r3, #0]
   870f0:	2b04      	cmp	r3, #4
   870f2:	d105      	bne.n	87100 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   870f4:	4b03      	ldr	r3, [pc, #12]	; (87104 <udd_ctrl_underflow+0x38>)
   870f6:	2220      	movs	r2, #32
   870f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   870fc:	e000      	b.n	87100 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   870fe:	bf00      	nop
	}
}
   87100:	bd80      	pop	{r7, pc}
   87102:	bf00      	nop
   87104:	400a4000 	.word	0x400a4000
   87108:	20001e4e 	.word	0x20001e4e
   8710c:	00087169 	.word	0x00087169

00087110 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   87110:	b480      	push	{r7}
   87112:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   87114:	4b09      	ldr	r3, [pc, #36]	; (8713c <udd_ctrl_overflow+0x2c>)
   87116:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8711a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8711e:	2b00      	cmp	r3, #0
   87120:	d108      	bne.n	87134 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87122:	4b07      	ldr	r3, [pc, #28]	; (87140 <udd_ctrl_overflow+0x30>)
   87124:	781b      	ldrb	r3, [r3, #0]
   87126:	2b03      	cmp	r3, #3
   87128:	d105      	bne.n	87136 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8712a:	4b04      	ldr	r3, [pc, #16]	; (8713c <udd_ctrl_overflow+0x2c>)
   8712c:	2220      	movs	r2, #32
   8712e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   87132:	e000      	b.n	87136 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   87134:	bf00      	nop
	}
}
   87136:	46bd      	mov	sp, r7
   87138:	bc80      	pop	{r7}
   8713a:	4770      	bx	lr
   8713c:	400a4000 	.word	0x400a4000
   87140:	20001e4e 	.word	0x20001e4e

00087144 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   87144:	b480      	push	{r7}
   87146:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   87148:	4b05      	ldr	r3, [pc, #20]	; (87160 <udd_ctrl_stall_data+0x1c>)
   8714a:	2205      	movs	r2, #5
   8714c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8714e:	4b05      	ldr	r3, [pc, #20]	; (87164 <udd_ctrl_stall_data+0x20>)
   87150:	2220      	movs	r2, #32
   87152:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   87156:	bf00      	nop
   87158:	46bd      	mov	sp, r7
   8715a:	bc80      	pop	{r7}
   8715c:	4770      	bx	lr
   8715e:	bf00      	nop
   87160:	20001e4e 	.word	0x20001e4e
   87164:	400a4000 	.word	0x400a4000

00087168 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   87168:	b580      	push	{r7, lr}
   8716a:	b082      	sub	sp, #8
   8716c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8716e:	4b13      	ldr	r3, [pc, #76]	; (871bc <udd_ctrl_send_zlp_in+0x54>)
   87170:	2203      	movs	r2, #3
   87172:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   87174:	4b12      	ldr	r3, [pc, #72]	; (871c0 <udd_ctrl_send_zlp_in+0x58>)
   87176:	4798      	blx	r3
   87178:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8717a:	4b12      	ldr	r3, [pc, #72]	; (871c4 <udd_ctrl_send_zlp_in+0x5c>)
   8717c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   87180:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   87184:	4b0f      	ldr	r3, [pc, #60]	; (871c4 <udd_ctrl_send_zlp_in+0x5c>)
   87186:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8718a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8718e:	4b0d      	ldr	r3, [pc, #52]	; (871c4 <udd_ctrl_send_zlp_in+0x5c>)
   87190:	f44f 6280 	mov.w	r2, #1024	; 0x400
   87194:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   87198:	4b0a      	ldr	r3, [pc, #40]	; (871c4 <udd_ctrl_send_zlp_in+0x5c>)
   8719a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8719e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   871a2:	4b08      	ldr	r3, [pc, #32]	; (871c4 <udd_ctrl_send_zlp_in+0x5c>)
   871a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   871a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   871ac:	6878      	ldr	r0, [r7, #4]
   871ae:	4b06      	ldr	r3, [pc, #24]	; (871c8 <udd_ctrl_send_zlp_in+0x60>)
   871b0:	4798      	blx	r3
}
   871b2:	bf00      	nop
   871b4:	3708      	adds	r7, #8
   871b6:	46bd      	mov	sp, r7
   871b8:	bd80      	pop	{r7, pc}
   871ba:	bf00      	nop
   871bc:	20001e4e 	.word	0x20001e4e
   871c0:	00085c1d 	.word	0x00085c1d
   871c4:	400a4000 	.word	0x400a4000
   871c8:	00085c79 	.word	0x00085c79

000871cc <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   871cc:	b580      	push	{r7, lr}
   871ce:	b082      	sub	sp, #8
   871d0:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   871d2:	4b0b      	ldr	r3, [pc, #44]	; (87200 <udd_ctrl_send_zlp_out+0x34>)
   871d4:	2204      	movs	r2, #4
   871d6:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   871d8:	4b0a      	ldr	r3, [pc, #40]	; (87204 <udd_ctrl_send_zlp_out+0x38>)
   871da:	4798      	blx	r3
   871dc:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   871de:	4b0a      	ldr	r3, [pc, #40]	; (87208 <udd_ctrl_send_zlp_out+0x3c>)
   871e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   871e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   871e8:	4b07      	ldr	r3, [pc, #28]	; (87208 <udd_ctrl_send_zlp_out+0x3c>)
   871ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   871ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   871f2:	6878      	ldr	r0, [r7, #4]
   871f4:	4b05      	ldr	r3, [pc, #20]	; (8720c <udd_ctrl_send_zlp_out+0x40>)
   871f6:	4798      	blx	r3
}
   871f8:	bf00      	nop
   871fa:	3708      	adds	r7, #8
   871fc:	46bd      	mov	sp, r7
   871fe:	bd80      	pop	{r7, pc}
   87200:	20001e4e 	.word	0x20001e4e
   87204:	00085c1d 	.word	0x00085c1d
   87208:	400a4000 	.word	0x400a4000
   8720c:	00085c79 	.word	0x00085c79

00087210 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   87210:	b580      	push	{r7, lr}
   87212:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   87214:	4b04      	ldr	r3, [pc, #16]	; (87228 <udd_ctrl_endofrequest+0x18>)
   87216:	691b      	ldr	r3, [r3, #16]
   87218:	2b00      	cmp	r3, #0
   8721a:	d002      	beq.n	87222 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   8721c:	4b02      	ldr	r3, [pc, #8]	; (87228 <udd_ctrl_endofrequest+0x18>)
   8721e:	691b      	ldr	r3, [r3, #16]
   87220:	4798      	blx	r3
	}
}
   87222:	bf00      	nop
   87224:	bd80      	pop	{r7, pc}
   87226:	bf00      	nop
   87228:	2000241c 	.word	0x2000241c

0008722c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   8722c:	b580      	push	{r7, lr}
   8722e:	b082      	sub	sp, #8
   87230:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   87232:	4b31      	ldr	r3, [pc, #196]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   87234:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   87238:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   8723a:	4b2f      	ldr	r3, [pc, #188]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   8723c:	695b      	ldr	r3, [r3, #20]
   8723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   87242:	2b00      	cmp	r3, #0
   87244:	d101      	bne.n	8724a <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   87246:	2300      	movs	r3, #0
   87248:	e052      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   8724a:	4b2b      	ldr	r3, [pc, #172]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   8724c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   87250:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   87254:	4b28      	ldr	r3, [pc, #160]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   87256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8725a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   8725e:	687b      	ldr	r3, [r7, #4]
   87260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   87264:	2b00      	cmp	r3, #0
   87266:	d003      	beq.n	87270 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   87268:	4b24      	ldr	r3, [pc, #144]	; (872fc <udd_ctrl_interrupt+0xd0>)
   8726a:	4798      	blx	r3
		return true;
   8726c:	2301      	movs	r3, #1
   8726e:	e03f      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   87270:	687b      	ldr	r3, [r7, #4]
   87272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87276:	2b00      	cmp	r3, #0
   87278:	d00a      	beq.n	87290 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8727a:	4b1f      	ldr	r3, [pc, #124]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   8727c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   87280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87284:	2b00      	cmp	r3, #0
   87286:	d003      	beq.n	87290 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   87288:	4b1d      	ldr	r3, [pc, #116]	; (87300 <udd_ctrl_interrupt+0xd4>)
   8728a:	4798      	blx	r3
		return true;
   8728c:	2301      	movs	r3, #1
   8728e:	e02f      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   87290:	687b      	ldr	r3, [r7, #4]
   87292:	f403 7300 	and.w	r3, r3, #512	; 0x200
   87296:	2b00      	cmp	r3, #0
   87298:	d003      	beq.n	872a2 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   8729a:	4b1a      	ldr	r3, [pc, #104]	; (87304 <udd_ctrl_interrupt+0xd8>)
   8729c:	4798      	blx	r3
		return true;
   8729e:	2301      	movs	r3, #1
   872a0:	e026      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   872a2:	687b      	ldr	r3, [r7, #4]
   872a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   872a8:	2b00      	cmp	r3, #0
   872aa:	d004      	beq.n	872b6 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   872ac:	4b12      	ldr	r3, [pc, #72]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   872ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   872b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   872b6:	687b      	ldr	r3, [r7, #4]
   872b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   872bc:	2b00      	cmp	r3, #0
   872be:	d008      	beq.n	872d2 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   872c0:	4b0d      	ldr	r3, [pc, #52]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   872c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   872c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   872ca:	4b0f      	ldr	r3, [pc, #60]	; (87308 <udd_ctrl_interrupt+0xdc>)
   872cc:	4798      	blx	r3
		return true;
   872ce:	2301      	movs	r3, #1
   872d0:	e00e      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   872d2:	687b      	ldr	r3, [r7, #4]
   872d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   872d8:	2b00      	cmp	r3, #0
   872da:	d008      	beq.n	872ee <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   872dc:	4b06      	ldr	r3, [pc, #24]	; (872f8 <udd_ctrl_interrupt+0xcc>)
   872de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   872e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   872e6:	4b09      	ldr	r3, [pc, #36]	; (8730c <udd_ctrl_interrupt+0xe0>)
   872e8:	4798      	blx	r3
		return true;
   872ea:	2301      	movs	r3, #1
   872ec:	e000      	b.n	872f0 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   872ee:	2300      	movs	r3, #0
}
   872f0:	4618      	mov	r0, r3
   872f2:	3708      	adds	r7, #8
   872f4:	46bd      	mov	sp, r7
   872f6:	bd80      	pop	{r7, pc}
   872f8:	400a4000 	.word	0x400a4000
   872fc:	00086c69 	.word	0x00086c69
   87300:	00086da9 	.word	0x00086da9
   87304:	00086f11 	.word	0x00086f11
   87308:	00087111 	.word	0x00087111
   8730c:	000870cd 	.word	0x000870cd

00087310 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   87310:	b480      	push	{r7}
   87312:	b083      	sub	sp, #12
   87314:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   87316:	2300      	movs	r3, #0
   87318:	71fb      	strb	r3, [r7, #7]
   8731a:	e01c      	b.n	87356 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   8731c:	79fa      	ldrb	r2, [r7, #7]
   8731e:	4912      	ldr	r1, [pc, #72]	; (87368 <udd_ep_job_table_reset+0x58>)
   87320:	4613      	mov	r3, r2
   87322:	005b      	lsls	r3, r3, #1
   87324:	4413      	add	r3, r2
   87326:	00db      	lsls	r3, r3, #3
   87328:	440b      	add	r3, r1
   8732a:	f103 0210 	add.w	r2, r3, #16
   8732e:	7913      	ldrb	r3, [r2, #4]
   87330:	f36f 0300 	bfc	r3, #0, #1
   87334:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   87336:	79fa      	ldrb	r2, [r7, #7]
   87338:	490b      	ldr	r1, [pc, #44]	; (87368 <udd_ep_job_table_reset+0x58>)
   8733a:	4613      	mov	r3, r2
   8733c:	005b      	lsls	r3, r3, #1
   8733e:	4413      	add	r3, r2
   87340:	00db      	lsls	r3, r3, #3
   87342:	440b      	add	r3, r1
   87344:	f103 0210 	add.w	r2, r3, #16
   87348:	7913      	ldrb	r3, [r2, #4]
   8734a:	f36f 0382 	bfc	r3, #2, #1
   8734e:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   87350:	79fb      	ldrb	r3, [r7, #7]
   87352:	3301      	adds	r3, #1
   87354:	71fb      	strb	r3, [r7, #7]
   87356:	79fb      	ldrb	r3, [r7, #7]
   87358:	2b05      	cmp	r3, #5
   8735a:	d9df      	bls.n	8731c <udd_ep_job_table_reset+0xc>
	}
}
   8735c:	bf00      	nop
   8735e:	bf00      	nop
   87360:	370c      	adds	r7, #12
   87362:	46bd      	mov	sp, r7
   87364:	bc80      	pop	{r7}
   87366:	4770      	bx	lr
   87368:	20001e54 	.word	0x20001e54

0008736c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   8736c:	b580      	push	{r7, lr}
   8736e:	b082      	sub	sp, #8
   87370:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   87372:	2300      	movs	r3, #0
   87374:	71fb      	strb	r3, [r7, #7]
   87376:	e010      	b.n	8739a <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   87378:	79fa      	ldrb	r2, [r7, #7]
   8737a:	4613      	mov	r3, r2
   8737c:	005b      	lsls	r3, r3, #1
   8737e:	4413      	add	r3, r2
   87380:	00db      	lsls	r3, r3, #3
   87382:	4a0a      	ldr	r2, [pc, #40]	; (873ac <udd_ep_job_table_kill+0x40>)
   87384:	1898      	adds	r0, r3, r2
   87386:	79fb      	ldrb	r3, [r7, #7]
   87388:	3301      	adds	r3, #1
   8738a:	b2db      	uxtb	r3, r3
   8738c:	461a      	mov	r2, r3
   8738e:	2101      	movs	r1, #1
   87390:	4b07      	ldr	r3, [pc, #28]	; (873b0 <udd_ep_job_table_kill+0x44>)
   87392:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   87394:	79fb      	ldrb	r3, [r7, #7]
   87396:	3301      	adds	r3, #1
   87398:	71fb      	strb	r3, [r7, #7]
   8739a:	79fb      	ldrb	r3, [r7, #7]
   8739c:	2b05      	cmp	r3, #5
   8739e:	d9eb      	bls.n	87378 <udd_ep_job_table_kill+0xc>
	}
}
   873a0:	bf00      	nop
   873a2:	bf00      	nop
   873a4:	3708      	adds	r7, #8
   873a6:	46bd      	mov	sp, r7
   873a8:	bd80      	pop	{r7, pc}
   873aa:	bf00      	nop
   873ac:	20001e54 	.word	0x20001e54
   873b0:	000873f1 	.word	0x000873f1

000873b4 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   873b4:	b580      	push	{r7, lr}
   873b6:	b082      	sub	sp, #8
   873b8:	af00      	add	r7, sp, #0
   873ba:	4603      	mov	r3, r0
   873bc:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   873be:	79fb      	ldrb	r3, [r7, #7]
   873c0:	f003 030f 	and.w	r3, r3, #15
   873c4:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   873c6:	79fb      	ldrb	r3, [r7, #7]
   873c8:	1e5a      	subs	r2, r3, #1
   873ca:	4613      	mov	r3, r2
   873cc:	005b      	lsls	r3, r3, #1
   873ce:	4413      	add	r3, r2
   873d0:	00db      	lsls	r3, r3, #3
   873d2:	4a05      	ldr	r2, [pc, #20]	; (873e8 <udd_ep_abort_job+0x34>)
   873d4:	4413      	add	r3, r2
   873d6:	79fa      	ldrb	r2, [r7, #7]
   873d8:	2101      	movs	r1, #1
   873da:	4618      	mov	r0, r3
   873dc:	4b03      	ldr	r3, [pc, #12]	; (873ec <udd_ep_abort_job+0x38>)
   873de:	4798      	blx	r3
}
   873e0:	bf00      	nop
   873e2:	3708      	adds	r7, #8
   873e4:	46bd      	mov	sp, r7
   873e6:	bd80      	pop	{r7, pc}
   873e8:	20001e54 	.word	0x20001e54
   873ec:	000873f1 	.word	0x000873f1

000873f0 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   873f0:	b580      	push	{r7, lr}
   873f2:	b082      	sub	sp, #8
   873f4:	af00      	add	r7, sp, #0
   873f6:	6078      	str	r0, [r7, #4]
   873f8:	460b      	mov	r3, r1
   873fa:	70fb      	strb	r3, [r7, #3]
   873fc:	4613      	mov	r3, r2
   873fe:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   87400:	687b      	ldr	r3, [r7, #4]
   87402:	7d1b      	ldrb	r3, [r3, #20]
   87404:	f003 0301 	and.w	r3, r3, #1
   87408:	b2db      	uxtb	r3, r3
   8740a:	2b00      	cmp	r3, #0
   8740c:	d01f      	beq.n	8744e <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8740e:	687a      	ldr	r2, [r7, #4]
   87410:	7d13      	ldrb	r3, [r2, #20]
   87412:	f36f 0300 	bfc	r3, #0, #1
   87416:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   87418:	687b      	ldr	r3, [r7, #4]
   8741a:	681b      	ldr	r3, [r3, #0]
   8741c:	2b00      	cmp	r3, #0
   8741e:	d018      	beq.n	87452 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   87420:	4a0e      	ldr	r2, [pc, #56]	; (8745c <udd_ep_finish_job+0x6c>)
   87422:	78bb      	ldrb	r3, [r7, #2]
   87424:	3308      	adds	r3, #8
   87426:	015b      	lsls	r3, r3, #5
   87428:	4413      	add	r3, r2
   8742a:	681b      	ldr	r3, [r3, #0]
   8742c:	f003 0308 	and.w	r3, r3, #8
   87430:	2b00      	cmp	r3, #0
   87432:	d003      	beq.n	8743c <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   87434:	78bb      	ldrb	r3, [r7, #2]
   87436:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8743a:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8743c:	687b      	ldr	r3, [r7, #4]
   8743e:	681b      	ldr	r3, [r3, #0]
   87440:	78fa      	ldrb	r2, [r7, #3]
   87442:	4610      	mov	r0, r2
   87444:	687a      	ldr	r2, [r7, #4]
   87446:	6891      	ldr	r1, [r2, #8]
   87448:	78ba      	ldrb	r2, [r7, #2]
   8744a:	4798      	blx	r3
   8744c:	e002      	b.n	87454 <udd_ep_finish_job+0x64>
		return; // No on-going job
   8744e:	bf00      	nop
   87450:	e000      	b.n	87454 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   87452:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   87454:	3708      	adds	r7, #8
   87456:	46bd      	mov	sp, r7
   87458:	bd80      	pop	{r7, pc}
   8745a:	bf00      	nop
   8745c:	400a4000 	.word	0x400a4000

00087460 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   87460:	b580      	push	{r7, lr}
   87462:	b086      	sub	sp, #24
   87464:	af00      	add	r7, sp, #0
   87466:	4603      	mov	r3, r0
   87468:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   8746a:	2300      	movs	r3, #0
   8746c:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8746e:	79fb      	ldrb	r3, [r7, #7]
   87470:	1e5a      	subs	r2, r3, #1
   87472:	4613      	mov	r3, r2
   87474:	005b      	lsls	r3, r3, #1
   87476:	4413      	add	r3, r2
   87478:	00db      	lsls	r3, r3, #3
   8747a:	4a6d      	ldr	r2, [pc, #436]	; (87630 <udd_ep_trans_done+0x1d0>)
   8747c:	4413      	add	r3, r2
   8747e:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   87480:	68fb      	ldr	r3, [r7, #12]
   87482:	7d1b      	ldrb	r3, [r3, #20]
   87484:	f003 0301 	and.w	r3, r3, #1
   87488:	b2db      	uxtb	r3, r3
   8748a:	2b00      	cmp	r3, #0
   8748c:	f000 80cc 	beq.w	87628 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   87490:	68fb      	ldr	r3, [r7, #12]
   87492:	68da      	ldr	r2, [r3, #12]
   87494:	68fb      	ldr	r3, [r7, #12]
   87496:	689b      	ldr	r3, [r3, #8]
   87498:	429a      	cmp	r2, r3
   8749a:	f000 8099 	beq.w	875d0 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8749e:	68fb      	ldr	r3, [r7, #12]
   874a0:	689a      	ldr	r2, [r3, #8]
   874a2:	68fb      	ldr	r3, [r7, #12]
   874a4:	68db      	ldr	r3, [r3, #12]
   874a6:	1ad3      	subs	r3, r2, r3
   874a8:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   874aa:	693b      	ldr	r3, [r7, #16]
   874ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   874b0:	d905      	bls.n	874be <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   874b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   874b6:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   874b8:	2300      	movs	r3, #0
   874ba:	617b      	str	r3, [r7, #20]
   874bc:	e002      	b.n	874c4 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   874be:	693b      	ldr	r3, [r7, #16]
   874c0:	041b      	lsls	r3, r3, #16
   874c2:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   874c4:	4a5b      	ldr	r2, [pc, #364]	; (87634 <udd_ep_trans_done+0x1d4>)
   874c6:	79fb      	ldrb	r3, [r7, #7]
   874c8:	3308      	adds	r3, #8
   874ca:	015b      	lsls	r3, r3, #5
   874cc:	4413      	add	r3, r2
   874ce:	681b      	ldr	r3, [r3, #0]
   874d0:	f003 0308 	and.w	r3, r3, #8
   874d4:	2b00      	cmp	r3, #0
   874d6:	d01d      	beq.n	87514 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   874d8:	4a56      	ldr	r2, [pc, #344]	; (87634 <udd_ep_trans_done+0x1d4>)
   874da:	79fb      	ldrb	r3, [r7, #7]
   874dc:	3308      	adds	r3, #8
   874de:	015b      	lsls	r3, r3, #5
   874e0:	4413      	add	r3, r2
   874e2:	681b      	ldr	r3, [r3, #0]
   874e4:	f003 0307 	and.w	r3, r3, #7
   874e8:	2208      	movs	r2, #8
   874ea:	fa02 f303 	lsl.w	r3, r2, r3
   874ee:	461a      	mov	r2, r3
   874f0:	693b      	ldr	r3, [r7, #16]
   874f2:	fbb3 f1f2 	udiv	r1, r3, r2
   874f6:	fb02 f201 	mul.w	r2, r2, r1
   874fa:	1a9b      	subs	r3, r3, r2
   874fc:	2b00      	cmp	r3, #0
   874fe:	d027      	beq.n	87550 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   87500:	697b      	ldr	r3, [r7, #20]
   87502:	f043 0308 	orr.w	r3, r3, #8
   87506:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   87508:	68fa      	ldr	r2, [r7, #12]
   8750a:	7d13      	ldrb	r3, [r2, #20]
   8750c:	f36f 0341 	bfc	r3, #1, #1
   87510:	7513      	strb	r3, [r2, #20]
   87512:	e01d      	b.n	87550 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   87514:	4a47      	ldr	r2, [pc, #284]	; (87634 <udd_ep_trans_done+0x1d4>)
   87516:	79fb      	ldrb	r3, [r7, #7]
   87518:	3308      	adds	r3, #8
   8751a:	015b      	lsls	r3, r3, #5
   8751c:	4413      	add	r3, r2
   8751e:	681b      	ldr	r3, [r3, #0]
   87520:	091b      	lsrs	r3, r3, #4
   87522:	f003 0303 	and.w	r3, r3, #3
   87526:	2b01      	cmp	r3, #1
   87528:	d10e      	bne.n	87548 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8752a:	4a42      	ldr	r2, [pc, #264]	; (87634 <udd_ep_trans_done+0x1d4>)
   8752c:	79fb      	ldrb	r3, [r7, #7]
   8752e:	3308      	adds	r3, #8
   87530:	015b      	lsls	r3, r3, #5
   87532:	4413      	add	r3, r2
   87534:	681b      	ldr	r3, [r3, #0]
   87536:	f003 0307 	and.w	r3, r3, #7
   8753a:	2208      	movs	r2, #8
   8753c:	fa02 f303 	lsl.w	r3, r2, r3
   87540:	461a      	mov	r2, r3
   87542:	693b      	ldr	r3, [r7, #16]
   87544:	4293      	cmp	r3, r2
   87546:	d803      	bhi.n	87550 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   87548:	697b      	ldr	r3, [r7, #20]
   8754a:	f043 0314 	orr.w	r3, r3, #20
   8754e:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   87550:	68fb      	ldr	r3, [r7, #12]
   87552:	685a      	ldr	r2, [r3, #4]
   87554:	68fb      	ldr	r3, [r7, #12]
   87556:	68db      	ldr	r3, [r3, #12]
   87558:	18d1      	adds	r1, r2, r3
   8755a:	79fb      	ldrb	r3, [r7, #7]
   8755c:	011a      	lsls	r2, r3, #4
   8755e:	4b36      	ldr	r3, [pc, #216]	; (87638 <udd_ep_trans_done+0x1d8>)
   87560:	4413      	add	r3, r2
   87562:	460a      	mov	r2, r1
   87564:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   87566:	697b      	ldr	r3, [r7, #20]
   87568:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   8756c:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   8756e:	4b33      	ldr	r3, [pc, #204]	; (8763c <udd_ep_trans_done+0x1dc>)
   87570:	4798      	blx	r3
   87572:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   87574:	79fb      	ldrb	r3, [r7, #7]
   87576:	011a      	lsls	r2, r3, #4
   87578:	4b2f      	ldr	r3, [pc, #188]	; (87638 <udd_ep_trans_done+0x1d8>)
   8757a:	4413      	add	r3, r2
   8757c:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8757e:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   87582:	2b00      	cmp	r3, #0
   87584:	d11d      	bne.n	875c2 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   87586:	79fb      	ldrb	r3, [r7, #7]
   87588:	011a      	lsls	r2, r3, #4
   8758a:	4b2b      	ldr	r3, [pc, #172]	; (87638 <udd_ep_trans_done+0x1d8>)
   8758c:	4413      	add	r3, r2
   8758e:	697a      	ldr	r2, [r7, #20]
   87590:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   87592:	68fb      	ldr	r3, [r7, #12]
   87594:	68da      	ldr	r2, [r3, #12]
   87596:	693b      	ldr	r3, [r7, #16]
   87598:	441a      	add	r2, r3
   8759a:	68fb      	ldr	r3, [r7, #12]
   8759c:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8759e:	68fb      	ldr	r3, [r7, #12]
   875a0:	693a      	ldr	r2, [r7, #16]
   875a2:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   875a4:	4b23      	ldr	r3, [pc, #140]	; (87634 <udd_ep_trans_done+0x1d4>)
   875a6:	691a      	ldr	r2, [r3, #16]
   875a8:	79fb      	ldrb	r3, [r7, #7]
   875aa:	3b01      	subs	r3, #1
   875ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   875b0:	fa01 f303 	lsl.w	r3, r1, r3
   875b4:	491f      	ldr	r1, [pc, #124]	; (87634 <udd_ep_trans_done+0x1d4>)
   875b6:	4313      	orrs	r3, r2
   875b8:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   875ba:	68b8      	ldr	r0, [r7, #8]
   875bc:	4b20      	ldr	r3, [pc, #128]	; (87640 <udd_ep_trans_done+0x1e0>)
   875be:	4798      	blx	r3
			return;
   875c0:	e033      	b.n	8762a <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   875c2:	68b8      	ldr	r0, [r7, #8]
   875c4:	4b1e      	ldr	r3, [pc, #120]	; (87640 <udd_ep_trans_done+0x1e0>)
   875c6:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   875c8:	68fb      	ldr	r3, [r7, #12]
   875ca:	68da      	ldr	r2, [r3, #12]
   875cc:	68fb      	ldr	r3, [r7, #12]
   875ce:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   875d0:	4a18      	ldr	r2, [pc, #96]	; (87634 <udd_ep_trans_done+0x1d4>)
   875d2:	79fb      	ldrb	r3, [r7, #7]
   875d4:	3308      	adds	r3, #8
   875d6:	015b      	lsls	r3, r3, #5
   875d8:	4413      	add	r3, r2
   875da:	681b      	ldr	r3, [r3, #0]
   875dc:	f003 0308 	and.w	r3, r3, #8
   875e0:	2b00      	cmp	r3, #0
   875e2:	d01a      	beq.n	8761a <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   875e4:	68fb      	ldr	r3, [r7, #12]
   875e6:	7d1b      	ldrb	r3, [r3, #20]
   875e8:	f003 0302 	and.w	r3, r3, #2
   875ec:	b2db      	uxtb	r3, r3
   875ee:	2b00      	cmp	r3, #0
   875f0:	d013      	beq.n	8761a <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   875f2:	4a10      	ldr	r2, [pc, #64]	; (87634 <udd_ep_trans_done+0x1d4>)
   875f4:	79fb      	ldrb	r3, [r7, #7]
   875f6:	3308      	adds	r3, #8
   875f8:	015b      	lsls	r3, r3, #5
   875fa:	4413      	add	r3, r2
   875fc:	3304      	adds	r3, #4
   875fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   87602:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   87604:	4b0b      	ldr	r3, [pc, #44]	; (87634 <udd_ep_trans_done+0x1d4>)
   87606:	691a      	ldr	r2, [r3, #16]
   87608:	79fb      	ldrb	r3, [r7, #7]
   8760a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8760e:	fa01 f303 	lsl.w	r3, r1, r3
   87612:	4908      	ldr	r1, [pc, #32]	; (87634 <udd_ep_trans_done+0x1d4>)
   87614:	4313      	orrs	r3, r2
   87616:	610b      	str	r3, [r1, #16]
			return;
   87618:	e007      	b.n	8762a <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8761a:	79fb      	ldrb	r3, [r7, #7]
   8761c:	461a      	mov	r2, r3
   8761e:	2100      	movs	r1, #0
   87620:	68f8      	ldr	r0, [r7, #12]
   87622:	4b08      	ldr	r3, [pc, #32]	; (87644 <udd_ep_trans_done+0x1e4>)
   87624:	4798      	blx	r3
   87626:	e000      	b.n	8762a <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   87628:	bf00      	nop
}
   8762a:	3718      	adds	r7, #24
   8762c:	46bd      	mov	sp, r7
   8762e:	bd80      	pop	{r7, pc}
   87630:	20001e54 	.word	0x20001e54
   87634:	400a4000 	.word	0x400a4000
   87638:	400a4300 	.word	0x400a4300
   8763c:	00085c1d 	.word	0x00085c1d
   87640:	00085c79 	.word	0x00085c79
   87644:	000873f1 	.word	0x000873f1

00087648 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   87648:	b580      	push	{r7, lr}
   8764a:	b084      	sub	sp, #16
   8764c:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8764e:	2301      	movs	r3, #1
   87650:	73fb      	strb	r3, [r7, #15]
   87652:	e0e0      	b.n	87816 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87654:	7bfb      	ldrb	r3, [r7, #15]
   87656:	1e5a      	subs	r2, r3, #1
   87658:	4613      	mov	r3, r2
   8765a:	005b      	lsls	r3, r3, #1
   8765c:	4413      	add	r3, r2
   8765e:	00db      	lsls	r3, r3, #3
   87660:	4a71      	ldr	r2, [pc, #452]	; (87828 <udd_ep_interrupt+0x1e0>)
   87662:	4413      	add	r3, r2
   87664:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87666:	4b71      	ldr	r3, [pc, #452]	; (8782c <udd_ep_interrupt+0x1e4>)
   87668:	691a      	ldr	r2, [r3, #16]
   8766a:	7bfb      	ldrb	r3, [r7, #15]
   8766c:	3b01      	subs	r3, #1
   8766e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   87672:	fa01 f303 	lsl.w	r3, r1, r3
   87676:	4013      	ands	r3, r2
   87678:	2b00      	cmp	r3, #0
   8767a:	d03c      	beq.n	876f6 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8767c:	4b6b      	ldr	r3, [pc, #428]	; (8782c <udd_ep_interrupt+0x1e4>)
   8767e:	695a      	ldr	r2, [r3, #20]
   87680:	7bfb      	ldrb	r3, [r7, #15]
   87682:	3b01      	subs	r3, #1
   87684:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   87688:	fa01 f303 	lsl.w	r3, r1, r3
   8768c:	4013      	ands	r3, r2
   8768e:	2b00      	cmp	r3, #0
   87690:	d031      	beq.n	876f6 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   87692:	7bfb      	ldrb	r3, [r7, #15]
   87694:	011a      	lsls	r2, r3, #4
   87696:	4b66      	ldr	r3, [pc, #408]	; (87830 <udd_ep_interrupt+0x1e8>)
   87698:	4413      	add	r3, r2
   8769a:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   8769c:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   876a0:	2b00      	cmp	r3, #0
   876a2:	d001      	beq.n	876a8 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   876a4:	2301      	movs	r3, #1
   876a6:	e0bb      	b.n	87820 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   876a8:	4b60      	ldr	r3, [pc, #384]	; (8782c <udd_ep_interrupt+0x1e4>)
   876aa:	691a      	ldr	r2, [r3, #16]
   876ac:	7bfb      	ldrb	r3, [r7, #15]
   876ae:	3b01      	subs	r3, #1
   876b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   876b4:	fa01 f303 	lsl.w	r3, r1, r3
   876b8:	43db      	mvns	r3, r3
   876ba:	495c      	ldr	r1, [pc, #368]	; (8782c <udd_ep_interrupt+0x1e4>)
   876bc:	4013      	ands	r3, r2
   876be:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   876c0:	7bfb      	ldrb	r3, [r7, #15]
   876c2:	011a      	lsls	r2, r3, #4
   876c4:	4b5a      	ldr	r3, [pc, #360]	; (87830 <udd_ep_interrupt+0x1e8>)
   876c6:	4413      	add	r3, r2
   876c8:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   876ca:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   876cc:	b29b      	uxth	r3, r3
   876ce:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   876d0:	687b      	ldr	r3, [r7, #4]
   876d2:	2b00      	cmp	r3, #0
   876d4:	d009      	beq.n	876ea <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   876d6:	68bb      	ldr	r3, [r7, #8]
   876d8:	68da      	ldr	r2, [r3, #12]
   876da:	687b      	ldr	r3, [r7, #4]
   876dc:	1ad2      	subs	r2, r2, r3
   876de:	68bb      	ldr	r3, [r7, #8]
   876e0:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   876e2:	68bb      	ldr	r3, [r7, #8]
   876e4:	68da      	ldr	r2, [r3, #12]
   876e6:	68bb      	ldr	r3, [r7, #8]
   876e8:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   876ea:	7bfb      	ldrb	r3, [r7, #15]
   876ec:	4618      	mov	r0, r3
   876ee:	4b51      	ldr	r3, [pc, #324]	; (87834 <udd_ep_interrupt+0x1ec>)
   876f0:	4798      	blx	r3
			return true;
   876f2:	2301      	movs	r3, #1
   876f4:	e094      	b.n	87820 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   876f6:	4b4d      	ldr	r3, [pc, #308]	; (8782c <udd_ep_interrupt+0x1e4>)
   876f8:	691a      	ldr	r2, [r3, #16]
   876fa:	7bfb      	ldrb	r3, [r7, #15]
   876fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   87700:	fa01 f303 	lsl.w	r3, r1, r3
   87704:	4013      	ands	r3, r2
   87706:	2b00      	cmp	r3, #0
   87708:	f000 8082 	beq.w	87810 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8770c:	4a47      	ldr	r2, [pc, #284]	; (8782c <udd_ep_interrupt+0x1e4>)
   8770e:	7bfb      	ldrb	r3, [r7, #15]
   87710:	015b      	lsls	r3, r3, #5
   87712:	4413      	add	r3, r2
   87714:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   87718:	681b      	ldr	r3, [r3, #0]
   8771a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8771e:	2b00      	cmp	r3, #0
   87720:	d024      	beq.n	8776c <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   87722:	4a42      	ldr	r2, [pc, #264]	; (8782c <udd_ep_interrupt+0x1e4>)
   87724:	7bfb      	ldrb	r3, [r7, #15]
   87726:	015b      	lsls	r3, r3, #5
   87728:	4413      	add	r3, r2
   8772a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8772e:	681b      	ldr	r3, [r3, #0]
   87730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   87734:	2b00      	cmp	r3, #0
   87736:	d119      	bne.n	8776c <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   87738:	4a3c      	ldr	r2, [pc, #240]	; (8782c <udd_ep_interrupt+0x1e4>)
   8773a:	7bfb      	ldrb	r3, [r7, #15]
   8773c:	015b      	lsls	r3, r3, #5
   8773e:	4413      	add	r3, r2
   87740:	f503 7384 	add.w	r3, r3, #264	; 0x108
   87744:	f44f 6200 	mov.w	r2, #2048	; 0x800
   87748:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   8774a:	4a38      	ldr	r2, [pc, #224]	; (8782c <udd_ep_interrupt+0x1e4>)
   8774c:	7bfb      	ldrb	r3, [r7, #15]
   8774e:	015b      	lsls	r3, r3, #5
   87750:	4413      	add	r3, r2
   87752:	f503 738a 	add.w	r3, r3, #276	; 0x114
   87756:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8775a:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   8775c:	7bfb      	ldrb	r3, [r7, #15]
   8775e:	461a      	mov	r2, r3
   87760:	2100      	movs	r1, #0
   87762:	68b8      	ldr	r0, [r7, #8]
   87764:	4b34      	ldr	r3, [pc, #208]	; (87838 <udd_ep_interrupt+0x1f0>)
   87766:	4798      	blx	r3
				return true;
   87768:	2301      	movs	r3, #1
   8776a:	e059      	b.n	87820 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8776c:	4a2f      	ldr	r2, [pc, #188]	; (8782c <udd_ep_interrupt+0x1e4>)
   8776e:	7bfb      	ldrb	r3, [r7, #15]
   87770:	015b      	lsls	r3, r3, #5
   87772:	4413      	add	r3, r2
   87774:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   87778:	681b      	ldr	r3, [r3, #0]
   8777a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8777e:	2b00      	cmp	r3, #0
   87780:	d046      	beq.n	87810 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   87782:	4a2a      	ldr	r2, [pc, #168]	; (8782c <udd_ep_interrupt+0x1e4>)
   87784:	7bfb      	ldrb	r3, [r7, #15]
   87786:	015b      	lsls	r3, r3, #5
   87788:	4413      	add	r3, r2
   8778a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8778e:	681b      	ldr	r3, [r3, #0]
   87790:	0c9b      	lsrs	r3, r3, #18
   87792:	f003 0303 	and.w	r3, r3, #3
   87796:	2b00      	cmp	r3, #0
   87798:	d13a      	bne.n	87810 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8779a:	4a24      	ldr	r2, [pc, #144]	; (8782c <udd_ep_interrupt+0x1e4>)
   8779c:	7bfb      	ldrb	r3, [r7, #15]
   8779e:	015b      	lsls	r3, r3, #5
   877a0:	4413      	add	r3, r2
   877a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   877a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   877aa:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   877ac:	4b1f      	ldr	r3, [pc, #124]	; (8782c <udd_ep_interrupt+0x1e4>)
   877ae:	691a      	ldr	r2, [r3, #16]
   877b0:	7bfb      	ldrb	r3, [r7, #15]
   877b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   877b6:	fa01 f303 	lsl.w	r3, r1, r3
   877ba:	43db      	mvns	r3, r3
   877bc:	491b      	ldr	r1, [pc, #108]	; (8782c <udd_ep_interrupt+0x1e4>)
   877be:	4013      	ands	r3, r2
   877c0:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   877c2:	68ba      	ldr	r2, [r7, #8]
   877c4:	7d13      	ldrb	r3, [r2, #20]
   877c6:	f36f 0382 	bfc	r3, #2, #1
   877ca:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   877cc:	4a17      	ldr	r2, [pc, #92]	; (8782c <udd_ep_interrupt+0x1e4>)
   877ce:	7bfb      	ldrb	r3, [r7, #15]
   877d0:	015b      	lsls	r3, r3, #5
   877d2:	4413      	add	r3, r2
   877d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   877d8:	681a      	ldr	r2, [r3, #0]
   877da:	4914      	ldr	r1, [pc, #80]	; (8782c <udd_ep_interrupt+0x1e4>)
   877dc:	7bfb      	ldrb	r3, [r7, #15]
   877de:	f022 0202 	bic.w	r2, r2, #2
   877e2:	015b      	lsls	r3, r3, #5
   877e4:	440b      	add	r3, r1
   877e6:	f503 7384 	add.w	r3, r3, #264	; 0x108
   877ea:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   877ec:	4a0f      	ldr	r2, [pc, #60]	; (8782c <udd_ep_interrupt+0x1e4>)
   877ee:	7bfb      	ldrb	r3, [r7, #15]
   877f0:	015b      	lsls	r3, r3, #5
   877f2:	4413      	add	r3, r2
   877f4:	f503 738a 	add.w	r3, r3, #276	; 0x114
   877f8:	2220      	movs	r2, #32
   877fa:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   877fc:	4a0b      	ldr	r2, [pc, #44]	; (8782c <udd_ep_interrupt+0x1e4>)
   877fe:	7bfb      	ldrb	r3, [r7, #15]
   87800:	015b      	lsls	r3, r3, #5
   87802:	4413      	add	r3, r2
   87804:	f503 738c 	add.w	r3, r3, #280	; 0x118
   87808:	2240      	movs	r2, #64	; 0x40
   8780a:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   8780c:	2301      	movs	r3, #1
   8780e:	e007      	b.n	87820 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87810:	7bfb      	ldrb	r3, [r7, #15]
   87812:	3301      	adds	r3, #1
   87814:	73fb      	strb	r3, [r7, #15]
   87816:	7bfb      	ldrb	r3, [r7, #15]
   87818:	2b06      	cmp	r3, #6
   8781a:	f67f af1b 	bls.w	87654 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   8781e:	2300      	movs	r3, #0
}
   87820:	4618      	mov	r0, r3
   87822:	3710      	adds	r7, #16
   87824:	46bd      	mov	sp, r7
   87826:	bd80      	pop	{r7, pc}
   87828:	20001e54 	.word	0x20001e54
   8782c:	400a4000 	.word	0x400a4000
   87830:	400a4300 	.word	0x400a4300
   87834:	00087461 	.word	0x00087461
   87838:	000873f1 	.word	0x000873f1

0008783c <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   8783c:	b580      	push	{r7, lr}
   8783e:	af00      	add	r7, sp, #0
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   87840:	201d      	movs	r0, #29
   87842:	4b03      	ldr	r3, [pc, #12]	; (87850 <ui_init+0x14>)
   87844:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   87846:	201f      	movs	r0, #31
   87848:	4b01      	ldr	r3, [pc, #4]	; (87850 <ui_init+0x14>)
   8784a:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
}
   8784c:	bf00      	nop
   8784e:	bd80      	pop	{r7, pc}
   87850:	000827a9 	.word	0x000827a9

00087854 <ui_powerdown>:


void ui_powerdown(void)
{
   87854:	b580      	push	{r7, lr}
   87856:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   87858:	201d      	movs	r0, #29
   8785a:	4b03      	ldr	r3, [pc, #12]	; (87868 <ui_powerdown+0x14>)
   8785c:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   8785e:	201f      	movs	r0, #31
   87860:	4b01      	ldr	r3, [pc, #4]	; (87868 <ui_powerdown+0x14>)
   87862:	4798      	blx	r3
	
	// Power off FPGA
	//board_sram_pwroff();
}
   87864:	bf00      	nop
   87866:	bd80      	pop	{r7, pc}
   87868:	000827a9 	.word	0x000827a9

0008786c <ui_wakeup>:

void ui_wakeup(void)
{
   8786c:	b580      	push	{r7, lr}
   8786e:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   87870:	201d      	movs	r0, #29
   87872:	4b02      	ldr	r3, [pc, #8]	; (8787c <ui_wakeup+0x10>)
   87874:	4798      	blx	r3
	//board_sram_pwron();
}
   87876:	bf00      	nop
   87878:	bd80      	pop	{r7, pc}
   8787a:	bf00      	nop
   8787c:	00082805 	.word	0x00082805

00087880 <ui_process>:

void ui_process(uint16_t framenumber)
{
   87880:	b580      	push	{r7, lr}
   87882:	b082      	sub	sp, #8
   87884:	af00      	add	r7, sp, #0
   87886:	4603      	mov	r3, r0
   87888:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   8788a:	88fb      	ldrh	r3, [r7, #6]
   8788c:	4a16      	ldr	r2, [pc, #88]	; (878e8 <ui_process+0x68>)
   8788e:	fba2 1203 	umull	r1, r2, r2, r3
   87892:	0992      	lsrs	r2, r2, #6
   87894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87898:	fb01 f202 	mul.w	r2, r1, r2
   8789c:	1a9b      	subs	r3, r3, r2
   8789e:	b29b      	uxth	r3, r3
   878a0:	2b00      	cmp	r3, #0
   878a2:	d102      	bne.n	878aa <ui_process+0x2a>
		LED_On(LED0_GPIO);
   878a4:	201d      	movs	r0, #29
   878a6:	4b11      	ldr	r3, [pc, #68]	; (878ec <ui_process+0x6c>)
   878a8:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   878aa:	88fb      	ldrh	r3, [r7, #6]
   878ac:	4a0e      	ldr	r2, [pc, #56]	; (878e8 <ui_process+0x68>)
   878ae:	fba2 1203 	umull	r1, r2, r2, r3
   878b2:	0992      	lsrs	r2, r2, #6
   878b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   878b8:	fb01 f202 	mul.w	r2, r1, r2
   878bc:	1a9b      	subs	r3, r3, r2
   878be:	b29b      	uxth	r3, r3
   878c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   878c4:	d102      	bne.n	878cc <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   878c6:	201d      	movs	r0, #29
   878c8:	4b09      	ldr	r3, [pc, #36]	; (878f0 <ui_process+0x70>)
   878ca:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   878cc:	88fb      	ldrh	r3, [r7, #6]
   878ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   878d2:	b29b      	uxth	r3, r3
   878d4:	2b00      	cmp	r3, #0
   878d6:	d102      	bne.n	878de <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   878d8:	201f      	movs	r0, #31
   878da:	4b05      	ldr	r3, [pc, #20]	; (878f0 <ui_process+0x70>)
   878dc:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   878de:	bf00      	nop
   878e0:	3708      	adds	r7, #8
   878e2:	46bd      	mov	sp, r7
   878e4:	bd80      	pop	{r7, pc}
   878e6:	bf00      	nop
   878e8:	10624dd3 	.word	0x10624dd3
   878ec:	00082805 	.word	0x00082805
   878f0:	000827a9 	.word	0x000827a9

000878f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   878f4:	b480      	push	{r7}
   878f6:	b089      	sub	sp, #36	; 0x24
   878f8:	af00      	add	r7, sp, #0
   878fa:	60f8      	str	r0, [r7, #12]
   878fc:	60b9      	str	r1, [r7, #8]
   878fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   87900:	68bb      	ldr	r3, [r7, #8]
   87902:	011b      	lsls	r3, r3, #4
   87904:	687a      	ldr	r2, [r7, #4]
   87906:	429a      	cmp	r2, r3
   87908:	d302      	bcc.n	87910 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8790a:	2310      	movs	r3, #16
   8790c:	61fb      	str	r3, [r7, #28]
   8790e:	e001      	b.n	87914 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   87910:	2308      	movs	r3, #8
   87912:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   87914:	687b      	ldr	r3, [r7, #4]
   87916:	00da      	lsls	r2, r3, #3
   87918:	69fb      	ldr	r3, [r7, #28]
   8791a:	68b9      	ldr	r1, [r7, #8]
   8791c:	fb01 f303 	mul.w	r3, r1, r3
   87920:	085b      	lsrs	r3, r3, #1
   87922:	441a      	add	r2, r3
   87924:	69fb      	ldr	r3, [r7, #28]
   87926:	68b9      	ldr	r1, [r7, #8]
   87928:	fb01 f303 	mul.w	r3, r1, r3
   8792c:	fbb2 f3f3 	udiv	r3, r2, r3
   87930:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   87932:	69bb      	ldr	r3, [r7, #24]
   87934:	08db      	lsrs	r3, r3, #3
   87936:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   87938:	69bb      	ldr	r3, [r7, #24]
   8793a:	f003 0307 	and.w	r3, r3, #7
   8793e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   87940:	697b      	ldr	r3, [r7, #20]
   87942:	2b00      	cmp	r3, #0
   87944:	d003      	beq.n	8794e <usart_set_async_baudrate+0x5a>
   87946:	697b      	ldr	r3, [r7, #20]
   87948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8794c:	d301      	bcc.n	87952 <usart_set_async_baudrate+0x5e>
		return 1;
   8794e:	2301      	movs	r3, #1
   87950:	e00f      	b.n	87972 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   87952:	69fb      	ldr	r3, [r7, #28]
   87954:	2b08      	cmp	r3, #8
   87956:	d105      	bne.n	87964 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   87958:	68fb      	ldr	r3, [r7, #12]
   8795a:	685b      	ldr	r3, [r3, #4]
   8795c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   87960:	68fb      	ldr	r3, [r7, #12]
   87962:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   87964:	693b      	ldr	r3, [r7, #16]
   87966:	041a      	lsls	r2, r3, #16
   87968:	697b      	ldr	r3, [r7, #20]
   8796a:	431a      	orrs	r2, r3
   8796c:	68fb      	ldr	r3, [r7, #12]
   8796e:	621a      	str	r2, [r3, #32]

	return 0;
   87970:	2300      	movs	r3, #0
}
   87972:	4618      	mov	r0, r3
   87974:	3724      	adds	r7, #36	; 0x24
   87976:	46bd      	mov	sp, r7
   87978:	bc80      	pop	{r7}
   8797a:	4770      	bx	lr

0008797c <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8797c:	b480      	push	{r7}
   8797e:	b087      	sub	sp, #28
   87980:	af00      	add	r7, sp, #0
   87982:	60f8      	str	r0, [r7, #12]
   87984:	60b9      	str	r1, [r7, #8]
   87986:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   87988:	68bb      	ldr	r3, [r7, #8]
   8798a:	085a      	lsrs	r2, r3, #1
   8798c:	687b      	ldr	r3, [r7, #4]
   8798e:	441a      	add	r2, r3
   87990:	68bb      	ldr	r3, [r7, #8]
   87992:	fbb2 f3f3 	udiv	r3, r2, r3
   87996:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   87998:	697b      	ldr	r3, [r7, #20]
   8799a:	2b03      	cmp	r3, #3
   8799c:	d903      	bls.n	879a6 <usart_set_spi_master_baudrate+0x2a>
   8799e:	697b      	ldr	r3, [r7, #20]
   879a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   879a4:	d301      	bcc.n	879aa <usart_set_spi_master_baudrate+0x2e>
		return 1;
   879a6:	2301      	movs	r3, #1
   879a8:	e003      	b.n	879b2 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   879aa:	68fb      	ldr	r3, [r7, #12]
   879ac:	697a      	ldr	r2, [r7, #20]
   879ae:	621a      	str	r2, [r3, #32]

	return 0;
   879b0:	2300      	movs	r3, #0
}
   879b2:	4618      	mov	r0, r3
   879b4:	371c      	adds	r7, #28
   879b6:	46bd      	mov	sp, r7
   879b8:	bc80      	pop	{r7}
   879ba:	4770      	bx	lr

000879bc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   879bc:	b580      	push	{r7, lr}
   879be:	b082      	sub	sp, #8
   879c0:	af00      	add	r7, sp, #0
   879c2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   879c4:	6878      	ldr	r0, [r7, #4]
   879c6:	4b0f      	ldr	r3, [pc, #60]	; (87a04 <usart_reset+0x48>)
   879c8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   879ca:	687b      	ldr	r3, [r7, #4]
   879cc:	2200      	movs	r2, #0
   879ce:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   879d0:	687b      	ldr	r3, [r7, #4]
   879d2:	2200      	movs	r2, #0
   879d4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   879d6:	687b      	ldr	r3, [r7, #4]
   879d8:	2200      	movs	r2, #0
   879da:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   879dc:	6878      	ldr	r0, [r7, #4]
   879de:	4b0a      	ldr	r3, [pc, #40]	; (87a08 <usart_reset+0x4c>)
   879e0:	4798      	blx	r3
	usart_reset_rx(p_usart);
   879e2:	6878      	ldr	r0, [r7, #4]
   879e4:	4b09      	ldr	r3, [pc, #36]	; (87a0c <usart_reset+0x50>)
   879e6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   879e8:	6878      	ldr	r0, [r7, #4]
   879ea:	4b09      	ldr	r3, [pc, #36]	; (87a10 <usart_reset+0x54>)
   879ec:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   879ee:	6878      	ldr	r0, [r7, #4]
   879f0:	4b08      	ldr	r3, [pc, #32]	; (87a14 <usart_reset+0x58>)
   879f2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   879f4:	6878      	ldr	r0, [r7, #4]
   879f6:	4b08      	ldr	r3, [pc, #32]	; (87a18 <usart_reset+0x5c>)
   879f8:	4798      	blx	r3
#endif
}
   879fa:	bf00      	nop
   879fc:	3708      	adds	r7, #8
   879fe:	46bd      	mov	sp, r7
   87a00:	bd80      	pop	{r7, pc}
   87a02:	bf00      	nop
   87a04:	00087d05 	.word	0x00087d05
   87a08:	00087bc9 	.word	0x00087bc9
   87a0c:	00087c11 	.word	0x00087c11
   87a10:	00087c89 	.word	0x00087c89
   87a14:	00087cbd 	.word	0x00087cbd
   87a18:	00087ca3 	.word	0x00087ca3

00087a1c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   87a1c:	b580      	push	{r7, lr}
   87a1e:	b084      	sub	sp, #16
   87a20:	af00      	add	r7, sp, #0
   87a22:	60f8      	str	r0, [r7, #12]
   87a24:	60b9      	str	r1, [r7, #8]
   87a26:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   87a28:	68f8      	ldr	r0, [r7, #12]
   87a2a:	4b1a      	ldr	r3, [pc, #104]	; (87a94 <usart_init_rs232+0x78>)
   87a2c:	4798      	blx	r3

	ul_reg_val = 0;
   87a2e:	4b1a      	ldr	r3, [pc, #104]	; (87a98 <usart_init_rs232+0x7c>)
   87a30:	2200      	movs	r2, #0
   87a32:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   87a34:	68bb      	ldr	r3, [r7, #8]
   87a36:	2b00      	cmp	r3, #0
   87a38:	d009      	beq.n	87a4e <usart_init_rs232+0x32>
   87a3a:	68bb      	ldr	r3, [r7, #8]
   87a3c:	681b      	ldr	r3, [r3, #0]
   87a3e:	687a      	ldr	r2, [r7, #4]
   87a40:	4619      	mov	r1, r3
   87a42:	68f8      	ldr	r0, [r7, #12]
   87a44:	4b15      	ldr	r3, [pc, #84]	; (87a9c <usart_init_rs232+0x80>)
   87a46:	4798      	blx	r3
   87a48:	4603      	mov	r3, r0
   87a4a:	2b00      	cmp	r3, #0
   87a4c:	d001      	beq.n	87a52 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   87a4e:	2301      	movs	r3, #1
   87a50:	e01b      	b.n	87a8a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   87a52:	68bb      	ldr	r3, [r7, #8]
   87a54:	685a      	ldr	r2, [r3, #4]
   87a56:	68bb      	ldr	r3, [r7, #8]
   87a58:	689b      	ldr	r3, [r3, #8]
   87a5a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   87a5c:	68bb      	ldr	r3, [r7, #8]
   87a5e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   87a60:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   87a62:	68bb      	ldr	r3, [r7, #8]
   87a64:	68db      	ldr	r3, [r3, #12]
   87a66:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   87a68:	4b0b      	ldr	r3, [pc, #44]	; (87a98 <usart_init_rs232+0x7c>)
   87a6a:	681b      	ldr	r3, [r3, #0]
   87a6c:	4313      	orrs	r3, r2
   87a6e:	4a0a      	ldr	r2, [pc, #40]	; (87a98 <usart_init_rs232+0x7c>)
   87a70:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   87a72:	4b09      	ldr	r3, [pc, #36]	; (87a98 <usart_init_rs232+0x7c>)
   87a74:	681b      	ldr	r3, [r3, #0]
   87a76:	4a08      	ldr	r2, [pc, #32]	; (87a98 <usart_init_rs232+0x7c>)
   87a78:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   87a7a:	68fb      	ldr	r3, [r7, #12]
   87a7c:	685a      	ldr	r2, [r3, #4]
   87a7e:	4b06      	ldr	r3, [pc, #24]	; (87a98 <usart_init_rs232+0x7c>)
   87a80:	681b      	ldr	r3, [r3, #0]
   87a82:	431a      	orrs	r2, r3
   87a84:	68fb      	ldr	r3, [r7, #12]
   87a86:	605a      	str	r2, [r3, #4]

	return 0;
   87a88:	2300      	movs	r3, #0
}
   87a8a:	4618      	mov	r0, r3
   87a8c:	3710      	adds	r7, #16
   87a8e:	46bd      	mov	sp, r7
   87a90:	bd80      	pop	{r7, pc}
   87a92:	bf00      	nop
   87a94:	000879bd 	.word	0x000879bd
   87a98:	20001ee8 	.word	0x20001ee8
   87a9c:	000878f5 	.word	0x000878f5

00087aa0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   87aa0:	b580      	push	{r7, lr}
   87aa2:	b084      	sub	sp, #16
   87aa4:	af00      	add	r7, sp, #0
   87aa6:	60f8      	str	r0, [r7, #12]
   87aa8:	60b9      	str	r1, [r7, #8]
   87aaa:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   87aac:	68f8      	ldr	r0, [r7, #12]
   87aae:	4b3d      	ldr	r3, [pc, #244]	; (87ba4 <usart_init_spi_master+0x104>)
   87ab0:	4798      	blx	r3

	ul_reg_val = 0;
   87ab2:	4b3d      	ldr	r3, [pc, #244]	; (87ba8 <usart_init_spi_master+0x108>)
   87ab4:	2200      	movs	r2, #0
   87ab6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   87ab8:	68bb      	ldr	r3, [r7, #8]
   87aba:	2b00      	cmp	r3, #0
   87abc:	d00d      	beq.n	87ada <usart_init_spi_master+0x3a>
   87abe:	68bb      	ldr	r3, [r7, #8]
   87ac0:	689b      	ldr	r3, [r3, #8]
   87ac2:	2b03      	cmp	r3, #3
   87ac4:	d809      	bhi.n	87ada <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   87ac6:	68bb      	ldr	r3, [r7, #8]
   87ac8:	681b      	ldr	r3, [r3, #0]
   87aca:	687a      	ldr	r2, [r7, #4]
   87acc:	4619      	mov	r1, r3
   87ace:	68f8      	ldr	r0, [r7, #12]
   87ad0:	4b36      	ldr	r3, [pc, #216]	; (87bac <usart_init_spi_master+0x10c>)
   87ad2:	4798      	blx	r3
   87ad4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   87ad6:	2b00      	cmp	r3, #0
   87ad8:	d001      	beq.n	87ade <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   87ada:	2301      	movs	r3, #1
   87adc:	e05d      	b.n	87b9a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   87ade:	68bb      	ldr	r3, [r7, #8]
   87ae0:	685a      	ldr	r2, [r3, #4]
   87ae2:	4b31      	ldr	r3, [pc, #196]	; (87ba8 <usart_init_spi_master+0x108>)
   87ae4:	681b      	ldr	r3, [r3, #0]
   87ae6:	4313      	orrs	r3, r2
   87ae8:	4a2f      	ldr	r2, [pc, #188]	; (87ba8 <usart_init_spi_master+0x108>)
   87aea:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   87aec:	68bb      	ldr	r3, [r7, #8]
   87aee:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   87af0:	4b2d      	ldr	r3, [pc, #180]	; (87ba8 <usart_init_spi_master+0x108>)
   87af2:	681b      	ldr	r3, [r3, #0]
   87af4:	4313      	orrs	r3, r2
   87af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   87afa:	f043 030e 	orr.w	r3, r3, #14
   87afe:	4a2a      	ldr	r2, [pc, #168]	; (87ba8 <usart_init_spi_master+0x108>)
   87b00:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   87b02:	68bb      	ldr	r3, [r7, #8]
   87b04:	689b      	ldr	r3, [r3, #8]
   87b06:	2b03      	cmp	r3, #3
   87b08:	d83e      	bhi.n	87b88 <usart_init_spi_master+0xe8>
   87b0a:	a201      	add	r2, pc, #4	; (adr r2, 87b10 <usart_init_spi_master+0x70>)
   87b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87b10:	00087b21 	.word	0x00087b21
   87b14:	00087b3b 	.word	0x00087b3b
   87b18:	00087b55 	.word	0x00087b55
   87b1c:	00087b6f 	.word	0x00087b6f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   87b20:	4b21      	ldr	r3, [pc, #132]	; (87ba8 <usart_init_spi_master+0x108>)
   87b22:	681b      	ldr	r3, [r3, #0]
   87b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87b28:	4a1f      	ldr	r2, [pc, #124]	; (87ba8 <usart_init_spi_master+0x108>)
   87b2a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   87b2c:	4b1e      	ldr	r3, [pc, #120]	; (87ba8 <usart_init_spi_master+0x108>)
   87b2e:	681b      	ldr	r3, [r3, #0]
   87b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   87b34:	4a1c      	ldr	r2, [pc, #112]	; (87ba8 <usart_init_spi_master+0x108>)
   87b36:	6013      	str	r3, [r2, #0]
		break;
   87b38:	e027      	b.n	87b8a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   87b3a:	4b1b      	ldr	r3, [pc, #108]	; (87ba8 <usart_init_spi_master+0x108>)
   87b3c:	681b      	ldr	r3, [r3, #0]
   87b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   87b42:	4a19      	ldr	r2, [pc, #100]	; (87ba8 <usart_init_spi_master+0x108>)
   87b44:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   87b46:	4b18      	ldr	r3, [pc, #96]	; (87ba8 <usart_init_spi_master+0x108>)
   87b48:	681b      	ldr	r3, [r3, #0]
   87b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   87b4e:	4a16      	ldr	r2, [pc, #88]	; (87ba8 <usart_init_spi_master+0x108>)
   87b50:	6013      	str	r3, [r2, #0]
		break;
   87b52:	e01a      	b.n	87b8a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   87b54:	4b14      	ldr	r3, [pc, #80]	; (87ba8 <usart_init_spi_master+0x108>)
   87b56:	681b      	ldr	r3, [r3, #0]
   87b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87b5c:	4a12      	ldr	r2, [pc, #72]	; (87ba8 <usart_init_spi_master+0x108>)
   87b5e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   87b60:	4b11      	ldr	r3, [pc, #68]	; (87ba8 <usart_init_spi_master+0x108>)
   87b62:	681b      	ldr	r3, [r3, #0]
   87b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   87b68:	4a0f      	ldr	r2, [pc, #60]	; (87ba8 <usart_init_spi_master+0x108>)
   87b6a:	6013      	str	r3, [r2, #0]
		break;
   87b6c:	e00d      	b.n	87b8a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   87b6e:	4b0e      	ldr	r3, [pc, #56]	; (87ba8 <usart_init_spi_master+0x108>)
   87b70:	681b      	ldr	r3, [r3, #0]
   87b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   87b76:	4a0c      	ldr	r2, [pc, #48]	; (87ba8 <usart_init_spi_master+0x108>)
   87b78:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   87b7a:	4b0b      	ldr	r3, [pc, #44]	; (87ba8 <usart_init_spi_master+0x108>)
   87b7c:	681b      	ldr	r3, [r3, #0]
   87b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   87b82:	4a09      	ldr	r2, [pc, #36]	; (87ba8 <usart_init_spi_master+0x108>)
   87b84:	6013      	str	r3, [r2, #0]
		break;
   87b86:	e000      	b.n	87b8a <usart_init_spi_master+0xea>

	default:
		break;
   87b88:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   87b8a:	68fb      	ldr	r3, [r7, #12]
   87b8c:	685a      	ldr	r2, [r3, #4]
   87b8e:	4b06      	ldr	r3, [pc, #24]	; (87ba8 <usart_init_spi_master+0x108>)
   87b90:	681b      	ldr	r3, [r3, #0]
   87b92:	431a      	orrs	r2, r3
   87b94:	68fb      	ldr	r3, [r7, #12]
   87b96:	605a      	str	r2, [r3, #4]

	return 0;
   87b98:	2300      	movs	r3, #0
}
   87b9a:	4618      	mov	r0, r3
   87b9c:	3710      	adds	r7, #16
   87b9e:	46bd      	mov	sp, r7
   87ba0:	bd80      	pop	{r7, pc}
   87ba2:	bf00      	nop
   87ba4:	000879bd 	.word	0x000879bd
   87ba8:	20001eec 	.word	0x20001eec
   87bac:	0008797d 	.word	0x0008797d

00087bb0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   87bb0:	b480      	push	{r7}
   87bb2:	b083      	sub	sp, #12
   87bb4:	af00      	add	r7, sp, #0
   87bb6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   87bb8:	687b      	ldr	r3, [r7, #4]
   87bba:	2240      	movs	r2, #64	; 0x40
   87bbc:	601a      	str	r2, [r3, #0]
}
   87bbe:	bf00      	nop
   87bc0:	370c      	adds	r7, #12
   87bc2:	46bd      	mov	sp, r7
   87bc4:	bc80      	pop	{r7}
   87bc6:	4770      	bx	lr

00087bc8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   87bc8:	b480      	push	{r7}
   87bca:	b083      	sub	sp, #12
   87bcc:	af00      	add	r7, sp, #0
   87bce:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   87bd0:	687b      	ldr	r3, [r7, #4]
   87bd2:	2288      	movs	r2, #136	; 0x88
   87bd4:	601a      	str	r2, [r3, #0]
}
   87bd6:	bf00      	nop
   87bd8:	370c      	adds	r7, #12
   87bda:	46bd      	mov	sp, r7
   87bdc:	bc80      	pop	{r7}
   87bde:	4770      	bx	lr

00087be0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   87be0:	b480      	push	{r7}
   87be2:	b083      	sub	sp, #12
   87be4:	af00      	add	r7, sp, #0
   87be6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   87be8:	687b      	ldr	r3, [r7, #4]
   87bea:	2210      	movs	r2, #16
   87bec:	601a      	str	r2, [r3, #0]
}
   87bee:	bf00      	nop
   87bf0:	370c      	adds	r7, #12
   87bf2:	46bd      	mov	sp, r7
   87bf4:	bc80      	pop	{r7}
   87bf6:	4770      	bx	lr

00087bf8 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   87bf8:	b480      	push	{r7}
   87bfa:	b083      	sub	sp, #12
   87bfc:	af00      	add	r7, sp, #0
   87bfe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   87c00:	687b      	ldr	r3, [r7, #4]
   87c02:	2220      	movs	r2, #32
   87c04:	601a      	str	r2, [r3, #0]
}
   87c06:	bf00      	nop
   87c08:	370c      	adds	r7, #12
   87c0a:	46bd      	mov	sp, r7
   87c0c:	bc80      	pop	{r7}
   87c0e:	4770      	bx	lr

00087c10 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   87c10:	b480      	push	{r7}
   87c12:	b083      	sub	sp, #12
   87c14:	af00      	add	r7, sp, #0
   87c16:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   87c18:	687b      	ldr	r3, [r7, #4]
   87c1a:	2224      	movs	r2, #36	; 0x24
   87c1c:	601a      	str	r2, [r3, #0]
}
   87c1e:	bf00      	nop
   87c20:	370c      	adds	r7, #12
   87c22:	46bd      	mov	sp, r7
   87c24:	bc80      	pop	{r7}
   87c26:	4770      	bx	lr

00087c28 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   87c28:	b480      	push	{r7}
   87c2a:	b083      	sub	sp, #12
   87c2c:	af00      	add	r7, sp, #0
   87c2e:	6078      	str	r0, [r7, #4]
   87c30:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   87c32:	687b      	ldr	r3, [r7, #4]
   87c34:	683a      	ldr	r2, [r7, #0]
   87c36:	609a      	str	r2, [r3, #8]
}
   87c38:	bf00      	nop
   87c3a:	370c      	adds	r7, #12
   87c3c:	46bd      	mov	sp, r7
   87c3e:	bc80      	pop	{r7}
   87c40:	4770      	bx	lr

00087c42 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   87c42:	b480      	push	{r7}
   87c44:	b083      	sub	sp, #12
   87c46:	af00      	add	r7, sp, #0
   87c48:	6078      	str	r0, [r7, #4]
   87c4a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   87c4c:	687b      	ldr	r3, [r7, #4]
   87c4e:	683a      	ldr	r2, [r7, #0]
   87c50:	60da      	str	r2, [r3, #12]
}
   87c52:	bf00      	nop
   87c54:	370c      	adds	r7, #12
   87c56:	46bd      	mov	sp, r7
   87c58:	bc80      	pop	{r7}
   87c5a:	4770      	bx	lr

00087c5c <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   87c5c:	b480      	push	{r7}
   87c5e:	b083      	sub	sp, #12
   87c60:	af00      	add	r7, sp, #0
   87c62:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   87c64:	687b      	ldr	r3, [r7, #4]
   87c66:	691b      	ldr	r3, [r3, #16]
}
   87c68:	4618      	mov	r0, r3
   87c6a:	370c      	adds	r7, #12
   87c6c:	46bd      	mov	sp, r7
   87c6e:	bc80      	pop	{r7}
   87c70:	4770      	bx	lr

00087c72 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   87c72:	b480      	push	{r7}
   87c74:	b083      	sub	sp, #12
   87c76:	af00      	add	r7, sp, #0
   87c78:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   87c7a:	687b      	ldr	r3, [r7, #4]
   87c7c:	695b      	ldr	r3, [r3, #20]
}
   87c7e:	4618      	mov	r0, r3
   87c80:	370c      	adds	r7, #12
   87c82:	46bd      	mov	sp, r7
   87c84:	bc80      	pop	{r7}
   87c86:	4770      	bx	lr

00087c88 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   87c88:	b480      	push	{r7}
   87c8a:	b083      	sub	sp, #12
   87c8c:	af00      	add	r7, sp, #0
   87c8e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   87c90:	687b      	ldr	r3, [r7, #4]
   87c92:	f44f 7280 	mov.w	r2, #256	; 0x100
   87c96:	601a      	str	r2, [r3, #0]
}
   87c98:	bf00      	nop
   87c9a:	370c      	adds	r7, #12
   87c9c:	46bd      	mov	sp, r7
   87c9e:	bc80      	pop	{r7}
   87ca0:	4770      	bx	lr

00087ca2 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   87ca2:	b480      	push	{r7}
   87ca4:	b083      	sub	sp, #12
   87ca6:	af00      	add	r7, sp, #0
   87ca8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   87caa:	687b      	ldr	r3, [r7, #4]
   87cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   87cb0:	601a      	str	r2, [r3, #0]
}
   87cb2:	bf00      	nop
   87cb4:	370c      	adds	r7, #12
   87cb6:	46bd      	mov	sp, r7
   87cb8:	bc80      	pop	{r7}
   87cba:	4770      	bx	lr

00087cbc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   87cbc:	b480      	push	{r7}
   87cbe:	b083      	sub	sp, #12
   87cc0:	af00      	add	r7, sp, #0
   87cc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   87cc4:	687b      	ldr	r3, [r7, #4]
   87cc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   87cca:	601a      	str	r2, [r3, #0]
}
   87ccc:	bf00      	nop
   87cce:	370c      	adds	r7, #12
   87cd0:	46bd      	mov	sp, r7
   87cd2:	bc80      	pop	{r7}
   87cd4:	4770      	bx	lr

00087cd6 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   87cd6:	b480      	push	{r7}
   87cd8:	b083      	sub	sp, #12
   87cda:	af00      	add	r7, sp, #0
   87cdc:	6078      	str	r0, [r7, #4]
   87cde:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   87ce0:	bf00      	nop
   87ce2:	687b      	ldr	r3, [r7, #4]
   87ce4:	695b      	ldr	r3, [r3, #20]
   87ce6:	f003 0302 	and.w	r3, r3, #2
   87cea:	2b00      	cmp	r3, #0
   87cec:	d0f9      	beq.n	87ce2 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   87cee:	683b      	ldr	r3, [r7, #0]
   87cf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   87cf4:	687b      	ldr	r3, [r7, #4]
   87cf6:	61da      	str	r2, [r3, #28]

	return 0;
   87cf8:	2300      	movs	r3, #0
}
   87cfa:	4618      	mov	r0, r3
   87cfc:	370c      	adds	r7, #12
   87cfe:	46bd      	mov	sp, r7
   87d00:	bc80      	pop	{r7}
   87d02:	4770      	bx	lr

00087d04 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   87d04:	b480      	push	{r7}
   87d06:	b083      	sub	sp, #12
   87d08:	af00      	add	r7, sp, #0
   87d0a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   87d0c:	687b      	ldr	r3, [r7, #4]
   87d0e:	4a04      	ldr	r2, [pc, #16]	; (87d20 <usart_disable_writeprotect+0x1c>)
   87d10:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   87d14:	bf00      	nop
   87d16:	370c      	adds	r7, #12
   87d18:	46bd      	mov	sp, r7
   87d1a:	bc80      	pop	{r7}
   87d1c:	4770      	bx	lr
   87d1e:	bf00      	nop
   87d20:	55534100 	.word	0x55534100

00087d24 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   87d24:	b580      	push	{r7, lr}
   87d26:	b086      	sub	sp, #24
   87d28:	af00      	add	r7, sp, #0
   87d2a:	60f8      	str	r0, [r7, #12]
   87d2c:	60b9      	str	r1, [r7, #8]
   87d2e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   87d30:	2300      	movs	r3, #0
   87d32:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   87d34:	68fb      	ldr	r3, [r7, #12]
   87d36:	2b01      	cmp	r3, #1
   87d38:	d01e      	beq.n	87d78 <_write+0x54>
   87d3a:	68fb      	ldr	r3, [r7, #12]
   87d3c:	2b02      	cmp	r3, #2
   87d3e:	d01b      	beq.n	87d78 <_write+0x54>
   87d40:	68fb      	ldr	r3, [r7, #12]
   87d42:	2b03      	cmp	r3, #3
   87d44:	d018      	beq.n	87d78 <_write+0x54>
		return -1;
   87d46:	f04f 33ff 	mov.w	r3, #4294967295
   87d4a:	e019      	b.n	87d80 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   87d4c:	4b0e      	ldr	r3, [pc, #56]	; (87d88 <_write+0x64>)
   87d4e:	681a      	ldr	r2, [r3, #0]
   87d50:	4b0e      	ldr	r3, [pc, #56]	; (87d8c <_write+0x68>)
   87d52:	6818      	ldr	r0, [r3, #0]
   87d54:	68bb      	ldr	r3, [r7, #8]
   87d56:	1c59      	adds	r1, r3, #1
   87d58:	60b9      	str	r1, [r7, #8]
   87d5a:	781b      	ldrb	r3, [r3, #0]
   87d5c:	4619      	mov	r1, r3
   87d5e:	4790      	blx	r2
   87d60:	4603      	mov	r3, r0
   87d62:	2b00      	cmp	r3, #0
   87d64:	da02      	bge.n	87d6c <_write+0x48>
			return -1;
   87d66:	f04f 33ff 	mov.w	r3, #4294967295
   87d6a:	e009      	b.n	87d80 <_write+0x5c>
		}
		++nChars;
   87d6c:	697b      	ldr	r3, [r7, #20]
   87d6e:	3301      	adds	r3, #1
   87d70:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   87d72:	687b      	ldr	r3, [r7, #4]
   87d74:	3b01      	subs	r3, #1
   87d76:	607b      	str	r3, [r7, #4]
   87d78:	687b      	ldr	r3, [r7, #4]
   87d7a:	2b00      	cmp	r3, #0
   87d7c:	d1e6      	bne.n	87d4c <_write+0x28>
	}
	return nChars;
   87d7e:	697b      	ldr	r3, [r7, #20]
}
   87d80:	4618      	mov	r0, r3
   87d82:	3718      	adds	r7, #24
   87d84:	46bd      	mov	sp, r7
   87d86:	bd80      	pop	{r7, pc}
   87d88:	20002434 	.word	0x20002434
   87d8c:	20002438 	.word	0x20002438

00087d90 <__aeabi_uldivmod>:
   87d90:	b953      	cbnz	r3, 87da8 <__aeabi_uldivmod+0x18>
   87d92:	b94a      	cbnz	r2, 87da8 <__aeabi_uldivmod+0x18>
   87d94:	2900      	cmp	r1, #0
   87d96:	bf08      	it	eq
   87d98:	2800      	cmpeq	r0, #0
   87d9a:	bf1c      	itt	ne
   87d9c:	f04f 31ff 	movne.w	r1, #4294967295
   87da0:	f04f 30ff 	movne.w	r0, #4294967295
   87da4:	f000 b96e 	b.w	88084 <__aeabi_idiv0>
   87da8:	f1ad 0c08 	sub.w	ip, sp, #8
   87dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87db0:	f000 f806 	bl	87dc0 <__udivmoddi4>
   87db4:	f8dd e004 	ldr.w	lr, [sp, #4]
   87db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87dbc:	b004      	add	sp, #16
   87dbe:	4770      	bx	lr

00087dc0 <__udivmoddi4>:
   87dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87dc4:	9e08      	ldr	r6, [sp, #32]
   87dc6:	460d      	mov	r5, r1
   87dc8:	4604      	mov	r4, r0
   87dca:	468e      	mov	lr, r1
   87dcc:	2b00      	cmp	r3, #0
   87dce:	f040 8083 	bne.w	87ed8 <__udivmoddi4+0x118>
   87dd2:	428a      	cmp	r2, r1
   87dd4:	4617      	mov	r7, r2
   87dd6:	d947      	bls.n	87e68 <__udivmoddi4+0xa8>
   87dd8:	fab2 f382 	clz	r3, r2
   87ddc:	b14b      	cbz	r3, 87df2 <__udivmoddi4+0x32>
   87dde:	f1c3 0120 	rsb	r1, r3, #32
   87de2:	fa05 fe03 	lsl.w	lr, r5, r3
   87de6:	fa20 f101 	lsr.w	r1, r0, r1
   87dea:	409f      	lsls	r7, r3
   87dec:	ea41 0e0e 	orr.w	lr, r1, lr
   87df0:	409c      	lsls	r4, r3
   87df2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   87df6:	fbbe fcf8 	udiv	ip, lr, r8
   87dfa:	fa1f f987 	uxth.w	r9, r7
   87dfe:	fb08 e21c 	mls	r2, r8, ip, lr
   87e02:	fb0c f009 	mul.w	r0, ip, r9
   87e06:	0c21      	lsrs	r1, r4, #16
   87e08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   87e0c:	4290      	cmp	r0, r2
   87e0e:	d90a      	bls.n	87e26 <__udivmoddi4+0x66>
   87e10:	18ba      	adds	r2, r7, r2
   87e12:	f10c 31ff 	add.w	r1, ip, #4294967295
   87e16:	f080 8118 	bcs.w	8804a <__udivmoddi4+0x28a>
   87e1a:	4290      	cmp	r0, r2
   87e1c:	f240 8115 	bls.w	8804a <__udivmoddi4+0x28a>
   87e20:	f1ac 0c02 	sub.w	ip, ip, #2
   87e24:	443a      	add	r2, r7
   87e26:	1a12      	subs	r2, r2, r0
   87e28:	fbb2 f0f8 	udiv	r0, r2, r8
   87e2c:	fb08 2210 	mls	r2, r8, r0, r2
   87e30:	fb00 f109 	mul.w	r1, r0, r9
   87e34:	b2a4      	uxth	r4, r4
   87e36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   87e3a:	42a1      	cmp	r1, r4
   87e3c:	d909      	bls.n	87e52 <__udivmoddi4+0x92>
   87e3e:	193c      	adds	r4, r7, r4
   87e40:	f100 32ff 	add.w	r2, r0, #4294967295
   87e44:	f080 8103 	bcs.w	8804e <__udivmoddi4+0x28e>
   87e48:	42a1      	cmp	r1, r4
   87e4a:	f240 8100 	bls.w	8804e <__udivmoddi4+0x28e>
   87e4e:	3802      	subs	r0, #2
   87e50:	443c      	add	r4, r7
   87e52:	1a64      	subs	r4, r4, r1
   87e54:	2100      	movs	r1, #0
   87e56:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87e5a:	b11e      	cbz	r6, 87e64 <__udivmoddi4+0xa4>
   87e5c:	2200      	movs	r2, #0
   87e5e:	40dc      	lsrs	r4, r3
   87e60:	e9c6 4200 	strd	r4, r2, [r6]
   87e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87e68:	b902      	cbnz	r2, 87e6c <__udivmoddi4+0xac>
   87e6a:	deff      	udf	#255	; 0xff
   87e6c:	fab2 f382 	clz	r3, r2
   87e70:	2b00      	cmp	r3, #0
   87e72:	d14f      	bne.n	87f14 <__udivmoddi4+0x154>
   87e74:	1a8d      	subs	r5, r1, r2
   87e76:	2101      	movs	r1, #1
   87e78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   87e7c:	fa1f f882 	uxth.w	r8, r2
   87e80:	fbb5 fcfe 	udiv	ip, r5, lr
   87e84:	fb0e 551c 	mls	r5, lr, ip, r5
   87e88:	fb08 f00c 	mul.w	r0, r8, ip
   87e8c:	0c22      	lsrs	r2, r4, #16
   87e8e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   87e92:	42a8      	cmp	r0, r5
   87e94:	d907      	bls.n	87ea6 <__udivmoddi4+0xe6>
   87e96:	197d      	adds	r5, r7, r5
   87e98:	f10c 32ff 	add.w	r2, ip, #4294967295
   87e9c:	d202      	bcs.n	87ea4 <__udivmoddi4+0xe4>
   87e9e:	42a8      	cmp	r0, r5
   87ea0:	f200 80e9 	bhi.w	88076 <__udivmoddi4+0x2b6>
   87ea4:	4694      	mov	ip, r2
   87ea6:	1a2d      	subs	r5, r5, r0
   87ea8:	fbb5 f0fe 	udiv	r0, r5, lr
   87eac:	fb0e 5510 	mls	r5, lr, r0, r5
   87eb0:	fb08 f800 	mul.w	r8, r8, r0
   87eb4:	b2a4      	uxth	r4, r4
   87eb6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   87eba:	45a0      	cmp	r8, r4
   87ebc:	d907      	bls.n	87ece <__udivmoddi4+0x10e>
   87ebe:	193c      	adds	r4, r7, r4
   87ec0:	f100 32ff 	add.w	r2, r0, #4294967295
   87ec4:	d202      	bcs.n	87ecc <__udivmoddi4+0x10c>
   87ec6:	45a0      	cmp	r8, r4
   87ec8:	f200 80d9 	bhi.w	8807e <__udivmoddi4+0x2be>
   87ecc:	4610      	mov	r0, r2
   87ece:	eba4 0408 	sub.w	r4, r4, r8
   87ed2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87ed6:	e7c0      	b.n	87e5a <__udivmoddi4+0x9a>
   87ed8:	428b      	cmp	r3, r1
   87eda:	d908      	bls.n	87eee <__udivmoddi4+0x12e>
   87edc:	2e00      	cmp	r6, #0
   87ede:	f000 80b1 	beq.w	88044 <__udivmoddi4+0x284>
   87ee2:	2100      	movs	r1, #0
   87ee4:	e9c6 0500 	strd	r0, r5, [r6]
   87ee8:	4608      	mov	r0, r1
   87eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87eee:	fab3 f183 	clz	r1, r3
   87ef2:	2900      	cmp	r1, #0
   87ef4:	d14b      	bne.n	87f8e <__udivmoddi4+0x1ce>
   87ef6:	42ab      	cmp	r3, r5
   87ef8:	d302      	bcc.n	87f00 <__udivmoddi4+0x140>
   87efa:	4282      	cmp	r2, r0
   87efc:	f200 80b9 	bhi.w	88072 <__udivmoddi4+0x2b2>
   87f00:	1a84      	subs	r4, r0, r2
   87f02:	eb65 0303 	sbc.w	r3, r5, r3
   87f06:	2001      	movs	r0, #1
   87f08:	469e      	mov	lr, r3
   87f0a:	2e00      	cmp	r6, #0
   87f0c:	d0aa      	beq.n	87e64 <__udivmoddi4+0xa4>
   87f0e:	e9c6 4e00 	strd	r4, lr, [r6]
   87f12:	e7a7      	b.n	87e64 <__udivmoddi4+0xa4>
   87f14:	409f      	lsls	r7, r3
   87f16:	f1c3 0220 	rsb	r2, r3, #32
   87f1a:	40d1      	lsrs	r1, r2
   87f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   87f20:	fbb1 f0fe 	udiv	r0, r1, lr
   87f24:	fa1f f887 	uxth.w	r8, r7
   87f28:	fb0e 1110 	mls	r1, lr, r0, r1
   87f2c:	fa24 f202 	lsr.w	r2, r4, r2
   87f30:	409d      	lsls	r5, r3
   87f32:	fb00 fc08 	mul.w	ip, r0, r8
   87f36:	432a      	orrs	r2, r5
   87f38:	0c15      	lsrs	r5, r2, #16
   87f3a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   87f3e:	45ac      	cmp	ip, r5
   87f40:	fa04 f403 	lsl.w	r4, r4, r3
   87f44:	d909      	bls.n	87f5a <__udivmoddi4+0x19a>
   87f46:	197d      	adds	r5, r7, r5
   87f48:	f100 31ff 	add.w	r1, r0, #4294967295
   87f4c:	f080 808f 	bcs.w	8806e <__udivmoddi4+0x2ae>
   87f50:	45ac      	cmp	ip, r5
   87f52:	f240 808c 	bls.w	8806e <__udivmoddi4+0x2ae>
   87f56:	3802      	subs	r0, #2
   87f58:	443d      	add	r5, r7
   87f5a:	eba5 050c 	sub.w	r5, r5, ip
   87f5e:	fbb5 f1fe 	udiv	r1, r5, lr
   87f62:	fb0e 5c11 	mls	ip, lr, r1, r5
   87f66:	fb01 f908 	mul.w	r9, r1, r8
   87f6a:	b295      	uxth	r5, r2
   87f6c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   87f70:	45a9      	cmp	r9, r5
   87f72:	d907      	bls.n	87f84 <__udivmoddi4+0x1c4>
   87f74:	197d      	adds	r5, r7, r5
   87f76:	f101 32ff 	add.w	r2, r1, #4294967295
   87f7a:	d274      	bcs.n	88066 <__udivmoddi4+0x2a6>
   87f7c:	45a9      	cmp	r9, r5
   87f7e:	d972      	bls.n	88066 <__udivmoddi4+0x2a6>
   87f80:	3902      	subs	r1, #2
   87f82:	443d      	add	r5, r7
   87f84:	eba5 0509 	sub.w	r5, r5, r9
   87f88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   87f8c:	e778      	b.n	87e80 <__udivmoddi4+0xc0>
   87f8e:	f1c1 0720 	rsb	r7, r1, #32
   87f92:	408b      	lsls	r3, r1
   87f94:	fa22 fc07 	lsr.w	ip, r2, r7
   87f98:	ea4c 0c03 	orr.w	ip, ip, r3
   87f9c:	fa25 f407 	lsr.w	r4, r5, r7
   87fa0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   87fa4:	fbb4 f9fe 	udiv	r9, r4, lr
   87fa8:	fa1f f88c 	uxth.w	r8, ip
   87fac:	fb0e 4419 	mls	r4, lr, r9, r4
   87fb0:	fa20 f307 	lsr.w	r3, r0, r7
   87fb4:	fb09 fa08 	mul.w	sl, r9, r8
   87fb8:	408d      	lsls	r5, r1
   87fba:	431d      	orrs	r5, r3
   87fbc:	0c2b      	lsrs	r3, r5, #16
   87fbe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   87fc2:	45a2      	cmp	sl, r4
   87fc4:	fa02 f201 	lsl.w	r2, r2, r1
   87fc8:	fa00 f301 	lsl.w	r3, r0, r1
   87fcc:	d909      	bls.n	87fe2 <__udivmoddi4+0x222>
   87fce:	eb1c 0404 	adds.w	r4, ip, r4
   87fd2:	f109 30ff 	add.w	r0, r9, #4294967295
   87fd6:	d248      	bcs.n	8806a <__udivmoddi4+0x2aa>
   87fd8:	45a2      	cmp	sl, r4
   87fda:	d946      	bls.n	8806a <__udivmoddi4+0x2aa>
   87fdc:	f1a9 0902 	sub.w	r9, r9, #2
   87fe0:	4464      	add	r4, ip
   87fe2:	eba4 040a 	sub.w	r4, r4, sl
   87fe6:	fbb4 f0fe 	udiv	r0, r4, lr
   87fea:	fb0e 4410 	mls	r4, lr, r0, r4
   87fee:	fb00 fa08 	mul.w	sl, r0, r8
   87ff2:	b2ad      	uxth	r5, r5
   87ff4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   87ff8:	45a2      	cmp	sl, r4
   87ffa:	d908      	bls.n	8800e <__udivmoddi4+0x24e>
   87ffc:	eb1c 0404 	adds.w	r4, ip, r4
   88000:	f100 35ff 	add.w	r5, r0, #4294967295
   88004:	d22d      	bcs.n	88062 <__udivmoddi4+0x2a2>
   88006:	45a2      	cmp	sl, r4
   88008:	d92b      	bls.n	88062 <__udivmoddi4+0x2a2>
   8800a:	3802      	subs	r0, #2
   8800c:	4464      	add	r4, ip
   8800e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88012:	fba0 8902 	umull	r8, r9, r0, r2
   88016:	eba4 040a 	sub.w	r4, r4, sl
   8801a:	454c      	cmp	r4, r9
   8801c:	46c6      	mov	lr, r8
   8801e:	464d      	mov	r5, r9
   88020:	d319      	bcc.n	88056 <__udivmoddi4+0x296>
   88022:	d016      	beq.n	88052 <__udivmoddi4+0x292>
   88024:	b15e      	cbz	r6, 8803e <__udivmoddi4+0x27e>
   88026:	ebb3 020e 	subs.w	r2, r3, lr
   8802a:	eb64 0405 	sbc.w	r4, r4, r5
   8802e:	fa04 f707 	lsl.w	r7, r4, r7
   88032:	fa22 f301 	lsr.w	r3, r2, r1
   88036:	431f      	orrs	r7, r3
   88038:	40cc      	lsrs	r4, r1
   8803a:	e9c6 7400 	strd	r7, r4, [r6]
   8803e:	2100      	movs	r1, #0
   88040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88044:	4631      	mov	r1, r6
   88046:	4630      	mov	r0, r6
   88048:	e70c      	b.n	87e64 <__udivmoddi4+0xa4>
   8804a:	468c      	mov	ip, r1
   8804c:	e6eb      	b.n	87e26 <__udivmoddi4+0x66>
   8804e:	4610      	mov	r0, r2
   88050:	e6ff      	b.n	87e52 <__udivmoddi4+0x92>
   88052:	4543      	cmp	r3, r8
   88054:	d2e6      	bcs.n	88024 <__udivmoddi4+0x264>
   88056:	ebb8 0e02 	subs.w	lr, r8, r2
   8805a:	eb69 050c 	sbc.w	r5, r9, ip
   8805e:	3801      	subs	r0, #1
   88060:	e7e0      	b.n	88024 <__udivmoddi4+0x264>
   88062:	4628      	mov	r0, r5
   88064:	e7d3      	b.n	8800e <__udivmoddi4+0x24e>
   88066:	4611      	mov	r1, r2
   88068:	e78c      	b.n	87f84 <__udivmoddi4+0x1c4>
   8806a:	4681      	mov	r9, r0
   8806c:	e7b9      	b.n	87fe2 <__udivmoddi4+0x222>
   8806e:	4608      	mov	r0, r1
   88070:	e773      	b.n	87f5a <__udivmoddi4+0x19a>
   88072:	4608      	mov	r0, r1
   88074:	e749      	b.n	87f0a <__udivmoddi4+0x14a>
   88076:	f1ac 0c02 	sub.w	ip, ip, #2
   8807a:	443d      	add	r5, r7
   8807c:	e713      	b.n	87ea6 <__udivmoddi4+0xe6>
   8807e:	3802      	subs	r0, #2
   88080:	443c      	add	r4, r7
   88082:	e724      	b.n	87ece <__udivmoddi4+0x10e>

00088084 <__aeabi_idiv0>:
   88084:	4770      	bx	lr
   88086:	bf00      	nop

00088088 <__libc_init_array>:
   88088:	b570      	push	{r4, r5, r6, lr}
   8808a:	4e0d      	ldr	r6, [pc, #52]	; (880c0 <__libc_init_array+0x38>)
   8808c:	4d0d      	ldr	r5, [pc, #52]	; (880c4 <__libc_init_array+0x3c>)
   8808e:	1b76      	subs	r6, r6, r5
   88090:	10b6      	asrs	r6, r6, #2
   88092:	d006      	beq.n	880a2 <__libc_init_array+0x1a>
   88094:	2400      	movs	r4, #0
   88096:	f855 3b04 	ldr.w	r3, [r5], #4
   8809a:	3401      	adds	r4, #1
   8809c:	4798      	blx	r3
   8809e:	42a6      	cmp	r6, r4
   880a0:	d1f9      	bne.n	88096 <__libc_init_array+0xe>
   880a2:	4e09      	ldr	r6, [pc, #36]	; (880c8 <__libc_init_array+0x40>)
   880a4:	4d09      	ldr	r5, [pc, #36]	; (880cc <__libc_init_array+0x44>)
   880a6:	f006 ff2b 	bl	8ef00 <_init>
   880aa:	1b76      	subs	r6, r6, r5
   880ac:	10b6      	asrs	r6, r6, #2
   880ae:	d006      	beq.n	880be <__libc_init_array+0x36>
   880b0:	2400      	movs	r4, #0
   880b2:	f855 3b04 	ldr.w	r3, [r5], #4
   880b6:	3401      	adds	r4, #1
   880b8:	4798      	blx	r3
   880ba:	42a6      	cmp	r6, r4
   880bc:	d1f9      	bne.n	880b2 <__libc_init_array+0x2a>
   880be:	bd70      	pop	{r4, r5, r6, pc}
   880c0:	0008ef0c 	.word	0x0008ef0c
   880c4:	0008ef0c 	.word	0x0008ef0c
   880c8:	0008ef14 	.word	0x0008ef14
   880cc:	0008ef0c 	.word	0x0008ef0c

000880d0 <iprintf>:
   880d0:	b40f      	push	{r0, r1, r2, r3}
   880d2:	b500      	push	{lr}
   880d4:	4907      	ldr	r1, [pc, #28]	; (880f4 <iprintf+0x24>)
   880d6:	b083      	sub	sp, #12
   880d8:	ab04      	add	r3, sp, #16
   880da:	6808      	ldr	r0, [r1, #0]
   880dc:	f853 2b04 	ldr.w	r2, [r3], #4
   880e0:	6881      	ldr	r1, [r0, #8]
   880e2:	9301      	str	r3, [sp, #4]
   880e4:	f001 fed4 	bl	89e90 <_vfiprintf_r>
   880e8:	b003      	add	sp, #12
   880ea:	f85d eb04 	ldr.w	lr, [sp], #4
   880ee:	b004      	add	sp, #16
   880f0:	4770      	bx	lr
   880f2:	bf00      	nop
   880f4:	20000504 	.word	0x20000504

000880f8 <memcpy>:
   880f8:	4684      	mov	ip, r0
   880fa:	ea41 0300 	orr.w	r3, r1, r0
   880fe:	f013 0303 	ands.w	r3, r3, #3
   88102:	d149      	bne.n	88198 <memcpy+0xa0>
   88104:	3a40      	subs	r2, #64	; 0x40
   88106:	d323      	bcc.n	88150 <memcpy+0x58>
   88108:	680b      	ldr	r3, [r1, #0]
   8810a:	6003      	str	r3, [r0, #0]
   8810c:	684b      	ldr	r3, [r1, #4]
   8810e:	6043      	str	r3, [r0, #4]
   88110:	688b      	ldr	r3, [r1, #8]
   88112:	6083      	str	r3, [r0, #8]
   88114:	68cb      	ldr	r3, [r1, #12]
   88116:	60c3      	str	r3, [r0, #12]
   88118:	690b      	ldr	r3, [r1, #16]
   8811a:	6103      	str	r3, [r0, #16]
   8811c:	694b      	ldr	r3, [r1, #20]
   8811e:	6143      	str	r3, [r0, #20]
   88120:	698b      	ldr	r3, [r1, #24]
   88122:	6183      	str	r3, [r0, #24]
   88124:	69cb      	ldr	r3, [r1, #28]
   88126:	61c3      	str	r3, [r0, #28]
   88128:	6a0b      	ldr	r3, [r1, #32]
   8812a:	6203      	str	r3, [r0, #32]
   8812c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8812e:	6243      	str	r3, [r0, #36]	; 0x24
   88130:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   88132:	6283      	str	r3, [r0, #40]	; 0x28
   88134:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   88136:	62c3      	str	r3, [r0, #44]	; 0x2c
   88138:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8813a:	6303      	str	r3, [r0, #48]	; 0x30
   8813c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8813e:	6343      	str	r3, [r0, #52]	; 0x34
   88140:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   88142:	6383      	str	r3, [r0, #56]	; 0x38
   88144:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   88146:	63c3      	str	r3, [r0, #60]	; 0x3c
   88148:	3040      	adds	r0, #64	; 0x40
   8814a:	3140      	adds	r1, #64	; 0x40
   8814c:	3a40      	subs	r2, #64	; 0x40
   8814e:	d2db      	bcs.n	88108 <memcpy+0x10>
   88150:	3230      	adds	r2, #48	; 0x30
   88152:	d30b      	bcc.n	8816c <memcpy+0x74>
   88154:	680b      	ldr	r3, [r1, #0]
   88156:	6003      	str	r3, [r0, #0]
   88158:	684b      	ldr	r3, [r1, #4]
   8815a:	6043      	str	r3, [r0, #4]
   8815c:	688b      	ldr	r3, [r1, #8]
   8815e:	6083      	str	r3, [r0, #8]
   88160:	68cb      	ldr	r3, [r1, #12]
   88162:	60c3      	str	r3, [r0, #12]
   88164:	3010      	adds	r0, #16
   88166:	3110      	adds	r1, #16
   88168:	3a10      	subs	r2, #16
   8816a:	d2f3      	bcs.n	88154 <memcpy+0x5c>
   8816c:	320c      	adds	r2, #12
   8816e:	d305      	bcc.n	8817c <memcpy+0x84>
   88170:	f851 3b04 	ldr.w	r3, [r1], #4
   88174:	f840 3b04 	str.w	r3, [r0], #4
   88178:	3a04      	subs	r2, #4
   8817a:	d2f9      	bcs.n	88170 <memcpy+0x78>
   8817c:	3204      	adds	r2, #4
   8817e:	d008      	beq.n	88192 <memcpy+0x9a>
   88180:	07d2      	lsls	r2, r2, #31
   88182:	bf1c      	itt	ne
   88184:	f811 3b01 	ldrbne.w	r3, [r1], #1
   88188:	f800 3b01 	strbne.w	r3, [r0], #1
   8818c:	d301      	bcc.n	88192 <memcpy+0x9a>
   8818e:	880b      	ldrh	r3, [r1, #0]
   88190:	8003      	strh	r3, [r0, #0]
   88192:	4660      	mov	r0, ip
   88194:	4770      	bx	lr
   88196:	bf00      	nop
   88198:	2a08      	cmp	r2, #8
   8819a:	d313      	bcc.n	881c4 <memcpy+0xcc>
   8819c:	078b      	lsls	r3, r1, #30
   8819e:	d0b1      	beq.n	88104 <memcpy+0xc>
   881a0:	f010 0303 	ands.w	r3, r0, #3
   881a4:	d0ae      	beq.n	88104 <memcpy+0xc>
   881a6:	f1c3 0304 	rsb	r3, r3, #4
   881aa:	1ad2      	subs	r2, r2, r3
   881ac:	07db      	lsls	r3, r3, #31
   881ae:	bf1c      	itt	ne
   881b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   881b4:	f800 3b01 	strbne.w	r3, [r0], #1
   881b8:	d3a4      	bcc.n	88104 <memcpy+0xc>
   881ba:	f831 3b02 	ldrh.w	r3, [r1], #2
   881be:	f820 3b02 	strh.w	r3, [r0], #2
   881c2:	e79f      	b.n	88104 <memcpy+0xc>
   881c4:	3a04      	subs	r2, #4
   881c6:	d3d9      	bcc.n	8817c <memcpy+0x84>
   881c8:	3a01      	subs	r2, #1
   881ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   881ce:	f800 3b01 	strb.w	r3, [r0], #1
   881d2:	d2f9      	bcs.n	881c8 <memcpy+0xd0>
   881d4:	780b      	ldrb	r3, [r1, #0]
   881d6:	7003      	strb	r3, [r0, #0]
   881d8:	784b      	ldrb	r3, [r1, #1]
   881da:	7043      	strb	r3, [r0, #1]
   881dc:	788b      	ldrb	r3, [r1, #2]
   881de:	7083      	strb	r3, [r0, #2]
   881e0:	4660      	mov	r0, ip
   881e2:	4770      	bx	lr

000881e4 <memset>:
   881e4:	b4f0      	push	{r4, r5, r6, r7}
   881e6:	0786      	lsls	r6, r0, #30
   881e8:	d046      	beq.n	88278 <memset+0x94>
   881ea:	1e54      	subs	r4, r2, #1
   881ec:	2a00      	cmp	r2, #0
   881ee:	d03c      	beq.n	8826a <memset+0x86>
   881f0:	4603      	mov	r3, r0
   881f2:	b2ca      	uxtb	r2, r1
   881f4:	e001      	b.n	881fa <memset+0x16>
   881f6:	3c01      	subs	r4, #1
   881f8:	d337      	bcc.n	8826a <memset+0x86>
   881fa:	f803 2b01 	strb.w	r2, [r3], #1
   881fe:	079d      	lsls	r5, r3, #30
   88200:	d1f9      	bne.n	881f6 <memset+0x12>
   88202:	2c03      	cmp	r4, #3
   88204:	d92a      	bls.n	8825c <memset+0x78>
   88206:	b2cd      	uxtb	r5, r1
   88208:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8820c:	2c0f      	cmp	r4, #15
   8820e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   88212:	d934      	bls.n	8827e <memset+0x9a>
   88214:	f1a4 0210 	sub.w	r2, r4, #16
   88218:	f022 0c0f 	bic.w	ip, r2, #15
   8821c:	f103 0720 	add.w	r7, r3, #32
   88220:	0916      	lsrs	r6, r2, #4
   88222:	4467      	add	r7, ip
   88224:	f103 0210 	add.w	r2, r3, #16
   88228:	e942 5504 	strd	r5, r5, [r2, #-16]
   8822c:	e942 5502 	strd	r5, r5, [r2, #-8]
   88230:	3210      	adds	r2, #16
   88232:	42ba      	cmp	r2, r7
   88234:	d1f8      	bne.n	88228 <memset+0x44>
   88236:	1c72      	adds	r2, r6, #1
   88238:	f014 0f0c 	tst.w	r4, #12
   8823c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   88240:	f004 060f 	and.w	r6, r4, #15
   88244:	d013      	beq.n	8826e <memset+0x8a>
   88246:	1f33      	subs	r3, r6, #4
   88248:	f023 0303 	bic.w	r3, r3, #3
   8824c:	3304      	adds	r3, #4
   8824e:	4413      	add	r3, r2
   88250:	f842 5b04 	str.w	r5, [r2], #4
   88254:	4293      	cmp	r3, r2
   88256:	d1fb      	bne.n	88250 <memset+0x6c>
   88258:	f006 0403 	and.w	r4, r6, #3
   8825c:	b12c      	cbz	r4, 8826a <memset+0x86>
   8825e:	b2ca      	uxtb	r2, r1
   88260:	441c      	add	r4, r3
   88262:	f803 2b01 	strb.w	r2, [r3], #1
   88266:	429c      	cmp	r4, r3
   88268:	d1fb      	bne.n	88262 <memset+0x7e>
   8826a:	bcf0      	pop	{r4, r5, r6, r7}
   8826c:	4770      	bx	lr
   8826e:	4634      	mov	r4, r6
   88270:	4613      	mov	r3, r2
   88272:	2c00      	cmp	r4, #0
   88274:	d1f3      	bne.n	8825e <memset+0x7a>
   88276:	e7f8      	b.n	8826a <memset+0x86>
   88278:	4614      	mov	r4, r2
   8827a:	4603      	mov	r3, r0
   8827c:	e7c1      	b.n	88202 <memset+0x1e>
   8827e:	461a      	mov	r2, r3
   88280:	4626      	mov	r6, r4
   88282:	e7e0      	b.n	88246 <memset+0x62>

00088284 <sprintf>:
   88284:	b40e      	push	{r1, r2, r3}
   88286:	4601      	mov	r1, r0
   88288:	b530      	push	{r4, r5, lr}
   8828a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8828e:	b09c      	sub	sp, #112	; 0x70
   88290:	ab1f      	add	r3, sp, #124	; 0x7c
   88292:	480b      	ldr	r0, [pc, #44]	; (882c0 <sprintf+0x3c>)
   88294:	f853 2b04 	ldr.w	r2, [r3], #4
   88298:	4d0a      	ldr	r5, [pc, #40]	; (882c4 <sprintf+0x40>)
   8829a:	9102      	str	r1, [sp, #8]
   8829c:	9106      	str	r1, [sp, #24]
   8829e:	6800      	ldr	r0, [r0, #0]
   882a0:	a902      	add	r1, sp, #8
   882a2:	9301      	str	r3, [sp, #4]
   882a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   882a8:	9407      	str	r4, [sp, #28]
   882aa:	f000 f80d 	bl	882c8 <_svfprintf_r>
   882ae:	2200      	movs	r2, #0
   882b0:	9b02      	ldr	r3, [sp, #8]
   882b2:	701a      	strb	r2, [r3, #0]
   882b4:	b01c      	add	sp, #112	; 0x70
   882b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   882ba:	b003      	add	sp, #12
   882bc:	4770      	bx	lr
   882be:	bf00      	nop
   882c0:	20000504 	.word	0x20000504
   882c4:	ffff0208 	.word	0xffff0208

000882c8 <_svfprintf_r>:
   882c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   882cc:	b0d7      	sub	sp, #348	; 0x15c
   882ce:	468b      	mov	fp, r1
   882d0:	4617      	mov	r7, r2
   882d2:	930e      	str	r3, [sp, #56]	; 0x38
   882d4:	4681      	mov	r9, r0
   882d6:	f004 f9e1 	bl	8c69c <_localeconv_r>
   882da:	6803      	ldr	r3, [r0, #0]
   882dc:	4618      	mov	r0, r3
   882de:	9318      	str	r3, [sp, #96]	; 0x60
   882e0:	f005 fbd6 	bl	8da90 <strlen>
   882e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   882e8:	9017      	str	r0, [sp, #92]	; 0x5c
   882ea:	061d      	lsls	r5, r3, #24
   882ec:	d504      	bpl.n	882f8 <_svfprintf_r+0x30>
   882ee:	f8db 3010 	ldr.w	r3, [fp, #16]
   882f2:	2b00      	cmp	r3, #0
   882f4:	f000 87df 	beq.w	892b6 <_svfprintf_r+0xfee>
   882f8:	2300      	movs	r3, #0
   882fa:	2100      	movs	r1, #0
   882fc:	2200      	movs	r2, #0
   882fe:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   88302:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   88306:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   8830a:	9313      	str	r3, [sp, #76]	; 0x4c
   8830c:	9319      	str	r3, [sp, #100]	; 0x64
   8830e:	930a      	str	r3, [sp, #40]	; 0x28
   88310:	ab2d      	add	r3, sp, #180	; 0xb4
   88312:	4698      	mov	r8, r3
   88314:	932a      	str	r3, [sp, #168]	; 0xa8
   88316:	783b      	ldrb	r3, [r7, #0]
   88318:	46da      	mov	sl, fp
   8831a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   8831e:	2b00      	cmp	r3, #0
   88320:	f000 81a4 	beq.w	8866c <_svfprintf_r+0x3a4>
   88324:	463c      	mov	r4, r7
   88326:	e004      	b.n	88332 <_svfprintf_r+0x6a>
   88328:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8832c:	2b00      	cmp	r3, #0
   8832e:	f000 80fd 	beq.w	8852c <_svfprintf_r+0x264>
   88332:	2b25      	cmp	r3, #37	; 0x25
   88334:	d1f8      	bne.n	88328 <_svfprintf_r+0x60>
   88336:	1be5      	subs	r5, r4, r7
   88338:	f040 80fb 	bne.w	88532 <_svfprintf_r+0x26a>
   8833c:	7823      	ldrb	r3, [r4, #0]
   8833e:	2b00      	cmp	r3, #0
   88340:	f000 8194 	beq.w	8866c <_svfprintf_r+0x3a4>
   88344:	2300      	movs	r3, #0
   88346:	930b      	str	r3, [sp, #44]	; 0x2c
   88348:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8834c:	9307      	str	r3, [sp, #28]
   8834e:	f04f 33ff 	mov.w	r3, #4294967295
   88352:	7866      	ldrb	r6, [r4, #1]
   88354:	f104 0b01 	add.w	fp, r4, #1
   88358:	2120      	movs	r1, #32
   8835a:	242b      	movs	r4, #43	; 0x2b
   8835c:	9309      	str	r3, [sp, #36]	; 0x24
   8835e:	f10b 0b01 	add.w	fp, fp, #1
   88362:	f1a6 0320 	sub.w	r3, r6, #32
   88366:	2b5a      	cmp	r3, #90	; 0x5a
   88368:	f200 80ff 	bhi.w	8856a <_svfprintf_r+0x2a2>
   8836c:	e8df f013 	tbh	[pc, r3, lsl #1]
   88370:	00fd02bc 	.word	0x00fd02bc
   88374:	02b500fd 	.word	0x02b500fd
   88378:	00fd00fd 	.word	0x00fd00fd
   8837c:	029100fd 	.word	0x029100fd
   88380:	00fd00fd 	.word	0x00fd00fd
   88384:	02e7006a 	.word	0x02e7006a
   88388:	023400fd 	.word	0x023400fd
   8838c:	00fd02cd 	.word	0x00fd02cd
   88390:	005b02c6 	.word	0x005b02c6
   88394:	005b005b 	.word	0x005b005b
   88398:	005b005b 	.word	0x005b005b
   8839c:	005b005b 	.word	0x005b005b
   883a0:	005b005b 	.word	0x005b005b
   883a4:	00fd00fd 	.word	0x00fd00fd
   883a8:	00fd00fd 	.word	0x00fd00fd
   883ac:	00fd00fd 	.word	0x00fd00fd
   883b0:	019000fd 	.word	0x019000fd
   883b4:	01f700fd 	.word	0x01f700fd
   883b8:	0190007c 	.word	0x0190007c
   883bc:	01900190 	.word	0x01900190
   883c0:	00fd00fd 	.word	0x00fd00fd
   883c4:	00fd00fd 	.word	0x00fd00fd
   883c8:	00fd028a 	.word	0x00fd028a
   883cc:	00a900fd 	.word	0x00a900fd
   883d0:	00fd00fd 	.word	0x00fd00fd
   883d4:	020b00fd 	.word	0x020b00fd
   883d8:	023b00fd 	.word	0x023b00fd
   883dc:	00fd00fd 	.word	0x00fd00fd
   883e0:	00fd0781 	.word	0x00fd0781
   883e4:	00fd00fd 	.word	0x00fd00fd
   883e8:	00fd00fd 	.word	0x00fd00fd
   883ec:	00fd00fd 	.word	0x00fd00fd
   883f0:	019000fd 	.word	0x019000fd
   883f4:	01f700fd 	.word	0x01f700fd
   883f8:	01900080 	.word	0x01900080
   883fc:	01900190 	.word	0x01900190
   88400:	00800280 	.word	0x00800280
   88404:	00fd0075 	.word	0x00fd0075
   88408:	00fd0276 	.word	0x00fd0276
   8840c:	00ad025e 	.word	0x00ad025e
   88410:	0075024c 	.word	0x0075024c
   88414:	020b00fd 	.word	0x020b00fd
   88418:	075b0072 	.word	0x075b0072
   8841c:	00fd00fd 	.word	0x00fd00fd
   88420:	00fd075f 	.word	0x00fd075f
   88424:	0072      	.short	0x0072
   88426:	2200      	movs	r2, #0
   88428:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8842c:	f81b 6b01 	ldrb.w	r6, [fp], #1
   88430:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   88434:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   88438:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8843c:	2b09      	cmp	r3, #9
   8843e:	d9f5      	bls.n	8842c <_svfprintf_r+0x164>
   88440:	920b      	str	r2, [sp, #44]	; 0x2c
   88442:	e78e      	b.n	88362 <_svfprintf_r+0x9a>
   88444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88446:	f853 2b04 	ldr.w	r2, [r3], #4
   8844a:	2a00      	cmp	r2, #0
   8844c:	920b      	str	r2, [sp, #44]	; 0x2c
   8844e:	930e      	str	r3, [sp, #56]	; 0x38
   88450:	f2c0 81bf 	blt.w	887d2 <_svfprintf_r+0x50a>
   88454:	f89b 6000 	ldrb.w	r6, [fp]
   88458:	e781      	b.n	8835e <_svfprintf_r+0x96>
   8845a:	9b07      	ldr	r3, [sp, #28]
   8845c:	f89b 6000 	ldrb.w	r6, [fp]
   88460:	f043 0320 	orr.w	r3, r3, #32
   88464:	9307      	str	r3, [sp, #28]
   88466:	e77a      	b.n	8835e <_svfprintf_r+0x96>
   88468:	9b07      	ldr	r3, [sp, #28]
   8846a:	f043 0310 	orr.w	r3, r3, #16
   8846e:	9307      	str	r3, [sp, #28]
   88470:	9b07      	ldr	r3, [sp, #28]
   88472:	069c      	lsls	r4, r3, #26
   88474:	f140 8162 	bpl.w	8873c <_svfprintf_r+0x474>
   88478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8847a:	3307      	adds	r3, #7
   8847c:	f023 0307 	bic.w	r3, r3, #7
   88480:	4619      	mov	r1, r3
   88482:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88486:	4614      	mov	r4, r2
   88488:	461d      	mov	r5, r3
   8848a:	910e      	str	r1, [sp, #56]	; 0x38
   8848c:	2a00      	cmp	r2, #0
   8848e:	f173 0300 	sbcs.w	r3, r3, #0
   88492:	f2c0 85ab 	blt.w	88fec <_svfprintf_r+0xd24>
   88496:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88498:	3301      	adds	r3, #1
   8849a:	9b07      	ldr	r3, [sp, #28]
   8849c:	f000 8414 	beq.w	88cc8 <_svfprintf_r+0xa00>
   884a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   884a4:	ea54 0205 	orrs.w	r2, r4, r5
   884a8:	9308      	str	r3, [sp, #32]
   884aa:	f040 840e 	bne.w	88cca <_svfprintf_r+0xa02>
   884ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   884b0:	2a00      	cmp	r2, #0
   884b2:	f040 840f 	bne.w	88cd4 <_svfprintf_r+0xa0c>
   884b6:	9307      	str	r3, [sp, #28]
   884b8:	2300      	movs	r3, #0
   884ba:	af56      	add	r7, sp, #344	; 0x158
   884bc:	9309      	str	r3, [sp, #36]	; 0x24
   884be:	930c      	str	r3, [sp, #48]	; 0x30
   884c0:	e26b      	b.n	8899a <_svfprintf_r+0x6d2>
   884c2:	9b07      	ldr	r3, [sp, #28]
   884c4:	f043 0310 	orr.w	r3, r3, #16
   884c8:	9307      	str	r3, [sp, #28]
   884ca:	9b07      	ldr	r3, [sp, #28]
   884cc:	069a      	lsls	r2, r3, #26
   884ce:	f140 8126 	bpl.w	8871e <_svfprintf_r+0x456>
   884d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   884d4:	3307      	adds	r3, #7
   884d6:	f023 0307 	bic.w	r3, r3, #7
   884da:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   884de:	930e      	str	r3, [sp, #56]	; 0x38
   884e0:	9b07      	ldr	r3, [sp, #28]
   884e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   884e6:	9308      	str	r3, [sp, #32]
   884e8:	2300      	movs	r3, #0
   884ea:	2200      	movs	r2, #0
   884ec:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   884f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   884f2:	4611      	mov	r1, r2
   884f4:	3101      	adds	r1, #1
   884f6:	f000 8231 	beq.w	8895c <_svfprintf_r+0x694>
   884fa:	9908      	ldr	r1, [sp, #32]
   884fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   88500:	9107      	str	r1, [sp, #28]
   88502:	ea54 0105 	orrs.w	r1, r4, r5
   88506:	f040 8227 	bne.w	88958 <_svfprintf_r+0x690>
   8850a:	2a00      	cmp	r2, #0
   8850c:	f040 837d 	bne.w	88c0a <_svfprintf_r+0x942>
   88510:	2b00      	cmp	r3, #0
   88512:	d1d1      	bne.n	884b8 <_svfprintf_r+0x1f0>
   88514:	9b08      	ldr	r3, [sp, #32]
   88516:	f013 0301 	ands.w	r3, r3, #1
   8851a:	930c      	str	r3, [sp, #48]	; 0x30
   8851c:	f000 8590 	beq.w	89040 <_svfprintf_r+0xd78>
   88520:	2330      	movs	r3, #48	; 0x30
   88522:	f20d 1757 	addw	r7, sp, #343	; 0x157
   88526:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   8852a:	e236      	b.n	8899a <_svfprintf_r+0x6d2>
   8852c:	1be5      	subs	r5, r4, r7
   8852e:	f000 809d 	beq.w	8866c <_svfprintf_r+0x3a4>
   88532:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   88536:	3301      	adds	r3, #1
   88538:	442a      	add	r2, r5
   8853a:	2b07      	cmp	r3, #7
   8853c:	e9c8 7500 	strd	r7, r5, [r8]
   88540:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   88544:	dc06      	bgt.n	88554 <_svfprintf_r+0x28c>
   88546:	f108 0808 	add.w	r8, r8, #8
   8854a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8854c:	7823      	ldrb	r3, [r4, #0]
   8854e:	442a      	add	r2, r5
   88550:	920a      	str	r2, [sp, #40]	; 0x28
   88552:	e6f4      	b.n	8833e <_svfprintf_r+0x76>
   88554:	4651      	mov	r1, sl
   88556:	4648      	mov	r0, r9
   88558:	aa2a      	add	r2, sp, #168	; 0xa8
   8855a:	f005 fafb 	bl	8db54 <__ssprint_r>
   8855e:	2800      	cmp	r0, #0
   88560:	f041 83ce 	bne.w	89d00 <_svfprintf_r+0x1a38>
   88564:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88568:	e7ef      	b.n	8854a <_svfprintf_r+0x282>
   8856a:	2e00      	cmp	r6, #0
   8856c:	d07e      	beq.n	8866c <_svfprintf_r+0x3a4>
   8856e:	2300      	movs	r3, #0
   88570:	2101      	movs	r1, #1
   88572:	461a      	mov	r2, r3
   88574:	9108      	str	r1, [sp, #32]
   88576:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   8857a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8857e:	930d      	str	r3, [sp, #52]	; 0x34
   88580:	9309      	str	r3, [sp, #36]	; 0x24
   88582:	9312      	str	r3, [sp, #72]	; 0x48
   88584:	9316      	str	r3, [sp, #88]	; 0x58
   88586:	9310      	str	r3, [sp, #64]	; 0x40
   88588:	910c      	str	r1, [sp, #48]	; 0x30
   8858a:	af3d      	add	r7, sp, #244	; 0xf4
   8858c:	9b07      	ldr	r3, [sp, #28]
   8858e:	f013 0302 	ands.w	r3, r3, #2
   88592:	d002      	beq.n	8859a <_svfprintf_r+0x2d2>
   88594:	9908      	ldr	r1, [sp, #32]
   88596:	3102      	adds	r1, #2
   88598:	9108      	str	r1, [sp, #32]
   8859a:	9907      	ldr	r1, [sp, #28]
   8859c:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   885a0:	910f      	str	r1, [sp, #60]	; 0x3c
   885a2:	d105      	bne.n	885b0 <_svfprintf_r+0x2e8>
   885a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   885a6:	9808      	ldr	r0, [sp, #32]
   885a8:	1a0d      	subs	r5, r1, r0
   885aa:	2d00      	cmp	r5, #0
   885ac:	f300 834b 	bgt.w	88c46 <_svfprintf_r+0x97e>
   885b0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   885b2:	b172      	cbz	r2, 885d2 <_svfprintf_r+0x30a>
   885b4:	2001      	movs	r0, #1
   885b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   885b8:	4404      	add	r4, r0
   885ba:	4402      	add	r2, r0
   885bc:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   885c0:	2a07      	cmp	r2, #7
   885c2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   885c6:	e9c8 1000 	strd	r1, r0, [r8]
   885ca:	f300 83cd 	bgt.w	88d68 <_svfprintf_r+0xaa0>
   885ce:	f108 0808 	add.w	r8, r8, #8
   885d2:	b16b      	cbz	r3, 885f0 <_svfprintf_r+0x328>
   885d4:	2102      	movs	r1, #2
   885d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   885d8:	440c      	add	r4, r1
   885da:	3301      	adds	r3, #1
   885dc:	aa23      	add	r2, sp, #140	; 0x8c
   885de:	2b07      	cmp	r3, #7
   885e0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   885e4:	e9c8 2100 	strd	r2, r1, [r8]
   885e8:	f300 83cc 	bgt.w	88d84 <_svfprintf_r+0xabc>
   885ec:	f108 0808 	add.w	r8, r8, #8
   885f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   885f2:	2b80      	cmp	r3, #128	; 0x80
   885f4:	f000 8234 	beq.w	88a60 <_svfprintf_r+0x798>
   885f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   885fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   885fc:	1a9d      	subs	r5, r3, r2
   885fe:	2d00      	cmp	r5, #0
   88600:	f300 826e 	bgt.w	88ae0 <_svfprintf_r+0x818>
   88604:	9b07      	ldr	r3, [sp, #28]
   88606:	05d9      	lsls	r1, r3, #23
   88608:	f100 81d5 	bmi.w	889b6 <_svfprintf_r+0x6ee>
   8860c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8860e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88610:	3301      	adds	r3, #1
   88612:	4414      	add	r4, r2
   88614:	2b07      	cmp	r3, #7
   88616:	e9c8 7200 	strd	r7, r2, [r8]
   8861a:	942c      	str	r4, [sp, #176]	; 0xb0
   8861c:	932b      	str	r3, [sp, #172]	; 0xac
   8861e:	f300 8397 	bgt.w	88d50 <_svfprintf_r+0xa88>
   88622:	f108 0808 	add.w	r8, r8, #8
   88626:	9b07      	ldr	r3, [sp, #28]
   88628:	0759      	lsls	r1, r3, #29
   8862a:	d505      	bpl.n	88638 <_svfprintf_r+0x370>
   8862c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8862e:	9a08      	ldr	r2, [sp, #32]
   88630:	1a9d      	subs	r5, r3, r2
   88632:	2d00      	cmp	r5, #0
   88634:	f300 83b2 	bgt.w	88d9c <_svfprintf_r+0xad4>
   88638:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   8863c:	9908      	ldr	r1, [sp, #32]
   8863e:	428a      	cmp	r2, r1
   88640:	bfac      	ite	ge
   88642:	189b      	addge	r3, r3, r2
   88644:	185b      	addlt	r3, r3, r1
   88646:	930a      	str	r3, [sp, #40]	; 0x28
   88648:	2c00      	cmp	r4, #0
   8864a:	f040 827d 	bne.w	88b48 <_svfprintf_r+0x880>
   8864e:	2300      	movs	r3, #0
   88650:	932b      	str	r3, [sp, #172]	; 0xac
   88652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88654:	b11b      	cbz	r3, 8865e <_svfprintf_r+0x396>
   88656:	4648      	mov	r0, r9
   88658:	990d      	ldr	r1, [sp, #52]	; 0x34
   8865a:	f003 fd79 	bl	8c150 <_free_r>
   8865e:	465f      	mov	r7, fp
   88660:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88664:	783b      	ldrb	r3, [r7, #0]
   88666:	2b00      	cmp	r3, #0
   88668:	f47f ae5c 	bne.w	88324 <_svfprintf_r+0x5c>
   8866c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8866e:	46d3      	mov	fp, sl
   88670:	2b00      	cmp	r3, #0
   88672:	f041 824b 	bne.w	89b0c <_svfprintf_r+0x1844>
   88676:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8867a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8867e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88680:	bf18      	it	ne
   88682:	f04f 33ff 	movne.w	r3, #4294967295
   88686:	930a      	str	r3, [sp, #40]	; 0x28
   88688:	980a      	ldr	r0, [sp, #40]	; 0x28
   8868a:	b057      	add	sp, #348	; 0x15c
   8868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88692:	3307      	adds	r3, #7
   88694:	f023 0307 	bic.w	r3, r3, #7
   88698:	4619      	mov	r1, r3
   8869a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8869e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   886a2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   886a6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   886aa:	461d      	mov	r5, r3
   886ac:	4618      	mov	r0, r3
   886ae:	910e      	str	r1, [sp, #56]	; 0x38
   886b0:	f04f 32ff 	mov.w	r2, #4294967295
   886b4:	4621      	mov	r1, r4
   886b6:	4ba4      	ldr	r3, [pc, #656]	; (88948 <_svfprintf_r+0x680>)
   886b8:	f006 f980 	bl	8e9bc <__aeabi_dcmpun>
   886bc:	2800      	cmp	r0, #0
   886be:	f040 84d9 	bne.w	89074 <_svfprintf_r+0xdac>
   886c2:	4628      	mov	r0, r5
   886c4:	4621      	mov	r1, r4
   886c6:	f04f 32ff 	mov.w	r2, #4294967295
   886ca:	4b9f      	ldr	r3, [pc, #636]	; (88948 <_svfprintf_r+0x680>)
   886cc:	f006 f958 	bl	8e980 <__aeabi_dcmple>
   886d0:	2800      	cmp	r0, #0
   886d2:	f040 84cf 	bne.w	89074 <_svfprintf_r+0xdac>
   886d6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   886da:	2200      	movs	r2, #0
   886dc:	2300      	movs	r3, #0
   886de:	f006 f945 	bl	8e96c <__aeabi_dcmplt>
   886e2:	2800      	cmp	r0, #0
   886e4:	f041 800e 	bne.w	89704 <_svfprintf_r+0x143c>
   886e8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   886ec:	2003      	movs	r0, #3
   886ee:	2100      	movs	r1, #0
   886f0:	4f96      	ldr	r7, [pc, #600]	; (8894c <_svfprintf_r+0x684>)
   886f2:	4b97      	ldr	r3, [pc, #604]	; (88950 <_svfprintf_r+0x688>)
   886f4:	9008      	str	r0, [sp, #32]
   886f6:	910d      	str	r1, [sp, #52]	; 0x34
   886f8:	2e47      	cmp	r6, #71	; 0x47
   886fa:	bfc8      	it	gt
   886fc:	461f      	movgt	r7, r3
   886fe:	9c07      	ldr	r4, [sp, #28]
   88700:	900c      	str	r0, [sp, #48]	; 0x30
   88702:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   88706:	9407      	str	r4, [sp, #28]
   88708:	9109      	str	r1, [sp, #36]	; 0x24
   8870a:	9112      	str	r1, [sp, #72]	; 0x48
   8870c:	9116      	str	r1, [sp, #88]	; 0x58
   8870e:	9110      	str	r1, [sp, #64]	; 0x40
   88710:	2a00      	cmp	r2, #0
   88712:	f43f af3b 	beq.w	8858c <_svfprintf_r+0x2c4>
   88716:	9b08      	ldr	r3, [sp, #32]
   88718:	3301      	adds	r3, #1
   8871a:	9308      	str	r3, [sp, #32]
   8871c:	e736      	b.n	8858c <_svfprintf_r+0x2c4>
   8871e:	9b07      	ldr	r3, [sp, #28]
   88720:	06db      	lsls	r3, r3, #27
   88722:	f100 849c 	bmi.w	8905e <_svfprintf_r+0xd96>
   88726:	9b07      	ldr	r3, [sp, #28]
   88728:	065f      	lsls	r7, r3, #25
   8872a:	f140 87b2 	bpl.w	89692 <_svfprintf_r+0x13ca>
   8872e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88730:	2500      	movs	r5, #0
   88732:	f853 4b04 	ldr.w	r4, [r3], #4
   88736:	930e      	str	r3, [sp, #56]	; 0x38
   88738:	b2a4      	uxth	r4, r4
   8873a:	e6d1      	b.n	884e0 <_svfprintf_r+0x218>
   8873c:	9b07      	ldr	r3, [sp, #28]
   8873e:	06d8      	lsls	r0, r3, #27
   88740:	f100 8568 	bmi.w	89214 <_svfprintf_r+0xf4c>
   88744:	9b07      	ldr	r3, [sp, #28]
   88746:	0659      	lsls	r1, r3, #25
   88748:	f140 87be 	bpl.w	896c8 <_svfprintf_r+0x1400>
   8874c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8874e:	f853 4b04 	ldr.w	r4, [r3], #4
   88752:	b224      	sxth	r4, r4
   88754:	17e5      	asrs	r5, r4, #31
   88756:	930e      	str	r3, [sp, #56]	; 0x38
   88758:	4622      	mov	r2, r4
   8875a:	462b      	mov	r3, r5
   8875c:	e696      	b.n	8848c <_svfprintf_r+0x1c4>
   8875e:	2100      	movs	r1, #0
   88760:	2401      	movs	r4, #1
   88762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88764:	460a      	mov	r2, r1
   88766:	f853 0b04 	ldr.w	r0, [r3], #4
   8876a:	9408      	str	r4, [sp, #32]
   8876c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   88770:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   88774:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   88778:	9109      	str	r1, [sp, #36]	; 0x24
   8877a:	9112      	str	r1, [sp, #72]	; 0x48
   8877c:	9116      	str	r1, [sp, #88]	; 0x58
   8877e:	9110      	str	r1, [sp, #64]	; 0x40
   88780:	940c      	str	r4, [sp, #48]	; 0x30
   88782:	af3d      	add	r7, sp, #244	; 0xf4
   88784:	e702      	b.n	8858c <_svfprintf_r+0x2c4>
   88786:	2500      	movs	r5, #0
   88788:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8878a:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8878e:	f854 7b04 	ldr.w	r7, [r4], #4
   88792:	2f00      	cmp	r7, #0
   88794:	f000 859f 	beq.w	892d6 <_svfprintf_r+0x100e>
   88798:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8879a:	4613      	mov	r3, r2
   8879c:	3301      	adds	r3, #1
   8879e:	f000 8770 	beq.w	89682 <_svfprintf_r+0x13ba>
   887a2:	4629      	mov	r1, r5
   887a4:	4638      	mov	r0, r7
   887a6:	f004 fac1 	bl	8cd2c <memchr>
   887aa:	900d      	str	r0, [sp, #52]	; 0x34
   887ac:	2800      	cmp	r0, #0
   887ae:	f001 80b9 	beq.w	89924 <_svfprintf_r+0x165c>
   887b2:	462b      	mov	r3, r5
   887b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   887b6:	9509      	str	r5, [sp, #36]	; 0x24
   887b8:	1bd2      	subs	r2, r2, r7
   887ba:	920c      	str	r2, [sp, #48]	; 0x30
   887bc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   887c0:	9208      	str	r2, [sp, #32]
   887c2:	940e      	str	r4, [sp, #56]	; 0x38
   887c4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   887c8:	930d      	str	r3, [sp, #52]	; 0x34
   887ca:	9312      	str	r3, [sp, #72]	; 0x48
   887cc:	9316      	str	r3, [sp, #88]	; 0x58
   887ce:	9310      	str	r3, [sp, #64]	; 0x40
   887d0:	e79e      	b.n	88710 <_svfprintf_r+0x448>
   887d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   887d4:	425b      	negs	r3, r3
   887d6:	930b      	str	r3, [sp, #44]	; 0x2c
   887d8:	9b07      	ldr	r3, [sp, #28]
   887da:	f89b 6000 	ldrb.w	r6, [fp]
   887de:	f043 0304 	orr.w	r3, r3, #4
   887e2:	9307      	str	r3, [sp, #28]
   887e4:	e5bb      	b.n	8835e <_svfprintf_r+0x96>
   887e6:	9b07      	ldr	r3, [sp, #28]
   887e8:	f043 0310 	orr.w	r3, r3, #16
   887ec:	9308      	str	r3, [sp, #32]
   887ee:	9b08      	ldr	r3, [sp, #32]
   887f0:	069d      	lsls	r5, r3, #26
   887f2:	f140 83ea 	bpl.w	88fca <_svfprintf_r+0xd02>
   887f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   887f8:	3307      	adds	r3, #7
   887fa:	f023 0307 	bic.w	r3, r3, #7
   887fe:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88802:	930e      	str	r3, [sp, #56]	; 0x38
   88804:	2301      	movs	r3, #1
   88806:	e670      	b.n	884ea <_svfprintf_r+0x222>
   88808:	f647 0230 	movw	r2, #30768	; 0x7830
   8880c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8880e:	9907      	ldr	r1, [sp, #28]
   88810:	f853 4b04 	ldr.w	r4, [r3], #4
   88814:	f041 0102 	orr.w	r1, r1, #2
   88818:	930e      	str	r3, [sp, #56]	; 0x38
   8881a:	4b4e      	ldr	r3, [pc, #312]	; (88954 <_svfprintf_r+0x68c>)
   8881c:	2500      	movs	r5, #0
   8881e:	9319      	str	r3, [sp, #100]	; 0x64
   88820:	2678      	movs	r6, #120	; 0x78
   88822:	2302      	movs	r3, #2
   88824:	9108      	str	r1, [sp, #32]
   88826:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   8882a:	e65e      	b.n	884ea <_svfprintf_r+0x222>
   8882c:	9b07      	ldr	r3, [sp, #28]
   8882e:	069d      	lsls	r5, r3, #26
   88830:	f100 8408 	bmi.w	89044 <_svfprintf_r+0xd7c>
   88834:	9b07      	ldr	r3, [sp, #28]
   88836:	06dc      	lsls	r4, r3, #27
   88838:	f100 86e1 	bmi.w	895fe <_svfprintf_r+0x1336>
   8883c:	9b07      	ldr	r3, [sp, #28]
   8883e:	0658      	lsls	r0, r3, #25
   88840:	f100 8795 	bmi.w	8976e <_svfprintf_r+0x14a6>
   88844:	9b07      	ldr	r3, [sp, #28]
   88846:	0599      	lsls	r1, r3, #22
   88848:	f140 86d9 	bpl.w	895fe <_svfprintf_r+0x1336>
   8884c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8884e:	990a      	ldr	r1, [sp, #40]	; 0x28
   88850:	f853 2b04 	ldr.w	r2, [r3], #4
   88854:	465f      	mov	r7, fp
   88856:	7011      	strb	r1, [r2, #0]
   88858:	930e      	str	r3, [sp, #56]	; 0x38
   8885a:	e703      	b.n	88664 <_svfprintf_r+0x39c>
   8885c:	f89b 6000 	ldrb.w	r6, [fp]
   88860:	9b07      	ldr	r3, [sp, #28]
   88862:	2e6c      	cmp	r6, #108	; 0x6c
   88864:	f000 8508 	beq.w	89278 <_svfprintf_r+0xfb0>
   88868:	f043 0310 	orr.w	r3, r3, #16
   8886c:	9307      	str	r3, [sp, #28]
   8886e:	e576      	b.n	8835e <_svfprintf_r+0x96>
   88870:	f89b 6000 	ldrb.w	r6, [fp]
   88874:	9b07      	ldr	r3, [sp, #28]
   88876:	2e68      	cmp	r6, #104	; 0x68
   88878:	f000 8507 	beq.w	8928a <_svfprintf_r+0xfc2>
   8887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88880:	9307      	str	r3, [sp, #28]
   88882:	e56c      	b.n	8835e <_svfprintf_r+0x96>
   88884:	9b07      	ldr	r3, [sp, #28]
   88886:	f89b 6000 	ldrb.w	r6, [fp]
   8888a:	f043 0308 	orr.w	r3, r3, #8
   8888e:	9307      	str	r3, [sp, #28]
   88890:	e565      	b.n	8835e <_svfprintf_r+0x96>
   88892:	4648      	mov	r0, r9
   88894:	f003 ff02 	bl	8c69c <_localeconv_r>
   88898:	6843      	ldr	r3, [r0, #4]
   8889a:	4618      	mov	r0, r3
   8889c:	931c      	str	r3, [sp, #112]	; 0x70
   8889e:	f005 f8f7 	bl	8da90 <strlen>
   888a2:	4603      	mov	r3, r0
   888a4:	4648      	mov	r0, r9
   888a6:	461d      	mov	r5, r3
   888a8:	931d      	str	r3, [sp, #116]	; 0x74
   888aa:	f003 fef7 	bl	8c69c <_localeconv_r>
   888ae:	6882      	ldr	r2, [r0, #8]
   888b0:	2120      	movs	r1, #32
   888b2:	921a      	str	r2, [sp, #104]	; 0x68
   888b4:	2d00      	cmp	r5, #0
   888b6:	f43f adcd 	beq.w	88454 <_svfprintf_r+0x18c>
   888ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   888bc:	2b00      	cmp	r3, #0
   888be:	f43f adc9 	beq.w	88454 <_svfprintf_r+0x18c>
   888c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   888c4:	781b      	ldrb	r3, [r3, #0]
   888c6:	2b00      	cmp	r3, #0
   888c8:	f43f adc4 	beq.w	88454 <_svfprintf_r+0x18c>
   888cc:	9b07      	ldr	r3, [sp, #28]
   888ce:	f89b 6000 	ldrb.w	r6, [fp]
   888d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   888d6:	9307      	str	r3, [sp, #28]
   888d8:	e541      	b.n	8835e <_svfprintf_r+0x96>
   888da:	9b07      	ldr	r3, [sp, #28]
   888dc:	f89b 6000 	ldrb.w	r6, [fp]
   888e0:	f043 0301 	orr.w	r3, r3, #1
   888e4:	9307      	str	r3, [sp, #28]
   888e6:	e53a      	b.n	8835e <_svfprintf_r+0x96>
   888e8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   888ec:	2b00      	cmp	r3, #0
   888ee:	f47f adb1 	bne.w	88454 <_svfprintf_r+0x18c>
   888f2:	f89b 6000 	ldrb.w	r6, [fp]
   888f6:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   888fa:	e530      	b.n	8835e <_svfprintf_r+0x96>
   888fc:	9b07      	ldr	r3, [sp, #28]
   888fe:	f89b 6000 	ldrb.w	r6, [fp]
   88902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   88906:	9307      	str	r3, [sp, #28]
   88908:	e529      	b.n	8835e <_svfprintf_r+0x96>
   8890a:	465a      	mov	r2, fp
   8890c:	f812 6b01 	ldrb.w	r6, [r2], #1
   88910:	2e2a      	cmp	r6, #42	; 0x2a
   88912:	f001 8251 	beq.w	89db8 <_svfprintf_r+0x1af0>
   88916:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8891a:	2b09      	cmp	r3, #9
   8891c:	4693      	mov	fp, r2
   8891e:	bf98      	it	ls
   88920:	2200      	movls	r2, #0
   88922:	f201 80ef 	bhi.w	89b04 <_svfprintf_r+0x183c>
   88926:	f81b 6b01 	ldrb.w	r6, [fp], #1
   8892a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8892e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   88932:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   88936:	2b09      	cmp	r3, #9
   88938:	d9f5      	bls.n	88926 <_svfprintf_r+0x65e>
   8893a:	9209      	str	r2, [sp, #36]	; 0x24
   8893c:	e511      	b.n	88362 <_svfprintf_r+0x9a>
   8893e:	f89b 6000 	ldrb.w	r6, [fp]
   88942:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   88946:	e50a      	b.n	8835e <_svfprintf_r+0x96>
   88948:	7fefffff 	.word	0x7fefffff
   8894c:	0008eb0c 	.word	0x0008eb0c
   88950:	0008eb10 	.word	0x0008eb10
   88954:	0008eb1c 	.word	0x0008eb1c
   88958:	9a07      	ldr	r2, [sp, #28]
   8895a:	9208      	str	r2, [sp, #32]
   8895c:	2b01      	cmp	r3, #1
   8895e:	f000 81b4 	beq.w	88cca <_svfprintf_r+0xa02>
   88962:	2b02      	cmp	r3, #2
   88964:	f000 8159 	beq.w	88c1a <_svfprintf_r+0x952>
   88968:	af56      	add	r7, sp, #344	; 0x158
   8896a:	08e2      	lsrs	r2, r4, #3
   8896c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88970:	08e9      	lsrs	r1, r5, #3
   88972:	f004 0307 	and.w	r3, r4, #7
   88976:	460d      	mov	r5, r1
   88978:	4614      	mov	r4, r2
   8897a:	3330      	adds	r3, #48	; 0x30
   8897c:	ea54 0105 	orrs.w	r1, r4, r5
   88980:	463a      	mov	r2, r7
   88982:	f807 3d01 	strb.w	r3, [r7, #-1]!
   88986:	d1f0      	bne.n	8896a <_svfprintf_r+0x6a2>
   88988:	9908      	ldr	r1, [sp, #32]
   8898a:	4608      	mov	r0, r1
   8898c:	07c0      	lsls	r0, r0, #31
   8898e:	f100 82b8 	bmi.w	88f02 <_svfprintf_r+0xc3a>
   88992:	ab56      	add	r3, sp, #344	; 0x158
   88994:	1bdb      	subs	r3, r3, r7
   88996:	9107      	str	r1, [sp, #28]
   88998:	930c      	str	r3, [sp, #48]	; 0x30
   8899a:	2300      	movs	r3, #0
   8899c:	9909      	ldr	r1, [sp, #36]	; 0x24
   8899e:	930d      	str	r3, [sp, #52]	; 0x34
   889a0:	9312      	str	r3, [sp, #72]	; 0x48
   889a2:	9316      	str	r3, [sp, #88]	; 0x58
   889a4:	9310      	str	r3, [sp, #64]	; 0x40
   889a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   889a8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   889ac:	428b      	cmp	r3, r1
   889ae:	bfb8      	it	lt
   889b0:	460b      	movlt	r3, r1
   889b2:	9308      	str	r3, [sp, #32]
   889b4:	e6ac      	b.n	88710 <_svfprintf_r+0x448>
   889b6:	2e65      	cmp	r6, #101	; 0x65
   889b8:	f340 80d8 	ble.w	88b6c <_svfprintf_r+0x8a4>
   889bc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   889c0:	2200      	movs	r2, #0
   889c2:	2300      	movs	r3, #0
   889c4:	f005 ffc8 	bl	8e958 <__aeabi_dcmpeq>
   889c8:	2800      	cmp	r0, #0
   889ca:	f000 821e 	beq.w	88e0a <_svfprintf_r+0xb42>
   889ce:	2101      	movs	r1, #1
   889d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   889d2:	4ac5      	ldr	r2, [pc, #788]	; (88ce8 <_svfprintf_r+0xa20>)
   889d4:	440b      	add	r3, r1
   889d6:	440c      	add	r4, r1
   889d8:	2b07      	cmp	r3, #7
   889da:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   889de:	e9c8 2100 	strd	r2, r1, [r8]
   889e2:	f300 85bb 	bgt.w	8955c <_svfprintf_r+0x1294>
   889e6:	f108 0808 	add.w	r8, r8, #8
   889ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   889ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   889ee:	4293      	cmp	r3, r2
   889f0:	f280 8321 	bge.w	89036 <_svfprintf_r+0xd6e>
   889f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   889f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   889f8:	3301      	adds	r3, #1
   889fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   889fc:	4414      	add	r4, r2
   889fe:	2b07      	cmp	r3, #7
   88a00:	e9c8 1200 	strd	r1, r2, [r8]
   88a04:	942c      	str	r4, [sp, #176]	; 0xb0
   88a06:	932b      	str	r3, [sp, #172]	; 0xac
   88a08:	f300 8448 	bgt.w	8929c <_svfprintf_r+0xfd4>
   88a0c:	f108 0808 	add.w	r8, r8, #8
   88a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a12:	1e5d      	subs	r5, r3, #1
   88a14:	2d00      	cmp	r5, #0
   88a16:	f77f ae06 	ble.w	88626 <_svfprintf_r+0x35e>
   88a1a:	2d10      	cmp	r5, #16
   88a1c:	f340 85c7 	ble.w	895ae <_svfprintf_r+0x12e6>
   88a20:	4fb2      	ldr	r7, [pc, #712]	; (88cec <_svfprintf_r+0xa24>)
   88a22:	2610      	movs	r6, #16
   88a24:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88a26:	970f      	str	r7, [sp, #60]	; 0x3c
   88a28:	e005      	b.n	88a36 <_svfprintf_r+0x76e>
   88a2a:	f108 0808 	add.w	r8, r8, #8
   88a2e:	3d10      	subs	r5, #16
   88a30:	2d10      	cmp	r5, #16
   88a32:	f340 85bf 	ble.w	895b4 <_svfprintf_r+0x12ec>
   88a36:	3301      	adds	r3, #1
   88a38:	3410      	adds	r4, #16
   88a3a:	2b07      	cmp	r3, #7
   88a3c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88a40:	e9c8 7600 	strd	r7, r6, [r8]
   88a44:	ddf1      	ble.n	88a2a <_svfprintf_r+0x762>
   88a46:	4651      	mov	r1, sl
   88a48:	4648      	mov	r0, r9
   88a4a:	aa2a      	add	r2, sp, #168	; 0xa8
   88a4c:	f005 f882 	bl	8db54 <__ssprint_r>
   88a50:	2800      	cmp	r0, #0
   88a52:	f040 8081 	bne.w	88b58 <_svfprintf_r+0x890>
   88a56:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88a5a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88a5e:	e7e6      	b.n	88a2e <_svfprintf_r+0x766>
   88a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88a62:	9a08      	ldr	r2, [sp, #32]
   88a64:	1a9d      	subs	r5, r3, r2
   88a66:	2d00      	cmp	r5, #0
   88a68:	f77f adc6 	ble.w	885f8 <_svfprintf_r+0x330>
   88a6c:	2d10      	cmp	r5, #16
   88a6e:	f341 8069 	ble.w	89b44 <_svfprintf_r+0x187c>
   88a72:	489e      	ldr	r0, [pc, #632]	; (88cec <_svfprintf_r+0xa24>)
   88a74:	4621      	mov	r1, r4
   88a76:	2310      	movs	r3, #16
   88a78:	4604      	mov	r4, r0
   88a7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88a7c:	900f      	str	r0, [sp, #60]	; 0x3c
   88a7e:	e004      	b.n	88a8a <_svfprintf_r+0x7c2>
   88a80:	3d10      	subs	r5, #16
   88a82:	2d10      	cmp	r5, #16
   88a84:	f108 0808 	add.w	r8, r8, #8
   88a88:	dd17      	ble.n	88aba <_svfprintf_r+0x7f2>
   88a8a:	3201      	adds	r2, #1
   88a8c:	3110      	adds	r1, #16
   88a8e:	2a07      	cmp	r2, #7
   88a90:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88a94:	e9c8 4300 	strd	r4, r3, [r8]
   88a98:	ddf2      	ble.n	88a80 <_svfprintf_r+0x7b8>
   88a9a:	4651      	mov	r1, sl
   88a9c:	4648      	mov	r0, r9
   88a9e:	aa2a      	add	r2, sp, #168	; 0xa8
   88aa0:	f005 f858 	bl	8db54 <__ssprint_r>
   88aa4:	2800      	cmp	r0, #0
   88aa6:	d157      	bne.n	88b58 <_svfprintf_r+0x890>
   88aa8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88aac:	3d10      	subs	r5, #16
   88aae:	2d10      	cmp	r5, #16
   88ab0:	f04f 0310 	mov.w	r3, #16
   88ab4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88ab8:	dce7      	bgt.n	88a8a <_svfprintf_r+0x7c2>
   88aba:	460c      	mov	r4, r1
   88abc:	3201      	adds	r2, #1
   88abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88ac0:	442c      	add	r4, r5
   88ac2:	2a07      	cmp	r2, #7
   88ac4:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88ac8:	e9c8 3500 	strd	r3, r5, [r8]
   88acc:	f300 858a 	bgt.w	895e4 <_svfprintf_r+0x131c>
   88ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88ad4:	f108 0808 	add.w	r8, r8, #8
   88ad8:	1a9d      	subs	r5, r3, r2
   88ada:	2d00      	cmp	r5, #0
   88adc:	f77f ad92 	ble.w	88604 <_svfprintf_r+0x33c>
   88ae0:	2d10      	cmp	r5, #16
   88ae2:	f340 860a 	ble.w	896fa <_svfprintf_r+0x1432>
   88ae6:	4881      	ldr	r0, [pc, #516]	; (88cec <_svfprintf_r+0xa24>)
   88ae8:	4621      	mov	r1, r4
   88aea:	2310      	movs	r3, #16
   88aec:	4604      	mov	r4, r0
   88aee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88af0:	900f      	str	r0, [sp, #60]	; 0x3c
   88af2:	e004      	b.n	88afe <_svfprintf_r+0x836>
   88af4:	3d10      	subs	r5, #16
   88af6:	2d10      	cmp	r5, #16
   88af8:	f108 0808 	add.w	r8, r8, #8
   88afc:	dd16      	ble.n	88b2c <_svfprintf_r+0x864>
   88afe:	3201      	adds	r2, #1
   88b00:	3110      	adds	r1, #16
   88b02:	2a07      	cmp	r2, #7
   88b04:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88b08:	e9c8 4300 	strd	r4, r3, [r8]
   88b0c:	ddf2      	ble.n	88af4 <_svfprintf_r+0x82c>
   88b0e:	4651      	mov	r1, sl
   88b10:	4648      	mov	r0, r9
   88b12:	aa2a      	add	r2, sp, #168	; 0xa8
   88b14:	f005 f81e 	bl	8db54 <__ssprint_r>
   88b18:	b9f0      	cbnz	r0, 88b58 <_svfprintf_r+0x890>
   88b1a:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88b1e:	3d10      	subs	r5, #16
   88b20:	2d10      	cmp	r5, #16
   88b22:	f04f 0310 	mov.w	r3, #16
   88b26:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88b2a:	dce8      	bgt.n	88afe <_svfprintf_r+0x836>
   88b2c:	460c      	mov	r4, r1
   88b2e:	3201      	adds	r2, #1
   88b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88b32:	442c      	add	r4, r5
   88b34:	2a07      	cmp	r2, #7
   88b36:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88b3a:	e9c8 3500 	strd	r3, r5, [r8]
   88b3e:	f300 8237 	bgt.w	88fb0 <_svfprintf_r+0xce8>
   88b42:	f108 0808 	add.w	r8, r8, #8
   88b46:	e55d      	b.n	88604 <_svfprintf_r+0x33c>
   88b48:	4651      	mov	r1, sl
   88b4a:	4648      	mov	r0, r9
   88b4c:	aa2a      	add	r2, sp, #168	; 0xa8
   88b4e:	f005 f801 	bl	8db54 <__ssprint_r>
   88b52:	2800      	cmp	r0, #0
   88b54:	f43f ad7b 	beq.w	8864e <_svfprintf_r+0x386>
   88b58:	46d3      	mov	fp, sl
   88b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88b5c:	2b00      	cmp	r3, #0
   88b5e:	f43f ad8a 	beq.w	88676 <_svfprintf_r+0x3ae>
   88b62:	4648      	mov	r0, r9
   88b64:	990d      	ldr	r1, [sp, #52]	; 0x34
   88b66:	f003 faf3 	bl	8c150 <_free_r>
   88b6a:	e584      	b.n	88676 <_svfprintf_r+0x3ae>
   88b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88b6e:	2b01      	cmp	r3, #1
   88b70:	f340 81d5 	ble.w	88f1e <_svfprintf_r+0xc56>
   88b74:	2301      	movs	r3, #1
   88b76:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   88b78:	441c      	add	r4, r3
   88b7a:	441d      	add	r5, r3
   88b7c:	2d07      	cmp	r5, #7
   88b7e:	942c      	str	r4, [sp, #176]	; 0xb0
   88b80:	f8c8 7000 	str.w	r7, [r8]
   88b84:	952b      	str	r5, [sp, #172]	; 0xac
   88b86:	f8c8 3004 	str.w	r3, [r8, #4]
   88b8a:	f300 823a 	bgt.w	89002 <_svfprintf_r+0xd3a>
   88b8e:	f108 0808 	add.w	r8, r8, #8
   88b92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88b94:	3501      	adds	r5, #1
   88b96:	9a18      	ldr	r2, [sp, #96]	; 0x60
   88b98:	441c      	add	r4, r3
   88b9a:	2d07      	cmp	r5, #7
   88b9c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88ba0:	e9c8 2300 	strd	r2, r3, [r8]
   88ba4:	f300 823a 	bgt.w	8901c <_svfprintf_r+0xd54>
   88ba8:	f108 0808 	add.w	r8, r8, #8
   88bac:	2300      	movs	r3, #0
   88bae:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88bb2:	2200      	movs	r2, #0
   88bb4:	f005 fed0 	bl	8e958 <__aeabi_dcmpeq>
   88bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88bba:	2800      	cmp	r0, #0
   88bbc:	f040 81cd 	bne.w	88f5a <_svfprintf_r+0xc92>
   88bc0:	3b01      	subs	r3, #1
   88bc2:	3501      	adds	r5, #1
   88bc4:	3701      	adds	r7, #1
   88bc6:	441c      	add	r4, r3
   88bc8:	2d07      	cmp	r5, #7
   88bca:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88bce:	f8c8 7000 	str.w	r7, [r8]
   88bd2:	f8c8 3004 	str.w	r3, [r8, #4]
   88bd6:	f300 84dc 	bgt.w	89592 <_svfprintf_r+0x12ca>
   88bda:	f108 0808 	add.w	r8, r8, #8
   88bde:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88be0:	3501      	adds	r5, #1
   88be2:	4414      	add	r4, r2
   88be4:	ab26      	add	r3, sp, #152	; 0x98
   88be6:	2d07      	cmp	r5, #7
   88be8:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88bec:	e9c8 3200 	strd	r3, r2, [r8]
   88bf0:	f77f ad17 	ble.w	88622 <_svfprintf_r+0x35a>
   88bf4:	4651      	mov	r1, sl
   88bf6:	4648      	mov	r0, r9
   88bf8:	aa2a      	add	r2, sp, #168	; 0xa8
   88bfa:	f004 ffab 	bl	8db54 <__ssprint_r>
   88bfe:	2800      	cmp	r0, #0
   88c00:	d1aa      	bne.n	88b58 <_svfprintf_r+0x890>
   88c02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88c04:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88c08:	e50d      	b.n	88626 <_svfprintf_r+0x35e>
   88c0a:	2b01      	cmp	r3, #1
   88c0c:	f000 87ca 	beq.w	89ba4 <_svfprintf_r+0x18dc>
   88c10:	2b02      	cmp	r3, #2
   88c12:	9b07      	ldr	r3, [sp, #28]
   88c14:	9308      	str	r3, [sp, #32]
   88c16:	f47f aea7 	bne.w	88968 <_svfprintf_r+0x6a0>
   88c1a:	9819      	ldr	r0, [sp, #100]	; 0x64
   88c1c:	af56      	add	r7, sp, #344	; 0x158
   88c1e:	0923      	lsrs	r3, r4, #4
   88c20:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88c24:	0929      	lsrs	r1, r5, #4
   88c26:	f004 020f 	and.w	r2, r4, #15
   88c2a:	460d      	mov	r5, r1
   88c2c:	461c      	mov	r4, r3
   88c2e:	5c83      	ldrb	r3, [r0, r2]
   88c30:	f807 3d01 	strb.w	r3, [r7, #-1]!
   88c34:	ea54 0305 	orrs.w	r3, r4, r5
   88c38:	d1f1      	bne.n	88c1e <_svfprintf_r+0x956>
   88c3a:	9b08      	ldr	r3, [sp, #32]
   88c3c:	9307      	str	r3, [sp, #28]
   88c3e:	ab56      	add	r3, sp, #344	; 0x158
   88c40:	1bdb      	subs	r3, r3, r7
   88c42:	930c      	str	r3, [sp, #48]	; 0x30
   88c44:	e6a9      	b.n	8899a <_svfprintf_r+0x6d2>
   88c46:	2d10      	cmp	r5, #16
   88c48:	f340 8668 	ble.w	8991c <_svfprintf_r+0x1654>
   88c4c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88c50:	931e      	str	r3, [sp, #120]	; 0x78
   88c52:	460b      	mov	r3, r1
   88c54:	4639      	mov	r1, r7
   88c56:	2410      	movs	r4, #16
   88c58:	4637      	mov	r7, r6
   88c5a:	4656      	mov	r6, sl
   88c5c:	46ca      	mov	sl, r9
   88c5e:	4689      	mov	r9, r1
   88c60:	e004      	b.n	88c6c <_svfprintf_r+0x9a4>
   88c62:	3d10      	subs	r5, #16
   88c64:	2d10      	cmp	r5, #16
   88c66:	f108 0808 	add.w	r8, r8, #8
   88c6a:	dd17      	ble.n	88c9c <_svfprintf_r+0x9d4>
   88c6c:	3201      	adds	r2, #1
   88c6e:	4920      	ldr	r1, [pc, #128]	; (88cf0 <_svfprintf_r+0xa28>)
   88c70:	3310      	adds	r3, #16
   88c72:	2a07      	cmp	r2, #7
   88c74:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   88c78:	e9c8 1400 	strd	r1, r4, [r8]
   88c7c:	ddf1      	ble.n	88c62 <_svfprintf_r+0x99a>
   88c7e:	4631      	mov	r1, r6
   88c80:	4650      	mov	r0, sl
   88c82:	aa2a      	add	r2, sp, #168	; 0xa8
   88c84:	f004 ff66 	bl	8db54 <__ssprint_r>
   88c88:	2800      	cmp	r0, #0
   88c8a:	f040 8458 	bne.w	8953e <_svfprintf_r+0x1276>
   88c8e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   88c92:	3d10      	subs	r5, #16
   88c94:	2d10      	cmp	r5, #16
   88c96:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88c9a:	dce7      	bgt.n	88c6c <_svfprintf_r+0x9a4>
   88c9c:	4648      	mov	r0, r9
   88c9e:	46d1      	mov	r9, sl
   88ca0:	46b2      	mov	sl, r6
   88ca2:	463e      	mov	r6, r7
   88ca4:	4607      	mov	r7, r0
   88ca6:	4619      	mov	r1, r3
   88ca8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88caa:	194c      	adds	r4, r1, r5
   88cac:	3201      	adds	r2, #1
   88cae:	4910      	ldr	r1, [pc, #64]	; (88cf0 <_svfprintf_r+0xa28>)
   88cb0:	2a07      	cmp	r2, #7
   88cb2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88cb6:	e9c8 1500 	strd	r1, r5, [r8]
   88cba:	f300 841f 	bgt.w	894fc <_svfprintf_r+0x1234>
   88cbe:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88cc2:	f108 0808 	add.w	r8, r8, #8
   88cc6:	e474      	b.n	885b2 <_svfprintf_r+0x2ea>
   88cc8:	9308      	str	r3, [sp, #32]
   88cca:	2d00      	cmp	r5, #0
   88ccc:	bf08      	it	eq
   88cce:	2c0a      	cmpeq	r4, #10
   88cd0:	f080 83d0 	bcs.w	89474 <_svfprintf_r+0x11ac>
   88cd4:	9b08      	ldr	r3, [sp, #32]
   88cd6:	3430      	adds	r4, #48	; 0x30
   88cd8:	9307      	str	r3, [sp, #28]
   88cda:	2301      	movs	r3, #1
   88cdc:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   88ce0:	930c      	str	r3, [sp, #48]	; 0x30
   88ce2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   88ce6:	e658      	b.n	8899a <_svfprintf_r+0x6d2>
   88ce8:	0008eb4c 	.word	0x0008eb4c
   88cec:	0008eb60 	.word	0x0008eb60
   88cf0:	0008eb50 	.word	0x0008eb50
   88cf4:	4651      	mov	r1, sl
   88cf6:	4648      	mov	r0, r9
   88cf8:	aa2a      	add	r2, sp, #168	; 0xa8
   88cfa:	f004 ff2b 	bl	8db54 <__ssprint_r>
   88cfe:	2800      	cmp	r0, #0
   88d00:	f47f af2a 	bne.w	88b58 <_svfprintf_r+0x890>
   88d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88d06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88d08:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88d0c:	2a00      	cmp	r2, #0
   88d0e:	f040 847f 	bne.w	89610 <_svfprintf_r+0x1348>
   88d12:	9b07      	ldr	r3, [sp, #28]
   88d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88d16:	f003 0301 	and.w	r3, r3, #1
   88d1a:	4313      	orrs	r3, r2
   88d1c:	f43f ac83 	beq.w	88626 <_svfprintf_r+0x35e>
   88d20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88d24:	3301      	adds	r3, #1
   88d26:	9918      	ldr	r1, [sp, #96]	; 0x60
   88d28:	4414      	add	r4, r2
   88d2a:	2b07      	cmp	r3, #7
   88d2c:	e9c8 1200 	strd	r1, r2, [r8]
   88d30:	942c      	str	r4, [sp, #176]	; 0xb0
   88d32:	932b      	str	r3, [sp, #172]	; 0xac
   88d34:	f300 8524 	bgt.w	89780 <_svfprintf_r+0x14b8>
   88d38:	f108 0808 	add.w	r8, r8, #8
   88d3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88d3e:	3301      	adds	r3, #1
   88d40:	4414      	add	r4, r2
   88d42:	2b07      	cmp	r3, #7
   88d44:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88d48:	e9c8 7200 	strd	r7, r2, [r8]
   88d4c:	f77f ac69 	ble.w	88622 <_svfprintf_r+0x35a>
   88d50:	4651      	mov	r1, sl
   88d52:	4648      	mov	r0, r9
   88d54:	aa2a      	add	r2, sp, #168	; 0xa8
   88d56:	f004 fefd 	bl	8db54 <__ssprint_r>
   88d5a:	2800      	cmp	r0, #0
   88d5c:	f47f aefc 	bne.w	88b58 <_svfprintf_r+0x890>
   88d60:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88d62:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88d66:	e45e      	b.n	88626 <_svfprintf_r+0x35e>
   88d68:	4651      	mov	r1, sl
   88d6a:	4648      	mov	r0, r9
   88d6c:	aa2a      	add	r2, sp, #168	; 0xa8
   88d6e:	931e      	str	r3, [sp, #120]	; 0x78
   88d70:	f004 fef0 	bl	8db54 <__ssprint_r>
   88d74:	2800      	cmp	r0, #0
   88d76:	f47f aeef 	bne.w	88b58 <_svfprintf_r+0x890>
   88d7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88d7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88d7e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88d82:	e426      	b.n	885d2 <_svfprintf_r+0x30a>
   88d84:	4651      	mov	r1, sl
   88d86:	4648      	mov	r0, r9
   88d88:	aa2a      	add	r2, sp, #168	; 0xa8
   88d8a:	f004 fee3 	bl	8db54 <__ssprint_r>
   88d8e:	2800      	cmp	r0, #0
   88d90:	f47f aee2 	bne.w	88b58 <_svfprintf_r+0x890>
   88d94:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88d96:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88d9a:	e429      	b.n	885f0 <_svfprintf_r+0x328>
   88d9c:	2d10      	cmp	r5, #16
   88d9e:	f340 86be 	ble.w	89b1e <_svfprintf_r+0x1856>
   88da2:	2610      	movs	r6, #16
   88da4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88da6:	e004      	b.n	88db2 <_svfprintf_r+0xaea>
   88da8:	3d10      	subs	r5, #16
   88daa:	2d10      	cmp	r5, #16
   88dac:	f108 0808 	add.w	r8, r8, #8
   88db0:	dd17      	ble.n	88de2 <_svfprintf_r+0xb1a>
   88db2:	3301      	adds	r3, #1
   88db4:	4aad      	ldr	r2, [pc, #692]	; (8906c <_svfprintf_r+0xda4>)
   88db6:	3410      	adds	r4, #16
   88db8:	2b07      	cmp	r3, #7
   88dba:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88dbe:	e9c8 2600 	strd	r2, r6, [r8]
   88dc2:	ddf1      	ble.n	88da8 <_svfprintf_r+0xae0>
   88dc4:	4651      	mov	r1, sl
   88dc6:	4648      	mov	r0, r9
   88dc8:	aa2a      	add	r2, sp, #168	; 0xa8
   88dca:	f004 fec3 	bl	8db54 <__ssprint_r>
   88dce:	2800      	cmp	r0, #0
   88dd0:	f47f aec2 	bne.w	88b58 <_svfprintf_r+0x890>
   88dd4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88dd8:	3d10      	subs	r5, #16
   88dda:	2d10      	cmp	r5, #16
   88ddc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88de0:	dce7      	bgt.n	88db2 <_svfprintf_r+0xaea>
   88de2:	3301      	adds	r3, #1
   88de4:	4aa1      	ldr	r2, [pc, #644]	; (8906c <_svfprintf_r+0xda4>)
   88de6:	442c      	add	r4, r5
   88de8:	2b07      	cmp	r3, #7
   88dea:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88dee:	e9c8 2500 	strd	r2, r5, [r8]
   88df2:	f77f ac21 	ble.w	88638 <_svfprintf_r+0x370>
   88df6:	4651      	mov	r1, sl
   88df8:	4648      	mov	r0, r9
   88dfa:	aa2a      	add	r2, sp, #168	; 0xa8
   88dfc:	f004 feaa 	bl	8db54 <__ssprint_r>
   88e00:	2800      	cmp	r0, #0
   88e02:	f47f aea9 	bne.w	88b58 <_svfprintf_r+0x890>
   88e06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88e08:	e416      	b.n	88638 <_svfprintf_r+0x370>
   88e0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88e0c:	2a00      	cmp	r2, #0
   88e0e:	f340 8386 	ble.w	8951e <_svfprintf_r+0x1256>
   88e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88e14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88e16:	4293      	cmp	r3, r2
   88e18:	bfa8      	it	ge
   88e1a:	4613      	movge	r3, r2
   88e1c:	2b00      	cmp	r3, #0
   88e1e:	461d      	mov	r5, r3
   88e20:	dd0b      	ble.n	88e3a <_svfprintf_r+0xb72>
   88e22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88e24:	442c      	add	r4, r5
   88e26:	3301      	adds	r3, #1
   88e28:	2b07      	cmp	r3, #7
   88e2a:	e9c8 7500 	strd	r7, r5, [r8]
   88e2e:	942c      	str	r4, [sp, #176]	; 0xb0
   88e30:	932b      	str	r3, [sp, #172]	; 0xac
   88e32:	f300 851e 	bgt.w	89872 <_svfprintf_r+0x15aa>
   88e36:	f108 0808 	add.w	r8, r8, #8
   88e3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88e3c:	2d00      	cmp	r5, #0
   88e3e:	bfa8      	it	ge
   88e40:	1b5b      	subge	r3, r3, r5
   88e42:	2b00      	cmp	r3, #0
   88e44:	461d      	mov	r5, r3
   88e46:	f300 8256 	bgt.w	892f6 <_svfprintf_r+0x102e>
   88e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88e4c:	443b      	add	r3, r7
   88e4e:	461e      	mov	r6, r3
   88e50:	9b07      	ldr	r3, [sp, #28]
   88e52:	055b      	lsls	r3, r3, #21
   88e54:	f100 8277 	bmi.w	89346 <_svfprintf_r+0x107e>
   88e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88e5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88e5c:	4293      	cmp	r3, r2
   88e5e:	db03      	blt.n	88e68 <_svfprintf_r+0xba0>
   88e60:	9a07      	ldr	r2, [sp, #28]
   88e62:	07d5      	lsls	r5, r2, #31
   88e64:	f140 847a 	bpl.w	8975c <_svfprintf_r+0x1494>
   88e68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88e6a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88e6c:	3201      	adds	r2, #1
   88e6e:	9818      	ldr	r0, [sp, #96]	; 0x60
   88e70:	440c      	add	r4, r1
   88e72:	2a07      	cmp	r2, #7
   88e74:	e9c8 0100 	strd	r0, r1, [r8]
   88e78:	942c      	str	r4, [sp, #176]	; 0xb0
   88e7a:	922b      	str	r2, [sp, #172]	; 0xac
   88e7c:	f300 8506 	bgt.w	8988c <_svfprintf_r+0x15c4>
   88e80:	f108 0808 	add.w	r8, r8, #8
   88e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88e86:	18bd      	adds	r5, r7, r2
   88e88:	1bad      	subs	r5, r5, r6
   88e8a:	1ad3      	subs	r3, r2, r3
   88e8c:	429d      	cmp	r5, r3
   88e8e:	bfa8      	it	ge
   88e90:	461d      	movge	r5, r3
   88e92:	2d00      	cmp	r5, #0
   88e94:	dd0b      	ble.n	88eae <_svfprintf_r+0xbe6>
   88e96:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88e98:	442c      	add	r4, r5
   88e9a:	3201      	adds	r2, #1
   88e9c:	2a07      	cmp	r2, #7
   88e9e:	e9c8 6500 	strd	r6, r5, [r8]
   88ea2:	942c      	str	r4, [sp, #176]	; 0xb0
   88ea4:	922b      	str	r2, [sp, #172]	; 0xac
   88ea6:	f300 855f 	bgt.w	89968 <_svfprintf_r+0x16a0>
   88eaa:	f108 0808 	add.w	r8, r8, #8
   88eae:	2d00      	cmp	r5, #0
   88eb0:	bfb4      	ite	lt
   88eb2:	461d      	movlt	r5, r3
   88eb4:	1b5d      	subge	r5, r3, r5
   88eb6:	2d00      	cmp	r5, #0
   88eb8:	f77f abb5 	ble.w	88626 <_svfprintf_r+0x35e>
   88ebc:	2d10      	cmp	r5, #16
   88ebe:	f340 8376 	ble.w	895ae <_svfprintf_r+0x12e6>
   88ec2:	4f6b      	ldr	r7, [pc, #428]	; (89070 <_svfprintf_r+0xda8>)
   88ec4:	2610      	movs	r6, #16
   88ec6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88ec8:	970f      	str	r7, [sp, #60]	; 0x3c
   88eca:	e005      	b.n	88ed8 <_svfprintf_r+0xc10>
   88ecc:	f108 0808 	add.w	r8, r8, #8
   88ed0:	3d10      	subs	r5, #16
   88ed2:	2d10      	cmp	r5, #16
   88ed4:	f340 836e 	ble.w	895b4 <_svfprintf_r+0x12ec>
   88ed8:	3301      	adds	r3, #1
   88eda:	3410      	adds	r4, #16
   88edc:	2b07      	cmp	r3, #7
   88ede:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88ee2:	e9c8 7600 	strd	r7, r6, [r8]
   88ee6:	ddf1      	ble.n	88ecc <_svfprintf_r+0xc04>
   88ee8:	4651      	mov	r1, sl
   88eea:	4648      	mov	r0, r9
   88eec:	aa2a      	add	r2, sp, #168	; 0xa8
   88eee:	f004 fe31 	bl	8db54 <__ssprint_r>
   88ef2:	2800      	cmp	r0, #0
   88ef4:	f47f ae30 	bne.w	88b58 <_svfprintf_r+0x890>
   88ef8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88efc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f00:	e7e6      	b.n	88ed0 <_svfprintf_r+0xc08>
   88f02:	2b30      	cmp	r3, #48	; 0x30
   88f04:	f43f ae99 	beq.w	88c3a <_svfprintf_r+0x972>
   88f08:	2330      	movs	r3, #48	; 0x30
   88f0a:	3a02      	subs	r2, #2
   88f0c:	f807 3c01 	strb.w	r3, [r7, #-1]
   88f10:	9908      	ldr	r1, [sp, #32]
   88f12:	ab56      	add	r3, sp, #344	; 0x158
   88f14:	1a9b      	subs	r3, r3, r2
   88f16:	4617      	mov	r7, r2
   88f18:	9107      	str	r1, [sp, #28]
   88f1a:	930c      	str	r3, [sp, #48]	; 0x30
   88f1c:	e53d      	b.n	8899a <_svfprintf_r+0x6d2>
   88f1e:	9b07      	ldr	r3, [sp, #28]
   88f20:	07d8      	lsls	r0, r3, #31
   88f22:	f53f ae27 	bmi.w	88b74 <_svfprintf_r+0x8ac>
   88f26:	2301      	movs	r3, #1
   88f28:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   88f2a:	441c      	add	r4, r3
   88f2c:	441d      	add	r5, r3
   88f2e:	2d07      	cmp	r5, #7
   88f30:	942c      	str	r4, [sp, #176]	; 0xb0
   88f32:	f8c8 7000 	str.w	r7, [r8]
   88f36:	952b      	str	r5, [sp, #172]	; 0xac
   88f38:	f8c8 3004 	str.w	r3, [r8, #4]
   88f3c:	f77f ae4d 	ble.w	88bda <_svfprintf_r+0x912>
   88f40:	4651      	mov	r1, sl
   88f42:	4648      	mov	r0, r9
   88f44:	aa2a      	add	r2, sp, #168	; 0xa8
   88f46:	f004 fe05 	bl	8db54 <__ssprint_r>
   88f4a:	2800      	cmp	r0, #0
   88f4c:	f47f ae04 	bne.w	88b58 <_svfprintf_r+0x890>
   88f50:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88f54:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f58:	e641      	b.n	88bde <_svfprintf_r+0x916>
   88f5a:	1e5e      	subs	r6, r3, #1
   88f5c:	2e00      	cmp	r6, #0
   88f5e:	f77f ae3e 	ble.w	88bde <_svfprintf_r+0x916>
   88f62:	2e10      	cmp	r6, #16
   88f64:	f340 871e 	ble.w	89da4 <_svfprintf_r+0x1adc>
   88f68:	4b41      	ldr	r3, [pc, #260]	; (89070 <_svfprintf_r+0xda8>)
   88f6a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   88f6e:	2710      	movs	r7, #16
   88f70:	46d3      	mov	fp, sl
   88f72:	930f      	str	r3, [sp, #60]	; 0x3c
   88f74:	46ca      	mov	sl, r9
   88f76:	4699      	mov	r9, r3
   88f78:	e005      	b.n	88f86 <_svfprintf_r+0xcbe>
   88f7a:	f108 0808 	add.w	r8, r8, #8
   88f7e:	3e10      	subs	r6, #16
   88f80:	2e10      	cmp	r6, #16
   88f82:	f340 82f8 	ble.w	89576 <_svfprintf_r+0x12ae>
   88f86:	3501      	adds	r5, #1
   88f88:	3410      	adds	r4, #16
   88f8a:	2d07      	cmp	r5, #7
   88f8c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88f90:	e9c8 9700 	strd	r9, r7, [r8]
   88f94:	ddf1      	ble.n	88f7a <_svfprintf_r+0xcb2>
   88f96:	4659      	mov	r1, fp
   88f98:	4650      	mov	r0, sl
   88f9a:	aa2a      	add	r2, sp, #168	; 0xa8
   88f9c:	f004 fdda 	bl	8db54 <__ssprint_r>
   88fa0:	2800      	cmp	r0, #0
   88fa2:	f040 85cc 	bne.w	89b3e <_svfprintf_r+0x1876>
   88fa6:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88faa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88fae:	e7e6      	b.n	88f7e <_svfprintf_r+0xcb6>
   88fb0:	4651      	mov	r1, sl
   88fb2:	4648      	mov	r0, r9
   88fb4:	aa2a      	add	r2, sp, #168	; 0xa8
   88fb6:	f004 fdcd 	bl	8db54 <__ssprint_r>
   88fba:	2800      	cmp	r0, #0
   88fbc:	f47f adcc 	bne.w	88b58 <_svfprintf_r+0x890>
   88fc0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88fc2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88fc6:	f7ff bb1d 	b.w	88604 <_svfprintf_r+0x33c>
   88fca:	9b08      	ldr	r3, [sp, #32]
   88fcc:	06dc      	lsls	r4, r3, #27
   88fce:	f100 8119 	bmi.w	89204 <_svfprintf_r+0xf3c>
   88fd2:	9b08      	ldr	r3, [sp, #32]
   88fd4:	0658      	lsls	r0, r3, #25
   88fd6:	f140 8368 	bpl.w	896aa <_svfprintf_r+0x13e2>
   88fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88fdc:	2301      	movs	r3, #1
   88fde:	f852 4b04 	ldr.w	r4, [r2], #4
   88fe2:	2500      	movs	r5, #0
   88fe4:	920e      	str	r2, [sp, #56]	; 0x38
   88fe6:	b2a4      	uxth	r4, r4
   88fe8:	f7ff ba7f 	b.w	884ea <_svfprintf_r+0x222>
   88fec:	232d      	movs	r3, #45	; 0x2d
   88fee:	9a07      	ldr	r2, [sp, #28]
   88ff0:	4264      	negs	r4, r4
   88ff2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88ff6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88ffa:	2301      	movs	r3, #1
   88ffc:	9208      	str	r2, [sp, #32]
   88ffe:	f7ff ba77 	b.w	884f0 <_svfprintf_r+0x228>
   89002:	4651      	mov	r1, sl
   89004:	4648      	mov	r0, r9
   89006:	aa2a      	add	r2, sp, #168	; 0xa8
   89008:	f004 fda4 	bl	8db54 <__ssprint_r>
   8900c:	2800      	cmp	r0, #0
   8900e:	f47f ada3 	bne.w	88b58 <_svfprintf_r+0x890>
   89012:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   89016:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8901a:	e5ba      	b.n	88b92 <_svfprintf_r+0x8ca>
   8901c:	4651      	mov	r1, sl
   8901e:	4648      	mov	r0, r9
   89020:	aa2a      	add	r2, sp, #168	; 0xa8
   89022:	f004 fd97 	bl	8db54 <__ssprint_r>
   89026:	2800      	cmp	r0, #0
   89028:	f47f ad96 	bne.w	88b58 <_svfprintf_r+0x890>
   8902c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   89030:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89034:	e5ba      	b.n	88bac <_svfprintf_r+0x8e4>
   89036:	9b07      	ldr	r3, [sp, #28]
   89038:	07da      	lsls	r2, r3, #31
   8903a:	f57f aaf4 	bpl.w	88626 <_svfprintf_r+0x35e>
   8903e:	e4d9      	b.n	889f4 <_svfprintf_r+0x72c>
   89040:	af56      	add	r7, sp, #344	; 0x158
   89042:	e4aa      	b.n	8899a <_svfprintf_r+0x6d2>
   89044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89046:	465f      	mov	r7, fp
   89048:	f853 1b04 	ldr.w	r1, [r3], #4
   8904c:	930e      	str	r3, [sp, #56]	; 0x38
   8904e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89050:	17dd      	asrs	r5, r3, #31
   89052:	461a      	mov	r2, r3
   89054:	462b      	mov	r3, r5
   89056:	e9c1 2300 	strd	r2, r3, [r1]
   8905a:	f7ff bb03 	b.w	88664 <_svfprintf_r+0x39c>
   8905e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89060:	2500      	movs	r5, #0
   89062:	f853 4b04 	ldr.w	r4, [r3], #4
   89066:	930e      	str	r3, [sp, #56]	; 0x38
   89068:	f7ff ba3a 	b.w	884e0 <_svfprintf_r+0x218>
   8906c:	0008eb50 	.word	0x0008eb50
   89070:	0008eb60 	.word	0x0008eb60
   89074:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89078:	460b      	mov	r3, r1
   8907a:	4602      	mov	r2, r0
   8907c:	f005 fc9e 	bl	8e9bc <__aeabi_dcmpun>
   89080:	4601      	mov	r1, r0
   89082:	2800      	cmp	r0, #0
   89084:	f040 8643 	bne.w	89d0e <_svfprintf_r+0x1a46>
   89088:	2e61      	cmp	r6, #97	; 0x61
   8908a:	f000 8586 	beq.w	89b9a <_svfprintf_r+0x18d2>
   8908e:	2e41      	cmp	r6, #65	; 0x41
   89090:	f000 847a 	beq.w	89988 <_svfprintf_r+0x16c0>
   89094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89096:	f026 0520 	bic.w	r5, r6, #32
   8909a:	1c5a      	adds	r2, r3, #1
   8909c:	9508      	str	r5, [sp, #32]
   8909e:	f000 837d 	beq.w	8979c <_svfprintf_r+0x14d4>
   890a2:	2d47      	cmp	r5, #71	; 0x47
   890a4:	f000 859e 	beq.w	89be4 <_svfprintf_r+0x191c>
   890a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   890ac:	9b07      	ldr	r3, [sp, #28]
   890ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   890b2:	9312      	str	r3, [sp, #72]	; 0x48
   890b4:	460b      	mov	r3, r1
   890b6:	2b00      	cmp	r3, #0
   890b8:	f2c0 85ba 	blt.w	89c30 <_svfprintf_r+0x1968>
   890bc:	2200      	movs	r2, #0
   890be:	930f      	str	r3, [sp, #60]	; 0x3c
   890c0:	921e      	str	r2, [sp, #120]	; 0x78
   890c2:	920d      	str	r2, [sp, #52]	; 0x34
   890c4:	900c      	str	r0, [sp, #48]	; 0x30
   890c6:	2d46      	cmp	r5, #70	; 0x46
   890c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   890ca:	f000 8407 	beq.w	898dc <_svfprintf_r+0x1614>
   890ce:	2d45      	cmp	r5, #69	; 0x45
   890d0:	f04f 0002 	mov.w	r0, #2
   890d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   890d6:	f040 83e7 	bne.w	898a8 <_svfprintf_r+0x15e0>
   890da:	9909      	ldr	r1, [sp, #36]	; 0x24
   890dc:	9000      	str	r0, [sp, #0]
   890de:	1c4c      	adds	r4, r1, #1
   890e0:	a928      	add	r1, sp, #160	; 0xa0
   890e2:	a825      	add	r0, sp, #148	; 0x94
   890e4:	9104      	str	r1, [sp, #16]
   890e6:	a924      	add	r1, sp, #144	; 0x90
   890e8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   890ec:	9401      	str	r4, [sp, #4]
   890ee:	4648      	mov	r0, r9
   890f0:	f001 feb2 	bl	8ae58 <_dtoa_r>
   890f4:	4607      	mov	r7, r0
   890f6:	4404      	add	r4, r0
   890f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   890fa:	9d07      	ldr	r5, [sp, #28]
   890fc:	9307      	str	r3, [sp, #28]
   890fe:	2200      	movs	r2, #0
   89100:	2300      	movs	r3, #0
   89102:	980c      	ldr	r0, [sp, #48]	; 0x30
   89104:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89106:	f005 fc27 	bl	8e958 <__aeabi_dcmpeq>
   8910a:	2800      	cmp	r0, #0
   8910c:	f000 8398 	beq.w	89840 <_svfprintf_r+0x1578>
   89110:	4623      	mov	r3, r4
   89112:	1bdb      	subs	r3, r3, r7
   89114:	9313      	str	r3, [sp, #76]	; 0x4c
   89116:	9b08      	ldr	r3, [sp, #32]
   89118:	2b47      	cmp	r3, #71	; 0x47
   8911a:	f000 835e 	beq.w	897da <_svfprintf_r+0x1512>
   8911e:	9b08      	ldr	r3, [sp, #32]
   89120:	2b46      	cmp	r3, #70	; 0x46
   89122:	f000 840b 	beq.w	8993c <_svfprintf_r+0x1674>
   89126:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89128:	9310      	str	r3, [sp, #64]	; 0x40
   8912a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8912c:	9a08      	ldr	r2, [sp, #32]
   8912e:	3b01      	subs	r3, #1
   89130:	2a41      	cmp	r2, #65	; 0x41
   89132:	9324      	str	r3, [sp, #144]	; 0x90
   89134:	f000 85ad 	beq.w	89c92 <_svfprintf_r+0x19ca>
   89138:	2100      	movs	r1, #0
   8913a:	b2f2      	uxtb	r2, r6
   8913c:	2b00      	cmp	r3, #0
   8913e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   89142:	bfb6      	itet	lt
   89144:	222d      	movlt	r2, #45	; 0x2d
   89146:	222b      	movge	r2, #43	; 0x2b
   89148:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8914a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8914e:	bfb8      	it	lt
   89150:	f1c3 0301 	rsblt	r3, r3, #1
   89154:	2b09      	cmp	r3, #9
   89156:	f340 85a2 	ble.w	89c9e <_svfprintf_r+0x19d6>
   8915a:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8915e:	4672      	mov	r2, lr
   89160:	469c      	mov	ip, r3
   89162:	4cbf      	ldr	r4, [pc, #764]	; (89460 <_svfprintf_r+0x1198>)
   89164:	4660      	mov	r0, ip
   89166:	4611      	mov	r1, r2
   89168:	fb84 230c 	smull	r2, r3, r4, ip
   8916c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   89170:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   89174:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   89178:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   8917c:	3330      	adds	r3, #48	; 0x30
   8917e:	2863      	cmp	r0, #99	; 0x63
   89180:	4694      	mov	ip, r2
   89182:	f801 3c01 	strb.w	r3, [r1, #-1]
   89186:	f101 32ff 	add.w	r2, r1, #4294967295
   8918a:	dceb      	bgt.n	89164 <_svfprintf_r+0xe9c>
   8918c:	4663      	mov	r3, ip
   8918e:	3330      	adds	r3, #48	; 0x30
   89190:	b2d8      	uxtb	r0, r3
   89192:	1e8b      	subs	r3, r1, #2
   89194:	459e      	cmp	lr, r3
   89196:	f802 0c01 	strb.w	r0, [r2, #-1]
   8919a:	f240 862c 	bls.w	89df6 <_svfprintf_r+0x1b2e>
   8919e:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   891a2:	e001      	b.n	891a8 <_svfprintf_r+0xee0>
   891a4:	f812 0b01 	ldrb.w	r0, [r2], #1
   891a8:	4596      	cmp	lr, r2
   891aa:	f803 0b01 	strb.w	r0, [r3], #1
   891ae:	d1f9      	bne.n	891a4 <_svfprintf_r+0xedc>
   891b0:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   891b4:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   891b8:	1a5b      	subs	r3, r3, r1
   891ba:	4413      	add	r3, r2
   891bc:	aa26      	add	r2, sp, #152	; 0x98
   891be:	1a9b      	subs	r3, r3, r2
   891c0:	931b      	str	r3, [sp, #108]	; 0x6c
   891c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   891c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   891c6:	2b01      	cmp	r3, #1
   891c8:	441a      	add	r2, r3
   891ca:	920c      	str	r2, [sp, #48]	; 0x30
   891cc:	f340 85cc 	ble.w	89d68 <_svfprintf_r+0x1aa0>
   891d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   891d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   891d4:	4413      	add	r3, r2
   891d6:	930c      	str	r3, [sp, #48]	; 0x30
   891d8:	2300      	movs	r3, #0
   891da:	9312      	str	r3, [sp, #72]	; 0x48
   891dc:	9316      	str	r3, [sp, #88]	; 0x58
   891de:	9310      	str	r3, [sp, #64]	; 0x40
   891e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   891e2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   891e6:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   891ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   891ee:	9207      	str	r2, [sp, #28]
   891f0:	9308      	str	r3, [sp, #32]
   891f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   891f4:	2b00      	cmp	r3, #0
   891f6:	f040 8317 	bne.w	89828 <_svfprintf_r+0x1560>
   891fa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   891fe:	9309      	str	r3, [sp, #36]	; 0x24
   89200:	f7ff ba86 	b.w	88710 <_svfprintf_r+0x448>
   89204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   89206:	2301      	movs	r3, #1
   89208:	f852 4b04 	ldr.w	r4, [r2], #4
   8920c:	2500      	movs	r5, #0
   8920e:	920e      	str	r2, [sp, #56]	; 0x38
   89210:	f7ff b96b 	b.w	884ea <_svfprintf_r+0x222>
   89214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89216:	f853 4b04 	ldr.w	r4, [r3], #4
   8921a:	17e5      	asrs	r5, r4, #31
   8921c:	930e      	str	r3, [sp, #56]	; 0x38
   8921e:	4622      	mov	r2, r4
   89220:	462b      	mov	r3, r5
   89222:	f7ff b933 	b.w	8848c <_svfprintf_r+0x1c4>
   89226:	9b07      	ldr	r3, [sp, #28]
   89228:	9308      	str	r3, [sp, #32]
   8922a:	f7ff bae0 	b.w	887ee <_svfprintf_r+0x526>
   8922e:	4b8d      	ldr	r3, [pc, #564]	; (89464 <_svfprintf_r+0x119c>)
   89230:	9319      	str	r3, [sp, #100]	; 0x64
   89232:	9b07      	ldr	r3, [sp, #28]
   89234:	0699      	lsls	r1, r3, #26
   89236:	f140 80fe 	bpl.w	89436 <_svfprintf_r+0x116e>
   8923a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8923c:	3307      	adds	r3, #7
   8923e:	f023 0307 	bic.w	r3, r3, #7
   89242:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89246:	930e      	str	r3, [sp, #56]	; 0x38
   89248:	9a07      	ldr	r2, [sp, #28]
   8924a:	07d7      	lsls	r7, r2, #31
   8924c:	d50a      	bpl.n	89264 <_svfprintf_r+0xf9c>
   8924e:	ea54 0305 	orrs.w	r3, r4, r5
   89252:	d007      	beq.n	89264 <_svfprintf_r+0xf9c>
   89254:	2330      	movs	r3, #48	; 0x30
   89256:	f042 0202 	orr.w	r2, r2, #2
   8925a:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8925e:	9207      	str	r2, [sp, #28]
   89260:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   89264:	9a07      	ldr	r2, [sp, #28]
   89266:	2302      	movs	r3, #2
   89268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   8926c:	9208      	str	r2, [sp, #32]
   8926e:	f7ff b93c 	b.w	884ea <_svfprintf_r+0x222>
   89272:	4b7d      	ldr	r3, [pc, #500]	; (89468 <_svfprintf_r+0x11a0>)
   89274:	9319      	str	r3, [sp, #100]	; 0x64
   89276:	e7dc      	b.n	89232 <_svfprintf_r+0xf6a>
   89278:	f043 0320 	orr.w	r3, r3, #32
   8927c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   89280:	9307      	str	r3, [sp, #28]
   89282:	f10b 0b01 	add.w	fp, fp, #1
   89286:	f7ff b86a 	b.w	8835e <_svfprintf_r+0x96>
   8928a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8928e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   89292:	9307      	str	r3, [sp, #28]
   89294:	f10b 0b01 	add.w	fp, fp, #1
   89298:	f7ff b861 	b.w	8835e <_svfprintf_r+0x96>
   8929c:	4651      	mov	r1, sl
   8929e:	4648      	mov	r0, r9
   892a0:	aa2a      	add	r2, sp, #168	; 0xa8
   892a2:	f004 fc57 	bl	8db54 <__ssprint_r>
   892a6:	2800      	cmp	r0, #0
   892a8:	f47f ac56 	bne.w	88b58 <_svfprintf_r+0x890>
   892ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   892ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   892b2:	f7ff bbad 	b.w	88a10 <_svfprintf_r+0x748>
   892b6:	2140      	movs	r1, #64	; 0x40
   892b8:	4648      	mov	r0, r9
   892ba:	f003 fa73 	bl	8c7a4 <_malloc_r>
   892be:	f8cb 0000 	str.w	r0, [fp]
   892c2:	f8cb 0010 	str.w	r0, [fp, #16]
   892c6:	2800      	cmp	r0, #0
   892c8:	f000 858d 	beq.w	89de6 <_svfprintf_r+0x1b1e>
   892cc:	2340      	movs	r3, #64	; 0x40
   892ce:	f8cb 3014 	str.w	r3, [fp, #20]
   892d2:	f7ff b811 	b.w	882f8 <_svfprintf_r+0x30>
   892d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   892d8:	463a      	mov	r2, r7
   892da:	2b06      	cmp	r3, #6
   892dc:	bf28      	it	cs
   892de:	2306      	movcs	r3, #6
   892e0:	9709      	str	r7, [sp, #36]	; 0x24
   892e2:	9712      	str	r7, [sp, #72]	; 0x48
   892e4:	9716      	str	r7, [sp, #88]	; 0x58
   892e6:	9710      	str	r7, [sp, #64]	; 0x40
   892e8:	970d      	str	r7, [sp, #52]	; 0x34
   892ea:	9308      	str	r3, [sp, #32]
   892ec:	4f5f      	ldr	r7, [pc, #380]	; (8946c <_svfprintf_r+0x11a4>)
   892ee:	940e      	str	r4, [sp, #56]	; 0x38
   892f0:	930c      	str	r3, [sp, #48]	; 0x30
   892f2:	f7ff ba0d 	b.w	88710 <_svfprintf_r+0x448>
   892f6:	2b10      	cmp	r3, #16
   892f8:	f340 8558 	ble.w	89dac <_svfprintf_r+0x1ae4>
   892fc:	4651      	mov	r1, sl
   892fe:	4a5c      	ldr	r2, [pc, #368]	; (89470 <_svfprintf_r+0x11a8>)
   89300:	46ca      	mov	sl, r9
   89302:	9709      	str	r7, [sp, #36]	; 0x24
   89304:	2610      	movs	r6, #16
   89306:	4617      	mov	r7, r2
   89308:	4689      	mov	r9, r1
   8930a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8930c:	920f      	str	r2, [sp, #60]	; 0x3c
   8930e:	e005      	b.n	8931c <_svfprintf_r+0x1054>
   89310:	f108 0808 	add.w	r8, r8, #8
   89314:	3d10      	subs	r5, #16
   89316:	2d10      	cmp	r5, #16
   89318:	f340 81fa 	ble.w	89710 <_svfprintf_r+0x1448>
   8931c:	3301      	adds	r3, #1
   8931e:	3410      	adds	r4, #16
   89320:	2b07      	cmp	r3, #7
   89322:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89326:	e9c8 7600 	strd	r7, r6, [r8]
   8932a:	ddf1      	ble.n	89310 <_svfprintf_r+0x1048>
   8932c:	4649      	mov	r1, r9
   8932e:	4650      	mov	r0, sl
   89330:	aa2a      	add	r2, sp, #168	; 0xa8
   89332:	f004 fc0f 	bl	8db54 <__ssprint_r>
   89336:	2800      	cmp	r0, #0
   89338:	f040 83fd 	bne.w	89b36 <_svfprintf_r+0x186e>
   8933c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89340:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89344:	e7e6      	b.n	89314 <_svfprintf_r+0x104c>
   89346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89348:	4642      	mov	r2, r8
   8934a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8934e:	18fb      	adds	r3, r7, r3
   89350:	9309      	str	r3, [sp, #36]	; 0x24
   89352:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   89356:	970f      	str	r7, [sp, #60]	; 0x3c
   89358:	4620      	mov	r0, r4
   8935a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8935e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   89360:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89362:	f1b8 0f00 	cmp.w	r8, #0
   89366:	d02d      	beq.n	893c4 <_svfprintf_r+0x10fc>
   89368:	bb7b      	cbnz	r3, 893ca <_svfprintf_r+0x1102>
   8936a:	3f01      	subs	r7, #1
   8936c:	f108 38ff 	add.w	r8, r8, #4294967295
   89370:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89372:	991c      	ldr	r1, [sp, #112]	; 0x70
   89374:	3301      	adds	r3, #1
   89376:	4458      	add	r0, fp
   89378:	2b07      	cmp	r3, #7
   8937a:	e9c2 1b00 	strd	r1, fp, [r2]
   8937e:	902c      	str	r0, [sp, #176]	; 0xb0
   89380:	932b      	str	r3, [sp, #172]	; 0xac
   89382:	dc62      	bgt.n	8944a <_svfprintf_r+0x1182>
   89384:	3208      	adds	r2, #8
   89386:	9909      	ldr	r1, [sp, #36]	; 0x24
   89388:	783b      	ldrb	r3, [r7, #0]
   8938a:	1b8d      	subs	r5, r1, r6
   8938c:	429d      	cmp	r5, r3
   8938e:	bfa8      	it	ge
   89390:	461d      	movge	r5, r3
   89392:	2d00      	cmp	r5, #0
   89394:	dd0b      	ble.n	893ae <_svfprintf_r+0x10e6>
   89396:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89398:	4428      	add	r0, r5
   8939a:	3301      	adds	r3, #1
   8939c:	2b07      	cmp	r3, #7
   8939e:	e9c2 6500 	strd	r6, r5, [r2]
   893a2:	902c      	str	r0, [sp, #176]	; 0xb0
   893a4:	932b      	str	r3, [sp, #172]	; 0xac
   893a6:	f300 8111 	bgt.w	895cc <_svfprintf_r+0x1304>
   893aa:	783b      	ldrb	r3, [r7, #0]
   893ac:	3208      	adds	r2, #8
   893ae:	2d00      	cmp	r5, #0
   893b0:	bfb4      	ite	lt
   893b2:	461d      	movlt	r5, r3
   893b4:	1b5d      	subge	r5, r3, r5
   893b6:	2d00      	cmp	r5, #0
   893b8:	dc0b      	bgt.n	893d2 <_svfprintf_r+0x110a>
   893ba:	441e      	add	r6, r3
   893bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   893be:	f1b8 0f00 	cmp.w	r8, #0
   893c2:	d1d1      	bne.n	89368 <_svfprintf_r+0x10a0>
   893c4:	2b00      	cmp	r3, #0
   893c6:	f000 81f9 	beq.w	897bc <_svfprintf_r+0x14f4>
   893ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   893cc:	3b01      	subs	r3, #1
   893ce:	9312      	str	r3, [sp, #72]	; 0x48
   893d0:	e7ce      	b.n	89370 <_svfprintf_r+0x10a8>
   893d2:	2d10      	cmp	r5, #16
   893d4:	f340 84c5 	ble.w	89d62 <_svfprintf_r+0x1a9a>
   893d8:	992b      	ldr	r1, [sp, #172]	; 0xac
   893da:	2410      	movs	r4, #16
   893dc:	460b      	mov	r3, r1
   893de:	e004      	b.n	893ea <_svfprintf_r+0x1122>
   893e0:	3d10      	subs	r5, #16
   893e2:	2d10      	cmp	r5, #16
   893e4:	f102 0208 	add.w	r2, r2, #8
   893e8:	dd16      	ble.n	89418 <_svfprintf_r+0x1150>
   893ea:	3301      	adds	r3, #1
   893ec:	4920      	ldr	r1, [pc, #128]	; (89470 <_svfprintf_r+0x11a8>)
   893ee:	3010      	adds	r0, #16
   893f0:	2b07      	cmp	r3, #7
   893f2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   893f6:	e9c2 1400 	strd	r1, r4, [r2]
   893fa:	ddf1      	ble.n	893e0 <_svfprintf_r+0x1118>
   893fc:	4651      	mov	r1, sl
   893fe:	4648      	mov	r0, r9
   89400:	aa2a      	add	r2, sp, #168	; 0xa8
   89402:	f004 fba7 	bl	8db54 <__ssprint_r>
   89406:	2800      	cmp	r0, #0
   89408:	f47f aba6 	bne.w	88b58 <_svfprintf_r+0x890>
   8940c:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   89410:	3d10      	subs	r5, #16
   89412:	2d10      	cmp	r5, #16
   89414:	aa2d      	add	r2, sp, #180	; 0xb4
   89416:	dce8      	bgt.n	893ea <_svfprintf_r+0x1122>
   89418:	4619      	mov	r1, r3
   8941a:	1c4b      	adds	r3, r1, #1
   8941c:	4914      	ldr	r1, [pc, #80]	; (89470 <_svfprintf_r+0x11a8>)
   8941e:	4428      	add	r0, r5
   89420:	2b07      	cmp	r3, #7
   89422:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   89426:	e9c2 1500 	strd	r1, r5, [r2]
   8942a:	f300 8215 	bgt.w	89858 <_svfprintf_r+0x1590>
   8942e:	783b      	ldrb	r3, [r7, #0]
   89430:	3208      	adds	r2, #8
   89432:	441e      	add	r6, r3
   89434:	e7c2      	b.n	893bc <_svfprintf_r+0x10f4>
   89436:	9b07      	ldr	r3, [sp, #28]
   89438:	06da      	lsls	r2, r3, #27
   8943a:	f140 8084 	bpl.w	89546 <_svfprintf_r+0x127e>
   8943e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89440:	2500      	movs	r5, #0
   89442:	f853 4b04 	ldr.w	r4, [r3], #4
   89446:	930e      	str	r3, [sp, #56]	; 0x38
   89448:	e6fe      	b.n	89248 <_svfprintf_r+0xf80>
   8944a:	4651      	mov	r1, sl
   8944c:	4648      	mov	r0, r9
   8944e:	aa2a      	add	r2, sp, #168	; 0xa8
   89450:	f004 fb80 	bl	8db54 <__ssprint_r>
   89454:	2800      	cmp	r0, #0
   89456:	f47f ab7f 	bne.w	88b58 <_svfprintf_r+0x890>
   8945a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8945c:	aa2d      	add	r2, sp, #180	; 0xb4
   8945e:	e792      	b.n	89386 <_svfprintf_r+0x10be>
   89460:	66666667 	.word	0x66666667
   89464:	0008eb1c 	.word	0x0008eb1c
   89468:	0008eb30 	.word	0x0008eb30
   8946c:	0008eb44 	.word	0x0008eb44
   89470:	0008eb60 	.word	0x0008eb60
   89474:	2200      	movs	r2, #0
   89476:	9b08      	ldr	r3, [sp, #32]
   89478:	f8cd b01c 	str.w	fp, [sp, #28]
   8947c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   89480:	960c      	str	r6, [sp, #48]	; 0x30
   89482:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   89486:	4693      	mov	fp, r2
   89488:	46ca      	mov	sl, r9
   8948a:	461e      	mov	r6, r3
   8948c:	46c1      	mov	r9, r8
   8948e:	af56      	add	r7, sp, #344	; 0x158
   89490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   89494:	e00b      	b.n	894ae <_svfprintf_r+0x11e6>
   89496:	220a      	movs	r2, #10
   89498:	2300      	movs	r3, #0
   8949a:	4620      	mov	r0, r4
   8949c:	4629      	mov	r1, r5
   8949e:	f7fe fc77 	bl	87d90 <__aeabi_uldivmod>
   894a2:	2d00      	cmp	r5, #0
   894a4:	bf08      	it	eq
   894a6:	2c0a      	cmpeq	r4, #10
   894a8:	d31b      	bcc.n	894e2 <_svfprintf_r+0x121a>
   894aa:	4604      	mov	r4, r0
   894ac:	460d      	mov	r5, r1
   894ae:	220a      	movs	r2, #10
   894b0:	2300      	movs	r3, #0
   894b2:	4620      	mov	r0, r4
   894b4:	4629      	mov	r1, r5
   894b6:	f7fe fc6b 	bl	87d90 <__aeabi_uldivmod>
   894ba:	3230      	adds	r2, #48	; 0x30
   894bc:	f807 2c01 	strb.w	r2, [r7, #-1]
   894c0:	f10b 0b01 	add.w	fp, fp, #1
   894c4:	3f01      	subs	r7, #1
   894c6:	2e00      	cmp	r6, #0
   894c8:	d0e5      	beq.n	89496 <_svfprintf_r+0x11ce>
   894ca:	f898 3000 	ldrb.w	r3, [r8]
   894ce:	459b      	cmp	fp, r3
   894d0:	d1e1      	bne.n	89496 <_svfprintf_r+0x11ce>
   894d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   894d6:	d0de      	beq.n	89496 <_svfprintf_r+0x11ce>
   894d8:	2d00      	cmp	r5, #0
   894da:	bf08      	it	eq
   894dc:	2c0a      	cmpeq	r4, #10
   894de:	f080 8128 	bcs.w	89732 <_svfprintf_r+0x146a>
   894e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   894e6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   894ea:	46c8      	mov	r8, r9
   894ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   894ee:	46d1      	mov	r9, sl
   894f0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   894f4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   894f8:	f7ff bb9f 	b.w	88c3a <_svfprintf_r+0x972>
   894fc:	4651      	mov	r1, sl
   894fe:	4648      	mov	r0, r9
   89500:	aa2a      	add	r2, sp, #168	; 0xa8
   89502:	931e      	str	r3, [sp, #120]	; 0x78
   89504:	f004 fb26 	bl	8db54 <__ssprint_r>
   89508:	2800      	cmp	r0, #0
   8950a:	f47f ab25 	bne.w	88b58 <_svfprintf_r+0x890>
   8950e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   89512:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89514:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   89516:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8951a:	f7ff b84a 	b.w	885b2 <_svfprintf_r+0x2ea>
   8951e:	2001      	movs	r0, #1
   89520:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89522:	49c5      	ldr	r1, [pc, #788]	; (89838 <_svfprintf_r+0x1570>)
   89524:	4403      	add	r3, r0
   89526:	4404      	add	r4, r0
   89528:	2b07      	cmp	r3, #7
   8952a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8952e:	e9c8 1000 	strd	r1, r0, [r8]
   89532:	f73f abdf 	bgt.w	88cf4 <_svfprintf_r+0xa2c>
   89536:	f108 0808 	add.w	r8, r8, #8
   8953a:	f7ff bbe7 	b.w	88d0c <_svfprintf_r+0xa44>
   8953e:	46d1      	mov	r9, sl
   89540:	46b3      	mov	fp, r6
   89542:	f7ff bb0a 	b.w	88b5a <_svfprintf_r+0x892>
   89546:	9b07      	ldr	r3, [sp, #28]
   89548:	065b      	lsls	r3, r3, #25
   8954a:	f140 80cb 	bpl.w	896e4 <_svfprintf_r+0x141c>
   8954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89550:	2500      	movs	r5, #0
   89552:	f853 4b04 	ldr.w	r4, [r3], #4
   89556:	930e      	str	r3, [sp, #56]	; 0x38
   89558:	b2a4      	uxth	r4, r4
   8955a:	e675      	b.n	89248 <_svfprintf_r+0xf80>
   8955c:	4651      	mov	r1, sl
   8955e:	4648      	mov	r0, r9
   89560:	aa2a      	add	r2, sp, #168	; 0xa8
   89562:	f004 faf7 	bl	8db54 <__ssprint_r>
   89566:	2800      	cmp	r0, #0
   89568:	f47f aaf6 	bne.w	88b58 <_svfprintf_r+0x890>
   8956c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8956e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89572:	f7ff ba3a 	b.w	889ea <_svfprintf_r+0x722>
   89576:	46d1      	mov	r9, sl
   89578:	46da      	mov	sl, fp
   8957a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8957e:	3501      	adds	r5, #1
   89580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89582:	4434      	add	r4, r6
   89584:	2d07      	cmp	r5, #7
   89586:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8958a:	e9c8 3600 	strd	r3, r6, [r8]
   8958e:	f77f ab24 	ble.w	88bda <_svfprintf_r+0x912>
   89592:	4651      	mov	r1, sl
   89594:	4648      	mov	r0, r9
   89596:	aa2a      	add	r2, sp, #168	; 0xa8
   89598:	f004 fadc 	bl	8db54 <__ssprint_r>
   8959c:	2800      	cmp	r0, #0
   8959e:	f47f aadb 	bne.w	88b58 <_svfprintf_r+0x890>
   895a2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   895a6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   895aa:	f7ff bb18 	b.w	88bde <_svfprintf_r+0x916>
   895ae:	4aa3      	ldr	r2, [pc, #652]	; (8983c <_svfprintf_r+0x1574>)
   895b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   895b2:	920f      	str	r2, [sp, #60]	; 0x3c
   895b4:	3301      	adds	r3, #1
   895b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   895b8:	442c      	add	r4, r5
   895ba:	2b07      	cmp	r3, #7
   895bc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   895c0:	e9c8 2500 	strd	r2, r5, [r8]
   895c4:	f77f a82d 	ble.w	88622 <_svfprintf_r+0x35a>
   895c8:	f7ff bbc2 	b.w	88d50 <_svfprintf_r+0xa88>
   895cc:	4651      	mov	r1, sl
   895ce:	4648      	mov	r0, r9
   895d0:	aa2a      	add	r2, sp, #168	; 0xa8
   895d2:	f004 fabf 	bl	8db54 <__ssprint_r>
   895d6:	2800      	cmp	r0, #0
   895d8:	f47f aabe 	bne.w	88b58 <_svfprintf_r+0x890>
   895dc:	783b      	ldrb	r3, [r7, #0]
   895de:	982c      	ldr	r0, [sp, #176]	; 0xb0
   895e0:	aa2d      	add	r2, sp, #180	; 0xb4
   895e2:	e6e4      	b.n	893ae <_svfprintf_r+0x10e6>
   895e4:	4651      	mov	r1, sl
   895e6:	4648      	mov	r0, r9
   895e8:	aa2a      	add	r2, sp, #168	; 0xa8
   895ea:	f004 fab3 	bl	8db54 <__ssprint_r>
   895ee:	2800      	cmp	r0, #0
   895f0:	f47f aab2 	bne.w	88b58 <_svfprintf_r+0x890>
   895f4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   895f6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   895fa:	f7fe bffd 	b.w	885f8 <_svfprintf_r+0x330>
   895fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89600:	990a      	ldr	r1, [sp, #40]	; 0x28
   89602:	f853 2b04 	ldr.w	r2, [r3], #4
   89606:	465f      	mov	r7, fp
   89608:	6011      	str	r1, [r2, #0]
   8960a:	930e      	str	r3, [sp, #56]	; 0x38
   8960c:	f7ff b82a 	b.w	88664 <_svfprintf_r+0x39c>
   89610:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89612:	9917      	ldr	r1, [sp, #92]	; 0x5c
   89614:	3301      	adds	r3, #1
   89616:	9818      	ldr	r0, [sp, #96]	; 0x60
   89618:	440c      	add	r4, r1
   8961a:	2b07      	cmp	r3, #7
   8961c:	e9c8 0100 	strd	r0, r1, [r8]
   89620:	942c      	str	r4, [sp, #176]	; 0xb0
   89622:	932b      	str	r3, [sp, #172]	; 0xac
   89624:	f300 80ac 	bgt.w	89780 <_svfprintf_r+0x14b8>
   89628:	f108 0808 	add.w	r8, r8, #8
   8962c:	2a00      	cmp	r2, #0
   8962e:	f6bf ab85 	bge.w	88d3c <_svfprintf_r+0xa74>
   89632:	4255      	negs	r5, r2
   89634:	3210      	adds	r2, #16
   89636:	f280 83d3 	bge.w	89de0 <_svfprintf_r+0x1b18>
   8963a:	4651      	mov	r1, sl
   8963c:	4a7f      	ldr	r2, [pc, #508]	; (8983c <_svfprintf_r+0x1574>)
   8963e:	46ca      	mov	sl, r9
   89640:	9709      	str	r7, [sp, #36]	; 0x24
   89642:	2610      	movs	r6, #16
   89644:	4617      	mov	r7, r2
   89646:	4689      	mov	r9, r1
   89648:	920f      	str	r2, [sp, #60]	; 0x3c
   8964a:	e005      	b.n	89658 <_svfprintf_r+0x1390>
   8964c:	f108 0808 	add.w	r8, r8, #8
   89650:	3d10      	subs	r5, #16
   89652:	2d10      	cmp	r5, #16
   89654:	f340 82aa 	ble.w	89bac <_svfprintf_r+0x18e4>
   89658:	3301      	adds	r3, #1
   8965a:	3410      	adds	r4, #16
   8965c:	2b07      	cmp	r3, #7
   8965e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89662:	e9c8 7600 	strd	r7, r6, [r8]
   89666:	ddf1      	ble.n	8964c <_svfprintf_r+0x1384>
   89668:	4649      	mov	r1, r9
   8966a:	4650      	mov	r0, sl
   8966c:	aa2a      	add	r2, sp, #168	; 0xa8
   8966e:	f004 fa71 	bl	8db54 <__ssprint_r>
   89672:	2800      	cmp	r0, #0
   89674:	f040 825f 	bne.w	89b36 <_svfprintf_r+0x186e>
   89678:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8967c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89680:	e7e6      	b.n	89650 <_svfprintf_r+0x1388>
   89682:	4638      	mov	r0, r7
   89684:	f004 fa04 	bl	8da90 <strlen>
   89688:	462b      	mov	r3, r5
   8968a:	4602      	mov	r2, r0
   8968c:	9509      	str	r5, [sp, #36]	; 0x24
   8968e:	f7ff b894 	b.w	887ba <_svfprintf_r+0x4f2>
   89692:	9b07      	ldr	r3, [sp, #28]
   89694:	2500      	movs	r5, #0
   89696:	f413 7f00 	tst.w	r3, #512	; 0x200
   8969a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8969c:	f853 4b04 	ldr.w	r4, [r3], #4
   896a0:	930e      	str	r3, [sp, #56]	; 0x38
   896a2:	bf18      	it	ne
   896a4:	b2e4      	uxtbne	r4, r4
   896a6:	f7fe bf1b 	b.w	884e0 <_svfprintf_r+0x218>
   896aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   896ac:	9b08      	ldr	r3, [sp, #32]
   896ae:	f852 4b04 	ldr.w	r4, [r2], #4
   896b2:	f413 7f00 	tst.w	r3, #512	; 0x200
   896b6:	f04f 0500 	mov.w	r5, #0
   896ba:	f04f 0301 	mov.w	r3, #1
   896be:	920e      	str	r2, [sp, #56]	; 0x38
   896c0:	bf18      	it	ne
   896c2:	b2e4      	uxtbne	r4, r4
   896c4:	f7fe bf11 	b.w	884ea <_svfprintf_r+0x222>
   896c8:	9b07      	ldr	r3, [sp, #28]
   896ca:	f413 7f00 	tst.w	r3, #512	; 0x200
   896ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   896d0:	f853 4b04 	ldr.w	r4, [r3], #4
   896d4:	bf18      	it	ne
   896d6:	b264      	sxtbne	r4, r4
   896d8:	17e5      	asrs	r5, r4, #31
   896da:	930e      	str	r3, [sp, #56]	; 0x38
   896dc:	4622      	mov	r2, r4
   896de:	462b      	mov	r3, r5
   896e0:	f7fe bed4 	b.w	8848c <_svfprintf_r+0x1c4>
   896e4:	9b07      	ldr	r3, [sp, #28]
   896e6:	2500      	movs	r5, #0
   896e8:	f413 7f00 	tst.w	r3, #512	; 0x200
   896ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   896ee:	f853 4b04 	ldr.w	r4, [r3], #4
   896f2:	930e      	str	r3, [sp, #56]	; 0x38
   896f4:	bf18      	it	ne
   896f6:	b2e4      	uxtbne	r4, r4
   896f8:	e5a6      	b.n	89248 <_svfprintf_r+0xf80>
   896fa:	4b50      	ldr	r3, [pc, #320]	; (8983c <_svfprintf_r+0x1574>)
   896fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   896fe:	930f      	str	r3, [sp, #60]	; 0x3c
   89700:	f7ff ba15 	b.w	88b2e <_svfprintf_r+0x866>
   89704:	232d      	movs	r3, #45	; 0x2d
   89706:	461a      	mov	r2, r3
   89708:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8970c:	f7fe bfee 	b.w	886ec <_svfprintf_r+0x424>
   89710:	464a      	mov	r2, r9
   89712:	46d1      	mov	r9, sl
   89714:	4692      	mov	sl, r2
   89716:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89718:	3301      	adds	r3, #1
   8971a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8971c:	442c      	add	r4, r5
   8971e:	2b07      	cmp	r3, #7
   89720:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89724:	e9c8 2500 	strd	r2, r5, [r8]
   89728:	dc3b      	bgt.n	897a2 <_svfprintf_r+0x14da>
   8972a:	f108 0808 	add.w	r8, r8, #8
   8972e:	f7ff bb8c 	b.w	88e4a <_svfprintf_r+0xb82>
   89732:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   89734:	991c      	ldr	r1, [sp, #112]	; 0x70
   89736:	1aff      	subs	r7, r7, r3
   89738:	461a      	mov	r2, r3
   8973a:	4638      	mov	r0, r7
   8973c:	f004 f9d6 	bl	8daec <strncpy>
   89740:	f898 3001 	ldrb.w	r3, [r8, #1]
   89744:	b10b      	cbz	r3, 8974a <_svfprintf_r+0x1482>
   89746:	f108 0801 	add.w	r8, r8, #1
   8974a:	220a      	movs	r2, #10
   8974c:	2300      	movs	r3, #0
   8974e:	4620      	mov	r0, r4
   89750:	4629      	mov	r1, r5
   89752:	f7fe fb1d 	bl	87d90 <__aeabi_uldivmod>
   89756:	f04f 0b00 	mov.w	fp, #0
   8975a:	e6a6      	b.n	894aa <_svfprintf_r+0x11e2>
   8975c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8975e:	18bd      	adds	r5, r7, r2
   89760:	1bad      	subs	r5, r5, r6
   89762:	1ad3      	subs	r3, r2, r3
   89764:	429d      	cmp	r5, r3
   89766:	bfa8      	it	ge
   89768:	461d      	movge	r5, r3
   8976a:	f7ff bba0 	b.w	88eae <_svfprintf_r+0xbe6>
   8976e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89770:	990a      	ldr	r1, [sp, #40]	; 0x28
   89772:	f853 2b04 	ldr.w	r2, [r3], #4
   89776:	465f      	mov	r7, fp
   89778:	8011      	strh	r1, [r2, #0]
   8977a:	930e      	str	r3, [sp, #56]	; 0x38
   8977c:	f7fe bf72 	b.w	88664 <_svfprintf_r+0x39c>
   89780:	4651      	mov	r1, sl
   89782:	4648      	mov	r0, r9
   89784:	aa2a      	add	r2, sp, #168	; 0xa8
   89786:	f004 f9e5 	bl	8db54 <__ssprint_r>
   8978a:	2800      	cmp	r0, #0
   8978c:	f47f a9e4 	bne.w	88b58 <_svfprintf_r+0x890>
   89790:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89794:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89796:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8979a:	e747      	b.n	8962c <_svfprintf_r+0x1364>
   8979c:	2306      	movs	r3, #6
   8979e:	9309      	str	r3, [sp, #36]	; 0x24
   897a0:	e482      	b.n	890a8 <_svfprintf_r+0xde0>
   897a2:	4651      	mov	r1, sl
   897a4:	4648      	mov	r0, r9
   897a6:	aa2a      	add	r2, sp, #168	; 0xa8
   897a8:	f004 f9d4 	bl	8db54 <__ssprint_r>
   897ac:	2800      	cmp	r0, #0
   897ae:	f47f a9d3 	bne.w	88b58 <_svfprintf_r+0x890>
   897b2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   897b4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   897b8:	f7ff bb47 	b.w	88e4a <_svfprintf_r+0xb82>
   897bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   897be:	971a      	str	r7, [sp, #104]	; 0x68
   897c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   897c2:	4690      	mov	r8, r2
   897c4:	18fb      	adds	r3, r7, r3
   897c6:	429e      	cmp	r6, r3
   897c8:	4632      	mov	r2, r6
   897ca:	bf28      	it	cs
   897cc:	461a      	movcs	r2, r3
   897ce:	4604      	mov	r4, r0
   897d0:	4616      	mov	r6, r2
   897d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   897d6:	f7ff bb3f 	b.w	88e58 <_svfprintf_r+0xb90>
   897da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   897dc:	1cd8      	adds	r0, r3, #3
   897de:	9310      	str	r3, [sp, #64]	; 0x40
   897e0:	db02      	blt.n	897e8 <_svfprintf_r+0x1520>
   897e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   897e4:	4293      	cmp	r3, r2
   897e6:	dd04      	ble.n	897f2 <_svfprintf_r+0x152a>
   897e8:	3e02      	subs	r6, #2
   897ea:	f026 0320 	bic.w	r3, r6, #32
   897ee:	9308      	str	r3, [sp, #32]
   897f0:	e49b      	b.n	8912a <_svfprintf_r+0xe62>
   897f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   897f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   897f6:	428b      	cmp	r3, r1
   897f8:	f2c0 817a 	blt.w	89af0 <_svfprintf_r+0x1828>
   897fc:	07ea      	lsls	r2, r5, #31
   897fe:	f140 8283 	bpl.w	89d08 <_svfprintf_r+0x1a40>
   89802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89804:	4413      	add	r3, r2
   89806:	930c      	str	r3, [sp, #48]	; 0x30
   89808:	056e      	lsls	r6, r5, #21
   8980a:	f140 8277 	bpl.w	89cfc <_svfprintf_r+0x1a34>
   8980e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89810:	2b00      	cmp	r3, #0
   89812:	f300 8210 	bgt.w	89c36 <_svfprintf_r+0x196e>
   89816:	2667      	movs	r6, #103	; 0x67
   89818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8981a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8981e:	9308      	str	r3, [sp, #32]
   89820:	2300      	movs	r3, #0
   89822:	9312      	str	r3, [sp, #72]	; 0x48
   89824:	9316      	str	r3, [sp, #88]	; 0x58
   89826:	e4e4      	b.n	891f2 <_svfprintf_r+0xf2a>
   89828:	222d      	movs	r2, #45	; 0x2d
   8982a:	2300      	movs	r3, #0
   8982c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   89830:	9309      	str	r3, [sp, #36]	; 0x24
   89832:	f7fe bf70 	b.w	88716 <_svfprintf_r+0x44e>
   89836:	bf00      	nop
   89838:	0008eb4c 	.word	0x0008eb4c
   8983c:	0008eb60 	.word	0x0008eb60
   89840:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89842:	42a3      	cmp	r3, r4
   89844:	f4bf ac65 	bcs.w	89112 <_svfprintf_r+0xe4a>
   89848:	2130      	movs	r1, #48	; 0x30
   8984a:	1c5a      	adds	r2, r3, #1
   8984c:	9228      	str	r2, [sp, #160]	; 0xa0
   8984e:	7019      	strb	r1, [r3, #0]
   89850:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89852:	429c      	cmp	r4, r3
   89854:	d8f9      	bhi.n	8984a <_svfprintf_r+0x1582>
   89856:	e45c      	b.n	89112 <_svfprintf_r+0xe4a>
   89858:	4651      	mov	r1, sl
   8985a:	4648      	mov	r0, r9
   8985c:	aa2a      	add	r2, sp, #168	; 0xa8
   8985e:	f004 f979 	bl	8db54 <__ssprint_r>
   89862:	2800      	cmp	r0, #0
   89864:	f47f a978 	bne.w	88b58 <_svfprintf_r+0x890>
   89868:	783b      	ldrb	r3, [r7, #0]
   8986a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8986c:	aa2d      	add	r2, sp, #180	; 0xb4
   8986e:	441e      	add	r6, r3
   89870:	e5a4      	b.n	893bc <_svfprintf_r+0x10f4>
   89872:	4651      	mov	r1, sl
   89874:	4648      	mov	r0, r9
   89876:	aa2a      	add	r2, sp, #168	; 0xa8
   89878:	f004 f96c 	bl	8db54 <__ssprint_r>
   8987c:	2800      	cmp	r0, #0
   8987e:	f47f a96b 	bne.w	88b58 <_svfprintf_r+0x890>
   89882:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89884:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89888:	f7ff bad7 	b.w	88e3a <_svfprintf_r+0xb72>
   8988c:	4651      	mov	r1, sl
   8988e:	4648      	mov	r0, r9
   89890:	aa2a      	add	r2, sp, #168	; 0xa8
   89892:	f004 f95f 	bl	8db54 <__ssprint_r>
   89896:	2800      	cmp	r0, #0
   89898:	f47f a95e 	bne.w	88b58 <_svfprintf_r+0x890>
   8989c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8989e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   898a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   898a4:	f7ff baee 	b.w	88e84 <_svfprintf_r+0xbbc>
   898a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   898aa:	a928      	add	r1, sp, #160	; 0xa0
   898ac:	e9cd 0400 	strd	r0, r4, [sp]
   898b0:	9104      	str	r1, [sp, #16]
   898b2:	a825      	add	r0, sp, #148	; 0x94
   898b4:	a924      	add	r1, sp, #144	; 0x90
   898b6:	e9cd 1002 	strd	r1, r0, [sp, #8]
   898ba:	4648      	mov	r0, r9
   898bc:	f001 facc 	bl	8ae58 <_dtoa_r>
   898c0:	2d47      	cmp	r5, #71	; 0x47
   898c2:	4607      	mov	r7, r0
   898c4:	d119      	bne.n	898fa <_svfprintf_r+0x1632>
   898c6:	9d07      	ldr	r5, [sp, #28]
   898c8:	462b      	mov	r3, r5
   898ca:	07db      	lsls	r3, r3, #31
   898cc:	f100 812a 	bmi.w	89b24 <_svfprintf_r+0x185c>
   898d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   898d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   898d4:	9207      	str	r2, [sp, #28]
   898d6:	2247      	movs	r2, #71	; 0x47
   898d8:	9208      	str	r2, [sp, #32]
   898da:	e41a      	b.n	89112 <_svfprintf_r+0xe4a>
   898dc:	2003      	movs	r0, #3
   898de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   898e0:	a928      	add	r1, sp, #160	; 0xa0
   898e2:	e9cd 0400 	strd	r0, r4, [sp]
   898e6:	9104      	str	r1, [sp, #16]
   898e8:	a825      	add	r0, sp, #148	; 0x94
   898ea:	a924      	add	r1, sp, #144	; 0x90
   898ec:	e9cd 1002 	strd	r1, r0, [sp, #8]
   898f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   898f2:	4648      	mov	r0, r9
   898f4:	f001 fab0 	bl	8ae58 <_dtoa_r>
   898f8:	4607      	mov	r7, r0
   898fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   898fc:	2d46      	cmp	r5, #70	; 0x46
   898fe:	eb07 0403 	add.w	r4, r7, r3
   89902:	f47f abf9 	bne.w	890f8 <_svfprintf_r+0xe30>
   89906:	783b      	ldrb	r3, [r7, #0]
   89908:	2b30      	cmp	r3, #48	; 0x30
   8990a:	f000 821c 	beq.w	89d46 <_svfprintf_r+0x1a7e>
   8990e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89910:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89912:	9d07      	ldr	r5, [sp, #28]
   89914:	441c      	add	r4, r3
   89916:	9207      	str	r2, [sp, #28]
   89918:	f7ff bbf1 	b.w	890fe <_svfprintf_r+0xe36>
   8991c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   89920:	f7ff b9c3 	b.w	88caa <_svfprintf_r+0x9e2>
   89924:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89926:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8992a:	9308      	str	r3, [sp, #32]
   8992c:	930c      	str	r3, [sp, #48]	; 0x30
   8992e:	9009      	str	r0, [sp, #36]	; 0x24
   89930:	940e      	str	r4, [sp, #56]	; 0x38
   89932:	9012      	str	r0, [sp, #72]	; 0x48
   89934:	9016      	str	r0, [sp, #88]	; 0x58
   89936:	9010      	str	r0, [sp, #64]	; 0x40
   89938:	f7fe beea 	b.w	88710 <_svfprintf_r+0x448>
   8993c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8993e:	2a00      	cmp	r2, #0
   89940:	9210      	str	r2, [sp, #64]	; 0x40
   89942:	f340 821b 	ble.w	89d7c <_svfprintf_r+0x1ab4>
   89946:	9909      	ldr	r1, [sp, #36]	; 0x24
   89948:	f005 0301 	and.w	r3, r5, #1
   8994c:	430b      	orrs	r3, r1
   8994e:	f040 819a 	bne.w	89c86 <_svfprintf_r+0x19be>
   89952:	2666      	movs	r6, #102	; 0x66
   89954:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89956:	930c      	str	r3, [sp, #48]	; 0x30
   89958:	056a      	lsls	r2, r5, #21
   8995a:	f100 816d 	bmi.w	89c38 <_svfprintf_r+0x1970>
   8995e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89960:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   89964:	9308      	str	r3, [sp, #32]
   89966:	e75b      	b.n	89820 <_svfprintf_r+0x1558>
   89968:	4651      	mov	r1, sl
   8996a:	4648      	mov	r0, r9
   8996c:	aa2a      	add	r2, sp, #168	; 0xa8
   8996e:	f004 f8f1 	bl	8db54 <__ssprint_r>
   89972:	2800      	cmp	r0, #0
   89974:	f47f a8f0 	bne.w	88b58 <_svfprintf_r+0x890>
   89978:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8997a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8997c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8997e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89982:	1ad3      	subs	r3, r2, r3
   89984:	f7ff ba93 	b.w	88eae <_svfprintf_r+0xbe6>
   89988:	2330      	movs	r3, #48	; 0x30
   8998a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8998e:	2358      	movs	r3, #88	; 0x58
   89990:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   89994:	9b07      	ldr	r3, [sp, #28]
   89996:	f043 0402 	orr.w	r4, r3, #2
   8999a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8999c:	2b63      	cmp	r3, #99	; 0x63
   8999e:	f300 80f2 	bgt.w	89b86 <_svfprintf_r+0x18be>
   899a2:	2300      	movs	r3, #0
   899a4:	af3d      	add	r7, sp, #244	; 0xf4
   899a6:	930d      	str	r3, [sp, #52]	; 0x34
   899a8:	9b07      	ldr	r3, [sp, #28]
   899aa:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   899ae:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   899b2:	9312      	str	r3, [sp, #72]	; 0x48
   899b4:	4613      	mov	r3, r2
   899b6:	2b00      	cmp	r3, #0
   899b8:	f026 0520 	bic.w	r5, r6, #32
   899bc:	9407      	str	r4, [sp, #28]
   899be:	f2c0 808d 	blt.w	89adc <_svfprintf_r+0x1814>
   899c2:	930f      	str	r3, [sp, #60]	; 0x3c
   899c4:	2300      	movs	r3, #0
   899c6:	9508      	str	r5, [sp, #32]
   899c8:	910c      	str	r1, [sp, #48]	; 0x30
   899ca:	931e      	str	r3, [sp, #120]	; 0x78
   899cc:	2e61      	cmp	r6, #97	; 0x61
   899ce:	f000 817d 	beq.w	89ccc <_svfprintf_r+0x1a04>
   899d2:	2e41      	cmp	r6, #65	; 0x41
   899d4:	f47f ab77 	bne.w	890c6 <_svfprintf_r+0xdfe>
   899d8:	aa24      	add	r2, sp, #144	; 0x90
   899da:	980c      	ldr	r0, [sp, #48]	; 0x30
   899dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   899de:	f003 ffc7 	bl	8d970 <frexp>
   899e2:	2200      	movs	r2, #0
   899e4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   899e8:	f004 fd4e 	bl	8e488 <__aeabi_dmul>
   899ec:	4604      	mov	r4, r0
   899ee:	460d      	mov	r5, r1
   899f0:	2200      	movs	r2, #0
   899f2:	2300      	movs	r3, #0
   899f4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   899f8:	f004 ffae 	bl	8e958 <__aeabi_dcmpeq>
   899fc:	b108      	cbz	r0, 89a02 <_svfprintf_r+0x173a>
   899fe:	2301      	movs	r3, #1
   89a00:	9324      	str	r3, [sp, #144]	; 0x90
   89a02:	4bae      	ldr	r3, [pc, #696]	; (89cbc <_svfprintf_r+0x19f4>)
   89a04:	930c      	str	r3, [sp, #48]	; 0x30
   89a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89a08:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   89a0c:	3b01      	subs	r3, #1
   89a0e:	9613      	str	r6, [sp, #76]	; 0x4c
   89a10:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   89a14:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   89a18:	9721      	str	r7, [sp, #132]	; 0x84
   89a1a:	46ba      	mov	sl, r7
   89a1c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   89a20:	4699      	mov	r9, r3
   89a22:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   89a26:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   89a2a:	e006      	b.n	89a3a <_svfprintf_r+0x1772>
   89a2c:	2200      	movs	r2, #0
   89a2e:	2300      	movs	r3, #0
   89a30:	f004 ff92 	bl	8e958 <__aeabi_dcmpeq>
   89a34:	f109 39ff 	add.w	r9, r9, #4294967295
   89a38:	b9e8      	cbnz	r0, 89a76 <_svfprintf_r+0x17ae>
   89a3a:	2200      	movs	r2, #0
   89a3c:	4ba0      	ldr	r3, [pc, #640]	; (89cc0 <_svfprintf_r+0x19f8>)
   89a3e:	4630      	mov	r0, r6
   89a40:	4639      	mov	r1, r7
   89a42:	f004 fd21 	bl	8e488 <__aeabi_dmul>
   89a46:	460d      	mov	r5, r1
   89a48:	4604      	mov	r4, r0
   89a4a:	f004 ffcd 	bl	8e9e8 <__aeabi_d2iz>
   89a4e:	4680      	mov	r8, r0
   89a50:	f004 fcb0 	bl	8e3b4 <__aeabi_i2d>
   89a54:	460b      	mov	r3, r1
   89a56:	4602      	mov	r2, r0
   89a58:	4629      	mov	r1, r5
   89a5a:	4620      	mov	r0, r4
   89a5c:	f004 fb5c 	bl	8e118 <__aeabi_dsub>
   89a60:	f81b 3008 	ldrb.w	r3, [fp, r8]
   89a64:	f1b9 3fff 	cmp.w	r9, #4294967295
   89a68:	4655      	mov	r5, sl
   89a6a:	4606      	mov	r6, r0
   89a6c:	460f      	mov	r7, r1
   89a6e:	464c      	mov	r4, r9
   89a70:	f80a 3b01 	strb.w	r3, [sl], #1
   89a74:	d1da      	bne.n	89a2c <_svfprintf_r+0x1764>
   89a76:	4630      	mov	r0, r6
   89a78:	4639      	mov	r1, r7
   89a7a:	2200      	movs	r2, #0
   89a7c:	4b91      	ldr	r3, [pc, #580]	; (89cc4 <_svfprintf_r+0x19fc>)
   89a7e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   89a82:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   89a84:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   89a88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   89a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89a90:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   89a94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   89a98:	9f21      	ldr	r7, [sp, #132]	; 0x84
   89a9a:	f004 ff85 	bl	8e9a8 <__aeabi_dcmpgt>
   89a9e:	2800      	cmp	r0, #0
   89aa0:	d155      	bne.n	89b4e <_svfprintf_r+0x1886>
   89aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89aa6:	2200      	movs	r2, #0
   89aa8:	4b86      	ldr	r3, [pc, #536]	; (89cc4 <_svfprintf_r+0x19fc>)
   89aaa:	f004 ff55 	bl	8e958 <__aeabi_dcmpeq>
   89aae:	b110      	cbz	r0, 89ab6 <_svfprintf_r+0x17ee>
   89ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89ab2:	07db      	lsls	r3, r3, #31
   89ab4:	d44b      	bmi.n	89b4e <_svfprintf_r+0x1886>
   89ab6:	2c00      	cmp	r4, #0
   89ab8:	db08      	blt.n	89acc <_svfprintf_r+0x1804>
   89aba:	2230      	movs	r2, #48	; 0x30
   89abc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89abe:	1c63      	adds	r3, r4, #1
   89ac0:	440b      	add	r3, r1
   89ac2:	f801 2b01 	strb.w	r2, [r1], #1
   89ac6:	428b      	cmp	r3, r1
   89ac8:	d1fb      	bne.n	89ac2 <_svfprintf_r+0x17fa>
   89aca:	910f      	str	r1, [sp, #60]	; 0x3c
   89acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89ace:	9d07      	ldr	r5, [sp, #28]
   89ad0:	1bdb      	subs	r3, r3, r7
   89ad2:	9313      	str	r3, [sp, #76]	; 0x4c
   89ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89ad6:	9307      	str	r3, [sp, #28]
   89ad8:	f7ff bb1d 	b.w	89116 <_svfprintf_r+0xe4e>
   89adc:	9508      	str	r5, [sp, #32]
   89ade:	232d      	movs	r3, #45	; 0x2d
   89ae0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   89ae4:	931e      	str	r3, [sp, #120]	; 0x78
   89ae6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   89aea:	910c      	str	r1, [sp, #48]	; 0x30
   89aec:	930f      	str	r3, [sp, #60]	; 0x3c
   89aee:	e76d      	b.n	899cc <_svfprintf_r+0x1704>
   89af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89af2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89af4:	189a      	adds	r2, r3, r2
   89af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89af8:	920c      	str	r2, [sp, #48]	; 0x30
   89afa:	2b00      	cmp	r3, #0
   89afc:	f340 811a 	ble.w	89d34 <_svfprintf_r+0x1a6c>
   89b00:	2667      	movs	r6, #103	; 0x67
   89b02:	e729      	b.n	89958 <_svfprintf_r+0x1690>
   89b04:	2300      	movs	r3, #0
   89b06:	9309      	str	r3, [sp, #36]	; 0x24
   89b08:	f7fe bc2b 	b.w	88362 <_svfprintf_r+0x9a>
   89b0c:	4648      	mov	r0, r9
   89b0e:	4651      	mov	r1, sl
   89b10:	aa2a      	add	r2, sp, #168	; 0xa8
   89b12:	f004 f81f 	bl	8db54 <__ssprint_r>
   89b16:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89b1a:	f7fe bdae 	b.w	8867a <_svfprintf_r+0x3b2>
   89b1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89b20:	f7ff b95f 	b.w	88de2 <_svfprintf_r+0xb1a>
   89b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89b26:	9d07      	ldr	r5, [sp, #28]
   89b28:	18fc      	adds	r4, r7, r3
   89b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89b2c:	9307      	str	r3, [sp, #28]
   89b2e:	2347      	movs	r3, #71	; 0x47
   89b30:	9308      	str	r3, [sp, #32]
   89b32:	f7ff bae4 	b.w	890fe <_svfprintf_r+0xe36>
   89b36:	46cb      	mov	fp, r9
   89b38:	46d1      	mov	r9, sl
   89b3a:	f7ff b80e 	b.w	88b5a <_svfprintf_r+0x892>
   89b3e:	46d1      	mov	r9, sl
   89b40:	f7ff b80b 	b.w	88b5a <_svfprintf_r+0x892>
   89b44:	4b60      	ldr	r3, [pc, #384]	; (89cc8 <_svfprintf_r+0x1a00>)
   89b46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   89b48:	930f      	str	r3, [sp, #60]	; 0x3c
   89b4a:	f7fe bfb7 	b.w	88abc <_svfprintf_r+0x7f4>
   89b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89b50:	990c      	ldr	r1, [sp, #48]	; 0x30
   89b52:	9528      	str	r5, [sp, #160]	; 0xa0
   89b54:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   89b58:	7bc9      	ldrb	r1, [r1, #15]
   89b5a:	428a      	cmp	r2, r1
   89b5c:	f040 812a 	bne.w	89db4 <_svfprintf_r+0x1aec>
   89b60:	2030      	movs	r0, #48	; 0x30
   89b62:	f803 0c01 	strb.w	r0, [r3, #-1]
   89b66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89b68:	1e5a      	subs	r2, r3, #1
   89b6a:	9228      	str	r2, [sp, #160]	; 0xa0
   89b6c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   89b70:	4291      	cmp	r1, r2
   89b72:	d0f6      	beq.n	89b62 <_svfprintf_r+0x189a>
   89b74:	2a39      	cmp	r2, #57	; 0x39
   89b76:	bf0b      	itete	eq
   89b78:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   89b7a:	3201      	addne	r2, #1
   89b7c:	7a92      	ldrbeq	r2, [r2, #10]
   89b7e:	b2d2      	uxtbne	r2, r2
   89b80:	f803 2c01 	strb.w	r2, [r3, #-1]
   89b84:	e7a2      	b.n	89acc <_svfprintf_r+0x1804>
   89b86:	4648      	mov	r0, r9
   89b88:	1c59      	adds	r1, r3, #1
   89b8a:	f002 fe0b 	bl	8c7a4 <_malloc_r>
   89b8e:	4607      	mov	r7, r0
   89b90:	2800      	cmp	r0, #0
   89b92:	f000 811d 	beq.w	89dd0 <_svfprintf_r+0x1b08>
   89b96:	900d      	str	r0, [sp, #52]	; 0x34
   89b98:	e706      	b.n	899a8 <_svfprintf_r+0x16e0>
   89b9a:	2330      	movs	r3, #48	; 0x30
   89b9c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   89ba0:	2378      	movs	r3, #120	; 0x78
   89ba2:	e6f5      	b.n	89990 <_svfprintf_r+0x16c8>
   89ba4:	9b07      	ldr	r3, [sp, #28]
   89ba6:	9308      	str	r3, [sp, #32]
   89ba8:	f7ff b894 	b.w	88cd4 <_svfprintf_r+0xa0c>
   89bac:	464a      	mov	r2, r9
   89bae:	46d1      	mov	r9, sl
   89bb0:	4692      	mov	sl, r2
   89bb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89bb4:	3301      	adds	r3, #1
   89bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89bb8:	442c      	add	r4, r5
   89bba:	2b07      	cmp	r3, #7
   89bbc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89bc0:	e9c8 2500 	strd	r2, r5, [r8]
   89bc4:	f77f a8b8 	ble.w	88d38 <_svfprintf_r+0xa70>
   89bc8:	4651      	mov	r1, sl
   89bca:	4648      	mov	r0, r9
   89bcc:	aa2a      	add	r2, sp, #168	; 0xa8
   89bce:	f003 ffc1 	bl	8db54 <__ssprint_r>
   89bd2:	2800      	cmp	r0, #0
   89bd4:	f47e afc0 	bne.w	88b58 <_svfprintf_r+0x890>
   89bd8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89bdc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89be0:	f7ff b8ac 	b.w	88d3c <_svfprintf_r+0xa74>
   89be4:	2b00      	cmp	r3, #0
   89be6:	bf08      	it	eq
   89be8:	2301      	moveq	r3, #1
   89bea:	9309      	str	r3, [sp, #36]	; 0x24
   89bec:	9b07      	ldr	r3, [sp, #28]
   89bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   89bf2:	9312      	str	r3, [sp, #72]	; 0x48
   89bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89bf6:	2b00      	cmp	r3, #0
   89bf8:	930c      	str	r3, [sp, #48]	; 0x30
   89bfa:	f2c0 80bd 	blt.w	89d78 <_svfprintf_r+0x1ab0>
   89bfe:	2402      	movs	r4, #2
   89c00:	9d09      	ldr	r5, [sp, #36]	; 0x24
   89c02:	a828      	add	r0, sp, #160	; 0xa0
   89c04:	aa25      	add	r2, sp, #148	; 0x94
   89c06:	ab24      	add	r3, sp, #144	; 0x90
   89c08:	e9cd 2003 	strd	r2, r0, [sp, #12]
   89c0c:	e9cd 4500 	strd	r4, r5, [sp]
   89c10:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   89c14:	9302      	str	r3, [sp, #8]
   89c16:	4622      	mov	r2, r4
   89c18:	462b      	mov	r3, r5
   89c1a:	4648      	mov	r0, r9
   89c1c:	911e      	str	r1, [sp, #120]	; 0x78
   89c1e:	f001 f91b 	bl	8ae58 <_dtoa_r>
   89c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89c24:	4607      	mov	r7, r0
   89c26:	930f      	str	r3, [sp, #60]	; 0x3c
   89c28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   89c2a:	940c      	str	r4, [sp, #48]	; 0x30
   89c2c:	930d      	str	r3, [sp, #52]	; 0x34
   89c2e:	e64a      	b.n	898c6 <_svfprintf_r+0x15fe>
   89c30:	2300      	movs	r3, #0
   89c32:	930d      	str	r3, [sp, #52]	; 0x34
   89c34:	e753      	b.n	89ade <_svfprintf_r+0x1816>
   89c36:	2667      	movs	r6, #103	; 0x67
   89c38:	991a      	ldr	r1, [sp, #104]	; 0x68
   89c3a:	780b      	ldrb	r3, [r1, #0]
   89c3c:	2bff      	cmp	r3, #255	; 0xff
   89c3e:	f000 80de 	beq.w	89dfe <_svfprintf_r+0x1b36>
   89c42:	2400      	movs	r4, #0
   89c44:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89c46:	4620      	mov	r0, r4
   89c48:	e003      	b.n	89c52 <_svfprintf_r+0x198a>
   89c4a:	3001      	adds	r0, #1
   89c4c:	3101      	adds	r1, #1
   89c4e:	2bff      	cmp	r3, #255	; 0xff
   89c50:	d008      	beq.n	89c64 <_svfprintf_r+0x199c>
   89c52:	4293      	cmp	r3, r2
   89c54:	da06      	bge.n	89c64 <_svfprintf_r+0x199c>
   89c56:	1ad2      	subs	r2, r2, r3
   89c58:	784b      	ldrb	r3, [r1, #1]
   89c5a:	2b00      	cmp	r3, #0
   89c5c:	d1f5      	bne.n	89c4a <_svfprintf_r+0x1982>
   89c5e:	780b      	ldrb	r3, [r1, #0]
   89c60:	3401      	adds	r4, #1
   89c62:	e7f4      	b.n	89c4e <_svfprintf_r+0x1986>
   89c64:	911a      	str	r1, [sp, #104]	; 0x68
   89c66:	9210      	str	r2, [sp, #64]	; 0x40
   89c68:	9016      	str	r0, [sp, #88]	; 0x58
   89c6a:	9412      	str	r4, [sp, #72]	; 0x48
   89c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89c6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   89c70:	990c      	ldr	r1, [sp, #48]	; 0x30
   89c72:	4413      	add	r3, r2
   89c74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   89c76:	fb02 1303 	mla	r3, r2, r3, r1
   89c7a:	930c      	str	r3, [sp, #48]	; 0x30
   89c7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   89c80:	9308      	str	r3, [sp, #32]
   89c82:	f7ff bab6 	b.w	891f2 <_svfprintf_r+0xf2a>
   89c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89c88:	2666      	movs	r6, #102	; 0x66
   89c8a:	18d3      	adds	r3, r2, r3
   89c8c:	4419      	add	r1, r3
   89c8e:	910c      	str	r1, [sp, #48]	; 0x30
   89c90:	e662      	b.n	89958 <_svfprintf_r+0x1690>
   89c92:	f106 020f 	add.w	r2, r6, #15
   89c96:	2101      	movs	r1, #1
   89c98:	b2d2      	uxtb	r2, r2
   89c9a:	f7ff ba4f 	b.w	8913c <_svfprintf_r+0xe74>
   89c9e:	2900      	cmp	r1, #0
   89ca0:	d167      	bne.n	89d72 <_svfprintf_r+0x1aaa>
   89ca2:	2230      	movs	r2, #48	; 0x30
   89ca4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   89ca8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   89cac:	3330      	adds	r3, #48	; 0x30
   89cae:	f802 3b01 	strb.w	r3, [r2], #1
   89cb2:	ab26      	add	r3, sp, #152	; 0x98
   89cb4:	1ad3      	subs	r3, r2, r3
   89cb6:	931b      	str	r3, [sp, #108]	; 0x6c
   89cb8:	f7ff ba83 	b.w	891c2 <_svfprintf_r+0xefa>
   89cbc:	0008eb30 	.word	0x0008eb30
   89cc0:	40300000 	.word	0x40300000
   89cc4:	3fe00000 	.word	0x3fe00000
   89cc8:	0008eb60 	.word	0x0008eb60
   89ccc:	aa24      	add	r2, sp, #144	; 0x90
   89cce:	980c      	ldr	r0, [sp, #48]	; 0x30
   89cd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89cd2:	f003 fe4d 	bl	8d970 <frexp>
   89cd6:	2200      	movs	r2, #0
   89cd8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   89cdc:	f004 fbd4 	bl	8e488 <__aeabi_dmul>
   89ce0:	4604      	mov	r4, r0
   89ce2:	460d      	mov	r5, r1
   89ce4:	2200      	movs	r2, #0
   89ce6:	2300      	movs	r3, #0
   89ce8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   89cec:	f004 fe34 	bl	8e958 <__aeabi_dcmpeq>
   89cf0:	b108      	cbz	r0, 89cf6 <_svfprintf_r+0x1a2e>
   89cf2:	2301      	movs	r3, #1
   89cf4:	9324      	str	r3, [sp, #144]	; 0x90
   89cf6:	4b44      	ldr	r3, [pc, #272]	; (89e08 <_svfprintf_r+0x1b40>)
   89cf8:	930c      	str	r3, [sp, #48]	; 0x30
   89cfa:	e684      	b.n	89a06 <_svfprintf_r+0x173e>
   89cfc:	2667      	movs	r6, #103	; 0x67
   89cfe:	e62e      	b.n	8995e <_svfprintf_r+0x1696>
   89d00:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89d04:	f7fe bcb9 	b.w	8867a <_svfprintf_r+0x3b2>
   89d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89d0a:	930c      	str	r3, [sp, #48]	; 0x30
   89d0c:	e57c      	b.n	89808 <_svfprintf_r+0x1540>
   89d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89d10:	2003      	movs	r0, #3
   89d12:	2b00      	cmp	r3, #0
   89d14:	bfb8      	it	lt
   89d16:	232d      	movlt	r3, #45	; 0x2d
   89d18:	f04f 0100 	mov.w	r1, #0
   89d1c:	bfba      	itte	lt
   89d1e:	461a      	movlt	r2, r3
   89d20:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   89d24:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   89d28:	4f38      	ldr	r7, [pc, #224]	; (89e0c <_svfprintf_r+0x1b44>)
   89d2a:	4b39      	ldr	r3, [pc, #228]	; (89e10 <_svfprintf_r+0x1b48>)
   89d2c:	9008      	str	r0, [sp, #32]
   89d2e:	910d      	str	r1, [sp, #52]	; 0x34
   89d30:	f7fe bce2 	b.w	886f8 <_svfprintf_r+0x430>
   89d34:	f1c3 0301 	rsb	r3, r3, #1
   89d38:	441a      	add	r2, r3
   89d3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   89d3e:	2667      	movs	r6, #103	; 0x67
   89d40:	920c      	str	r2, [sp, #48]	; 0x30
   89d42:	9308      	str	r3, [sp, #32]
   89d44:	e56c      	b.n	89820 <_svfprintf_r+0x1558>
   89d46:	2200      	movs	r2, #0
   89d48:	2300      	movs	r3, #0
   89d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   89d4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89d4e:	f004 fe03 	bl	8e958 <__aeabi_dcmpeq>
   89d52:	2800      	cmp	r0, #0
   89d54:	f47f addb 	bne.w	8990e <_svfprintf_r+0x1646>
   89d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d5a:	f1c3 0301 	rsb	r3, r3, #1
   89d5e:	9324      	str	r3, [sp, #144]	; 0x90
   89d60:	e5d6      	b.n	89910 <_svfprintf_r+0x1648>
   89d62:	992b      	ldr	r1, [sp, #172]	; 0xac
   89d64:	f7ff bb59 	b.w	8941a <_svfprintf_r+0x1152>
   89d68:	07e9      	lsls	r1, r5, #31
   89d6a:	f57f aa35 	bpl.w	891d8 <_svfprintf_r+0xf10>
   89d6e:	f7ff ba2f 	b.w	891d0 <_svfprintf_r+0xf08>
   89d72:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   89d76:	e799      	b.n	89cac <_svfprintf_r+0x19e4>
   89d78:	900d      	str	r0, [sp, #52]	; 0x34
   89d7a:	e6b0      	b.n	89ade <_svfprintf_r+0x1816>
   89d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89d7e:	f005 0501 	and.w	r5, r5, #1
   89d82:	4613      	mov	r3, r2
   89d84:	432b      	orrs	r3, r5
   89d86:	d104      	bne.n	89d92 <_svfprintf_r+0x1aca>
   89d88:	2301      	movs	r3, #1
   89d8a:	2666      	movs	r6, #102	; 0x66
   89d8c:	9308      	str	r3, [sp, #32]
   89d8e:	930c      	str	r3, [sp, #48]	; 0x30
   89d90:	e546      	b.n	89820 <_svfprintf_r+0x1558>
   89d92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89d94:	2666      	movs	r6, #102	; 0x66
   89d96:	3301      	adds	r3, #1
   89d98:	441a      	add	r2, r3
   89d9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   89d9e:	920c      	str	r2, [sp, #48]	; 0x30
   89da0:	9308      	str	r3, [sp, #32]
   89da2:	e53d      	b.n	89820 <_svfprintf_r+0x1558>
   89da4:	4b1b      	ldr	r3, [pc, #108]	; (89e14 <_svfprintf_r+0x1b4c>)
   89da6:	930f      	str	r3, [sp, #60]	; 0x3c
   89da8:	f7ff bbe9 	b.w	8957e <_svfprintf_r+0x12b6>
   89dac:	4a19      	ldr	r2, [pc, #100]	; (89e14 <_svfprintf_r+0x1b4c>)
   89dae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89db0:	920f      	str	r2, [sp, #60]	; 0x3c
   89db2:	e4b1      	b.n	89718 <_svfprintf_r+0x1450>
   89db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89db6:	e6dd      	b.n	89b74 <_svfprintf_r+0x18ac>
   89db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89dba:	f89b 6001 	ldrb.w	r6, [fp, #1]
   89dbe:	f853 0b04 	ldr.w	r0, [r3], #4
   89dc2:	4693      	mov	fp, r2
   89dc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89dc8:	9009      	str	r0, [sp, #36]	; 0x24
   89dca:	930e      	str	r3, [sp, #56]	; 0x38
   89dcc:	f7fe bac7 	b.w	8835e <_svfprintf_r+0x96>
   89dd0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89dd8:	f8aa 300c 	strh.w	r3, [sl, #12]
   89ddc:	f7fe bc4d 	b.w	8867a <_svfprintf_r+0x3b2>
   89de0:	4a0c      	ldr	r2, [pc, #48]	; (89e14 <_svfprintf_r+0x1b4c>)
   89de2:	920f      	str	r2, [sp, #60]	; 0x3c
   89de4:	e6e6      	b.n	89bb4 <_svfprintf_r+0x18ec>
   89de6:	230c      	movs	r3, #12
   89de8:	f04f 32ff 	mov.w	r2, #4294967295
   89dec:	f8c9 3000 	str.w	r3, [r9]
   89df0:	920a      	str	r2, [sp, #40]	; 0x28
   89df2:	f7fe bc49 	b.w	88688 <_svfprintf_r+0x3c0>
   89df6:	2302      	movs	r3, #2
   89df8:	931b      	str	r3, [sp, #108]	; 0x6c
   89dfa:	f7ff b9e2 	b.w	891c2 <_svfprintf_r+0xefa>
   89dfe:	2300      	movs	r3, #0
   89e00:	9312      	str	r3, [sp, #72]	; 0x48
   89e02:	9316      	str	r3, [sp, #88]	; 0x58
   89e04:	e732      	b.n	89c6c <_svfprintf_r+0x19a4>
   89e06:	bf00      	nop
   89e08:	0008eb1c 	.word	0x0008eb1c
   89e0c:	0008eb14 	.word	0x0008eb14
   89e10:	0008eb18 	.word	0x0008eb18
   89e14:	0008eb60 	.word	0x0008eb60

00089e18 <__sprint_r.part.0>:
   89e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   89e1e:	4690      	mov	r8, r2
   89e20:	049c      	lsls	r4, r3, #18
   89e22:	d52d      	bpl.n	89e80 <__sprint_r.part.0+0x68>
   89e24:	6893      	ldr	r3, [r2, #8]
   89e26:	6812      	ldr	r2, [r2, #0]
   89e28:	b343      	cbz	r3, 89e7c <__sprint_r.part.0+0x64>
   89e2a:	468b      	mov	fp, r1
   89e2c:	4606      	mov	r6, r0
   89e2e:	f102 0908 	add.w	r9, r2, #8
   89e32:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   89e36:	ea5f 079a 	movs.w	r7, sl, lsr #2
   89e3a:	d015      	beq.n	89e68 <__sprint_r.part.0+0x50>
   89e3c:	2400      	movs	r4, #0
   89e3e:	3d04      	subs	r5, #4
   89e40:	e001      	b.n	89e46 <__sprint_r.part.0+0x2e>
   89e42:	42a7      	cmp	r7, r4
   89e44:	d00e      	beq.n	89e64 <__sprint_r.part.0+0x4c>
   89e46:	465a      	mov	r2, fp
   89e48:	4630      	mov	r0, r6
   89e4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   89e4e:	f002 f8fb 	bl	8c048 <_fputwc_r>
   89e52:	1c43      	adds	r3, r0, #1
   89e54:	f104 0401 	add.w	r4, r4, #1
   89e58:	d1f3      	bne.n	89e42 <__sprint_r.part.0+0x2a>
   89e5a:	2300      	movs	r3, #0
   89e5c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   89e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89e68:	f02a 0a03 	bic.w	sl, sl, #3
   89e6c:	eba3 030a 	sub.w	r3, r3, sl
   89e70:	f8c8 3008 	str.w	r3, [r8, #8]
   89e74:	f109 0908 	add.w	r9, r9, #8
   89e78:	2b00      	cmp	r3, #0
   89e7a:	d1da      	bne.n	89e32 <__sprint_r.part.0+0x1a>
   89e7c:	2000      	movs	r0, #0
   89e7e:	e7ec      	b.n	89e5a <__sprint_r.part.0+0x42>
   89e80:	f002 fa6c 	bl	8c35c <__sfvwrite_r>
   89e84:	2300      	movs	r3, #0
   89e86:	e9c8 3301 	strd	r3, r3, [r8, #4]
   89e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e8e:	bf00      	nop

00089e90 <_vfiprintf_r>:
   89e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e94:	b0bb      	sub	sp, #236	; 0xec
   89e96:	461c      	mov	r4, r3
   89e98:	4689      	mov	r9, r1
   89e9a:	4690      	mov	r8, r2
   89e9c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   89ea0:	b118      	cbz	r0, 89eaa <_vfiprintf_r+0x1a>
   89ea2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89ea4:	2b00      	cmp	r3, #0
   89ea6:	f000 827a 	beq.w	8a39e <_vfiprintf_r+0x50e>
   89eaa:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89eae:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   89eb2:	07de      	lsls	r6, r3, #31
   89eb4:	b28a      	uxth	r2, r1
   89eb6:	d402      	bmi.n	89ebe <_vfiprintf_r+0x2e>
   89eb8:	058d      	lsls	r5, r1, #22
   89eba:	f140 851a 	bpl.w	8a8f2 <_vfiprintf_r+0xa62>
   89ebe:	0490      	lsls	r0, r2, #18
   89ec0:	d40a      	bmi.n	89ed8 <_vfiprintf_r+0x48>
   89ec2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89ec6:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   89eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   89ece:	f8a9 200c 	strh.w	r2, [r9, #12]
   89ed2:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   89ed6:	b292      	uxth	r2, r2
   89ed8:	0711      	lsls	r1, r2, #28
   89eda:	f140 80f6 	bpl.w	8a0ca <_vfiprintf_r+0x23a>
   89ede:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89ee2:	2b00      	cmp	r3, #0
   89ee4:	f000 80f1 	beq.w	8a0ca <_vfiprintf_r+0x23a>
   89ee8:	f002 031a 	and.w	r3, r2, #26
   89eec:	2b0a      	cmp	r3, #10
   89eee:	f000 80fa 	beq.w	8a0e6 <_vfiprintf_r+0x256>
   89ef2:	2300      	movs	r3, #0
   89ef4:	46cb      	mov	fp, r9
   89ef6:	e9cd 3308 	strd	r3, r3, [sp, #32]
   89efa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   89efe:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   89f02:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89f06:	9303      	str	r3, [sp, #12]
   89f08:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   89f0c:	f898 3000 	ldrb.w	r3, [r8]
   89f10:	2b00      	cmp	r3, #0
   89f12:	f000 81ed 	beq.w	8a2f0 <_vfiprintf_r+0x460>
   89f16:	4644      	mov	r4, r8
   89f18:	e004      	b.n	89f24 <_vfiprintf_r+0x94>
   89f1a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   89f1e:	2b00      	cmp	r3, #0
   89f20:	f000 8127 	beq.w	8a172 <_vfiprintf_r+0x2e2>
   89f24:	2b25      	cmp	r3, #37	; 0x25
   89f26:	d1f8      	bne.n	89f1a <_vfiprintf_r+0x8a>
   89f28:	ebb4 0508 	subs.w	r5, r4, r8
   89f2c:	f040 8125 	bne.w	8a17a <_vfiprintf_r+0x2ea>
   89f30:	7823      	ldrb	r3, [r4, #0]
   89f32:	2b00      	cmp	r3, #0
   89f34:	f000 81dc 	beq.w	8a2f0 <_vfiprintf_r+0x460>
   89f38:	f04f 0200 	mov.w	r2, #0
   89f3c:	2300      	movs	r3, #0
   89f3e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89f42:	f04f 32ff 	mov.w	r2, #4294967295
   89f46:	252b      	movs	r5, #43	; 0x2b
   89f48:	461f      	mov	r7, r3
   89f4a:	9302      	str	r3, [sp, #8]
   89f4c:	7863      	ldrb	r3, [r4, #1]
   89f4e:	f104 0801 	add.w	r8, r4, #1
   89f52:	9200      	str	r2, [sp, #0]
   89f54:	f108 0801 	add.w	r8, r8, #1
   89f58:	f1a3 0220 	sub.w	r2, r3, #32
   89f5c:	2a5a      	cmp	r2, #90	; 0x5a
   89f5e:	f200 8141 	bhi.w	8a1e4 <_vfiprintf_r+0x354>
   89f62:	e8df f012 	tbh	[pc, r2, lsl #1]
   89f66:	0272      	.short	0x0272
   89f68:	013f013f 	.word	0x013f013f
   89f6c:	013f026d 	.word	0x013f026d
   89f70:	013f013f 	.word	0x013f013f
   89f74:	013f024b 	.word	0x013f024b
   89f78:	006a013f 	.word	0x006a013f
   89f7c:	013f0227 	.word	0x013f0227
   89f80:	02310222 	.word	0x02310222
   89f84:	022c013f 	.word	0x022c013f
   89f88:	005b005b 	.word	0x005b005b
   89f8c:	005b005b 	.word	0x005b005b
   89f90:	005b005b 	.word	0x005b005b
   89f94:	005b005b 	.word	0x005b005b
   89f98:	013f005b 	.word	0x013f005b
   89f9c:	013f013f 	.word	0x013f013f
   89fa0:	013f013f 	.word	0x013f013f
   89fa4:	013f013f 	.word	0x013f013f
   89fa8:	013f013f 	.word	0x013f013f
   89fac:	007a020e 	.word	0x007a020e
   89fb0:	013f013f 	.word	0x013f013f
   89fb4:	013f013f 	.word	0x013f013f
   89fb8:	013f013f 	.word	0x013f013f
   89fbc:	013f013f 	.word	0x013f013f
   89fc0:	013f013f 	.word	0x013f013f
   89fc4:	013f00d7 	.word	0x013f00d7
   89fc8:	013f013f 	.word	0x013f013f
   89fcc:	013f01f2 	.word	0x013f01f2
   89fd0:	013f0297 	.word	0x013f0297
   89fd4:	0500013f 	.word	0x0500013f
   89fd8:	013f013f 	.word	0x013f013f
   89fdc:	013f013f 	.word	0x013f013f
   89fe0:	013f013f 	.word	0x013f013f
   89fe4:	013f013f 	.word	0x013f013f
   89fe8:	013f013f 	.word	0x013f013f
   89fec:	007c020e 	.word	0x007c020e
   89ff0:	013f013f 	.word	0x013f013f
   89ff4:	028a013f 	.word	0x028a013f
   89ff8:	0075007c 	.word	0x0075007c
   89ffc:	027d013f 	.word	0x027d013f
   8a000:	02b6013f 	.word	0x02b6013f
   8a004:	02a600d9 	.word	0x02a600d9
   8a008:	013f0075 	.word	0x013f0075
   8a00c:	007201f2 	.word	0x007201f2
   8a010:	013f04fe 	.word	0x013f04fe
   8a014:	051c013f 	.word	0x051c013f
   8a018:	0072013f 	.word	0x0072013f
   8a01c:	2100      	movs	r1, #0
   8a01e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a022:	f818 3b01 	ldrb.w	r3, [r8], #1
   8a026:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8a02a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8a02e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a032:	2a09      	cmp	r2, #9
   8a034:	d9f5      	bls.n	8a022 <_vfiprintf_r+0x192>
   8a036:	9102      	str	r1, [sp, #8]
   8a038:	e78e      	b.n	89f58 <_vfiprintf_r+0xc8>
   8a03a:	9b04      	ldr	r3, [sp, #16]
   8a03c:	f853 2b04 	ldr.w	r2, [r3], #4
   8a040:	2a00      	cmp	r2, #0
   8a042:	9202      	str	r2, [sp, #8]
   8a044:	9304      	str	r3, [sp, #16]
   8a046:	f2c0 81ad 	blt.w	8a3a4 <_vfiprintf_r+0x514>
   8a04a:	f898 3000 	ldrb.w	r3, [r8]
   8a04e:	e781      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a050:	f898 3000 	ldrb.w	r3, [r8]
   8a054:	f047 0720 	orr.w	r7, r7, #32
   8a058:	e77c      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a05a:	f047 0710 	orr.w	r7, r7, #16
   8a05e:	06bc      	lsls	r4, r7, #26
   8a060:	f140 8158 	bpl.w	8a314 <_vfiprintf_r+0x484>
   8a064:	9c04      	ldr	r4, [sp, #16]
   8a066:	3407      	adds	r4, #7
   8a068:	f024 0307 	bic.w	r3, r4, #7
   8a06c:	4619      	mov	r1, r3
   8a06e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8a072:	4614      	mov	r4, r2
   8a074:	461d      	mov	r5, r3
   8a076:	9104      	str	r1, [sp, #16]
   8a078:	2a00      	cmp	r2, #0
   8a07a:	f173 0300 	sbcs.w	r3, r3, #0
   8a07e:	f2c0 841e 	blt.w	8a8be <_vfiprintf_r+0xa2e>
   8a082:	9b00      	ldr	r3, [sp, #0]
   8a084:	3301      	adds	r3, #1
   8a086:	f000 84f0 	beq.w	8aa6a <_vfiprintf_r+0xbda>
   8a08a:	ea54 0305 	orrs.w	r3, r4, r5
   8a08e:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8a092:	f000 83fc 	beq.w	8a88e <_vfiprintf_r+0x9fe>
   8a096:	2d00      	cmp	r5, #0
   8a098:	bf08      	it	eq
   8a09a:	2c0a      	cmpeq	r4, #10
   8a09c:	f080 84a9 	bcs.w	8a9f2 <_vfiprintf_r+0xb62>
   8a0a0:	2301      	movs	r3, #1
   8a0a2:	464f      	mov	r7, r9
   8a0a4:	3430      	adds	r4, #48	; 0x30
   8a0a6:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8a0aa:	9301      	str	r3, [sp, #4]
   8a0ac:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8a0b0:	e9dd 2100 	ldrd	r2, r1, [sp]
   8a0b4:	428a      	cmp	r2, r1
   8a0b6:	bfb8      	it	lt
   8a0b8:	460a      	movlt	r2, r1
   8a0ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8a0be:	4615      	mov	r5, r2
   8a0c0:	2b00      	cmp	r3, #0
   8a0c2:	f000 809d 	beq.w	8a200 <_vfiprintf_r+0x370>
   8a0c6:	3501      	adds	r5, #1
   8a0c8:	e09a      	b.n	8a200 <_vfiprintf_r+0x370>
   8a0ca:	4649      	mov	r1, r9
   8a0cc:	9805      	ldr	r0, [sp, #20]
   8a0ce:	f000 fdb9 	bl	8ac44 <__swsetup_r>
   8a0d2:	2800      	cmp	r0, #0
   8a0d4:	f040 854a 	bne.w	8ab6c <_vfiprintf_r+0xcdc>
   8a0d8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8a0dc:	f002 031a 	and.w	r3, r2, #26
   8a0e0:	2b0a      	cmp	r3, #10
   8a0e2:	f47f af06 	bne.w	89ef2 <_vfiprintf_r+0x62>
   8a0e6:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8a0ea:	2b00      	cmp	r3, #0
   8a0ec:	f6ff af01 	blt.w	89ef2 <_vfiprintf_r+0x62>
   8a0f0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8a0f4:	07de      	lsls	r6, r3, #31
   8a0f6:	d402      	bmi.n	8a0fe <_vfiprintf_r+0x26e>
   8a0f8:	0595      	lsls	r5, r2, #22
   8a0fa:	f140 850e 	bpl.w	8ab1a <_vfiprintf_r+0xc8a>
   8a0fe:	4623      	mov	r3, r4
   8a100:	4642      	mov	r2, r8
   8a102:	4649      	mov	r1, r9
   8a104:	9805      	ldr	r0, [sp, #20]
   8a106:	f000 fd59 	bl	8abbc <__sbprintf>
   8a10a:	9003      	str	r0, [sp, #12]
   8a10c:	9803      	ldr	r0, [sp, #12]
   8a10e:	b03b      	add	sp, #236	; 0xec
   8a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a114:	f047 0710 	orr.w	r7, r7, #16
   8a118:	06b8      	lsls	r0, r7, #26
   8a11a:	9c04      	ldr	r4, [sp, #16]
   8a11c:	f140 8109 	bpl.w	8a332 <_vfiprintf_r+0x4a2>
   8a120:	3407      	adds	r4, #7
   8a122:	f024 0307 	bic.w	r3, r4, #7
   8a126:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8a12a:	9304      	str	r3, [sp, #16]
   8a12c:	2300      	movs	r3, #0
   8a12e:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8a132:	f04f 0200 	mov.w	r2, #0
   8a136:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8a13a:	9a00      	ldr	r2, [sp, #0]
   8a13c:	4611      	mov	r1, r2
   8a13e:	3101      	adds	r1, #1
   8a140:	f000 81db 	beq.w	8a4fa <_vfiprintf_r+0x66a>
   8a144:	ea54 0105 	orrs.w	r1, r4, r5
   8a148:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   8a14c:	f040 81d4 	bne.w	8a4f8 <_vfiprintf_r+0x668>
   8a150:	2a00      	cmp	r2, #0
   8a152:	f040 848d 	bne.w	8aa70 <_vfiprintf_r+0xbe0>
   8a156:	2b00      	cmp	r3, #0
   8a158:	f040 839e 	bne.w	8a898 <_vfiprintf_r+0xa08>
   8a15c:	f019 0301 	ands.w	r3, r9, #1
   8a160:	9301      	str	r3, [sp, #4]
   8a162:	f000 83c3 	beq.w	8a8ec <_vfiprintf_r+0xa5c>
   8a166:	2330      	movs	r3, #48	; 0x30
   8a168:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8a16c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   8a170:	e79e      	b.n	8a0b0 <_vfiprintf_r+0x220>
   8a172:	ebb4 0508 	subs.w	r5, r4, r8
   8a176:	f000 80bb 	beq.w	8a2f0 <_vfiprintf_r+0x460>
   8a17a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a17e:	3301      	adds	r3, #1
   8a180:	442a      	add	r2, r5
   8a182:	2b07      	cmp	r3, #7
   8a184:	e9ca 8500 	strd	r8, r5, [sl]
   8a188:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   8a18c:	dc06      	bgt.n	8a19c <_vfiprintf_r+0x30c>
   8a18e:	f10a 0a08 	add.w	sl, sl, #8
   8a192:	9a03      	ldr	r2, [sp, #12]
   8a194:	7823      	ldrb	r3, [r4, #0]
   8a196:	442a      	add	r2, r5
   8a198:	9203      	str	r2, [sp, #12]
   8a19a:	e6ca      	b.n	89f32 <_vfiprintf_r+0xa2>
   8a19c:	2a00      	cmp	r2, #0
   8a19e:	f000 8372 	beq.w	8a886 <_vfiprintf_r+0x9f6>
   8a1a2:	4659      	mov	r1, fp
   8a1a4:	9805      	ldr	r0, [sp, #20]
   8a1a6:	aa0e      	add	r2, sp, #56	; 0x38
   8a1a8:	f7ff fe36 	bl	89e18 <__sprint_r.part.0>
   8a1ac:	b950      	cbnz	r0, 8a1c4 <_vfiprintf_r+0x334>
   8a1ae:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1b2:	e7ee      	b.n	8a192 <_vfiprintf_r+0x302>
   8a1b4:	4659      	mov	r1, fp
   8a1b6:	9805      	ldr	r0, [sp, #20]
   8a1b8:	aa0e      	add	r2, sp, #56	; 0x38
   8a1ba:	f7ff fe2d 	bl	89e18 <__sprint_r.part.0>
   8a1be:	2800      	cmp	r0, #0
   8a1c0:	f000 808d 	beq.w	8a2de <_vfiprintf_r+0x44e>
   8a1c4:	46d9      	mov	r9, fp
   8a1c6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8a1ca:	f013 0f01 	tst.w	r3, #1
   8a1ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8a1d2:	f000 8095 	beq.w	8a300 <_vfiprintf_r+0x470>
   8a1d6:	065b      	lsls	r3, r3, #25
   8a1d8:	f100 84d4 	bmi.w	8ab84 <_vfiprintf_r+0xcf4>
   8a1dc:	9803      	ldr	r0, [sp, #12]
   8a1de:	b03b      	add	sp, #236	; 0xec
   8a1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a1e4:	2b00      	cmp	r3, #0
   8a1e6:	f000 8083 	beq.w	8a2f0 <_vfiprintf_r+0x460>
   8a1ea:	2501      	movs	r5, #1
   8a1ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8a1f0:	f04f 0300 	mov.w	r3, #0
   8a1f4:	9501      	str	r5, [sp, #4]
   8a1f6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a1fa:	ae21      	add	r6, sp, #132	; 0x84
   8a1fc:	2300      	movs	r3, #0
   8a1fe:	9300      	str	r3, [sp, #0]
   8a200:	f017 0302 	ands.w	r3, r7, #2
   8a204:	9307      	str	r3, [sp, #28]
   8a206:	bf18      	it	ne
   8a208:	3502      	addne	r5, #2
   8a20a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8a20e:	9306      	str	r3, [sp, #24]
   8a210:	d104      	bne.n	8a21c <_vfiprintf_r+0x38c>
   8a212:	9b02      	ldr	r3, [sp, #8]
   8a214:	1b5c      	subs	r4, r3, r5
   8a216:	2c00      	cmp	r4, #0
   8a218:	f300 8274 	bgt.w	8a704 <_vfiprintf_r+0x874>
   8a21c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a220:	1c48      	adds	r0, r1, #1
   8a222:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   8a226:	b174      	cbz	r4, 8a246 <_vfiprintf_r+0x3b6>
   8a228:	2101      	movs	r1, #1
   8a22a:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   8a22e:	440a      	add	r2, r1
   8a230:	2807      	cmp	r0, #7
   8a232:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8a236:	e9ca 4100 	strd	r4, r1, [sl]
   8a23a:	f300 8246 	bgt.w	8a6ca <_vfiprintf_r+0x83a>
   8a23e:	4601      	mov	r1, r0
   8a240:	f10a 0a08 	add.w	sl, sl, #8
   8a244:	3001      	adds	r0, #1
   8a246:	9b07      	ldr	r3, [sp, #28]
   8a248:	b1c3      	cbz	r3, 8a27c <_vfiprintf_r+0x3ec>
   8a24a:	2102      	movs	r1, #2
   8a24c:	ab0d      	add	r3, sp, #52	; 0x34
   8a24e:	440a      	add	r2, r1
   8a250:	2807      	cmp	r0, #7
   8a252:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8a256:	e9ca 3100 	strd	r3, r1, [sl]
   8a25a:	f340 824e 	ble.w	8a6fa <_vfiprintf_r+0x86a>
   8a25e:	2a00      	cmp	r2, #0
   8a260:	f000 830c 	beq.w	8a87c <_vfiprintf_r+0x9ec>
   8a264:	4659      	mov	r1, fp
   8a266:	9805      	ldr	r0, [sp, #20]
   8a268:	aa0e      	add	r2, sp, #56	; 0x38
   8a26a:	f7ff fdd5 	bl	89e18 <__sprint_r.part.0>
   8a26e:	2800      	cmp	r0, #0
   8a270:	d1a8      	bne.n	8a1c4 <_vfiprintf_r+0x334>
   8a272:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a276:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a27a:	1c48      	adds	r0, r1, #1
   8a27c:	9b06      	ldr	r3, [sp, #24]
   8a27e:	2b80      	cmp	r3, #128	; 0x80
   8a280:	f000 817e 	beq.w	8a580 <_vfiprintf_r+0x6f0>
   8a284:	e9dd 3400 	ldrd	r3, r4, [sp]
   8a288:	1b1c      	subs	r4, r3, r4
   8a28a:	2c00      	cmp	r4, #0
   8a28c:	f300 81d3 	bgt.w	8a636 <_vfiprintf_r+0x7a6>
   8a290:	9b01      	ldr	r3, [sp, #4]
   8a292:	2807      	cmp	r0, #7
   8a294:	441a      	add	r2, r3
   8a296:	e9ca 6300 	strd	r6, r3, [sl]
   8a29a:	9210      	str	r2, [sp, #64]	; 0x40
   8a29c:	900f      	str	r0, [sp, #60]	; 0x3c
   8a29e:	f340 816c 	ble.w	8a57a <_vfiprintf_r+0x6ea>
   8a2a2:	2a00      	cmp	r2, #0
   8a2a4:	f000 8276 	beq.w	8a794 <_vfiprintf_r+0x904>
   8a2a8:	4659      	mov	r1, fp
   8a2aa:	9805      	ldr	r0, [sp, #20]
   8a2ac:	aa0e      	add	r2, sp, #56	; 0x38
   8a2ae:	f7ff fdb3 	bl	89e18 <__sprint_r.part.0>
   8a2b2:	2800      	cmp	r0, #0
   8a2b4:	d186      	bne.n	8a1c4 <_vfiprintf_r+0x334>
   8a2b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a2b8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a2bc:	0779      	lsls	r1, r7, #29
   8a2be:	d504      	bpl.n	8a2ca <_vfiprintf_r+0x43a>
   8a2c0:	9b02      	ldr	r3, [sp, #8]
   8a2c2:	1b5c      	subs	r4, r3, r5
   8a2c4:	2c00      	cmp	r4, #0
   8a2c6:	f300 826e 	bgt.w	8a7a6 <_vfiprintf_r+0x916>
   8a2ca:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8a2ce:	42a9      	cmp	r1, r5
   8a2d0:	bfac      	ite	ge
   8a2d2:	185b      	addge	r3, r3, r1
   8a2d4:	195b      	addlt	r3, r3, r5
   8a2d6:	9303      	str	r3, [sp, #12]
   8a2d8:	2a00      	cmp	r2, #0
   8a2da:	f47f af6b 	bne.w	8a1b4 <_vfiprintf_r+0x324>
   8a2de:	2300      	movs	r3, #0
   8a2e0:	930f      	str	r3, [sp, #60]	; 0x3c
   8a2e2:	f898 3000 	ldrb.w	r3, [r8]
   8a2e6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a2ea:	2b00      	cmp	r3, #0
   8a2ec:	f47f ae13 	bne.w	89f16 <_vfiprintf_r+0x86>
   8a2f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8a2f2:	46d9      	mov	r9, fp
   8a2f4:	2b00      	cmp	r3, #0
   8a2f6:	f040 8426 	bne.w	8ab46 <_vfiprintf_r+0xcb6>
   8a2fa:	2300      	movs	r3, #0
   8a2fc:	930f      	str	r3, [sp, #60]	; 0x3c
   8a2fe:	e762      	b.n	8a1c6 <_vfiprintf_r+0x336>
   8a300:	059a      	lsls	r2, r3, #22
   8a302:	f53f af68 	bmi.w	8a1d6 <_vfiprintf_r+0x346>
   8a306:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a30a:	f002 f9d1 	bl	8c6b0 <__retarget_lock_release_recursive>
   8a30e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8a312:	e760      	b.n	8a1d6 <_vfiprintf_r+0x346>
   8a314:	9b04      	ldr	r3, [sp, #16]
   8a316:	06f8      	lsls	r0, r7, #27
   8a318:	f853 4b04 	ldr.w	r4, [r3], #4
   8a31c:	f100 8308 	bmi.w	8a930 <_vfiprintf_r+0xaa0>
   8a320:	0679      	lsls	r1, r7, #25
   8a322:	f140 8302 	bpl.w	8a92a <_vfiprintf_r+0xa9a>
   8a326:	b224      	sxth	r4, r4
   8a328:	17e5      	asrs	r5, r4, #31
   8a32a:	9304      	str	r3, [sp, #16]
   8a32c:	4622      	mov	r2, r4
   8a32e:	462b      	mov	r3, r5
   8a330:	e6a2      	b.n	8a078 <_vfiprintf_r+0x1e8>
   8a332:	f854 3b04 	ldr.w	r3, [r4], #4
   8a336:	06f9      	lsls	r1, r7, #27
   8a338:	9404      	str	r4, [sp, #16]
   8a33a:	f100 82f3 	bmi.w	8a924 <_vfiprintf_r+0xa94>
   8a33e:	067a      	lsls	r2, r7, #25
   8a340:	f140 82ed 	bpl.w	8a91e <_vfiprintf_r+0xa8e>
   8a344:	2500      	movs	r5, #0
   8a346:	b29c      	uxth	r4, r3
   8a348:	e6f0      	b.n	8a12c <_vfiprintf_r+0x29c>
   8a34a:	f04f 0300 	mov.w	r3, #0
   8a34e:	9c04      	ldr	r4, [sp, #16]
   8a350:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a354:	f854 6b04 	ldr.w	r6, [r4], #4
   8a358:	2e00      	cmp	r6, #0
   8a35a:	f000 8397 	beq.w	8aa8c <_vfiprintf_r+0xbfc>
   8a35e:	9a00      	ldr	r2, [sp, #0]
   8a360:	4613      	mov	r3, r2
   8a362:	3301      	adds	r3, #1
   8a364:	f000 831e 	beq.w	8a9a4 <_vfiprintf_r+0xb14>
   8a368:	2100      	movs	r1, #0
   8a36a:	4630      	mov	r0, r6
   8a36c:	f002 fcde 	bl	8cd2c <memchr>
   8a370:	2800      	cmp	r0, #0
   8a372:	f000 83d8 	beq.w	8ab26 <_vfiprintf_r+0xc96>
   8a376:	1b83      	subs	r3, r0, r6
   8a378:	9301      	str	r3, [sp, #4]
   8a37a:	2300      	movs	r3, #0
   8a37c:	9404      	str	r4, [sp, #16]
   8a37e:	9300      	str	r3, [sp, #0]
   8a380:	e696      	b.n	8a0b0 <_vfiprintf_r+0x220>
   8a382:	2501      	movs	r5, #1
   8a384:	f04f 0200 	mov.w	r2, #0
   8a388:	9c04      	ldr	r4, [sp, #16]
   8a38a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8a38e:	f854 3b04 	ldr.w	r3, [r4], #4
   8a392:	9501      	str	r5, [sp, #4]
   8a394:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8a398:	9404      	str	r4, [sp, #16]
   8a39a:	ae21      	add	r6, sp, #132	; 0x84
   8a39c:	e72e      	b.n	8a1fc <_vfiprintf_r+0x36c>
   8a39e:	f001 fdb3 	bl	8bf08 <__sinit>
   8a3a2:	e582      	b.n	89eaa <_vfiprintf_r+0x1a>
   8a3a4:	9b02      	ldr	r3, [sp, #8]
   8a3a6:	425b      	negs	r3, r3
   8a3a8:	9302      	str	r3, [sp, #8]
   8a3aa:	f898 3000 	ldrb.w	r3, [r8]
   8a3ae:	f047 0704 	orr.w	r7, r7, #4
   8a3b2:	e5cf      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a3b4:	f898 3000 	ldrb.w	r3, [r8]
   8a3b8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   8a3bc:	e5ca      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a3be:	f898 3000 	ldrb.w	r3, [r8]
   8a3c2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8a3c6:	e5c5      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a3c8:	4641      	mov	r1, r8
   8a3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a3ce:	2b2a      	cmp	r3, #42	; 0x2a
   8a3d0:	f000 83dd 	beq.w	8ab8e <_vfiprintf_r+0xcfe>
   8a3d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a3d8:	2a09      	cmp	r2, #9
   8a3da:	4688      	mov	r8, r1
   8a3dc:	bf98      	it	ls
   8a3de:	2100      	movls	r1, #0
   8a3e0:	f200 83ad 	bhi.w	8ab3e <_vfiprintf_r+0xcae>
   8a3e4:	f818 3b01 	ldrb.w	r3, [r8], #1
   8a3e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8a3ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8a3f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a3f4:	2a09      	cmp	r2, #9
   8a3f6:	d9f5      	bls.n	8a3e4 <_vfiprintf_r+0x554>
   8a3f8:	9100      	str	r1, [sp, #0]
   8a3fa:	e5ad      	b.n	89f58 <_vfiprintf_r+0xc8>
   8a3fc:	9c05      	ldr	r4, [sp, #20]
   8a3fe:	4620      	mov	r0, r4
   8a400:	f002 f94c 	bl	8c69c <_localeconv_r>
   8a404:	6843      	ldr	r3, [r0, #4]
   8a406:	4618      	mov	r0, r3
   8a408:	930a      	str	r3, [sp, #40]	; 0x28
   8a40a:	f003 fb41 	bl	8da90 <strlen>
   8a40e:	4603      	mov	r3, r0
   8a410:	4620      	mov	r0, r4
   8a412:	930b      	str	r3, [sp, #44]	; 0x2c
   8a414:	461c      	mov	r4, r3
   8a416:	f002 f941 	bl	8c69c <_localeconv_r>
   8a41a:	6882      	ldr	r2, [r0, #8]
   8a41c:	9209      	str	r2, [sp, #36]	; 0x24
   8a41e:	2c00      	cmp	r4, #0
   8a420:	f43f ae13 	beq.w	8a04a <_vfiprintf_r+0x1ba>
   8a424:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a426:	2b00      	cmp	r3, #0
   8a428:	f43f ae0f 	beq.w	8a04a <_vfiprintf_r+0x1ba>
   8a42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a42e:	781b      	ldrb	r3, [r3, #0]
   8a430:	2b00      	cmp	r3, #0
   8a432:	f43f ae0a 	beq.w	8a04a <_vfiprintf_r+0x1ba>
   8a436:	f898 3000 	ldrb.w	r3, [r8]
   8a43a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   8a43e:	e589      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a440:	f898 3000 	ldrb.w	r3, [r8]
   8a444:	f047 0701 	orr.w	r7, r7, #1
   8a448:	e584      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a44a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8a44e:	2b00      	cmp	r3, #0
   8a450:	f47f adfb 	bne.w	8a04a <_vfiprintf_r+0x1ba>
   8a454:	2320      	movs	r3, #32
   8a456:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a45a:	f898 3000 	ldrb.w	r3, [r8]
   8a45e:	e579      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a460:	f898 3000 	ldrb.w	r3, [r8]
   8a464:	2b6c      	cmp	r3, #108	; 0x6c
   8a466:	bf03      	ittte	eq
   8a468:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   8a46c:	f047 0720 	orreq.w	r7, r7, #32
   8a470:	f108 0801 	addeq.w	r8, r8, #1
   8a474:	f047 0710 	orrne.w	r7, r7, #16
   8a478:	e56c      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a47a:	f898 3000 	ldrb.w	r3, [r8]
   8a47e:	2b68      	cmp	r3, #104	; 0x68
   8a480:	bf03      	ittte	eq
   8a482:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   8a486:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   8a48a:	f108 0801 	addeq.w	r8, r8, #1
   8a48e:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8a492:	e55f      	b.n	89f54 <_vfiprintf_r+0xc4>
   8a494:	f047 0910 	orr.w	r9, r7, #16
   8a498:	f019 0f20 	tst.w	r9, #32
   8a49c:	9c04      	ldr	r4, [sp, #16]
   8a49e:	f000 8200 	beq.w	8a8a2 <_vfiprintf_r+0xa12>
   8a4a2:	3407      	adds	r4, #7
   8a4a4:	f024 0307 	bic.w	r3, r4, #7
   8a4a8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8a4ac:	9304      	str	r3, [sp, #16]
   8a4ae:	2301      	movs	r3, #1
   8a4b0:	e63f      	b.n	8a132 <_vfiprintf_r+0x2a2>
   8a4b2:	f647 0330 	movw	r3, #30768	; 0x7830
   8a4b6:	9c04      	ldr	r4, [sp, #16]
   8a4b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   8a4bc:	f854 2b04 	ldr.w	r2, [r4], #4
   8a4c0:	4bbf      	ldr	r3, [pc, #764]	; (8a7c0 <_vfiprintf_r+0x930>)
   8a4c2:	9404      	str	r4, [sp, #16]
   8a4c4:	9308      	str	r3, [sp, #32]
   8a4c6:	4614      	mov	r4, r2
   8a4c8:	2500      	movs	r5, #0
   8a4ca:	2302      	movs	r3, #2
   8a4cc:	f047 0902 	orr.w	r9, r7, #2
   8a4d0:	e62f      	b.n	8a132 <_vfiprintf_r+0x2a2>
   8a4d2:	06bb      	lsls	r3, r7, #26
   8a4d4:	f100 8232 	bmi.w	8a93c <_vfiprintf_r+0xaac>
   8a4d8:	06fe      	lsls	r6, r7, #27
   8a4da:	f100 82cf 	bmi.w	8aa7c <_vfiprintf_r+0xbec>
   8a4de:	067d      	lsls	r5, r7, #25
   8a4e0:	f100 8301 	bmi.w	8aae6 <_vfiprintf_r+0xc56>
   8a4e4:	05bc      	lsls	r4, r7, #22
   8a4e6:	f140 82c9 	bpl.w	8aa7c <_vfiprintf_r+0xbec>
   8a4ea:	9c04      	ldr	r4, [sp, #16]
   8a4ec:	9a03      	ldr	r2, [sp, #12]
   8a4ee:	f854 3b04 	ldr.w	r3, [r4], #4
   8a4f2:	701a      	strb	r2, [r3, #0]
   8a4f4:	9404      	str	r4, [sp, #16]
   8a4f6:	e509      	b.n	89f0c <_vfiprintf_r+0x7c>
   8a4f8:	46b9      	mov	r9, r7
   8a4fa:	2b01      	cmp	r3, #1
   8a4fc:	f43f adcb 	beq.w	8a096 <_vfiprintf_r+0x206>
   8a500:	2b02      	cmp	r3, #2
   8a502:	ae3a      	add	r6, sp, #232	; 0xe8
   8a504:	d113      	bne.n	8a52e <_vfiprintf_r+0x69e>
   8a506:	9808      	ldr	r0, [sp, #32]
   8a508:	0923      	lsrs	r3, r4, #4
   8a50a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8a50e:	0929      	lsrs	r1, r5, #4
   8a510:	f004 020f 	and.w	r2, r4, #15
   8a514:	460d      	mov	r5, r1
   8a516:	461c      	mov	r4, r3
   8a518:	5c83      	ldrb	r3, [r0, r2]
   8a51a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8a51e:	ea54 0305 	orrs.w	r3, r4, r5
   8a522:	d1f1      	bne.n	8a508 <_vfiprintf_r+0x678>
   8a524:	ab3a      	add	r3, sp, #232	; 0xe8
   8a526:	1b9b      	subs	r3, r3, r6
   8a528:	464f      	mov	r7, r9
   8a52a:	9301      	str	r3, [sp, #4]
   8a52c:	e5c0      	b.n	8a0b0 <_vfiprintf_r+0x220>
   8a52e:	08e2      	lsrs	r2, r4, #3
   8a530:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8a534:	08e9      	lsrs	r1, r5, #3
   8a536:	f004 0307 	and.w	r3, r4, #7
   8a53a:	460d      	mov	r5, r1
   8a53c:	4614      	mov	r4, r2
   8a53e:	3330      	adds	r3, #48	; 0x30
   8a540:	ea54 0105 	orrs.w	r1, r4, r5
   8a544:	4632      	mov	r2, r6
   8a546:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8a54a:	d1f0      	bne.n	8a52e <_vfiprintf_r+0x69e>
   8a54c:	f019 0f01 	tst.w	r9, #1
   8a550:	d0e8      	beq.n	8a524 <_vfiprintf_r+0x694>
   8a552:	2b30      	cmp	r3, #48	; 0x30
   8a554:	d0e6      	beq.n	8a524 <_vfiprintf_r+0x694>
   8a556:	2330      	movs	r3, #48	; 0x30
   8a558:	3a02      	subs	r2, #2
   8a55a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8a55e:	ab3a      	add	r3, sp, #232	; 0xe8
   8a560:	1a9b      	subs	r3, r3, r2
   8a562:	464f      	mov	r7, r9
   8a564:	4616      	mov	r6, r2
   8a566:	9301      	str	r3, [sp, #4]
   8a568:	e5a2      	b.n	8a0b0 <_vfiprintf_r+0x220>
   8a56a:	2301      	movs	r3, #1
   8a56c:	9a01      	ldr	r2, [sp, #4]
   8a56e:	930f      	str	r3, [sp, #60]	; 0x3c
   8a570:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   8a574:	9212      	str	r2, [sp, #72]	; 0x48
   8a576:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a57a:	f10a 0a08 	add.w	sl, sl, #8
   8a57e:	e69d      	b.n	8a2bc <_vfiprintf_r+0x42c>
   8a580:	9b02      	ldr	r3, [sp, #8]
   8a582:	1b5c      	subs	r4, r3, r5
   8a584:	2c00      	cmp	r4, #0
   8a586:	f77f ae7d 	ble.w	8a284 <_vfiprintf_r+0x3f4>
   8a58a:	2c10      	cmp	r4, #16
   8a58c:	f340 82ea 	ble.w	8ab64 <_vfiprintf_r+0xcd4>
   8a590:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8a7c4 <_vfiprintf_r+0x934>
   8a594:	4650      	mov	r0, sl
   8a596:	9706      	str	r7, [sp, #24]
   8a598:	46b2      	mov	sl, r6
   8a59a:	464e      	mov	r6, r9
   8a59c:	46c1      	mov	r9, r8
   8a59e:	46a8      	mov	r8, r5
   8a5a0:	9d05      	ldr	r5, [sp, #20]
   8a5a2:	e006      	b.n	8a5b2 <_vfiprintf_r+0x722>
   8a5a4:	f101 0c02 	add.w	ip, r1, #2
   8a5a8:	4619      	mov	r1, r3
   8a5aa:	3008      	adds	r0, #8
   8a5ac:	3c10      	subs	r4, #16
   8a5ae:	2c10      	cmp	r4, #16
   8a5b0:	dd1a      	ble.n	8a5e8 <_vfiprintf_r+0x758>
   8a5b2:	2710      	movs	r7, #16
   8a5b4:	1c4b      	adds	r3, r1, #1
   8a5b6:	3210      	adds	r2, #16
   8a5b8:	2b07      	cmp	r3, #7
   8a5ba:	9210      	str	r2, [sp, #64]	; 0x40
   8a5bc:	6006      	str	r6, [r0, #0]
   8a5be:	6047      	str	r7, [r0, #4]
   8a5c0:	930f      	str	r3, [sp, #60]	; 0x3c
   8a5c2:	ddef      	ble.n	8a5a4 <_vfiprintf_r+0x714>
   8a5c4:	2a00      	cmp	r2, #0
   8a5c6:	d07b      	beq.n	8a6c0 <_vfiprintf_r+0x830>
   8a5c8:	4659      	mov	r1, fp
   8a5ca:	4628      	mov	r0, r5
   8a5cc:	aa0e      	add	r2, sp, #56	; 0x38
   8a5ce:	f7ff fc23 	bl	89e18 <__sprint_r.part.0>
   8a5d2:	2800      	cmp	r0, #0
   8a5d4:	f47f adf6 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a5d8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a5dc:	3c10      	subs	r4, #16
   8a5de:	2c10      	cmp	r4, #16
   8a5e0:	a811      	add	r0, sp, #68	; 0x44
   8a5e2:	f101 0c01 	add.w	ip, r1, #1
   8a5e6:	dce4      	bgt.n	8a5b2 <_vfiprintf_r+0x722>
   8a5e8:	4645      	mov	r5, r8
   8a5ea:	46c8      	mov	r8, r9
   8a5ec:	46b1      	mov	r9, r6
   8a5ee:	4656      	mov	r6, sl
   8a5f0:	4682      	mov	sl, r0
   8a5f2:	9f06      	ldr	r7, [sp, #24]
   8a5f4:	4422      	add	r2, r4
   8a5f6:	f1bc 0f07 	cmp.w	ip, #7
   8a5fa:	e9ca 9400 	strd	r9, r4, [sl]
   8a5fe:	9210      	str	r2, [sp, #64]	; 0x40
   8a600:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   8a604:	f340 817e 	ble.w	8a904 <_vfiprintf_r+0xa74>
   8a608:	2a00      	cmp	r2, #0
   8a60a:	f000 825c 	beq.w	8aac6 <_vfiprintf_r+0xc36>
   8a60e:	4659      	mov	r1, fp
   8a610:	9805      	ldr	r0, [sp, #20]
   8a612:	aa0e      	add	r2, sp, #56	; 0x38
   8a614:	f7ff fc00 	bl	89e18 <__sprint_r.part.0>
   8a618:	2800      	cmp	r0, #0
   8a61a:	f47f add3 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a61e:	e9dd 3400 	ldrd	r3, r4, [sp]
   8a622:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a626:	1b1c      	subs	r4, r3, r4
   8a628:	2c00      	cmp	r4, #0
   8a62a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a62e:	f101 0001 	add.w	r0, r1, #1
   8a632:	f77f ae2d 	ble.w	8a290 <_vfiprintf_r+0x400>
   8a636:	2c10      	cmp	r4, #16
   8a638:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8a7c4 <_vfiprintf_r+0x934>
   8a63c:	dd2f      	ble.n	8a69e <_vfiprintf_r+0x80e>
   8a63e:	46d4      	mov	ip, sl
   8a640:	46b2      	mov	sl, r6
   8a642:	464e      	mov	r6, r9
   8a644:	46c1      	mov	r9, r8
   8a646:	46a8      	mov	r8, r5
   8a648:	9d05      	ldr	r5, [sp, #20]
   8a64a:	e006      	b.n	8a65a <_vfiprintf_r+0x7ca>
   8a64c:	1c88      	adds	r0, r1, #2
   8a64e:	4619      	mov	r1, r3
   8a650:	f10c 0c08 	add.w	ip, ip, #8
   8a654:	3c10      	subs	r4, #16
   8a656:	2c10      	cmp	r4, #16
   8a658:	dd1c      	ble.n	8a694 <_vfiprintf_r+0x804>
   8a65a:	2010      	movs	r0, #16
   8a65c:	1c4b      	adds	r3, r1, #1
   8a65e:	3210      	adds	r2, #16
   8a660:	2b07      	cmp	r3, #7
   8a662:	9210      	str	r2, [sp, #64]	; 0x40
   8a664:	f8cc 6000 	str.w	r6, [ip]
   8a668:	f8cc 0004 	str.w	r0, [ip, #4]
   8a66c:	930f      	str	r3, [sp, #60]	; 0x3c
   8a66e:	dded      	ble.n	8a64c <_vfiprintf_r+0x7bc>
   8a670:	b30a      	cbz	r2, 8a6b6 <_vfiprintf_r+0x826>
   8a672:	4659      	mov	r1, fp
   8a674:	4628      	mov	r0, r5
   8a676:	aa0e      	add	r2, sp, #56	; 0x38
   8a678:	f7ff fbce 	bl	89e18 <__sprint_r.part.0>
   8a67c:	2800      	cmp	r0, #0
   8a67e:	f47f ada1 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a682:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a686:	3c10      	subs	r4, #16
   8a688:	2c10      	cmp	r4, #16
   8a68a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a68e:	f101 0001 	add.w	r0, r1, #1
   8a692:	dce2      	bgt.n	8a65a <_vfiprintf_r+0x7ca>
   8a694:	4645      	mov	r5, r8
   8a696:	46c8      	mov	r8, r9
   8a698:	46b1      	mov	r9, r6
   8a69a:	4656      	mov	r6, sl
   8a69c:	46e2      	mov	sl, ip
   8a69e:	4422      	add	r2, r4
   8a6a0:	2807      	cmp	r0, #7
   8a6a2:	e9ca 9400 	strd	r9, r4, [sl]
   8a6a6:	9210      	str	r2, [sp, #64]	; 0x40
   8a6a8:	900f      	str	r0, [sp, #60]	; 0x3c
   8a6aa:	f300 80d3 	bgt.w	8a854 <_vfiprintf_r+0x9c4>
   8a6ae:	f10a 0a08 	add.w	sl, sl, #8
   8a6b2:	3001      	adds	r0, #1
   8a6b4:	e5ec      	b.n	8a290 <_vfiprintf_r+0x400>
   8a6b6:	2001      	movs	r0, #1
   8a6b8:	4611      	mov	r1, r2
   8a6ba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a6be:	e7c9      	b.n	8a654 <_vfiprintf_r+0x7c4>
   8a6c0:	f04f 0c01 	mov.w	ip, #1
   8a6c4:	4611      	mov	r1, r2
   8a6c6:	a811      	add	r0, sp, #68	; 0x44
   8a6c8:	e770      	b.n	8a5ac <_vfiprintf_r+0x71c>
   8a6ca:	2a00      	cmp	r2, #0
   8a6cc:	f000 80d3 	beq.w	8a876 <_vfiprintf_r+0x9e6>
   8a6d0:	4659      	mov	r1, fp
   8a6d2:	9805      	ldr	r0, [sp, #20]
   8a6d4:	aa0e      	add	r2, sp, #56	; 0x38
   8a6d6:	f7ff fb9f 	bl	89e18 <__sprint_r.part.0>
   8a6da:	2800      	cmp	r0, #0
   8a6dc:	f47f ad72 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a6e0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a6e4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a6e8:	1c48      	adds	r0, r1, #1
   8a6ea:	e5ac      	b.n	8a246 <_vfiprintf_r+0x3b6>
   8a6ec:	2202      	movs	r2, #2
   8a6ee:	2001      	movs	r0, #1
   8a6f0:	ab0d      	add	r3, sp, #52	; 0x34
   8a6f2:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a6f6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a6fa:	4601      	mov	r1, r0
   8a6fc:	f10a 0a08 	add.w	sl, sl, #8
   8a700:	1c48      	adds	r0, r1, #1
   8a702:	e5bb      	b.n	8a27c <_vfiprintf_r+0x3ec>
   8a704:	2c10      	cmp	r4, #16
   8a706:	f340 8214 	ble.w	8ab32 <_vfiprintf_r+0xca2>
   8a70a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a70e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8a7c8 <_vfiprintf_r+0x938>
   8a712:	46d4      	mov	ip, sl
   8a714:	46b2      	mov	sl, r6
   8a716:	464e      	mov	r6, r9
   8a718:	46c1      	mov	r9, r8
   8a71a:	46a8      	mov	r8, r5
   8a71c:	9d05      	ldr	r5, [sp, #20]
   8a71e:	e006      	b.n	8a72e <_vfiprintf_r+0x89e>
   8a720:	1c99      	adds	r1, r3, #2
   8a722:	4603      	mov	r3, r0
   8a724:	f10c 0c08 	add.w	ip, ip, #8
   8a728:	3c10      	subs	r4, #16
   8a72a:	2c10      	cmp	r4, #16
   8a72c:	dd1c      	ble.n	8a768 <_vfiprintf_r+0x8d8>
   8a72e:	2110      	movs	r1, #16
   8a730:	1c58      	adds	r0, r3, #1
   8a732:	3210      	adds	r2, #16
   8a734:	2807      	cmp	r0, #7
   8a736:	9210      	str	r2, [sp, #64]	; 0x40
   8a738:	f8cc 6000 	str.w	r6, [ip]
   8a73c:	f8cc 1004 	str.w	r1, [ip, #4]
   8a740:	900f      	str	r0, [sp, #60]	; 0x3c
   8a742:	dded      	ble.n	8a720 <_vfiprintf_r+0x890>
   8a744:	b30a      	cbz	r2, 8a78a <_vfiprintf_r+0x8fa>
   8a746:	4659      	mov	r1, fp
   8a748:	4628      	mov	r0, r5
   8a74a:	aa0e      	add	r2, sp, #56	; 0x38
   8a74c:	f7ff fb64 	bl	89e18 <__sprint_r.part.0>
   8a750:	2800      	cmp	r0, #0
   8a752:	f47f ad37 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a756:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a75a:	3c10      	subs	r4, #16
   8a75c:	2c10      	cmp	r4, #16
   8a75e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a762:	f103 0101 	add.w	r1, r3, #1
   8a766:	dce2      	bgt.n	8a72e <_vfiprintf_r+0x89e>
   8a768:	4645      	mov	r5, r8
   8a76a:	46c8      	mov	r8, r9
   8a76c:	46b1      	mov	r9, r6
   8a76e:	4656      	mov	r6, sl
   8a770:	46e2      	mov	sl, ip
   8a772:	4422      	add	r2, r4
   8a774:	2907      	cmp	r1, #7
   8a776:	e9ca 9400 	strd	r9, r4, [sl]
   8a77a:	9210      	str	r2, [sp, #64]	; 0x40
   8a77c:	910f      	str	r1, [sp, #60]	; 0x3c
   8a77e:	f300 80a8 	bgt.w	8a8d2 <_vfiprintf_r+0xa42>
   8a782:	f10a 0a08 	add.w	sl, sl, #8
   8a786:	1c48      	adds	r0, r1, #1
   8a788:	e54b      	b.n	8a222 <_vfiprintf_r+0x392>
   8a78a:	4613      	mov	r3, r2
   8a78c:	2101      	movs	r1, #1
   8a78e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a792:	e7c9      	b.n	8a728 <_vfiprintf_r+0x898>
   8a794:	0778      	lsls	r0, r7, #29
   8a796:	920f      	str	r2, [sp, #60]	; 0x3c
   8a798:	d554      	bpl.n	8a844 <_vfiprintf_r+0x9b4>
   8a79a:	9b02      	ldr	r3, [sp, #8]
   8a79c:	1b5c      	subs	r4, r3, r5
   8a79e:	2c00      	cmp	r4, #0
   8a7a0:	dd50      	ble.n	8a844 <_vfiprintf_r+0x9b4>
   8a7a2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a7a6:	2c10      	cmp	r4, #16
   8a7a8:	f340 81d7 	ble.w	8ab5a <_vfiprintf_r+0xcca>
   8a7ac:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8a7c8 <_vfiprintf_r+0x938>
   8a7b0:	2610      	movs	r6, #16
   8a7b2:	464b      	mov	r3, r9
   8a7b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8a7b6:	46a9      	mov	r9, r5
   8a7b8:	9f05      	ldr	r7, [sp, #20]
   8a7ba:	461d      	mov	r5, r3
   8a7bc:	e00d      	b.n	8a7da <_vfiprintf_r+0x94a>
   8a7be:	bf00      	nop
   8a7c0:	0008eb1c 	.word	0x0008eb1c
   8a7c4:	0008eb80 	.word	0x0008eb80
   8a7c8:	0008eb70 	.word	0x0008eb70
   8a7cc:	1c88      	adds	r0, r1, #2
   8a7ce:	4619      	mov	r1, r3
   8a7d0:	f10a 0a08 	add.w	sl, sl, #8
   8a7d4:	3c10      	subs	r4, #16
   8a7d6:	2c10      	cmp	r4, #16
   8a7d8:	dd19      	ble.n	8a80e <_vfiprintf_r+0x97e>
   8a7da:	1c4b      	adds	r3, r1, #1
   8a7dc:	3210      	adds	r2, #16
   8a7de:	2b07      	cmp	r3, #7
   8a7e0:	e9ca 5600 	strd	r5, r6, [sl]
   8a7e4:	9210      	str	r2, [sp, #64]	; 0x40
   8a7e6:	930f      	str	r3, [sp, #60]	; 0x3c
   8a7e8:	ddf0      	ble.n	8a7cc <_vfiprintf_r+0x93c>
   8a7ea:	b332      	cbz	r2, 8a83a <_vfiprintf_r+0x9aa>
   8a7ec:	4659      	mov	r1, fp
   8a7ee:	4638      	mov	r0, r7
   8a7f0:	aa0e      	add	r2, sp, #56	; 0x38
   8a7f2:	f7ff fb11 	bl	89e18 <__sprint_r.part.0>
   8a7f6:	2800      	cmp	r0, #0
   8a7f8:	f47f ace4 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a7fc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a800:	3c10      	subs	r4, #16
   8a802:	2c10      	cmp	r4, #16
   8a804:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a808:	f101 0001 	add.w	r0, r1, #1
   8a80c:	dce5      	bgt.n	8a7da <_vfiprintf_r+0x94a>
   8a80e:	462b      	mov	r3, r5
   8a810:	464d      	mov	r5, r9
   8a812:	4699      	mov	r9, r3
   8a814:	4422      	add	r2, r4
   8a816:	2807      	cmp	r0, #7
   8a818:	e9ca 9400 	strd	r9, r4, [sl]
   8a81c:	9210      	str	r2, [sp, #64]	; 0x40
   8a81e:	900f      	str	r0, [sp, #60]	; 0x3c
   8a820:	f77f ad53 	ble.w	8a2ca <_vfiprintf_r+0x43a>
   8a824:	b172      	cbz	r2, 8a844 <_vfiprintf_r+0x9b4>
   8a826:	4659      	mov	r1, fp
   8a828:	9805      	ldr	r0, [sp, #20]
   8a82a:	aa0e      	add	r2, sp, #56	; 0x38
   8a82c:	f7ff faf4 	bl	89e18 <__sprint_r.part.0>
   8a830:	2800      	cmp	r0, #0
   8a832:	f47f acc7 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a836:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a838:	e547      	b.n	8a2ca <_vfiprintf_r+0x43a>
   8a83a:	2001      	movs	r0, #1
   8a83c:	4611      	mov	r1, r2
   8a83e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a842:	e7c7      	b.n	8a7d4 <_vfiprintf_r+0x944>
   8a844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a848:	42aa      	cmp	r2, r5
   8a84a:	bfac      	ite	ge
   8a84c:	189b      	addge	r3, r3, r2
   8a84e:	195b      	addlt	r3, r3, r5
   8a850:	9303      	str	r3, [sp, #12]
   8a852:	e544      	b.n	8a2de <_vfiprintf_r+0x44e>
   8a854:	2a00      	cmp	r2, #0
   8a856:	f43f ae88 	beq.w	8a56a <_vfiprintf_r+0x6da>
   8a85a:	4659      	mov	r1, fp
   8a85c:	9805      	ldr	r0, [sp, #20]
   8a85e:	aa0e      	add	r2, sp, #56	; 0x38
   8a860:	f7ff fada 	bl	89e18 <__sprint_r.part.0>
   8a864:	2800      	cmp	r0, #0
   8a866:	f47f acad 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a86a:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8a86e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a872:	3001      	adds	r0, #1
   8a874:	e50c      	b.n	8a290 <_vfiprintf_r+0x400>
   8a876:	9b07      	ldr	r3, [sp, #28]
   8a878:	2b00      	cmp	r3, #0
   8a87a:	d16b      	bne.n	8a954 <_vfiprintf_r+0xac4>
   8a87c:	2001      	movs	r0, #1
   8a87e:	4611      	mov	r1, r2
   8a880:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a884:	e4fa      	b.n	8a27c <_vfiprintf_r+0x3ec>
   8a886:	920f      	str	r2, [sp, #60]	; 0x3c
   8a888:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a88c:	e481      	b.n	8a192 <_vfiprintf_r+0x302>
   8a88e:	9b00      	ldr	r3, [sp, #0]
   8a890:	2b00      	cmp	r3, #0
   8a892:	f47f ac05 	bne.w	8a0a0 <_vfiprintf_r+0x210>
   8a896:	464f      	mov	r7, r9
   8a898:	2300      	movs	r3, #0
   8a89a:	ae3a      	add	r6, sp, #232	; 0xe8
   8a89c:	9300      	str	r3, [sp, #0]
   8a89e:	9301      	str	r3, [sp, #4]
   8a8a0:	e406      	b.n	8a0b0 <_vfiprintf_r+0x220>
   8a8a2:	f854 2b04 	ldr.w	r2, [r4], #4
   8a8a6:	f019 0f10 	tst.w	r9, #16
   8a8aa:	f04f 0301 	mov.w	r3, #1
   8a8ae:	9404      	str	r4, [sp, #16]
   8a8b0:	d132      	bne.n	8a918 <_vfiprintf_r+0xa88>
   8a8b2:	f019 0f40 	tst.w	r9, #64	; 0x40
   8a8b6:	d02b      	beq.n	8a910 <_vfiprintf_r+0xa80>
   8a8b8:	2500      	movs	r5, #0
   8a8ba:	b294      	uxth	r4, r2
   8a8bc:	e439      	b.n	8a132 <_vfiprintf_r+0x2a2>
   8a8be:	232d      	movs	r3, #45	; 0x2d
   8a8c0:	4264      	negs	r4, r4
   8a8c2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a8c6:	46b9      	mov	r9, r7
   8a8c8:	f04f 0301 	mov.w	r3, #1
   8a8cc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a8d0:	e433      	b.n	8a13a <_vfiprintf_r+0x2aa>
   8a8d2:	2a00      	cmp	r2, #0
   8a8d4:	d06f      	beq.n	8a9b6 <_vfiprintf_r+0xb26>
   8a8d6:	4659      	mov	r1, fp
   8a8d8:	9805      	ldr	r0, [sp, #20]
   8a8da:	aa0e      	add	r2, sp, #56	; 0x38
   8a8dc:	f7ff fa9c 	bl	89e18 <__sprint_r.part.0>
   8a8e0:	2800      	cmp	r0, #0
   8a8e2:	f47f ac6f 	bne.w	8a1c4 <_vfiprintf_r+0x334>
   8a8e6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a8ea:	e497      	b.n	8a21c <_vfiprintf_r+0x38c>
   8a8ec:	ae3a      	add	r6, sp, #232	; 0xe8
   8a8ee:	f7ff bbdf 	b.w	8a0b0 <_vfiprintf_r+0x220>
   8a8f2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a8f6:	f001 fed9 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8a8fa:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8a8fe:	b28a      	uxth	r2, r1
   8a900:	f7ff badd 	b.w	89ebe <_vfiprintf_r+0x2e>
   8a904:	4661      	mov	r1, ip
   8a906:	f10a 0a08 	add.w	sl, sl, #8
   8a90a:	f10c 0001 	add.w	r0, ip, #1
   8a90e:	e4b9      	b.n	8a284 <_vfiprintf_r+0x3f4>
   8a910:	f419 7f00 	tst.w	r9, #512	; 0x200
   8a914:	f040 80ef 	bne.w	8aaf6 <_vfiprintf_r+0xc66>
   8a918:	4614      	mov	r4, r2
   8a91a:	2500      	movs	r5, #0
   8a91c:	e409      	b.n	8a132 <_vfiprintf_r+0x2a2>
   8a91e:	05be      	lsls	r6, r7, #22
   8a920:	f100 80f7 	bmi.w	8ab12 <_vfiprintf_r+0xc82>
   8a924:	461c      	mov	r4, r3
   8a926:	2500      	movs	r5, #0
   8a928:	e400      	b.n	8a12c <_vfiprintf_r+0x29c>
   8a92a:	05ba      	lsls	r2, r7, #22
   8a92c:	f100 80ea 	bmi.w	8ab04 <_vfiprintf_r+0xc74>
   8a930:	17e5      	asrs	r5, r4, #31
   8a932:	9304      	str	r3, [sp, #16]
   8a934:	4622      	mov	r2, r4
   8a936:	462b      	mov	r3, r5
   8a938:	f7ff bb9e 	b.w	8a078 <_vfiprintf_r+0x1e8>
   8a93c:	9b03      	ldr	r3, [sp, #12]
   8a93e:	9c04      	ldr	r4, [sp, #16]
   8a940:	17dd      	asrs	r5, r3, #31
   8a942:	461a      	mov	r2, r3
   8a944:	462b      	mov	r3, r5
   8a946:	f854 1b04 	ldr.w	r1, [r4], #4
   8a94a:	e9c1 2300 	strd	r2, r3, [r1]
   8a94e:	9404      	str	r4, [sp, #16]
   8a950:	f7ff badc 	b.w	89f0c <_vfiprintf_r+0x7c>
   8a954:	2202      	movs	r2, #2
   8a956:	ab0d      	add	r3, sp, #52	; 0x34
   8a958:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a95c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a960:	e6cc      	b.n	8a6fc <_vfiprintf_r+0x86c>
   8a962:	46b9      	mov	r9, r7
   8a964:	e598      	b.n	8a498 <_vfiprintf_r+0x608>
   8a966:	4a90      	ldr	r2, [pc, #576]	; (8aba8 <_vfiprintf_r+0xd18>)
   8a968:	9208      	str	r2, [sp, #32]
   8a96a:	06bd      	lsls	r5, r7, #26
   8a96c:	9c04      	ldr	r4, [sp, #16]
   8a96e:	d530      	bpl.n	8a9d2 <_vfiprintf_r+0xb42>
   8a970:	3407      	adds	r4, #7
   8a972:	f024 0207 	bic.w	r2, r4, #7
   8a976:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   8a97a:	9204      	str	r2, [sp, #16]
   8a97c:	07fe      	lsls	r6, r7, #31
   8a97e:	d509      	bpl.n	8a994 <_vfiprintf_r+0xb04>
   8a980:	ea54 0205 	orrs.w	r2, r4, r5
   8a984:	d006      	beq.n	8a994 <_vfiprintf_r+0xb04>
   8a986:	2230      	movs	r2, #48	; 0x30
   8a988:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   8a98c:	f047 0702 	orr.w	r7, r7, #2
   8a990:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   8a994:	2302      	movs	r3, #2
   8a996:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8a99a:	f7ff bbca 	b.w	8a132 <_vfiprintf_r+0x2a2>
   8a99e:	4a83      	ldr	r2, [pc, #524]	; (8abac <_vfiprintf_r+0xd1c>)
   8a9a0:	9208      	str	r2, [sp, #32]
   8a9a2:	e7e2      	b.n	8a96a <_vfiprintf_r+0xada>
   8a9a4:	4630      	mov	r0, r6
   8a9a6:	f003 f873 	bl	8da90 <strlen>
   8a9aa:	2300      	movs	r3, #0
   8a9ac:	9404      	str	r4, [sp, #16]
   8a9ae:	9001      	str	r0, [sp, #4]
   8a9b0:	9300      	str	r3, [sp, #0]
   8a9b2:	f7ff bb7d 	b.w	8a0b0 <_vfiprintf_r+0x220>
   8a9b6:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   8a9ba:	2900      	cmp	r1, #0
   8a9bc:	f040 8089 	bne.w	8aad2 <_vfiprintf_r+0xc42>
   8a9c0:	9b07      	ldr	r3, [sp, #28]
   8a9c2:	2b00      	cmp	r3, #0
   8a9c4:	f47f ae92 	bne.w	8a6ec <_vfiprintf_r+0x85c>
   8a9c8:	4611      	mov	r1, r2
   8a9ca:	2001      	movs	r0, #1
   8a9cc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a9d0:	e458      	b.n	8a284 <_vfiprintf_r+0x3f4>
   8a9d2:	f854 2b04 	ldr.w	r2, [r4], #4
   8a9d6:	9404      	str	r4, [sp, #16]
   8a9d8:	06fc      	lsls	r4, r7, #27
   8a9da:	d407      	bmi.n	8a9ec <_vfiprintf_r+0xb5c>
   8a9dc:	0678      	lsls	r0, r7, #25
   8a9de:	d502      	bpl.n	8a9e6 <_vfiprintf_r+0xb56>
   8a9e0:	2500      	movs	r5, #0
   8a9e2:	b294      	uxth	r4, r2
   8a9e4:	e7ca      	b.n	8a97c <_vfiprintf_r+0xaec>
   8a9e6:	05b9      	lsls	r1, r7, #22
   8a9e8:	f100 8089 	bmi.w	8aafe <_vfiprintf_r+0xc6e>
   8a9ec:	4614      	mov	r4, r2
   8a9ee:	2500      	movs	r5, #0
   8a9f0:	e7c4      	b.n	8a97c <_vfiprintf_r+0xaec>
   8a9f2:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8a9f6:	f8cd 9004 	str.w	r9, [sp, #4]
   8a9fa:	f8cd 8018 	str.w	r8, [sp, #24]
   8a9fe:	2700      	movs	r7, #0
   8aa00:	4698      	mov	r8, r3
   8aa02:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8aa06:	ae3a      	add	r6, sp, #232	; 0xe8
   8aa08:	e00b      	b.n	8aa22 <_vfiprintf_r+0xb92>
   8aa0a:	220a      	movs	r2, #10
   8aa0c:	2300      	movs	r3, #0
   8aa0e:	4620      	mov	r0, r4
   8aa10:	4629      	mov	r1, r5
   8aa12:	f7fd f9bd 	bl	87d90 <__aeabi_uldivmod>
   8aa16:	2d00      	cmp	r5, #0
   8aa18:	bf08      	it	eq
   8aa1a:	2c0a      	cmpeq	r4, #10
   8aa1c:	d319      	bcc.n	8aa52 <_vfiprintf_r+0xbc2>
   8aa1e:	4604      	mov	r4, r0
   8aa20:	460d      	mov	r5, r1
   8aa22:	220a      	movs	r2, #10
   8aa24:	2300      	movs	r3, #0
   8aa26:	4620      	mov	r0, r4
   8aa28:	4629      	mov	r1, r5
   8aa2a:	f7fd f9b1 	bl	87d90 <__aeabi_uldivmod>
   8aa2e:	3230      	adds	r2, #48	; 0x30
   8aa30:	f806 2c01 	strb.w	r2, [r6, #-1]
   8aa34:	3701      	adds	r7, #1
   8aa36:	3e01      	subs	r6, #1
   8aa38:	f1b8 0f00 	cmp.w	r8, #0
   8aa3c:	d0e5      	beq.n	8aa0a <_vfiprintf_r+0xb7a>
   8aa3e:	f899 3000 	ldrb.w	r3, [r9]
   8aa42:	42bb      	cmp	r3, r7
   8aa44:	d1e1      	bne.n	8aa0a <_vfiprintf_r+0xb7a>
   8aa46:	2fff      	cmp	r7, #255	; 0xff
   8aa48:	d0df      	beq.n	8aa0a <_vfiprintf_r+0xb7a>
   8aa4a:	2d00      	cmp	r5, #0
   8aa4c:	bf08      	it	eq
   8aa4e:	2c0a      	cmpeq	r4, #10
   8aa50:	d225      	bcs.n	8aa9e <_vfiprintf_r+0xc0e>
   8aa52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   8aa56:	ab3a      	add	r3, sp, #232	; 0xe8
   8aa58:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8aa5c:	1b9b      	subs	r3, r3, r6
   8aa5e:	464f      	mov	r7, r9
   8aa60:	f8dd 8018 	ldr.w	r8, [sp, #24]
   8aa64:	9301      	str	r3, [sp, #4]
   8aa66:	f7ff bb23 	b.w	8a0b0 <_vfiprintf_r+0x220>
   8aa6a:	46b9      	mov	r9, r7
   8aa6c:	f7ff bb13 	b.w	8a096 <_vfiprintf_r+0x206>
   8aa70:	2b01      	cmp	r3, #1
   8aa72:	46b9      	mov	r9, r7
   8aa74:	f47f ad44 	bne.w	8a500 <_vfiprintf_r+0x670>
   8aa78:	f7ff bb12 	b.w	8a0a0 <_vfiprintf_r+0x210>
   8aa7c:	9c04      	ldr	r4, [sp, #16]
   8aa7e:	9a03      	ldr	r2, [sp, #12]
   8aa80:	f854 3b04 	ldr.w	r3, [r4], #4
   8aa84:	601a      	str	r2, [r3, #0]
   8aa86:	9404      	str	r4, [sp, #16]
   8aa88:	f7ff ba40 	b.w	89f0c <_vfiprintf_r+0x7c>
   8aa8c:	9d00      	ldr	r5, [sp, #0]
   8aa8e:	4e48      	ldr	r6, [pc, #288]	; (8abb0 <_vfiprintf_r+0xd20>)
   8aa90:	2d06      	cmp	r5, #6
   8aa92:	bf28      	it	cs
   8aa94:	2506      	movcs	r5, #6
   8aa96:	9404      	str	r4, [sp, #16]
   8aa98:	9501      	str	r5, [sp, #4]
   8aa9a:	f7ff bbaf 	b.w	8a1fc <_vfiprintf_r+0x36c>
   8aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8aaa0:	990a      	ldr	r1, [sp, #40]	; 0x28
   8aaa2:	1af6      	subs	r6, r6, r3
   8aaa4:	461a      	mov	r2, r3
   8aaa6:	4630      	mov	r0, r6
   8aaa8:	f003 f820 	bl	8daec <strncpy>
   8aaac:	f899 3001 	ldrb.w	r3, [r9, #1]
   8aab0:	b10b      	cbz	r3, 8aab6 <_vfiprintf_r+0xc26>
   8aab2:	f109 0901 	add.w	r9, r9, #1
   8aab6:	220a      	movs	r2, #10
   8aab8:	2300      	movs	r3, #0
   8aaba:	4620      	mov	r0, r4
   8aabc:	4629      	mov	r1, r5
   8aabe:	f7fd f967 	bl	87d90 <__aeabi_uldivmod>
   8aac2:	2700      	movs	r7, #0
   8aac4:	e7ab      	b.n	8aa1e <_vfiprintf_r+0xb8e>
   8aac6:	2001      	movs	r0, #1
   8aac8:	4611      	mov	r1, r2
   8aaca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8aace:	f7ff bbd9 	b.w	8a284 <_vfiprintf_r+0x3f4>
   8aad2:	2201      	movs	r2, #1
   8aad4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   8aad8:	4610      	mov	r0, r2
   8aada:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8aade:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8aae2:	f7ff bbac 	b.w	8a23e <_vfiprintf_r+0x3ae>
   8aae6:	9c04      	ldr	r4, [sp, #16]
   8aae8:	9a03      	ldr	r2, [sp, #12]
   8aaea:	f854 3b04 	ldr.w	r3, [r4], #4
   8aaee:	801a      	strh	r2, [r3, #0]
   8aaf0:	9404      	str	r4, [sp, #16]
   8aaf2:	f7ff ba0b 	b.w	89f0c <_vfiprintf_r+0x7c>
   8aaf6:	2500      	movs	r5, #0
   8aaf8:	b2d4      	uxtb	r4, r2
   8aafa:	f7ff bb1a 	b.w	8a132 <_vfiprintf_r+0x2a2>
   8aafe:	2500      	movs	r5, #0
   8ab00:	b2d4      	uxtb	r4, r2
   8ab02:	e73b      	b.n	8a97c <_vfiprintf_r+0xaec>
   8ab04:	b264      	sxtb	r4, r4
   8ab06:	17e5      	asrs	r5, r4, #31
   8ab08:	9304      	str	r3, [sp, #16]
   8ab0a:	4622      	mov	r2, r4
   8ab0c:	462b      	mov	r3, r5
   8ab0e:	f7ff bab3 	b.w	8a078 <_vfiprintf_r+0x1e8>
   8ab12:	2500      	movs	r5, #0
   8ab14:	b2dc      	uxtb	r4, r3
   8ab16:	f7ff bb09 	b.w	8a12c <_vfiprintf_r+0x29c>
   8ab1a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8ab1e:	f001 fdc7 	bl	8c6b0 <__retarget_lock_release_recursive>
   8ab22:	f7ff baec 	b.w	8a0fe <_vfiprintf_r+0x26e>
   8ab26:	9b00      	ldr	r3, [sp, #0]
   8ab28:	9404      	str	r4, [sp, #16]
   8ab2a:	9301      	str	r3, [sp, #4]
   8ab2c:	9000      	str	r0, [sp, #0]
   8ab2e:	f7ff babf 	b.w	8a0b0 <_vfiprintf_r+0x220>
   8ab32:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8ab36:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8abb4 <_vfiprintf_r+0xd24>
   8ab3a:	3101      	adds	r1, #1
   8ab3c:	e619      	b.n	8a772 <_vfiprintf_r+0x8e2>
   8ab3e:	2200      	movs	r2, #0
   8ab40:	9200      	str	r2, [sp, #0]
   8ab42:	f7ff ba09 	b.w	89f58 <_vfiprintf_r+0xc8>
   8ab46:	4659      	mov	r1, fp
   8ab48:	9805      	ldr	r0, [sp, #20]
   8ab4a:	aa0e      	add	r2, sp, #56	; 0x38
   8ab4c:	f7ff f964 	bl	89e18 <__sprint_r.part.0>
   8ab50:	2800      	cmp	r0, #0
   8ab52:	f43f abd2 	beq.w	8a2fa <_vfiprintf_r+0x46a>
   8ab56:	f7ff bb36 	b.w	8a1c6 <_vfiprintf_r+0x336>
   8ab5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8ab5c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8abb4 <_vfiprintf_r+0xd24>
   8ab60:	3001      	adds	r0, #1
   8ab62:	e657      	b.n	8a814 <_vfiprintf_r+0x984>
   8ab64:	4684      	mov	ip, r0
   8ab66:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8abb8 <_vfiprintf_r+0xd28>
   8ab6a:	e543      	b.n	8a5f4 <_vfiprintf_r+0x764>
   8ab6c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8ab70:	07db      	lsls	r3, r3, #31
   8ab72:	d407      	bmi.n	8ab84 <_vfiprintf_r+0xcf4>
   8ab74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8ab78:	059f      	lsls	r7, r3, #22
   8ab7a:	d403      	bmi.n	8ab84 <_vfiprintf_r+0xcf4>
   8ab7c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8ab80:	f001 fd96 	bl	8c6b0 <__retarget_lock_release_recursive>
   8ab84:	f04f 33ff 	mov.w	r3, #4294967295
   8ab88:	9303      	str	r3, [sp, #12]
   8ab8a:	f7ff bb27 	b.w	8a1dc <_vfiprintf_r+0x34c>
   8ab8e:	9a04      	ldr	r2, [sp, #16]
   8ab90:	f898 3001 	ldrb.w	r3, [r8, #1]
   8ab94:	f852 0b04 	ldr.w	r0, [r2], #4
   8ab98:	4688      	mov	r8, r1
   8ab9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8ab9e:	9000      	str	r0, [sp, #0]
   8aba0:	9204      	str	r2, [sp, #16]
   8aba2:	f7ff b9d7 	b.w	89f54 <_vfiprintf_r+0xc4>
   8aba6:	bf00      	nop
   8aba8:	0008eb30 	.word	0x0008eb30
   8abac:	0008eb1c 	.word	0x0008eb1c
   8abb0:	0008eb44 	.word	0x0008eb44
   8abb4:	0008eb70 	.word	0x0008eb70
   8abb8:	0008eb80 	.word	0x0008eb80

0008abbc <__sbprintf>:
   8abbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   8abbe:	460c      	mov	r4, r1
   8abc0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8abc4:	f04f 0e00 	mov.w	lr, #0
   8abc8:	4615      	mov	r5, r2
   8abca:	4606      	mov	r6, r0
   8abcc:	461f      	mov	r7, r3
   8abce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8abd0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8abd4:	89e2      	ldrh	r2, [r4, #14]
   8abd6:	8989      	ldrh	r1, [r1, #12]
   8abd8:	9319      	str	r3, [sp, #100]	; 0x64
   8abda:	69e3      	ldr	r3, [r4, #28]
   8abdc:	f8ad 200e 	strh.w	r2, [sp, #14]
   8abe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8abe2:	f021 0102 	bic.w	r1, r1, #2
   8abe6:	9307      	str	r3, [sp, #28]
   8abe8:	a816      	add	r0, sp, #88	; 0x58
   8abea:	ab1a      	add	r3, sp, #104	; 0x68
   8abec:	f8ad 100c 	strh.w	r1, [sp, #12]
   8abf0:	f8cd e018 	str.w	lr, [sp, #24]
   8abf4:	9209      	str	r2, [sp, #36]	; 0x24
   8abf6:	9300      	str	r3, [sp, #0]
   8abf8:	9304      	str	r3, [sp, #16]
   8abfa:	f8cd c008 	str.w	ip, [sp, #8]
   8abfe:	f8cd c014 	str.w	ip, [sp, #20]
   8ac02:	f001 fd4f 	bl	8c6a4 <__retarget_lock_init_recursive>
   8ac06:	462a      	mov	r2, r5
   8ac08:	463b      	mov	r3, r7
   8ac0a:	4669      	mov	r1, sp
   8ac0c:	4630      	mov	r0, r6
   8ac0e:	f7ff f93f 	bl	89e90 <_vfiprintf_r>
   8ac12:	1e05      	subs	r5, r0, #0
   8ac14:	db07      	blt.n	8ac26 <__sbprintf+0x6a>
   8ac16:	4630      	mov	r0, r6
   8ac18:	4669      	mov	r1, sp
   8ac1a:	f001 f919 	bl	8be50 <_fflush_r>
   8ac1e:	2800      	cmp	r0, #0
   8ac20:	bf18      	it	ne
   8ac22:	f04f 35ff 	movne.w	r5, #4294967295
   8ac26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8ac2a:	065b      	lsls	r3, r3, #25
   8ac2c:	d503      	bpl.n	8ac36 <__sbprintf+0x7a>
   8ac2e:	89a3      	ldrh	r3, [r4, #12]
   8ac30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ac34:	81a3      	strh	r3, [r4, #12]
   8ac36:	9816      	ldr	r0, [sp, #88]	; 0x58
   8ac38:	f001 fd36 	bl	8c6a8 <__retarget_lock_close_recursive>
   8ac3c:	4628      	mov	r0, r5
   8ac3e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8ac42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008ac44 <__swsetup_r>:
   8ac44:	b538      	push	{r3, r4, r5, lr}
   8ac46:	4b32      	ldr	r3, [pc, #200]	; (8ad10 <__swsetup_r+0xcc>)
   8ac48:	4605      	mov	r5, r0
   8ac4a:	6818      	ldr	r0, [r3, #0]
   8ac4c:	460c      	mov	r4, r1
   8ac4e:	b110      	cbz	r0, 8ac56 <__swsetup_r+0x12>
   8ac50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ac52:	2b00      	cmp	r3, #0
   8ac54:	d03c      	beq.n	8acd0 <__swsetup_r+0x8c>
   8ac56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac5a:	0718      	lsls	r0, r3, #28
   8ac5c:	b29a      	uxth	r2, r3
   8ac5e:	d50c      	bpl.n	8ac7a <__swsetup_r+0x36>
   8ac60:	6921      	ldr	r1, [r4, #16]
   8ac62:	b1a9      	cbz	r1, 8ac90 <__swsetup_r+0x4c>
   8ac64:	f012 0001 	ands.w	r0, r2, #1
   8ac68:	d022      	beq.n	8acb0 <__swsetup_r+0x6c>
   8ac6a:	2500      	movs	r5, #0
   8ac6c:	6960      	ldr	r0, [r4, #20]
   8ac6e:	60a5      	str	r5, [r4, #8]
   8ac70:	4240      	negs	r0, r0
   8ac72:	61a0      	str	r0, [r4, #24]
   8ac74:	b311      	cbz	r1, 8acbc <__swsetup_r+0x78>
   8ac76:	2000      	movs	r0, #0
   8ac78:	bd38      	pop	{r3, r4, r5, pc}
   8ac7a:	06d1      	lsls	r1, r2, #27
   8ac7c:	d53f      	bpl.n	8acfe <__swsetup_r+0xba>
   8ac7e:	0752      	lsls	r2, r2, #29
   8ac80:	d429      	bmi.n	8acd6 <__swsetup_r+0x92>
   8ac82:	6921      	ldr	r1, [r4, #16]
   8ac84:	f043 0308 	orr.w	r3, r3, #8
   8ac88:	81a3      	strh	r3, [r4, #12]
   8ac8a:	b29a      	uxth	r2, r3
   8ac8c:	2900      	cmp	r1, #0
   8ac8e:	d1e9      	bne.n	8ac64 <__swsetup_r+0x20>
   8ac90:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8ac94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8ac98:	d0e4      	beq.n	8ac64 <__swsetup_r+0x20>
   8ac9a:	4628      	mov	r0, r5
   8ac9c:	4621      	mov	r1, r4
   8ac9e:	f001 fd37 	bl	8c710 <__smakebuf_r>
   8aca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aca6:	6921      	ldr	r1, [r4, #16]
   8aca8:	b29a      	uxth	r2, r3
   8acaa:	f012 0001 	ands.w	r0, r2, #1
   8acae:	d1dc      	bne.n	8ac6a <__swsetup_r+0x26>
   8acb0:	0795      	lsls	r5, r2, #30
   8acb2:	bf58      	it	pl
   8acb4:	6960      	ldrpl	r0, [r4, #20]
   8acb6:	60a0      	str	r0, [r4, #8]
   8acb8:	2900      	cmp	r1, #0
   8acba:	d1dc      	bne.n	8ac76 <__swsetup_r+0x32>
   8acbc:	0612      	lsls	r2, r2, #24
   8acbe:	bf58      	it	pl
   8acc0:	4608      	movpl	r0, r1
   8acc2:	d5d9      	bpl.n	8ac78 <__swsetup_r+0x34>
   8acc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8acc8:	f04f 30ff 	mov.w	r0, #4294967295
   8accc:	81a3      	strh	r3, [r4, #12]
   8acce:	bd38      	pop	{r3, r4, r5, pc}
   8acd0:	f001 f91a 	bl	8bf08 <__sinit>
   8acd4:	e7bf      	b.n	8ac56 <__swsetup_r+0x12>
   8acd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8acd8:	b151      	cbz	r1, 8acf0 <__swsetup_r+0xac>
   8acda:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8acde:	4291      	cmp	r1, r2
   8ace0:	d004      	beq.n	8acec <__swsetup_r+0xa8>
   8ace2:	4628      	mov	r0, r5
   8ace4:	f001 fa34 	bl	8c150 <_free_r>
   8ace8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8acec:	2200      	movs	r2, #0
   8acee:	6322      	str	r2, [r4, #48]	; 0x30
   8acf0:	2200      	movs	r2, #0
   8acf2:	6921      	ldr	r1, [r4, #16]
   8acf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8acf8:	e9c4 1200 	strd	r1, r2, [r4]
   8acfc:	e7c2      	b.n	8ac84 <__swsetup_r+0x40>
   8acfe:	2209      	movs	r2, #9
   8ad00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad04:	602a      	str	r2, [r5, #0]
   8ad06:	f04f 30ff 	mov.w	r0, #4294967295
   8ad0a:	81a3      	strh	r3, [r4, #12]
   8ad0c:	bd38      	pop	{r3, r4, r5, pc}
   8ad0e:	bf00      	nop
   8ad10:	20000504 	.word	0x20000504

0008ad14 <register_fini>:
   8ad14:	4b02      	ldr	r3, [pc, #8]	; (8ad20 <register_fini+0xc>)
   8ad16:	b113      	cbz	r3, 8ad1e <register_fini+0xa>
   8ad18:	4802      	ldr	r0, [pc, #8]	; (8ad24 <register_fini+0x10>)
   8ad1a:	f000 b805 	b.w	8ad28 <atexit>
   8ad1e:	4770      	bx	lr
   8ad20:	00000000 	.word	0x00000000
   8ad24:	0008bf7d 	.word	0x0008bf7d

0008ad28 <atexit>:
   8ad28:	2300      	movs	r3, #0
   8ad2a:	4601      	mov	r1, r0
   8ad2c:	461a      	mov	r2, r3
   8ad2e:	4618      	mov	r0, r3
   8ad30:	f003 b826 	b.w	8dd80 <__register_exitproc>

0008ad34 <quorem>:
   8ad34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ad38:	6903      	ldr	r3, [r0, #16]
   8ad3a:	690d      	ldr	r5, [r1, #16]
   8ad3c:	b083      	sub	sp, #12
   8ad3e:	42ab      	cmp	r3, r5
   8ad40:	f2c0 8084 	blt.w	8ae4c <quorem+0x118>
   8ad44:	3d01      	subs	r5, #1
   8ad46:	f101 0614 	add.w	r6, r1, #20
   8ad4a:	f100 0914 	add.w	r9, r0, #20
   8ad4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8ad52:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8ad56:	3301      	adds	r3, #1
   8ad58:	468e      	mov	lr, r1
   8ad5a:	00a9      	lsls	r1, r5, #2
   8ad5c:	9100      	str	r1, [sp, #0]
   8ad5e:	429a      	cmp	r2, r3
   8ad60:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   8ad64:	4682      	mov	sl, r0
   8ad66:	fbb2 f7f3 	udiv	r7, r2, r3
   8ad6a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8ad6e:	9101      	str	r1, [sp, #4]
   8ad70:	d337      	bcc.n	8ade2 <quorem+0xae>
   8ad72:	2200      	movs	r2, #0
   8ad74:	46b4      	mov	ip, r6
   8ad76:	4614      	mov	r4, r2
   8ad78:	4648      	mov	r0, r9
   8ad7a:	f85c 3b04 	ldr.w	r3, [ip], #4
   8ad7e:	6801      	ldr	r1, [r0, #0]
   8ad80:	fa1f fb83 	uxth.w	fp, r3
   8ad84:	fb07 220b 	mla	r2, r7, fp, r2
   8ad88:	0c1b      	lsrs	r3, r3, #16
   8ad8a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8ad8e:	fb07 bb03 	mla	fp, r7, r3, fp
   8ad92:	b293      	uxth	r3, r2
   8ad94:	1ae3      	subs	r3, r4, r3
   8ad96:	b28a      	uxth	r2, r1
   8ad98:	fa1f f48b 	uxth.w	r4, fp
   8ad9c:	4413      	add	r3, r2
   8ad9e:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8ada2:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8ada6:	b29b      	uxth	r3, r3
   8ada8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8adac:	45e0      	cmp	r8, ip
   8adae:	f840 3b04 	str.w	r3, [r0], #4
   8adb2:	ea4f 4424 	mov.w	r4, r4, asr #16
   8adb6:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8adba:	d2de      	bcs.n	8ad7a <quorem+0x46>
   8adbc:	9b00      	ldr	r3, [sp, #0]
   8adbe:	f859 3003 	ldr.w	r3, [r9, r3]
   8adc2:	b973      	cbnz	r3, 8ade2 <quorem+0xae>
   8adc4:	9b01      	ldr	r3, [sp, #4]
   8adc6:	3b04      	subs	r3, #4
   8adc8:	4599      	cmp	r9, r3
   8adca:	d304      	bcc.n	8add6 <quorem+0xa2>
   8adcc:	e007      	b.n	8adde <quorem+0xaa>
   8adce:	4599      	cmp	r9, r3
   8add0:	f105 35ff 	add.w	r5, r5, #4294967295
   8add4:	d203      	bcs.n	8adde <quorem+0xaa>
   8add6:	f853 2904 	ldr.w	r2, [r3], #-4
   8adda:	2a00      	cmp	r2, #0
   8addc:	d0f7      	beq.n	8adce <quorem+0x9a>
   8adde:	f8ca 5010 	str.w	r5, [sl, #16]
   8ade2:	4671      	mov	r1, lr
   8ade4:	4650      	mov	r0, sl
   8ade6:	f002 faab 	bl	8d340 <__mcmp>
   8adea:	2800      	cmp	r0, #0
   8adec:	db2a      	blt.n	8ae44 <quorem+0x110>
   8adee:	4648      	mov	r0, r9
   8adf0:	2300      	movs	r3, #0
   8adf2:	3701      	adds	r7, #1
   8adf4:	f856 1b04 	ldr.w	r1, [r6], #4
   8adf8:	6804      	ldr	r4, [r0, #0]
   8adfa:	b28a      	uxth	r2, r1
   8adfc:	1a9a      	subs	r2, r3, r2
   8adfe:	0c0b      	lsrs	r3, r1, #16
   8ae00:	b2a1      	uxth	r1, r4
   8ae02:	440a      	add	r2, r1
   8ae04:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   8ae08:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8ae0c:	b292      	uxth	r2, r2
   8ae0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8ae12:	45b0      	cmp	r8, r6
   8ae14:	f840 2b04 	str.w	r2, [r0], #4
   8ae18:	ea4f 4323 	mov.w	r3, r3, asr #16
   8ae1c:	d2ea      	bcs.n	8adf4 <quorem+0xc0>
   8ae1e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8ae22:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   8ae26:	b96a      	cbnz	r2, 8ae44 <quorem+0x110>
   8ae28:	3b04      	subs	r3, #4
   8ae2a:	4599      	cmp	r9, r3
   8ae2c:	d304      	bcc.n	8ae38 <quorem+0x104>
   8ae2e:	e007      	b.n	8ae40 <quorem+0x10c>
   8ae30:	4599      	cmp	r9, r3
   8ae32:	f105 35ff 	add.w	r5, r5, #4294967295
   8ae36:	d203      	bcs.n	8ae40 <quorem+0x10c>
   8ae38:	f853 2904 	ldr.w	r2, [r3], #-4
   8ae3c:	2a00      	cmp	r2, #0
   8ae3e:	d0f7      	beq.n	8ae30 <quorem+0xfc>
   8ae40:	f8ca 5010 	str.w	r5, [sl, #16]
   8ae44:	4638      	mov	r0, r7
   8ae46:	b003      	add	sp, #12
   8ae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae4c:	2000      	movs	r0, #0
   8ae4e:	b003      	add	sp, #12
   8ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae54:	0000      	movs	r0, r0
   8ae56:	0000      	movs	r0, r0

0008ae58 <_dtoa_r>:
   8ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ae5c:	4616      	mov	r6, r2
   8ae5e:	461f      	mov	r7, r3
   8ae60:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8ae62:	b09b      	sub	sp, #108	; 0x6c
   8ae64:	4604      	mov	r4, r0
   8ae66:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8ae6a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8ae6c:	b141      	cbz	r1, 8ae80 <_dtoa_r+0x28>
   8ae6e:	2301      	movs	r3, #1
   8ae70:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8ae72:	4093      	lsls	r3, r2
   8ae74:	e9c1 2301 	strd	r2, r3, [r1, #4]
   8ae78:	f002 f834 	bl	8cee4 <_Bfree>
   8ae7c:	2300      	movs	r3, #0
   8ae7e:	6423      	str	r3, [r4, #64]	; 0x40
   8ae80:	f1b7 0900 	subs.w	r9, r7, #0
   8ae84:	bfb4      	ite	lt
   8ae86:	2301      	movlt	r3, #1
   8ae88:	2300      	movge	r3, #0
   8ae8a:	602b      	str	r3, [r5, #0]
   8ae8c:	4b76      	ldr	r3, [pc, #472]	; (8b068 <_dtoa_r+0x210>)
   8ae8e:	bfbc      	itt	lt
   8ae90:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8ae94:	f8cd 9014 	strlt.w	r9, [sp, #20]
   8ae98:	ea33 0309 	bics.w	r3, r3, r9
   8ae9c:	f000 80ab 	beq.w	8aff6 <_dtoa_r+0x19e>
   8aea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8aea4:	4610      	mov	r0, r2
   8aea6:	4619      	mov	r1, r3
   8aea8:	2200      	movs	r2, #0
   8aeaa:	2300      	movs	r3, #0
   8aeac:	e9cd 0108 	strd	r0, r1, [sp, #32]
   8aeb0:	f003 fd52 	bl	8e958 <__aeabi_dcmpeq>
   8aeb4:	4680      	mov	r8, r0
   8aeb6:	b170      	cbz	r0, 8aed6 <_dtoa_r+0x7e>
   8aeb8:	2301      	movs	r3, #1
   8aeba:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8aebc:	6013      	str	r3, [r2, #0]
   8aebe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8aec0:	2b00      	cmp	r3, #0
   8aec2:	f000 82c2 	beq.w	8b44a <_dtoa_r+0x5f2>
   8aec6:	4869      	ldr	r0, [pc, #420]	; (8b06c <_dtoa_r+0x214>)
   8aec8:	6018      	str	r0, [r3, #0]
   8aeca:	1e43      	subs	r3, r0, #1
   8aecc:	9303      	str	r3, [sp, #12]
   8aece:	9803      	ldr	r0, [sp, #12]
   8aed0:	b01b      	add	sp, #108	; 0x6c
   8aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aed6:	aa18      	add	r2, sp, #96	; 0x60
   8aed8:	ab19      	add	r3, sp, #100	; 0x64
   8aeda:	e9cd 3200 	strd	r3, r2, [sp]
   8aede:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8aee2:	4620      	mov	r0, r4
   8aee4:	f002 faf2 	bl	8d4cc <__d2b>
   8aee8:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8aeec:	4682      	mov	sl, r0
   8aeee:	f040 8098 	bne.w	8b022 <_dtoa_r+0x1ca>
   8aef2:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   8aef6:	4445      	add	r5, r8
   8aef8:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8aefc:	2820      	cmp	r0, #32
   8aefe:	f340 8390 	ble.w	8b622 <_dtoa_r+0x7ca>
   8af02:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   8af06:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8af0a:	fa09 f903 	lsl.w	r9, r9, r3
   8af0e:	fa26 f000 	lsr.w	r0, r6, r0
   8af12:	ea49 0000 	orr.w	r0, r9, r0
   8af16:	f003 fa3d 	bl	8e394 <__aeabi_ui2d>
   8af1a:	2201      	movs	r2, #1
   8af1c:	3d01      	subs	r5, #1
   8af1e:	920f      	str	r2, [sp, #60]	; 0x3c
   8af20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8af24:	2200      	movs	r2, #0
   8af26:	4b52      	ldr	r3, [pc, #328]	; (8b070 <_dtoa_r+0x218>)
   8af28:	f003 f8f6 	bl	8e118 <__aeabi_dsub>
   8af2c:	a348      	add	r3, pc, #288	; (adr r3, 8b050 <_dtoa_r+0x1f8>)
   8af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af32:	f003 faa9 	bl	8e488 <__aeabi_dmul>
   8af36:	a348      	add	r3, pc, #288	; (adr r3, 8b058 <_dtoa_r+0x200>)
   8af38:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af3c:	f003 f8ee 	bl	8e11c <__adddf3>
   8af40:	4606      	mov	r6, r0
   8af42:	4628      	mov	r0, r5
   8af44:	460f      	mov	r7, r1
   8af46:	f003 fa35 	bl	8e3b4 <__aeabi_i2d>
   8af4a:	a345      	add	r3, pc, #276	; (adr r3, 8b060 <_dtoa_r+0x208>)
   8af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af50:	f003 fa9a 	bl	8e488 <__aeabi_dmul>
   8af54:	4602      	mov	r2, r0
   8af56:	460b      	mov	r3, r1
   8af58:	4630      	mov	r0, r6
   8af5a:	4639      	mov	r1, r7
   8af5c:	f003 f8de 	bl	8e11c <__adddf3>
   8af60:	4606      	mov	r6, r0
   8af62:	460f      	mov	r7, r1
   8af64:	f003 fd40 	bl	8e9e8 <__aeabi_d2iz>
   8af68:	2200      	movs	r2, #0
   8af6a:	4683      	mov	fp, r0
   8af6c:	2300      	movs	r3, #0
   8af6e:	4630      	mov	r0, r6
   8af70:	4639      	mov	r1, r7
   8af72:	f003 fcfb 	bl	8e96c <__aeabi_dcmplt>
   8af76:	2800      	cmp	r0, #0
   8af78:	f040 825a 	bne.w	8b430 <_dtoa_r+0x5d8>
   8af7c:	f1bb 0f16 	cmp.w	fp, #22
   8af80:	f200 8248 	bhi.w	8b414 <_dtoa_r+0x5bc>
   8af84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8af88:	4b3a      	ldr	r3, [pc, #232]	; (8b074 <_dtoa_r+0x21c>)
   8af8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af92:	f003 fceb 	bl	8e96c <__aeabi_dcmplt>
   8af96:	2800      	cmp	r0, #0
   8af98:	d072      	beq.n	8b080 <_dtoa_r+0x228>
   8af9a:	2300      	movs	r3, #0
   8af9c:	eba8 0505 	sub.w	r5, r8, r5
   8afa0:	930e      	str	r3, [sp, #56]	; 0x38
   8afa2:	1e6b      	subs	r3, r5, #1
   8afa4:	f10b 3bff 	add.w	fp, fp, #4294967295
   8afa8:	9306      	str	r3, [sp, #24]
   8afaa:	f100 823b 	bmi.w	8b424 <_dtoa_r+0x5cc>
   8afae:	2300      	movs	r3, #0
   8afb0:	930b      	str	r3, [sp, #44]	; 0x2c
   8afb2:	f1bb 0f00 	cmp.w	fp, #0
   8afb6:	da6b      	bge.n	8b090 <_dtoa_r+0x238>
   8afb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8afba:	f8cd b01c 	str.w	fp, [sp, #28]
   8afbe:	eba3 030b 	sub.w	r3, r3, fp
   8afc2:	930b      	str	r3, [sp, #44]	; 0x2c
   8afc4:	f1cb 0300 	rsb	r3, fp, #0
   8afc8:	930d      	str	r3, [sp, #52]	; 0x34
   8afca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8afcc:	f04f 0b00 	mov.w	fp, #0
   8afd0:	2b09      	cmp	r3, #9
   8afd2:	d866      	bhi.n	8b0a2 <_dtoa_r+0x24a>
   8afd4:	2b05      	cmp	r3, #5
   8afd6:	f340 8322 	ble.w	8b61e <_dtoa_r+0x7c6>
   8afda:	2500      	movs	r5, #0
   8afdc:	3b04      	subs	r3, #4
   8afde:	9324      	str	r3, [sp, #144]	; 0x90
   8afe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8afe2:	3b02      	subs	r3, #2
   8afe4:	2b03      	cmp	r3, #3
   8afe6:	f200 866e 	bhi.w	8bcc6 <_dtoa_r+0xe6e>
   8afea:	e8df f013 	tbh	[pc, r3, lsl #1]
   8afee:	043b      	.short	0x043b
   8aff0:	042f0438 	.word	0x042f0438
   8aff4:	0412      	.short	0x0412
   8aff6:	f242 730f 	movw	r3, #9999	; 0x270f
   8affa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8affc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   8b000:	6013      	str	r3, [r2, #0]
   8b002:	ea59 0306 	orrs.w	r3, r9, r6
   8b006:	d11c      	bne.n	8b042 <_dtoa_r+0x1ea>
   8b008:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8b00a:	2b00      	cmp	r3, #0
   8b00c:	f000 8657 	beq.w	8bcbe <_dtoa_r+0xe66>
   8b010:	4b19      	ldr	r3, [pc, #100]	; (8b078 <_dtoa_r+0x220>)
   8b012:	9303      	str	r3, [sp, #12]
   8b014:	3308      	adds	r3, #8
   8b016:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8b018:	9803      	ldr	r0, [sp, #12]
   8b01a:	6013      	str	r3, [r2, #0]
   8b01c:	b01b      	add	sp, #108	; 0x6c
   8b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b022:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8b026:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b02a:	4608      	mov	r0, r1
   8b02c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8b030:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8b034:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   8b038:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8b03c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8b040:	e770      	b.n	8af24 <_dtoa_r+0xcc>
   8b042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8b044:	2b00      	cmp	r3, #0
   8b046:	f040 83c8 	bne.w	8b7da <_dtoa_r+0x982>
   8b04a:	4b0c      	ldr	r3, [pc, #48]	; (8b07c <_dtoa_r+0x224>)
   8b04c:	9303      	str	r3, [sp, #12]
   8b04e:	e73e      	b.n	8aece <_dtoa_r+0x76>
   8b050:	636f4361 	.word	0x636f4361
   8b054:	3fd287a7 	.word	0x3fd287a7
   8b058:	8b60c8b3 	.word	0x8b60c8b3
   8b05c:	3fc68a28 	.word	0x3fc68a28
   8b060:	509f79fb 	.word	0x509f79fb
   8b064:	3fd34413 	.word	0x3fd34413
   8b068:	7ff00000 	.word	0x7ff00000
   8b06c:	0008eb4d 	.word	0x0008eb4d
   8b070:	3ff80000 	.word	0x3ff80000
   8b074:	0008ece8 	.word	0x0008ece8
   8b078:	0008eb94 	.word	0x0008eb94
   8b07c:	0008eb90 	.word	0x0008eb90
   8b080:	eba8 0505 	sub.w	r5, r8, r5
   8b084:	1e6b      	subs	r3, r5, #1
   8b086:	9306      	str	r3, [sp, #24]
   8b088:	f100 84a9 	bmi.w	8b9de <_dtoa_r+0xb86>
   8b08c:	900e      	str	r0, [sp, #56]	; 0x38
   8b08e:	900b      	str	r0, [sp, #44]	; 0x2c
   8b090:	9b06      	ldr	r3, [sp, #24]
   8b092:	445b      	add	r3, fp
   8b094:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8b098:	2300      	movs	r3, #0
   8b09a:	930d      	str	r3, [sp, #52]	; 0x34
   8b09c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b09e:	2b09      	cmp	r3, #9
   8b0a0:	d998      	bls.n	8afd4 <_dtoa_r+0x17c>
   8b0a2:	2300      	movs	r3, #0
   8b0a4:	2501      	movs	r5, #1
   8b0a6:	9324      	str	r3, [sp, #144]	; 0x90
   8b0a8:	9325      	str	r3, [sp, #148]	; 0x94
   8b0aa:	f04f 33ff 	mov.w	r3, #4294967295
   8b0ae:	950c      	str	r5, [sp, #48]	; 0x30
   8b0b0:	930a      	str	r3, [sp, #40]	; 0x28
   8b0b2:	2100      	movs	r1, #0
   8b0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b0b6:	6461      	str	r1, [r4, #68]	; 0x44
   8b0b8:	9312      	str	r3, [sp, #72]	; 0x48
   8b0ba:	4620      	mov	r0, r4
   8b0bc:	f001 feec 	bl	8ce98 <_Balloc>
   8b0c0:	9003      	str	r0, [sp, #12]
   8b0c2:	2800      	cmp	r0, #0
   8b0c4:	f000 8607 	beq.w	8bcd6 <_dtoa_r+0xe7e>
   8b0c8:	9b03      	ldr	r3, [sp, #12]
   8b0ca:	6423      	str	r3, [r4, #64]	; 0x40
   8b0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b0ce:	2b0e      	cmp	r3, #14
   8b0d0:	f200 80e9 	bhi.w	8b2a6 <_dtoa_r+0x44e>
   8b0d4:	2d00      	cmp	r5, #0
   8b0d6:	f000 80e6 	beq.w	8b2a6 <_dtoa_r+0x44e>
   8b0da:	9907      	ldr	r1, [sp, #28]
   8b0dc:	2900      	cmp	r1, #0
   8b0de:	f340 8452 	ble.w	8b986 <_dtoa_r+0xb2e>
   8b0e2:	4bb5      	ldr	r3, [pc, #724]	; (8b3b8 <_dtoa_r+0x560>)
   8b0e4:	f001 020f 	and.w	r2, r1, #15
   8b0e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b0ec:	05c8      	lsls	r0, r1, #23
   8b0ee:	ea4f 1521 	mov.w	r5, r1, asr #4
   8b0f2:	e9d3 6700 	ldrd	r6, r7, [r3]
   8b0f6:	f140 83ee 	bpl.w	8b8d6 <_dtoa_r+0xa7e>
   8b0fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b0fe:	4baf      	ldr	r3, [pc, #700]	; (8b3bc <_dtoa_r+0x564>)
   8b100:	f04f 0903 	mov.w	r9, #3
   8b104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8b108:	f003 fae8 	bl	8e6dc <__aeabi_ddiv>
   8b10c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8b110:	f005 050f 	and.w	r5, r5, #15
   8b114:	b18d      	cbz	r5, 8b13a <_dtoa_r+0x2e2>
   8b116:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8b3bc <_dtoa_r+0x564>
   8b11a:	07e9      	lsls	r1, r5, #31
   8b11c:	d509      	bpl.n	8b132 <_dtoa_r+0x2da>
   8b11e:	e9d8 2300 	ldrd	r2, r3, [r8]
   8b122:	4630      	mov	r0, r6
   8b124:	4639      	mov	r1, r7
   8b126:	f003 f9af 	bl	8e488 <__aeabi_dmul>
   8b12a:	4606      	mov	r6, r0
   8b12c:	460f      	mov	r7, r1
   8b12e:	f109 0901 	add.w	r9, r9, #1
   8b132:	106d      	asrs	r5, r5, #1
   8b134:	f108 0808 	add.w	r8, r8, #8
   8b138:	d1ef      	bne.n	8b11a <_dtoa_r+0x2c2>
   8b13a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8b13e:	4632      	mov	r2, r6
   8b140:	463b      	mov	r3, r7
   8b142:	f003 facb 	bl	8e6dc <__aeabi_ddiv>
   8b146:	4606      	mov	r6, r0
   8b148:	460f      	mov	r7, r1
   8b14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8b14c:	b143      	cbz	r3, 8b160 <_dtoa_r+0x308>
   8b14e:	2200      	movs	r2, #0
   8b150:	4630      	mov	r0, r6
   8b152:	4639      	mov	r1, r7
   8b154:	4b9a      	ldr	r3, [pc, #616]	; (8b3c0 <_dtoa_r+0x568>)
   8b156:	f003 fc09 	bl	8e96c <__aeabi_dcmplt>
   8b15a:	2800      	cmp	r0, #0
   8b15c:	f040 853b 	bne.w	8bbd6 <_dtoa_r+0xd7e>
   8b160:	4648      	mov	r0, r9
   8b162:	f003 f927 	bl	8e3b4 <__aeabi_i2d>
   8b166:	4632      	mov	r2, r6
   8b168:	463b      	mov	r3, r7
   8b16a:	f003 f98d 	bl	8e488 <__aeabi_dmul>
   8b16e:	4b95      	ldr	r3, [pc, #596]	; (8b3c4 <_dtoa_r+0x56c>)
   8b170:	2200      	movs	r2, #0
   8b172:	f002 ffd3 	bl	8e11c <__adddf3>
   8b176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b178:	4680      	mov	r8, r0
   8b17a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b17e:	2b00      	cmp	r3, #0
   8b180:	f000 83ce 	beq.w	8b920 <_dtoa_r+0xac8>
   8b184:	9b07      	ldr	r3, [sp, #28]
   8b186:	9313      	str	r3, [sp, #76]	; 0x4c
   8b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b18a:	9310      	str	r3, [sp, #64]	; 0x40
   8b18c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b18e:	2b00      	cmp	r3, #0
   8b190:	f000 84b7 	beq.w	8bb02 <_dtoa_r+0xcaa>
   8b194:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8b196:	4b88      	ldr	r3, [pc, #544]	; (8b3b8 <_dtoa_r+0x560>)
   8b198:	2000      	movs	r0, #0
   8b19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b19e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8b1a2:	4989      	ldr	r1, [pc, #548]	; (8b3c8 <_dtoa_r+0x570>)
   8b1a4:	f003 fa9a 	bl	8e6dc <__aeabi_ddiv>
   8b1a8:	4642      	mov	r2, r8
   8b1aa:	464b      	mov	r3, r9
   8b1ac:	f002 ffb4 	bl	8e118 <__aeabi_dsub>
   8b1b0:	4602      	mov	r2, r0
   8b1b2:	460b      	mov	r3, r1
   8b1b4:	4630      	mov	r0, r6
   8b1b6:	4639      	mov	r1, r7
   8b1b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8b1bc:	f003 fc14 	bl	8e9e8 <__aeabi_d2iz>
   8b1c0:	4680      	mov	r8, r0
   8b1c2:	f003 f8f7 	bl	8e3b4 <__aeabi_i2d>
   8b1c6:	4602      	mov	r2, r0
   8b1c8:	460b      	mov	r3, r1
   8b1ca:	4630      	mov	r0, r6
   8b1cc:	4639      	mov	r1, r7
   8b1ce:	f002 ffa3 	bl	8e118 <__aeabi_dsub>
   8b1d2:	9d03      	ldr	r5, [sp, #12]
   8b1d4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b1d8:	4606      	mov	r6, r0
   8b1da:	460f      	mov	r7, r1
   8b1dc:	4602      	mov	r2, r0
   8b1de:	f805 3b01 	strb.w	r3, [r5], #1
   8b1e2:	460b      	mov	r3, r1
   8b1e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8b1e8:	f003 fbde 	bl	8e9a8 <__aeabi_dcmpgt>
   8b1ec:	2800      	cmp	r0, #0
   8b1ee:	f040 853b 	bne.w	8bc68 <_dtoa_r+0xe10>
   8b1f2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8b1f6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8b1fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8b1fe:	f04f 0900 	mov.w	r9, #0
   8b202:	9410      	str	r4, [sp, #64]	; 0x40
   8b204:	e02a      	b.n	8b25c <_dtoa_r+0x404>
   8b206:	f109 0901 	add.w	r9, r9, #1
   8b20a:	45c1      	cmp	r9, r8
   8b20c:	da48      	bge.n	8b2a0 <_dtoa_r+0x448>
   8b20e:	4650      	mov	r0, sl
   8b210:	4659      	mov	r1, fp
   8b212:	2200      	movs	r2, #0
   8b214:	4b6d      	ldr	r3, [pc, #436]	; (8b3cc <_dtoa_r+0x574>)
   8b216:	f003 f937 	bl	8e488 <__aeabi_dmul>
   8b21a:	2200      	movs	r2, #0
   8b21c:	4b6b      	ldr	r3, [pc, #428]	; (8b3cc <_dtoa_r+0x574>)
   8b21e:	4682      	mov	sl, r0
   8b220:	468b      	mov	fp, r1
   8b222:	4630      	mov	r0, r6
   8b224:	4639      	mov	r1, r7
   8b226:	f003 f92f 	bl	8e488 <__aeabi_dmul>
   8b22a:	460f      	mov	r7, r1
   8b22c:	4606      	mov	r6, r0
   8b22e:	f003 fbdb 	bl	8e9e8 <__aeabi_d2iz>
   8b232:	4604      	mov	r4, r0
   8b234:	f003 f8be 	bl	8e3b4 <__aeabi_i2d>
   8b238:	4602      	mov	r2, r0
   8b23a:	460b      	mov	r3, r1
   8b23c:	4630      	mov	r0, r6
   8b23e:	4639      	mov	r1, r7
   8b240:	f002 ff6a 	bl	8e118 <__aeabi_dsub>
   8b244:	3430      	adds	r4, #48	; 0x30
   8b246:	4652      	mov	r2, sl
   8b248:	465b      	mov	r3, fp
   8b24a:	f805 4b01 	strb.w	r4, [r5], #1
   8b24e:	4606      	mov	r6, r0
   8b250:	460f      	mov	r7, r1
   8b252:	f003 fb8b 	bl	8e96c <__aeabi_dcmplt>
   8b256:	2800      	cmp	r0, #0
   8b258:	f040 8503 	bne.w	8bc62 <_dtoa_r+0xe0a>
   8b25c:	4632      	mov	r2, r6
   8b25e:	463b      	mov	r3, r7
   8b260:	2000      	movs	r0, #0
   8b262:	4957      	ldr	r1, [pc, #348]	; (8b3c0 <_dtoa_r+0x568>)
   8b264:	f002 ff58 	bl	8e118 <__aeabi_dsub>
   8b268:	4652      	mov	r2, sl
   8b26a:	465b      	mov	r3, fp
   8b26c:	f003 fb7e 	bl	8e96c <__aeabi_dcmplt>
   8b270:	2800      	cmp	r0, #0
   8b272:	d0c8      	beq.n	8b206 <_dtoa_r+0x3ae>
   8b274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b276:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8b27a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8b27c:	9a03      	ldr	r2, [sp, #12]
   8b27e:	9307      	str	r3, [sp, #28]
   8b280:	e002      	b.n	8b288 <_dtoa_r+0x430>
   8b282:	4295      	cmp	r5, r2
   8b284:	f000 84d2 	beq.w	8bc2c <_dtoa_r+0xdd4>
   8b288:	46a9      	mov	r9, r5
   8b28a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8b28e:	2b39      	cmp	r3, #57	; 0x39
   8b290:	d0f7      	beq.n	8b282 <_dtoa_r+0x42a>
   8b292:	3301      	adds	r3, #1
   8b294:	b2db      	uxtb	r3, r3
   8b296:	702b      	strb	r3, [r5, #0]
   8b298:	9b07      	ldr	r3, [sp, #28]
   8b29a:	3301      	adds	r3, #1
   8b29c:	9307      	str	r3, [sp, #28]
   8b29e:	e1a0      	b.n	8b5e2 <_dtoa_r+0x78a>
   8b2a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8b2a2:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8b2a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8b2a8:	2b00      	cmp	r3, #0
   8b2aa:	f2c0 8093 	blt.w	8b3d4 <_dtoa_r+0x57c>
   8b2ae:	9a07      	ldr	r2, [sp, #28]
   8b2b0:	2a0e      	cmp	r2, #14
   8b2b2:	f300 808f 	bgt.w	8b3d4 <_dtoa_r+0x57c>
   8b2b6:	4b40      	ldr	r3, [pc, #256]	; (8b3b8 <_dtoa_r+0x560>)
   8b2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b2c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8b2c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b2c6:	2b00      	cmp	r3, #0
   8b2c8:	da1a      	bge.n	8b300 <_dtoa_r+0x4a8>
   8b2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b2cc:	2b00      	cmp	r3, #0
   8b2ce:	dc17      	bgt.n	8b300 <_dtoa_r+0x4a8>
   8b2d0:	f040 833f 	bne.w	8b952 <_dtoa_r+0xafa>
   8b2d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8b2d8:	2200      	movs	r2, #0
   8b2da:	4b3d      	ldr	r3, [pc, #244]	; (8b3d0 <_dtoa_r+0x578>)
   8b2dc:	f003 f8d4 	bl	8e488 <__aeabi_dmul>
   8b2e0:	4602      	mov	r2, r0
   8b2e2:	460b      	mov	r3, r1
   8b2e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b2e8:	f003 fb4a 	bl	8e980 <__aeabi_dcmple>
   8b2ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8b2f0:	4645      	mov	r5, r8
   8b2f2:	2800      	cmp	r0, #0
   8b2f4:	f000 82cd 	beq.w	8b892 <_dtoa_r+0xa3a>
   8b2f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b2fa:	9f03      	ldr	r7, [sp, #12]
   8b2fc:	43de      	mvns	r6, r3
   8b2fe:	e2d0      	b.n	8b8a2 <_dtoa_r+0xa4a>
   8b300:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8b304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b308:	4632      	mov	r2, r6
   8b30a:	463b      	mov	r3, r7
   8b30c:	f003 f9e6 	bl	8e6dc <__aeabi_ddiv>
   8b310:	f003 fb6a 	bl	8e9e8 <__aeabi_d2iz>
   8b314:	4680      	mov	r8, r0
   8b316:	f003 f84d 	bl	8e3b4 <__aeabi_i2d>
   8b31a:	4632      	mov	r2, r6
   8b31c:	463b      	mov	r3, r7
   8b31e:	f003 f8b3 	bl	8e488 <__aeabi_dmul>
   8b322:	460b      	mov	r3, r1
   8b324:	4602      	mov	r2, r0
   8b326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b32a:	f002 fef5 	bl	8e118 <__aeabi_dsub>
   8b32e:	9d03      	ldr	r5, [sp, #12]
   8b330:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b334:	f805 3b01 	strb.w	r3, [r5], #1
   8b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b33a:	2b01      	cmp	r3, #1
   8b33c:	f000 837f 	beq.w	8ba3e <_dtoa_r+0xbe6>
   8b340:	f8cd a018 	str.w	sl, [sp, #24]
   8b344:	f04f 0901 	mov.w	r9, #1
   8b348:	469b      	mov	fp, r3
   8b34a:	46aa      	mov	sl, r5
   8b34c:	9408      	str	r4, [sp, #32]
   8b34e:	e01d      	b.n	8b38c <_dtoa_r+0x534>
   8b350:	4632      	mov	r2, r6
   8b352:	463b      	mov	r3, r7
   8b354:	4620      	mov	r0, r4
   8b356:	4629      	mov	r1, r5
   8b358:	f003 f9c0 	bl	8e6dc <__aeabi_ddiv>
   8b35c:	f003 fb44 	bl	8e9e8 <__aeabi_d2iz>
   8b360:	4680      	mov	r8, r0
   8b362:	f003 f827 	bl	8e3b4 <__aeabi_i2d>
   8b366:	4632      	mov	r2, r6
   8b368:	463b      	mov	r3, r7
   8b36a:	f003 f88d 	bl	8e488 <__aeabi_dmul>
   8b36e:	f109 0901 	add.w	r9, r9, #1
   8b372:	460b      	mov	r3, r1
   8b374:	4602      	mov	r2, r0
   8b376:	4629      	mov	r1, r5
   8b378:	4620      	mov	r0, r4
   8b37a:	f002 fecd 	bl	8e118 <__aeabi_dsub>
   8b37e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b382:	45cb      	cmp	fp, r9
   8b384:	f80a 3b01 	strb.w	r3, [sl], #1
   8b388:	f000 8355 	beq.w	8ba36 <_dtoa_r+0xbde>
   8b38c:	2200      	movs	r2, #0
   8b38e:	4b0f      	ldr	r3, [pc, #60]	; (8b3cc <_dtoa_r+0x574>)
   8b390:	f003 f87a 	bl	8e488 <__aeabi_dmul>
   8b394:	2200      	movs	r2, #0
   8b396:	2300      	movs	r3, #0
   8b398:	4604      	mov	r4, r0
   8b39a:	460d      	mov	r5, r1
   8b39c:	f003 fadc 	bl	8e958 <__aeabi_dcmpeq>
   8b3a0:	2800      	cmp	r0, #0
   8b3a2:	d0d5      	beq.n	8b350 <_dtoa_r+0x4f8>
   8b3a4:	4655      	mov	r5, sl
   8b3a6:	9c08      	ldr	r4, [sp, #32]
   8b3a8:	f8dd a018 	ldr.w	sl, [sp, #24]
   8b3ac:	9b07      	ldr	r3, [sp, #28]
   8b3ae:	46a9      	mov	r9, r5
   8b3b0:	3301      	adds	r3, #1
   8b3b2:	9307      	str	r3, [sp, #28]
   8b3b4:	e115      	b.n	8b5e2 <_dtoa_r+0x78a>
   8b3b6:	bf00      	nop
   8b3b8:	0008ece8 	.word	0x0008ece8
   8b3bc:	0008ecc0 	.word	0x0008ecc0
   8b3c0:	3ff00000 	.word	0x3ff00000
   8b3c4:	401c0000 	.word	0x401c0000
   8b3c8:	3fe00000 	.word	0x3fe00000
   8b3cc:	40240000 	.word	0x40240000
   8b3d0:	40140000 	.word	0x40140000
   8b3d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b3d6:	2a00      	cmp	r2, #0
   8b3d8:	d03d      	beq.n	8b456 <_dtoa_r+0x5fe>
   8b3da:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8b3dc:	2a01      	cmp	r2, #1
   8b3de:	f340 82bc 	ble.w	8b95a <_dtoa_r+0xb02>
   8b3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b3e4:	1e5f      	subs	r7, r3, #1
   8b3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b3e8:	42bb      	cmp	r3, r7
   8b3ea:	f2c0 826e 	blt.w	8b8ca <_dtoa_r+0xa72>
   8b3ee:	1bdf      	subs	r7, r3, r7
   8b3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b3f2:	2b00      	cmp	r3, #0
   8b3f4:	f2c0 8354 	blt.w	8baa0 <_dtoa_r+0xc48>
   8b3f8:	9a06      	ldr	r2, [sp, #24]
   8b3fa:	4611      	mov	r1, r2
   8b3fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8b3fe:	4419      	add	r1, r3
   8b400:	4616      	mov	r6, r2
   8b402:	441a      	add	r2, r3
   8b404:	9106      	str	r1, [sp, #24]
   8b406:	920b      	str	r2, [sp, #44]	; 0x2c
   8b408:	2101      	movs	r1, #1
   8b40a:	4620      	mov	r0, r4
   8b40c:	f001 fe12 	bl	8d034 <__i2b>
   8b410:	4605      	mov	r5, r0
   8b412:	e023      	b.n	8b45c <_dtoa_r+0x604>
   8b414:	2301      	movs	r3, #1
   8b416:	eba8 0505 	sub.w	r5, r8, r5
   8b41a:	930e      	str	r3, [sp, #56]	; 0x38
   8b41c:	1e6b      	subs	r3, r5, #1
   8b41e:	9306      	str	r3, [sp, #24]
   8b420:	f57f adc5 	bpl.w	8afae <_dtoa_r+0x156>
   8b424:	f1c5 0301 	rsb	r3, r5, #1
   8b428:	930b      	str	r3, [sp, #44]	; 0x2c
   8b42a:	2300      	movs	r3, #0
   8b42c:	9306      	str	r3, [sp, #24]
   8b42e:	e5c0      	b.n	8afb2 <_dtoa_r+0x15a>
   8b430:	4658      	mov	r0, fp
   8b432:	f002 ffbf 	bl	8e3b4 <__aeabi_i2d>
   8b436:	4632      	mov	r2, r6
   8b438:	463b      	mov	r3, r7
   8b43a:	f003 fa8d 	bl	8e958 <__aeabi_dcmpeq>
   8b43e:	2800      	cmp	r0, #0
   8b440:	f47f ad9c 	bne.w	8af7c <_dtoa_r+0x124>
   8b444:	f10b 3bff 	add.w	fp, fp, #4294967295
   8b448:	e598      	b.n	8af7c <_dtoa_r+0x124>
   8b44a:	4bc7      	ldr	r3, [pc, #796]	; (8b768 <_dtoa_r+0x910>)
   8b44c:	9303      	str	r3, [sp, #12]
   8b44e:	9803      	ldr	r0, [sp, #12]
   8b450:	b01b      	add	sp, #108	; 0x6c
   8b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b456:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b458:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8b45c:	2e00      	cmp	r6, #0
   8b45e:	dd0c      	ble.n	8b47a <_dtoa_r+0x622>
   8b460:	9a06      	ldr	r2, [sp, #24]
   8b462:	2a00      	cmp	r2, #0
   8b464:	dd09      	ble.n	8b47a <_dtoa_r+0x622>
   8b466:	42b2      	cmp	r2, r6
   8b468:	4613      	mov	r3, r2
   8b46a:	bfa8      	it	ge
   8b46c:	4633      	movge	r3, r6
   8b46e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b470:	1af6      	subs	r6, r6, r3
   8b472:	1ac9      	subs	r1, r1, r3
   8b474:	1ad3      	subs	r3, r2, r3
   8b476:	910b      	str	r1, [sp, #44]	; 0x2c
   8b478:	9306      	str	r3, [sp, #24]
   8b47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b47c:	b1d3      	cbz	r3, 8b4b4 <_dtoa_r+0x65c>
   8b47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b480:	2b00      	cmp	r3, #0
   8b482:	f000 81a3 	beq.w	8b7cc <_dtoa_r+0x974>
   8b486:	2f00      	cmp	r7, #0
   8b488:	dd10      	ble.n	8b4ac <_dtoa_r+0x654>
   8b48a:	4629      	mov	r1, r5
   8b48c:	463a      	mov	r2, r7
   8b48e:	4620      	mov	r0, r4
   8b490:	f001 fe96 	bl	8d1c0 <__pow5mult>
   8b494:	4652      	mov	r2, sl
   8b496:	4601      	mov	r1, r0
   8b498:	4605      	mov	r5, r0
   8b49a:	4620      	mov	r0, r4
   8b49c:	f001 fde0 	bl	8d060 <__multiply>
   8b4a0:	4603      	mov	r3, r0
   8b4a2:	4651      	mov	r1, sl
   8b4a4:	4620      	mov	r0, r4
   8b4a6:	469a      	mov	sl, r3
   8b4a8:	f001 fd1c 	bl	8cee4 <_Bfree>
   8b4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b4ae:	1bda      	subs	r2, r3, r7
   8b4b0:	f040 818d 	bne.w	8b7ce <_dtoa_r+0x976>
   8b4b4:	2101      	movs	r1, #1
   8b4b6:	4620      	mov	r0, r4
   8b4b8:	f001 fdbc 	bl	8d034 <__i2b>
   8b4bc:	f1bb 0f00 	cmp.w	fp, #0
   8b4c0:	4680      	mov	r8, r0
   8b4c2:	f300 80b3 	bgt.w	8b62c <_dtoa_r+0x7d4>
   8b4c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b4c8:	2b01      	cmp	r3, #1
   8b4ca:	f340 818a 	ble.w	8b7e2 <_dtoa_r+0x98a>
   8b4ce:	f04f 0900 	mov.w	r9, #0
   8b4d2:	2001      	movs	r0, #1
   8b4d4:	f1bb 0f00 	cmp.w	fp, #0
   8b4d8:	f040 80b4 	bne.w	8b644 <_dtoa_r+0x7ec>
   8b4dc:	9a06      	ldr	r2, [sp, #24]
   8b4de:	4410      	add	r0, r2
   8b4e0:	f010 001f 	ands.w	r0, r0, #31
   8b4e4:	f000 8092 	beq.w	8b60c <_dtoa_r+0x7b4>
   8b4e8:	f1c0 0320 	rsb	r3, r0, #32
   8b4ec:	2b04      	cmp	r3, #4
   8b4ee:	f340 83f9 	ble.w	8bce4 <_dtoa_r+0xe8c>
   8b4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b4f4:	f1c0 001c 	rsb	r0, r0, #28
   8b4f8:	4403      	add	r3, r0
   8b4fa:	4402      	add	r2, r0
   8b4fc:	930b      	str	r3, [sp, #44]	; 0x2c
   8b4fe:	4406      	add	r6, r0
   8b500:	9206      	str	r2, [sp, #24]
   8b502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b504:	2b00      	cmp	r3, #0
   8b506:	dd05      	ble.n	8b514 <_dtoa_r+0x6bc>
   8b508:	4651      	mov	r1, sl
   8b50a:	461a      	mov	r2, r3
   8b50c:	4620      	mov	r0, r4
   8b50e:	f001 fea3 	bl	8d258 <__lshift>
   8b512:	4682      	mov	sl, r0
   8b514:	9b06      	ldr	r3, [sp, #24]
   8b516:	2b00      	cmp	r3, #0
   8b518:	dd05      	ble.n	8b526 <_dtoa_r+0x6ce>
   8b51a:	4641      	mov	r1, r8
   8b51c:	461a      	mov	r2, r3
   8b51e:	4620      	mov	r0, r4
   8b520:	f001 fe9a 	bl	8d258 <__lshift>
   8b524:	4680      	mov	r8, r0
   8b526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8b528:	2b00      	cmp	r3, #0
   8b52a:	f040 8135 	bne.w	8b798 <_dtoa_r+0x940>
   8b52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b530:	2b00      	cmp	r3, #0
   8b532:	f340 811b 	ble.w	8b76c <_dtoa_r+0x914>
   8b536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b538:	2b00      	cmp	r3, #0
   8b53a:	f040 809a 	bne.w	8b672 <_dtoa_r+0x81a>
   8b53e:	9b07      	ldr	r3, [sp, #28]
   8b540:	3301      	adds	r3, #1
   8b542:	9307      	str	r3, [sp, #28]
   8b544:	2601      	movs	r6, #1
   8b546:	9f03      	ldr	r7, [sp, #12]
   8b548:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8b54c:	e007      	b.n	8b55e <_dtoa_r+0x706>
   8b54e:	4651      	mov	r1, sl
   8b550:	2300      	movs	r3, #0
   8b552:	220a      	movs	r2, #10
   8b554:	4620      	mov	r0, r4
   8b556:	f001 fccf 	bl	8cef8 <__multadd>
   8b55a:	4682      	mov	sl, r0
   8b55c:	3601      	adds	r6, #1
   8b55e:	4641      	mov	r1, r8
   8b560:	4650      	mov	r0, sl
   8b562:	f7ff fbe7 	bl	8ad34 <quorem>
   8b566:	454e      	cmp	r6, r9
   8b568:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8b56c:	f807 3b01 	strb.w	r3, [r7], #1
   8b570:	dbed      	blt.n	8b54e <_dtoa_r+0x6f6>
   8b572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b574:	2600      	movs	r6, #0
   8b576:	2a00      	cmp	r2, #0
   8b578:	bfcc      	ite	gt
   8b57a:	4693      	movgt	fp, r2
   8b57c:	f04f 0b01 	movle.w	fp, #1
   8b580:	9a03      	ldr	r2, [sp, #12]
   8b582:	4493      	add	fp, r2
   8b584:	4651      	mov	r1, sl
   8b586:	2201      	movs	r2, #1
   8b588:	4620      	mov	r0, r4
   8b58a:	9304      	str	r3, [sp, #16]
   8b58c:	f001 fe64 	bl	8d258 <__lshift>
   8b590:	4641      	mov	r1, r8
   8b592:	4682      	mov	sl, r0
   8b594:	f001 fed4 	bl	8d340 <__mcmp>
   8b598:	2800      	cmp	r0, #0
   8b59a:	f340 81a8 	ble.w	8b8ee <_dtoa_r+0xa96>
   8b59e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8b5a2:	9a03      	ldr	r2, [sp, #12]
   8b5a4:	f10b 3bff 	add.w	fp, fp, #4294967295
   8b5a8:	e004      	b.n	8b5b4 <_dtoa_r+0x75c>
   8b5aa:	455a      	cmp	r2, fp
   8b5ac:	f000 81e4 	beq.w	8b978 <_dtoa_r+0xb20>
   8b5b0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8b5b4:	2b39      	cmp	r3, #57	; 0x39
   8b5b6:	f10b 0901 	add.w	r9, fp, #1
   8b5ba:	d0f6      	beq.n	8b5aa <_dtoa_r+0x752>
   8b5bc:	3301      	adds	r3, #1
   8b5be:	f88b 3000 	strb.w	r3, [fp]
   8b5c2:	4641      	mov	r1, r8
   8b5c4:	4620      	mov	r0, r4
   8b5c6:	f001 fc8d 	bl	8cee4 <_Bfree>
   8b5ca:	b155      	cbz	r5, 8b5e2 <_dtoa_r+0x78a>
   8b5cc:	b12e      	cbz	r6, 8b5da <_dtoa_r+0x782>
   8b5ce:	42ae      	cmp	r6, r5
   8b5d0:	d003      	beq.n	8b5da <_dtoa_r+0x782>
   8b5d2:	4631      	mov	r1, r6
   8b5d4:	4620      	mov	r0, r4
   8b5d6:	f001 fc85 	bl	8cee4 <_Bfree>
   8b5da:	4629      	mov	r1, r5
   8b5dc:	4620      	mov	r0, r4
   8b5de:	f001 fc81 	bl	8cee4 <_Bfree>
   8b5e2:	4651      	mov	r1, sl
   8b5e4:	4620      	mov	r0, r4
   8b5e6:	f001 fc7d 	bl	8cee4 <_Bfree>
   8b5ea:	2300      	movs	r3, #0
   8b5ec:	f889 3000 	strb.w	r3, [r9]
   8b5f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8b5f2:	461a      	mov	r2, r3
   8b5f4:	9b07      	ldr	r3, [sp, #28]
   8b5f6:	6013      	str	r3, [r2, #0]
   8b5f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8b5fa:	2b00      	cmp	r3, #0
   8b5fc:	f43f ac67 	beq.w	8aece <_dtoa_r+0x76>
   8b600:	9803      	ldr	r0, [sp, #12]
   8b602:	f8c3 9000 	str.w	r9, [r3]
   8b606:	b01b      	add	sp, #108	; 0x6c
   8b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b60c:	201c      	movs	r0, #28
   8b60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b610:	4406      	add	r6, r0
   8b612:	4403      	add	r3, r0
   8b614:	930b      	str	r3, [sp, #44]	; 0x2c
   8b616:	9b06      	ldr	r3, [sp, #24]
   8b618:	4403      	add	r3, r0
   8b61a:	9306      	str	r3, [sp, #24]
   8b61c:	e771      	b.n	8b502 <_dtoa_r+0x6aa>
   8b61e:	2501      	movs	r5, #1
   8b620:	e4de      	b.n	8afe0 <_dtoa_r+0x188>
   8b622:	f1c0 0020 	rsb	r0, r0, #32
   8b626:	fa06 f000 	lsl.w	r0, r6, r0
   8b62a:	e474      	b.n	8af16 <_dtoa_r+0xbe>
   8b62c:	4601      	mov	r1, r0
   8b62e:	465a      	mov	r2, fp
   8b630:	4620      	mov	r0, r4
   8b632:	f001 fdc5 	bl	8d1c0 <__pow5mult>
   8b636:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b638:	4680      	mov	r8, r0
   8b63a:	2b01      	cmp	r3, #1
   8b63c:	f340 81d1 	ble.w	8b9e2 <_dtoa_r+0xb8a>
   8b640:	f04f 0900 	mov.w	r9, #0
   8b644:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8b648:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8b64c:	6918      	ldr	r0, [r3, #16]
   8b64e:	f001 fca1 	bl	8cf94 <__hi0bits>
   8b652:	f1c0 0020 	rsb	r0, r0, #32
   8b656:	e741      	b.n	8b4dc <_dtoa_r+0x684>
   8b658:	4629      	mov	r1, r5
   8b65a:	2300      	movs	r3, #0
   8b65c:	220a      	movs	r2, #10
   8b65e:	4620      	mov	r0, r4
   8b660:	f001 fc4a 	bl	8cef8 <__multadd>
   8b664:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b666:	4605      	mov	r5, r0
   8b668:	2b00      	cmp	r3, #0
   8b66a:	f340 8315 	ble.w	8bc98 <_dtoa_r+0xe40>
   8b66e:	9707      	str	r7, [sp, #28]
   8b670:	930a      	str	r3, [sp, #40]	; 0x28
   8b672:	2e00      	cmp	r6, #0
   8b674:	f300 8122 	bgt.w	8b8bc <_dtoa_r+0xa64>
   8b678:	f1b9 0f00 	cmp.w	r9, #0
   8b67c:	f040 81f9 	bne.w	8ba72 <_dtoa_r+0xc1a>
   8b680:	462f      	mov	r7, r5
   8b682:	9903      	ldr	r1, [sp, #12]
   8b684:	9b04      	ldr	r3, [sp, #16]
   8b686:	460e      	mov	r6, r1
   8b688:	f003 0201 	and.w	r2, r3, #1
   8b68c:	1e4b      	subs	r3, r1, #1
   8b68e:	9924      	ldr	r1, [sp, #144]	; 0x90
   8b690:	920c      	str	r2, [sp, #48]	; 0x30
   8b692:	430a      	orrs	r2, r1
   8b694:	920b      	str	r2, [sp, #44]	; 0x2c
   8b696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b698:	441a      	add	r2, r3
   8b69a:	920a      	str	r2, [sp, #40]	; 0x28
   8b69c:	4641      	mov	r1, r8
   8b69e:	4650      	mov	r0, sl
   8b6a0:	f7ff fb48 	bl	8ad34 <quorem>
   8b6a4:	4629      	mov	r1, r5
   8b6a6:	4683      	mov	fp, r0
   8b6a8:	4650      	mov	r0, sl
   8b6aa:	f001 fe49 	bl	8d340 <__mcmp>
   8b6ae:	463a      	mov	r2, r7
   8b6b0:	4641      	mov	r1, r8
   8b6b2:	4681      	mov	r9, r0
   8b6b4:	4620      	mov	r0, r4
   8b6b6:	f001 fe61 	bl	8d37c <__mdiff>
   8b6ba:	68c2      	ldr	r2, [r0, #12]
   8b6bc:	4601      	mov	r1, r0
   8b6be:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8b6c2:	2a00      	cmp	r2, #0
   8b6c4:	d142      	bne.n	8b74c <_dtoa_r+0x8f4>
   8b6c6:	9006      	str	r0, [sp, #24]
   8b6c8:	4650      	mov	r0, sl
   8b6ca:	9308      	str	r3, [sp, #32]
   8b6cc:	f001 fe38 	bl	8d340 <__mcmp>
   8b6d0:	9906      	ldr	r1, [sp, #24]
   8b6d2:	9004      	str	r0, [sp, #16]
   8b6d4:	4620      	mov	r0, r4
   8b6d6:	f001 fc05 	bl	8cee4 <_Bfree>
   8b6da:	9a04      	ldr	r2, [sp, #16]
   8b6dc:	9b08      	ldr	r3, [sp, #32]
   8b6de:	b91a      	cbnz	r2, 8b6e8 <_dtoa_r+0x890>
   8b6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b6e2:	2900      	cmp	r1, #0
   8b6e4:	f000 82cb 	beq.w	8bc7e <_dtoa_r+0xe26>
   8b6e8:	f1b9 0f00 	cmp.w	r9, #0
   8b6ec:	f2c0 8185 	blt.w	8b9fa <_dtoa_r+0xba2>
   8b6f0:	9924      	ldr	r1, [sp, #144]	; 0x90
   8b6f2:	ea41 0909 	orr.w	r9, r1, r9
   8b6f6:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b6f8:	ea51 0109 	orrs.w	r1, r1, r9
   8b6fc:	f000 817d 	beq.w	8b9fa <_dtoa_r+0xba2>
   8b700:	2a00      	cmp	r2, #0
   8b702:	f300 81d1 	bgt.w	8baa8 <_dtoa_r+0xc50>
   8b706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b708:	f106 0901 	add.w	r9, r6, #1
   8b70c:	4296      	cmp	r6, r2
   8b70e:	46cb      	mov	fp, r9
   8b710:	7033      	strb	r3, [r6, #0]
   8b712:	f000 81e3 	beq.w	8badc <_dtoa_r+0xc84>
   8b716:	4651      	mov	r1, sl
   8b718:	2300      	movs	r3, #0
   8b71a:	220a      	movs	r2, #10
   8b71c:	4620      	mov	r0, r4
   8b71e:	f001 fbeb 	bl	8cef8 <__multadd>
   8b722:	42bd      	cmp	r5, r7
   8b724:	4682      	mov	sl, r0
   8b726:	4629      	mov	r1, r5
   8b728:	f04f 0300 	mov.w	r3, #0
   8b72c:	f04f 020a 	mov.w	r2, #10
   8b730:	4620      	mov	r0, r4
   8b732:	d012      	beq.n	8b75a <_dtoa_r+0x902>
   8b734:	f001 fbe0 	bl	8cef8 <__multadd>
   8b738:	4639      	mov	r1, r7
   8b73a:	4605      	mov	r5, r0
   8b73c:	2300      	movs	r3, #0
   8b73e:	220a      	movs	r2, #10
   8b740:	4620      	mov	r0, r4
   8b742:	f001 fbd9 	bl	8cef8 <__multadd>
   8b746:	464e      	mov	r6, r9
   8b748:	4607      	mov	r7, r0
   8b74a:	e7a7      	b.n	8b69c <_dtoa_r+0x844>
   8b74c:	4620      	mov	r0, r4
   8b74e:	9304      	str	r3, [sp, #16]
   8b750:	f001 fbc8 	bl	8cee4 <_Bfree>
   8b754:	2201      	movs	r2, #1
   8b756:	9b04      	ldr	r3, [sp, #16]
   8b758:	e7c6      	b.n	8b6e8 <_dtoa_r+0x890>
   8b75a:	f001 fbcd 	bl	8cef8 <__multadd>
   8b75e:	464e      	mov	r6, r9
   8b760:	4605      	mov	r5, r0
   8b762:	4607      	mov	r7, r0
   8b764:	e79a      	b.n	8b69c <_dtoa_r+0x844>
   8b766:	bf00      	nop
   8b768:	0008eb4c 	.word	0x0008eb4c
   8b76c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b76e:	2b02      	cmp	r3, #2
   8b770:	dc7e      	bgt.n	8b870 <_dtoa_r+0xa18>
   8b772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b774:	2b00      	cmp	r3, #0
   8b776:	f47f af7c 	bne.w	8b672 <_dtoa_r+0x81a>
   8b77a:	4641      	mov	r1, r8
   8b77c:	4650      	mov	r0, sl
   8b77e:	f7ff fad9 	bl	8ad34 <quorem>
   8b782:	9a07      	ldr	r2, [sp, #28]
   8b784:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8b788:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8b78c:	3201      	adds	r2, #1
   8b78e:	2600      	movs	r6, #0
   8b790:	9207      	str	r2, [sp, #28]
   8b792:	f80b 3b01 	strb.w	r3, [fp], #1
   8b796:	e6f5      	b.n	8b584 <_dtoa_r+0x72c>
   8b798:	4641      	mov	r1, r8
   8b79a:	4650      	mov	r0, sl
   8b79c:	f001 fdd0 	bl	8d340 <__mcmp>
   8b7a0:	2800      	cmp	r0, #0
   8b7a2:	f6bf aec4 	bge.w	8b52e <_dtoa_r+0x6d6>
   8b7a6:	4651      	mov	r1, sl
   8b7a8:	2300      	movs	r3, #0
   8b7aa:	220a      	movs	r2, #10
   8b7ac:	4620      	mov	r0, r4
   8b7ae:	f001 fba3 	bl	8cef8 <__multadd>
   8b7b2:	9b07      	ldr	r3, [sp, #28]
   8b7b4:	4682      	mov	sl, r0
   8b7b6:	1e5f      	subs	r7, r3, #1
   8b7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b7ba:	2b00      	cmp	r3, #0
   8b7bc:	f47f af4c 	bne.w	8b658 <_dtoa_r+0x800>
   8b7c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b7c2:	2b00      	cmp	r3, #0
   8b7c4:	f340 8262 	ble.w	8bc8c <_dtoa_r+0xe34>
   8b7c8:	930a      	str	r3, [sp, #40]	; 0x28
   8b7ca:	e6bb      	b.n	8b544 <_dtoa_r+0x6ec>
   8b7cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b7ce:	4651      	mov	r1, sl
   8b7d0:	4620      	mov	r0, r4
   8b7d2:	f001 fcf5 	bl	8d1c0 <__pow5mult>
   8b7d6:	4682      	mov	sl, r0
   8b7d8:	e66c      	b.n	8b4b4 <_dtoa_r+0x65c>
   8b7da:	4bba      	ldr	r3, [pc, #744]	; (8bac4 <_dtoa_r+0xc6c>)
   8b7dc:	9303      	str	r3, [sp, #12]
   8b7de:	3303      	adds	r3, #3
   8b7e0:	e419      	b.n	8b016 <_dtoa_r+0x1be>
   8b7e2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b7e6:	2900      	cmp	r1, #0
   8b7e8:	f47f ae71 	bne.w	8b4ce <_dtoa_r+0x676>
   8b7ec:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b7f0:	2b00      	cmp	r3, #0
   8b7f2:	f47f ae6c 	bne.w	8b4ce <_dtoa_r+0x676>
   8b7f6:	4bb4      	ldr	r3, [pc, #720]	; (8bac8 <_dtoa_r+0xc70>)
   8b7f8:	4013      	ands	r3, r2
   8b7fa:	2b00      	cmp	r3, #0
   8b7fc:	f000 822a 	beq.w	8bc54 <_dtoa_r+0xdfc>
   8b800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b802:	f04f 0901 	mov.w	r9, #1
   8b806:	3301      	adds	r3, #1
   8b808:	930b      	str	r3, [sp, #44]	; 0x2c
   8b80a:	9b06      	ldr	r3, [sp, #24]
   8b80c:	3301      	adds	r3, #1
   8b80e:	9306      	str	r3, [sp, #24]
   8b810:	e65f      	b.n	8b4d2 <_dtoa_r+0x67a>
   8b812:	2301      	movs	r3, #1
   8b814:	930c      	str	r3, [sp, #48]	; 0x30
   8b816:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b818:	9a07      	ldr	r2, [sp, #28]
   8b81a:	4413      	add	r3, r2
   8b81c:	9312      	str	r3, [sp, #72]	; 0x48
   8b81e:	3301      	adds	r3, #1
   8b820:	2b01      	cmp	r3, #1
   8b822:	461e      	mov	r6, r3
   8b824:	bfb8      	it	lt
   8b826:	2601      	movlt	r6, #1
   8b828:	930a      	str	r3, [sp, #40]	; 0x28
   8b82a:	2100      	movs	r1, #0
   8b82c:	2e17      	cmp	r6, #23
   8b82e:	6461      	str	r1, [r4, #68]	; 0x44
   8b830:	f77f ac43 	ble.w	8b0ba <_dtoa_r+0x262>
   8b834:	2201      	movs	r2, #1
   8b836:	2304      	movs	r3, #4
   8b838:	005b      	lsls	r3, r3, #1
   8b83a:	f103 0014 	add.w	r0, r3, #20
   8b83e:	42b0      	cmp	r0, r6
   8b840:	4611      	mov	r1, r2
   8b842:	f102 0201 	add.w	r2, r2, #1
   8b846:	d9f7      	bls.n	8b838 <_dtoa_r+0x9e0>
   8b848:	6461      	str	r1, [r4, #68]	; 0x44
   8b84a:	e436      	b.n	8b0ba <_dtoa_r+0x262>
   8b84c:	2301      	movs	r3, #1
   8b84e:	930c      	str	r3, [sp, #48]	; 0x30
   8b850:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b852:	2b00      	cmp	r3, #0
   8b854:	dd46      	ble.n	8b8e4 <_dtoa_r+0xa8c>
   8b856:	461e      	mov	r6, r3
   8b858:	9312      	str	r3, [sp, #72]	; 0x48
   8b85a:	930a      	str	r3, [sp, #40]	; 0x28
   8b85c:	e7e5      	b.n	8b82a <_dtoa_r+0x9d2>
   8b85e:	2300      	movs	r3, #0
   8b860:	930c      	str	r3, [sp, #48]	; 0x30
   8b862:	e7d8      	b.n	8b816 <_dtoa_r+0x9be>
   8b864:	2300      	movs	r3, #0
   8b866:	930c      	str	r3, [sp, #48]	; 0x30
   8b868:	e7f2      	b.n	8b850 <_dtoa_r+0x9f8>
   8b86a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b86c:	9707      	str	r7, [sp, #28]
   8b86e:	930a      	str	r3, [sp, #40]	; 0x28
   8b870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b872:	2b00      	cmp	r3, #0
   8b874:	f47f ad40 	bne.w	8b2f8 <_dtoa_r+0x4a0>
   8b878:	4641      	mov	r1, r8
   8b87a:	2205      	movs	r2, #5
   8b87c:	4620      	mov	r0, r4
   8b87e:	f001 fb3b 	bl	8cef8 <__multadd>
   8b882:	4680      	mov	r8, r0
   8b884:	4650      	mov	r0, sl
   8b886:	4641      	mov	r1, r8
   8b888:	f001 fd5a 	bl	8d340 <__mcmp>
   8b88c:	2800      	cmp	r0, #0
   8b88e:	f77f ad33 	ble.w	8b2f8 <_dtoa_r+0x4a0>
   8b892:	9f03      	ldr	r7, [sp, #12]
   8b894:	2231      	movs	r2, #49	; 0x31
   8b896:	463b      	mov	r3, r7
   8b898:	9e07      	ldr	r6, [sp, #28]
   8b89a:	f803 2b01 	strb.w	r2, [r3], #1
   8b89e:	3601      	adds	r6, #1
   8b8a0:	9303      	str	r3, [sp, #12]
   8b8a2:	4641      	mov	r1, r8
   8b8a4:	4620      	mov	r0, r4
   8b8a6:	f001 fb1d 	bl	8cee4 <_Bfree>
   8b8aa:	1c73      	adds	r3, r6, #1
   8b8ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8b8b0:	9307      	str	r3, [sp, #28]
   8b8b2:	9703      	str	r7, [sp, #12]
   8b8b4:	2d00      	cmp	r5, #0
   8b8b6:	f47f ae90 	bne.w	8b5da <_dtoa_r+0x782>
   8b8ba:	e692      	b.n	8b5e2 <_dtoa_r+0x78a>
   8b8bc:	4629      	mov	r1, r5
   8b8be:	4632      	mov	r2, r6
   8b8c0:	4620      	mov	r0, r4
   8b8c2:	f001 fcc9 	bl	8d258 <__lshift>
   8b8c6:	4605      	mov	r5, r0
   8b8c8:	e6d6      	b.n	8b678 <_dtoa_r+0x820>
   8b8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b8cc:	970d      	str	r7, [sp, #52]	; 0x34
   8b8ce:	1afb      	subs	r3, r7, r3
   8b8d0:	449b      	add	fp, r3
   8b8d2:	2700      	movs	r7, #0
   8b8d4:	e58c      	b.n	8b3f0 <_dtoa_r+0x598>
   8b8d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8b8da:	f04f 0902 	mov.w	r9, #2
   8b8de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8b8e2:	e417      	b.n	8b114 <_dtoa_r+0x2bc>
   8b8e4:	2301      	movs	r3, #1
   8b8e6:	9325      	str	r3, [sp, #148]	; 0x94
   8b8e8:	930a      	str	r3, [sp, #40]	; 0x28
   8b8ea:	f7ff bbe2 	b.w	8b0b2 <_dtoa_r+0x25a>
   8b8ee:	d103      	bne.n	8b8f8 <_dtoa_r+0xaa0>
   8b8f0:	9b04      	ldr	r3, [sp, #16]
   8b8f2:	07db      	lsls	r3, r3, #31
   8b8f4:	f53f ae53 	bmi.w	8b59e <_dtoa_r+0x746>
   8b8f8:	46d9      	mov	r9, fp
   8b8fa:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8b8fe:	2b30      	cmp	r3, #48	; 0x30
   8b900:	d0fa      	beq.n	8b8f8 <_dtoa_r+0xaa0>
   8b902:	e65e      	b.n	8b5c2 <_dtoa_r+0x76a>
   8b904:	4648      	mov	r0, r9
   8b906:	f002 fd55 	bl	8e3b4 <__aeabi_i2d>
   8b90a:	4632      	mov	r2, r6
   8b90c:	463b      	mov	r3, r7
   8b90e:	f002 fdbb 	bl	8e488 <__aeabi_dmul>
   8b912:	2200      	movs	r2, #0
   8b914:	4b6d      	ldr	r3, [pc, #436]	; (8bacc <_dtoa_r+0xc74>)
   8b916:	f002 fc01 	bl	8e11c <__adddf3>
   8b91a:	4680      	mov	r8, r0
   8b91c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b920:	4630      	mov	r0, r6
   8b922:	4639      	mov	r1, r7
   8b924:	2200      	movs	r2, #0
   8b926:	4b6a      	ldr	r3, [pc, #424]	; (8bad0 <_dtoa_r+0xc78>)
   8b928:	f002 fbf6 	bl	8e118 <__aeabi_dsub>
   8b92c:	4642      	mov	r2, r8
   8b92e:	464b      	mov	r3, r9
   8b930:	4606      	mov	r6, r0
   8b932:	460f      	mov	r7, r1
   8b934:	f003 f838 	bl	8e9a8 <__aeabi_dcmpgt>
   8b938:	2800      	cmp	r0, #0
   8b93a:	f040 8187 	bne.w	8bc4c <_dtoa_r+0xdf4>
   8b93e:	4642      	mov	r2, r8
   8b940:	4630      	mov	r0, r6
   8b942:	4639      	mov	r1, r7
   8b944:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8b948:	f003 f810 	bl	8e96c <__aeabi_dcmplt>
   8b94c:	2800      	cmp	r0, #0
   8b94e:	f43f acaa 	beq.w	8b2a6 <_dtoa_r+0x44e>
   8b952:	f04f 0800 	mov.w	r8, #0
   8b956:	4645      	mov	r5, r8
   8b958:	e4ce      	b.n	8b2f8 <_dtoa_r+0x4a0>
   8b95a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8b95c:	2a00      	cmp	r2, #0
   8b95e:	f000 80c3 	beq.w	8bae8 <_dtoa_r+0xc90>
   8b962:	9a06      	ldr	r2, [sp, #24]
   8b964:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8b968:	441a      	add	r2, r3
   8b96a:	9206      	str	r2, [sp, #24]
   8b96c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8b96e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b970:	4616      	mov	r6, r2
   8b972:	441a      	add	r2, r3
   8b974:	920b      	str	r2, [sp, #44]	; 0x2c
   8b976:	e547      	b.n	8b408 <_dtoa_r+0x5b0>
   8b978:	2331      	movs	r3, #49	; 0x31
   8b97a:	9a07      	ldr	r2, [sp, #28]
   8b97c:	3201      	adds	r2, #1
   8b97e:	9207      	str	r2, [sp, #28]
   8b980:	9a03      	ldr	r2, [sp, #12]
   8b982:	7013      	strb	r3, [r2, #0]
   8b984:	e61d      	b.n	8b5c2 <_dtoa_r+0x76a>
   8b986:	f000 814b 	beq.w	8bc20 <_dtoa_r+0xdc8>
   8b98a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b98e:	9b07      	ldr	r3, [sp, #28]
   8b990:	425d      	negs	r5, r3
   8b992:	4b50      	ldr	r3, [pc, #320]	; (8bad4 <_dtoa_r+0xc7c>)
   8b994:	f005 020f 	and.w	r2, r5, #15
   8b998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b9a0:	f002 fd72 	bl	8e488 <__aeabi_dmul>
   8b9a4:	112d      	asrs	r5, r5, #4
   8b9a6:	4606      	mov	r6, r0
   8b9a8:	460f      	mov	r7, r1
   8b9aa:	f000 817d 	beq.w	8bca8 <_dtoa_r+0xe50>
   8b9ae:	2300      	movs	r3, #0
   8b9b0:	f04f 0902 	mov.w	r9, #2
   8b9b4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8bad8 <_dtoa_r+0xc80>
   8b9b8:	07ea      	lsls	r2, r5, #31
   8b9ba:	d505      	bpl.n	8b9c8 <_dtoa_r+0xb70>
   8b9bc:	e9d8 2300 	ldrd	r2, r3, [r8]
   8b9c0:	f002 fd62 	bl	8e488 <__aeabi_dmul>
   8b9c4:	2301      	movs	r3, #1
   8b9c6:	4499      	add	r9, r3
   8b9c8:	106d      	asrs	r5, r5, #1
   8b9ca:	f108 0808 	add.w	r8, r8, #8
   8b9ce:	d1f3      	bne.n	8b9b8 <_dtoa_r+0xb60>
   8b9d0:	2b00      	cmp	r3, #0
   8b9d2:	f43f abba 	beq.w	8b14a <_dtoa_r+0x2f2>
   8b9d6:	4606      	mov	r6, r0
   8b9d8:	460f      	mov	r7, r1
   8b9da:	f7ff bbb6 	b.w	8b14a <_dtoa_r+0x2f2>
   8b9de:	900e      	str	r0, [sp, #56]	; 0x38
   8b9e0:	e520      	b.n	8b424 <_dtoa_r+0x5cc>
   8b9e2:	9b04      	ldr	r3, [sp, #16]
   8b9e4:	2b00      	cmp	r3, #0
   8b9e6:	f47f ae2b 	bne.w	8b640 <_dtoa_r+0x7e8>
   8b9ea:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b9ee:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b9f2:	2b00      	cmp	r3, #0
   8b9f4:	f43f aeff 	beq.w	8b7f6 <_dtoa_r+0x99e>
   8b9f8:	e622      	b.n	8b640 <_dtoa_r+0x7e8>
   8b9fa:	2a00      	cmp	r2, #0
   8b9fc:	dd12      	ble.n	8ba24 <_dtoa_r+0xbcc>
   8b9fe:	4651      	mov	r1, sl
   8ba00:	2201      	movs	r2, #1
   8ba02:	4620      	mov	r0, r4
   8ba04:	9304      	str	r3, [sp, #16]
   8ba06:	f001 fc27 	bl	8d258 <__lshift>
   8ba0a:	4641      	mov	r1, r8
   8ba0c:	4682      	mov	sl, r0
   8ba0e:	f001 fc97 	bl	8d340 <__mcmp>
   8ba12:	2800      	cmp	r0, #0
   8ba14:	9b04      	ldr	r3, [sp, #16]
   8ba16:	f340 812c 	ble.w	8bc72 <_dtoa_r+0xe1a>
   8ba1a:	2b39      	cmp	r3, #57	; 0x39
   8ba1c:	f000 810c 	beq.w	8bc38 <_dtoa_r+0xde0>
   8ba20:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8ba24:	46b1      	mov	r9, r6
   8ba26:	f809 3b01 	strb.w	r3, [r9], #1
   8ba2a:	9b07      	ldr	r3, [sp, #28]
   8ba2c:	462e      	mov	r6, r5
   8ba2e:	3301      	adds	r3, #1
   8ba30:	463d      	mov	r5, r7
   8ba32:	9307      	str	r3, [sp, #28]
   8ba34:	e5c5      	b.n	8b5c2 <_dtoa_r+0x76a>
   8ba36:	4655      	mov	r5, sl
   8ba38:	9c08      	ldr	r4, [sp, #32]
   8ba3a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8ba3e:	4602      	mov	r2, r0
   8ba40:	460b      	mov	r3, r1
   8ba42:	f002 fb6b 	bl	8e11c <__adddf3>
   8ba46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8ba4a:	4606      	mov	r6, r0
   8ba4c:	460f      	mov	r7, r1
   8ba4e:	f002 ffab 	bl	8e9a8 <__aeabi_dcmpgt>
   8ba52:	b960      	cbnz	r0, 8ba6e <_dtoa_r+0xc16>
   8ba54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8ba58:	4630      	mov	r0, r6
   8ba5a:	4639      	mov	r1, r7
   8ba5c:	f002 ff7c 	bl	8e958 <__aeabi_dcmpeq>
   8ba60:	2800      	cmp	r0, #0
   8ba62:	f43f aca3 	beq.w	8b3ac <_dtoa_r+0x554>
   8ba66:	f018 0f01 	tst.w	r8, #1
   8ba6a:	f43f ac9f 	beq.w	8b3ac <_dtoa_r+0x554>
   8ba6e:	9a03      	ldr	r2, [sp, #12]
   8ba70:	e40a      	b.n	8b288 <_dtoa_r+0x430>
   8ba72:	4620      	mov	r0, r4
   8ba74:	6869      	ldr	r1, [r5, #4]
   8ba76:	f001 fa0f 	bl	8ce98 <_Balloc>
   8ba7a:	4606      	mov	r6, r0
   8ba7c:	2800      	cmp	r0, #0
   8ba7e:	f000 8117 	beq.w	8bcb0 <_dtoa_r+0xe58>
   8ba82:	692b      	ldr	r3, [r5, #16]
   8ba84:	f105 010c 	add.w	r1, r5, #12
   8ba88:	3302      	adds	r3, #2
   8ba8a:	009a      	lsls	r2, r3, #2
   8ba8c:	300c      	adds	r0, #12
   8ba8e:	f7fc fb33 	bl	880f8 <memcpy>
   8ba92:	4631      	mov	r1, r6
   8ba94:	2201      	movs	r2, #1
   8ba96:	4620      	mov	r0, r4
   8ba98:	f001 fbde 	bl	8d258 <__lshift>
   8ba9c:	4607      	mov	r7, r0
   8ba9e:	e5f0      	b.n	8b682 <_dtoa_r+0x82a>
   8baa0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8baa4:	1a9e      	subs	r6, r3, r2
   8baa6:	e4af      	b.n	8b408 <_dtoa_r+0x5b0>
   8baa8:	2b39      	cmp	r3, #57	; 0x39
   8baaa:	f000 80c5 	beq.w	8bc38 <_dtoa_r+0xde0>
   8baae:	46b1      	mov	r9, r6
   8bab0:	3301      	adds	r3, #1
   8bab2:	f809 3b01 	strb.w	r3, [r9], #1
   8bab6:	9b07      	ldr	r3, [sp, #28]
   8bab8:	462e      	mov	r6, r5
   8baba:	3301      	adds	r3, #1
   8babc:	463d      	mov	r5, r7
   8babe:	9307      	str	r3, [sp, #28]
   8bac0:	e57f      	b.n	8b5c2 <_dtoa_r+0x76a>
   8bac2:	bf00      	nop
   8bac4:	0008eb90 	.word	0x0008eb90
   8bac8:	7ff00000 	.word	0x7ff00000
   8bacc:	401c0000 	.word	0x401c0000
   8bad0:	40140000 	.word	0x40140000
   8bad4:	0008ece8 	.word	0x0008ece8
   8bad8:	0008ecc0 	.word	0x0008ecc0
   8badc:	9a07      	ldr	r2, [sp, #28]
   8bade:	462e      	mov	r6, r5
   8bae0:	3201      	adds	r2, #1
   8bae2:	463d      	mov	r5, r7
   8bae4:	9207      	str	r2, [sp, #28]
   8bae6:	e54d      	b.n	8b584 <_dtoa_r+0x72c>
   8bae8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8baea:	9a06      	ldr	r2, [sp, #24]
   8baec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8baee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8baf2:	441a      	add	r2, r3
   8baf4:	9206      	str	r2, [sp, #24]
   8baf6:	460a      	mov	r2, r1
   8baf8:	441a      	add	r2, r3
   8bafa:	460e      	mov	r6, r1
   8bafc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8bafe:	920b      	str	r2, [sp, #44]	; 0x2c
   8bb00:	e482      	b.n	8b408 <_dtoa_r+0x5b0>
   8bb02:	9810      	ldr	r0, [sp, #64]	; 0x40
   8bb04:	497f      	ldr	r1, [pc, #508]	; (8bd04 <_dtoa_r+0xeac>)
   8bb06:	4642      	mov	r2, r8
   8bb08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8bb0c:	464b      	mov	r3, r9
   8bb0e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8bb12:	f002 fcb9 	bl	8e488 <__aeabi_dmul>
   8bb16:	4602      	mov	r2, r0
   8bb18:	460b      	mov	r3, r1
   8bb1a:	4630      	mov	r0, r6
   8bb1c:	4639      	mov	r1, r7
   8bb1e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8bb22:	f002 ff61 	bl	8e9e8 <__aeabi_d2iz>
   8bb26:	4680      	mov	r8, r0
   8bb28:	f002 fc44 	bl	8e3b4 <__aeabi_i2d>
   8bb2c:	460b      	mov	r3, r1
   8bb2e:	4602      	mov	r2, r0
   8bb30:	4639      	mov	r1, r7
   8bb32:	4630      	mov	r0, r6
   8bb34:	f002 faf0 	bl	8e118 <__aeabi_dsub>
   8bb38:	4606      	mov	r6, r0
   8bb3a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8bb3c:	9d03      	ldr	r5, [sp, #12]
   8bb3e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8bb42:	2801      	cmp	r0, #1
   8bb44:	460f      	mov	r7, r1
   8bb46:	f805 3b01 	strb.w	r3, [r5], #1
   8bb4a:	d01e      	beq.n	8bb8a <_dtoa_r+0xd32>
   8bb4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8bb4e:	9a03      	ldr	r2, [sp, #12]
   8bb50:	4413      	add	r3, r2
   8bb52:	4698      	mov	r8, r3
   8bb54:	2200      	movs	r2, #0
   8bb56:	4b6c      	ldr	r3, [pc, #432]	; (8bd08 <_dtoa_r+0xeb0>)
   8bb58:	4630      	mov	r0, r6
   8bb5a:	4639      	mov	r1, r7
   8bb5c:	f002 fc94 	bl	8e488 <__aeabi_dmul>
   8bb60:	460f      	mov	r7, r1
   8bb62:	4606      	mov	r6, r0
   8bb64:	f002 ff40 	bl	8e9e8 <__aeabi_d2iz>
   8bb68:	4681      	mov	r9, r0
   8bb6a:	f002 fc23 	bl	8e3b4 <__aeabi_i2d>
   8bb6e:	4602      	mov	r2, r0
   8bb70:	460b      	mov	r3, r1
   8bb72:	4630      	mov	r0, r6
   8bb74:	4639      	mov	r1, r7
   8bb76:	f002 facf 	bl	8e118 <__aeabi_dsub>
   8bb7a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8bb7e:	f805 9b01 	strb.w	r9, [r5], #1
   8bb82:	4545      	cmp	r5, r8
   8bb84:	4606      	mov	r6, r0
   8bb86:	460f      	mov	r7, r1
   8bb88:	d1e4      	bne.n	8bb54 <_dtoa_r+0xcfc>
   8bb8a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8bb8e:	2200      	movs	r2, #0
   8bb90:	4b5e      	ldr	r3, [pc, #376]	; (8bd0c <_dtoa_r+0xeb4>)
   8bb92:	4640      	mov	r0, r8
   8bb94:	4649      	mov	r1, r9
   8bb96:	f002 fac1 	bl	8e11c <__adddf3>
   8bb9a:	4632      	mov	r2, r6
   8bb9c:	463b      	mov	r3, r7
   8bb9e:	f002 fee5 	bl	8e96c <__aeabi_dcmplt>
   8bba2:	2800      	cmp	r0, #0
   8bba4:	d158      	bne.n	8bc58 <_dtoa_r+0xe00>
   8bba6:	4642      	mov	r2, r8
   8bba8:	464b      	mov	r3, r9
   8bbaa:	2000      	movs	r0, #0
   8bbac:	4957      	ldr	r1, [pc, #348]	; (8bd0c <_dtoa_r+0xeb4>)
   8bbae:	f002 fab3 	bl	8e118 <__aeabi_dsub>
   8bbb2:	4632      	mov	r2, r6
   8bbb4:	463b      	mov	r3, r7
   8bbb6:	f002 fef7 	bl	8e9a8 <__aeabi_dcmpgt>
   8bbba:	2800      	cmp	r0, #0
   8bbbc:	f43f ab73 	beq.w	8b2a6 <_dtoa_r+0x44e>
   8bbc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8bbc4:	46a9      	mov	r9, r5
   8bbc6:	2b30      	cmp	r3, #48	; 0x30
   8bbc8:	f105 35ff 	add.w	r5, r5, #4294967295
   8bbcc:	d0f8      	beq.n	8bbc0 <_dtoa_r+0xd68>
   8bbce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8bbd0:	3301      	adds	r3, #1
   8bbd2:	9307      	str	r3, [sp, #28]
   8bbd4:	e505      	b.n	8b5e2 <_dtoa_r+0x78a>
   8bbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8bbd8:	2b00      	cmp	r3, #0
   8bbda:	f43f ae93 	beq.w	8b904 <_dtoa_r+0xaac>
   8bbde:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8bbe0:	2d00      	cmp	r5, #0
   8bbe2:	f77f ab60 	ble.w	8b2a6 <_dtoa_r+0x44e>
   8bbe6:	2200      	movs	r2, #0
   8bbe8:	4b47      	ldr	r3, [pc, #284]	; (8bd08 <_dtoa_r+0xeb0>)
   8bbea:	4630      	mov	r0, r6
   8bbec:	4639      	mov	r1, r7
   8bbee:	f002 fc4b 	bl	8e488 <__aeabi_dmul>
   8bbf2:	4606      	mov	r6, r0
   8bbf4:	460f      	mov	r7, r1
   8bbf6:	f109 0001 	add.w	r0, r9, #1
   8bbfa:	f002 fbdb 	bl	8e3b4 <__aeabi_i2d>
   8bbfe:	4632      	mov	r2, r6
   8bc00:	463b      	mov	r3, r7
   8bc02:	f002 fc41 	bl	8e488 <__aeabi_dmul>
   8bc06:	2200      	movs	r2, #0
   8bc08:	4b41      	ldr	r3, [pc, #260]	; (8bd10 <_dtoa_r+0xeb8>)
   8bc0a:	f002 fa87 	bl	8e11c <__adddf3>
   8bc0e:	9a07      	ldr	r2, [sp, #28]
   8bc10:	4680      	mov	r8, r0
   8bc12:	3a01      	subs	r2, #1
   8bc14:	9213      	str	r2, [sp, #76]	; 0x4c
   8bc16:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8bc1a:	9510      	str	r5, [sp, #64]	; 0x40
   8bc1c:	f7ff bab6 	b.w	8b18c <_dtoa_r+0x334>
   8bc20:	f04f 0902 	mov.w	r9, #2
   8bc24:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8bc28:	f7ff ba8f 	b.w	8b14a <_dtoa_r+0x2f2>
   8bc2c:	9b07      	ldr	r3, [sp, #28]
   8bc2e:	3301      	adds	r3, #1
   8bc30:	9307      	str	r3, [sp, #28]
   8bc32:	2331      	movs	r3, #49	; 0x31
   8bc34:	f7ff bb2f 	b.w	8b296 <_dtoa_r+0x43e>
   8bc38:	46b3      	mov	fp, r6
   8bc3a:	2339      	movs	r3, #57	; 0x39
   8bc3c:	9a07      	ldr	r2, [sp, #28]
   8bc3e:	462e      	mov	r6, r5
   8bc40:	3201      	adds	r2, #1
   8bc42:	463d      	mov	r5, r7
   8bc44:	9207      	str	r2, [sp, #28]
   8bc46:	f80b 3b01 	strb.w	r3, [fp], #1
   8bc4a:	e4aa      	b.n	8b5a2 <_dtoa_r+0x74a>
   8bc4c:	f04f 0800 	mov.w	r8, #0
   8bc50:	4645      	mov	r5, r8
   8bc52:	e61e      	b.n	8b892 <_dtoa_r+0xa3a>
   8bc54:	4699      	mov	r9, r3
   8bc56:	e43c      	b.n	8b4d2 <_dtoa_r+0x67a>
   8bc58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8bc5a:	9a03      	ldr	r2, [sp, #12]
   8bc5c:	9307      	str	r3, [sp, #28]
   8bc5e:	f7ff bb13 	b.w	8b288 <_dtoa_r+0x430>
   8bc62:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8bc66:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8bc68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8bc6a:	46a9      	mov	r9, r5
   8bc6c:	3301      	adds	r3, #1
   8bc6e:	9307      	str	r3, [sp, #28]
   8bc70:	e4b7      	b.n	8b5e2 <_dtoa_r+0x78a>
   8bc72:	f47f aed7 	bne.w	8ba24 <_dtoa_r+0xbcc>
   8bc76:	07da      	lsls	r2, r3, #31
   8bc78:	f57f aed4 	bpl.w	8ba24 <_dtoa_r+0xbcc>
   8bc7c:	e6cd      	b.n	8ba1a <_dtoa_r+0xbc2>
   8bc7e:	2b39      	cmp	r3, #57	; 0x39
   8bc80:	d0da      	beq.n	8bc38 <_dtoa_r+0xde0>
   8bc82:	f1b9 0f00 	cmp.w	r9, #0
   8bc86:	f73f aecb 	bgt.w	8ba20 <_dtoa_r+0xbc8>
   8bc8a:	e6cb      	b.n	8ba24 <_dtoa_r+0xbcc>
   8bc8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8bc8e:	2b02      	cmp	r3, #2
   8bc90:	f73f adeb 	bgt.w	8b86a <_dtoa_r+0xa12>
   8bc94:	9707      	str	r7, [sp, #28]
   8bc96:	e570      	b.n	8b77a <_dtoa_r+0x922>
   8bc98:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8bc9a:	2b02      	cmp	r3, #2
   8bc9c:	f73f ade5 	bgt.w	8b86a <_dtoa_r+0xa12>
   8bca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8bca2:	9707      	str	r7, [sp, #28]
   8bca4:	930a      	str	r3, [sp, #40]	; 0x28
   8bca6:	e4e4      	b.n	8b672 <_dtoa_r+0x81a>
   8bca8:	f04f 0902 	mov.w	r9, #2
   8bcac:	f7ff ba4d 	b.w	8b14a <_dtoa_r+0x2f2>
   8bcb0:	4602      	mov	r2, r0
   8bcb2:	f240 21ea 	movw	r1, #746	; 0x2ea
   8bcb6:	4b17      	ldr	r3, [pc, #92]	; (8bd14 <_dtoa_r+0xebc>)
   8bcb8:	4817      	ldr	r0, [pc, #92]	; (8bd18 <_dtoa_r+0xec0>)
   8bcba:	f002 f8a7 	bl	8de0c <__assert_func>
   8bcbe:	4b17      	ldr	r3, [pc, #92]	; (8bd1c <_dtoa_r+0xec4>)
   8bcc0:	9303      	str	r3, [sp, #12]
   8bcc2:	f7ff b904 	b.w	8aece <_dtoa_r+0x76>
   8bcc6:	2500      	movs	r5, #0
   8bcc8:	4620      	mov	r0, r4
   8bcca:	4629      	mov	r1, r5
   8bccc:	6465      	str	r5, [r4, #68]	; 0x44
   8bcce:	f001 f8e3 	bl	8ce98 <_Balloc>
   8bcd2:	9003      	str	r0, [sp, #12]
   8bcd4:	b958      	cbnz	r0, 8bcee <_dtoa_r+0xe96>
   8bcd6:	2200      	movs	r2, #0
   8bcd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8bcdc:	4b0d      	ldr	r3, [pc, #52]	; (8bd14 <_dtoa_r+0xebc>)
   8bcde:	480e      	ldr	r0, [pc, #56]	; (8bd18 <_dtoa_r+0xec0>)
   8bce0:	f002 f894 	bl	8de0c <__assert_func>
   8bce4:	f43f ac0d 	beq.w	8b502 <_dtoa_r+0x6aa>
   8bce8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8bcec:	e48f      	b.n	8b60e <_dtoa_r+0x7b6>
   8bcee:	f04f 33ff 	mov.w	r3, #4294967295
   8bcf2:	9312      	str	r3, [sp, #72]	; 0x48
   8bcf4:	930a      	str	r3, [sp, #40]	; 0x28
   8bcf6:	2301      	movs	r3, #1
   8bcf8:	9a03      	ldr	r2, [sp, #12]
   8bcfa:	9525      	str	r5, [sp, #148]	; 0x94
   8bcfc:	6422      	str	r2, [r4, #64]	; 0x40
   8bcfe:	930c      	str	r3, [sp, #48]	; 0x30
   8bd00:	f7ff bad1 	b.w	8b2a6 <_dtoa_r+0x44e>
   8bd04:	0008ece8 	.word	0x0008ece8
   8bd08:	40240000 	.word	0x40240000
   8bd0c:	3fe00000 	.word	0x3fe00000
   8bd10:	401c0000 	.word	0x401c0000
   8bd14:	0008eba0 	.word	0x0008eba0
   8bd18:	0008ebb4 	.word	0x0008ebb4
   8bd1c:	0008eb94 	.word	0x0008eb94

0008bd20 <__sflush_r>:
   8bd20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bd28:	460d      	mov	r5, r1
   8bd2a:	0711      	lsls	r1, r2, #28
   8bd2c:	4680      	mov	r8, r0
   8bd2e:	d447      	bmi.n	8bdc0 <__sflush_r+0xa0>
   8bd30:	686b      	ldr	r3, [r5, #4]
   8bd32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8bd36:	2b00      	cmp	r3, #0
   8bd38:	81aa      	strh	r2, [r5, #12]
   8bd3a:	dd5e      	ble.n	8bdfa <__sflush_r+0xda>
   8bd3c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8bd3e:	2c00      	cmp	r4, #0
   8bd40:	d058      	beq.n	8bdf4 <__sflush_r+0xd4>
   8bd42:	2300      	movs	r3, #0
   8bd44:	f8d8 6000 	ldr.w	r6, [r8]
   8bd48:	f8c8 3000 	str.w	r3, [r8]
   8bd4c:	b293      	uxth	r3, r2
   8bd4e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8bd52:	d156      	bne.n	8be02 <__sflush_r+0xe2>
   8bd54:	2301      	movs	r3, #1
   8bd56:	4640      	mov	r0, r8
   8bd58:	69e9      	ldr	r1, [r5, #28]
   8bd5a:	47a0      	blx	r4
   8bd5c:	1c43      	adds	r3, r0, #1
   8bd5e:	d067      	beq.n	8be30 <__sflush_r+0x110>
   8bd60:	89ab      	ldrh	r3, [r5, #12]
   8bd62:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8bd64:	075f      	lsls	r7, r3, #29
   8bd66:	d505      	bpl.n	8bd74 <__sflush_r+0x54>
   8bd68:	686a      	ldr	r2, [r5, #4]
   8bd6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8bd6c:	1a80      	subs	r0, r0, r2
   8bd6e:	b10b      	cbz	r3, 8bd74 <__sflush_r+0x54>
   8bd70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8bd72:	1ac0      	subs	r0, r0, r3
   8bd74:	4602      	mov	r2, r0
   8bd76:	69e9      	ldr	r1, [r5, #28]
   8bd78:	2300      	movs	r3, #0
   8bd7a:	4640      	mov	r0, r8
   8bd7c:	47a0      	blx	r4
   8bd7e:	1c41      	adds	r1, r0, #1
   8bd80:	d141      	bne.n	8be06 <__sflush_r+0xe6>
   8bd82:	f8d8 3000 	ldr.w	r3, [r8]
   8bd86:	2b00      	cmp	r3, #0
   8bd88:	d03d      	beq.n	8be06 <__sflush_r+0xe6>
   8bd8a:	2b1d      	cmp	r3, #29
   8bd8c:	d001      	beq.n	8bd92 <__sflush_r+0x72>
   8bd8e:	2b16      	cmp	r3, #22
   8bd90:	d156      	bne.n	8be40 <__sflush_r+0x120>
   8bd92:	2100      	movs	r1, #0
   8bd94:	692a      	ldr	r2, [r5, #16]
   8bd96:	89ab      	ldrh	r3, [r5, #12]
   8bd98:	e9c5 2100 	strd	r2, r1, [r5]
   8bd9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8bda0:	81ab      	strh	r3, [r5, #12]
   8bda2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8bda4:	f8c8 6000 	str.w	r6, [r8]
   8bda8:	b321      	cbz	r1, 8bdf4 <__sflush_r+0xd4>
   8bdaa:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8bdae:	4299      	cmp	r1, r3
   8bdb0:	d002      	beq.n	8bdb8 <__sflush_r+0x98>
   8bdb2:	4640      	mov	r0, r8
   8bdb4:	f000 f9cc 	bl	8c150 <_free_r>
   8bdb8:	2000      	movs	r0, #0
   8bdba:	6328      	str	r0, [r5, #48]	; 0x30
   8bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bdc0:	692f      	ldr	r7, [r5, #16]
   8bdc2:	b1bf      	cbz	r7, 8bdf4 <__sflush_r+0xd4>
   8bdc4:	b293      	uxth	r3, r2
   8bdc6:	079a      	lsls	r2, r3, #30
   8bdc8:	bf18      	it	ne
   8bdca:	2300      	movne	r3, #0
   8bdcc:	682e      	ldr	r6, [r5, #0]
   8bdce:	bf08      	it	eq
   8bdd0:	696b      	ldreq	r3, [r5, #20]
   8bdd2:	602f      	str	r7, [r5, #0]
   8bdd4:	1bf6      	subs	r6, r6, r7
   8bdd6:	60ab      	str	r3, [r5, #8]
   8bdd8:	e00a      	b.n	8bdf0 <__sflush_r+0xd0>
   8bdda:	4633      	mov	r3, r6
   8bddc:	463a      	mov	r2, r7
   8bdde:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8bde0:	4640      	mov	r0, r8
   8bde2:	69e9      	ldr	r1, [r5, #28]
   8bde4:	47a0      	blx	r4
   8bde6:	1e04      	subs	r4, r0, #0
   8bde8:	eba6 0604 	sub.w	r6, r6, r4
   8bdec:	4427      	add	r7, r4
   8bdee:	dd17      	ble.n	8be20 <__sflush_r+0x100>
   8bdf0:	2e00      	cmp	r6, #0
   8bdf2:	dcf2      	bgt.n	8bdda <__sflush_r+0xba>
   8bdf4:	2000      	movs	r0, #0
   8bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bdfa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8bdfc:	2b00      	cmp	r3, #0
   8bdfe:	dc9d      	bgt.n	8bd3c <__sflush_r+0x1c>
   8be00:	e7f8      	b.n	8bdf4 <__sflush_r+0xd4>
   8be02:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8be04:	e7ae      	b.n	8bd64 <__sflush_r+0x44>
   8be06:	2100      	movs	r1, #0
   8be08:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8be0c:	692a      	ldr	r2, [r5, #16]
   8be0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8be12:	81ab      	strh	r3, [r5, #12]
   8be14:	04db      	lsls	r3, r3, #19
   8be16:	e9c5 2100 	strd	r2, r1, [r5]
   8be1a:	d5c2      	bpl.n	8bda2 <__sflush_r+0x82>
   8be1c:	6528      	str	r0, [r5, #80]	; 0x50
   8be1e:	e7c0      	b.n	8bda2 <__sflush_r+0x82>
   8be20:	89ab      	ldrh	r3, [r5, #12]
   8be22:	f04f 30ff 	mov.w	r0, #4294967295
   8be26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be2a:	81ab      	strh	r3, [r5, #12]
   8be2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8be30:	f8d8 3000 	ldr.w	r3, [r8]
   8be34:	2b00      	cmp	r3, #0
   8be36:	d093      	beq.n	8bd60 <__sflush_r+0x40>
   8be38:	2b1d      	cmp	r3, #29
   8be3a:	d006      	beq.n	8be4a <__sflush_r+0x12a>
   8be3c:	2b16      	cmp	r3, #22
   8be3e:	d004      	beq.n	8be4a <__sflush_r+0x12a>
   8be40:	89ab      	ldrh	r3, [r5, #12]
   8be42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be46:	81ab      	strh	r3, [r5, #12]
   8be48:	e7d5      	b.n	8bdf6 <__sflush_r+0xd6>
   8be4a:	f8c8 6000 	str.w	r6, [r8]
   8be4e:	e7d1      	b.n	8bdf4 <__sflush_r+0xd4>

0008be50 <_fflush_r>:
   8be50:	b538      	push	{r3, r4, r5, lr}
   8be52:	460c      	mov	r4, r1
   8be54:	4605      	mov	r5, r0
   8be56:	b108      	cbz	r0, 8be5c <_fflush_r+0xc>
   8be58:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8be5a:	b1a3      	cbz	r3, 8be86 <_fflush_r+0x36>
   8be5c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8be60:	b1b8      	cbz	r0, 8be92 <_fflush_r+0x42>
   8be62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8be64:	07db      	lsls	r3, r3, #31
   8be66:	d401      	bmi.n	8be6c <_fflush_r+0x1c>
   8be68:	0581      	lsls	r1, r0, #22
   8be6a:	d515      	bpl.n	8be98 <_fflush_r+0x48>
   8be6c:	4628      	mov	r0, r5
   8be6e:	4621      	mov	r1, r4
   8be70:	f7ff ff56 	bl	8bd20 <__sflush_r>
   8be74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8be76:	4605      	mov	r5, r0
   8be78:	07da      	lsls	r2, r3, #31
   8be7a:	d402      	bmi.n	8be82 <_fflush_r+0x32>
   8be7c:	89a3      	ldrh	r3, [r4, #12]
   8be7e:	059b      	lsls	r3, r3, #22
   8be80:	d50e      	bpl.n	8bea0 <_fflush_r+0x50>
   8be82:	4628      	mov	r0, r5
   8be84:	bd38      	pop	{r3, r4, r5, pc}
   8be86:	f000 f83f 	bl	8bf08 <__sinit>
   8be8a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8be8e:	2800      	cmp	r0, #0
   8be90:	d1e7      	bne.n	8be62 <_fflush_r+0x12>
   8be92:	4605      	mov	r5, r0
   8be94:	4628      	mov	r0, r5
   8be96:	bd38      	pop	{r3, r4, r5, pc}
   8be98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8be9a:	f000 fc07 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8be9e:	e7e5      	b.n	8be6c <_fflush_r+0x1c>
   8bea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bea2:	f000 fc05 	bl	8c6b0 <__retarget_lock_release_recursive>
   8bea6:	4628      	mov	r0, r5
   8bea8:	bd38      	pop	{r3, r4, r5, pc}
   8beaa:	bf00      	nop

0008beac <std>:
   8beac:	2300      	movs	r3, #0
   8beae:	b510      	push	{r4, lr}
   8beb0:	4604      	mov	r4, r0
   8beb2:	e9c0 3300 	strd	r3, r3, [r0]
   8beb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8beba:	8181      	strh	r1, [r0, #12]
   8bebc:	81c2      	strh	r2, [r0, #14]
   8bebe:	4619      	mov	r1, r3
   8bec0:	6083      	str	r3, [r0, #8]
   8bec2:	6643      	str	r3, [r0, #100]	; 0x64
   8bec4:	6183      	str	r3, [r0, #24]
   8bec6:	2208      	movs	r2, #8
   8bec8:	305c      	adds	r0, #92	; 0x5c
   8beca:	f7fc f98b 	bl	881e4 <memset>
   8bece:	4807      	ldr	r0, [pc, #28]	; (8beec <std+0x40>)
   8bed0:	4907      	ldr	r1, [pc, #28]	; (8bef0 <std+0x44>)
   8bed2:	4a08      	ldr	r2, [pc, #32]	; (8bef4 <std+0x48>)
   8bed4:	4b08      	ldr	r3, [pc, #32]	; (8bef8 <std+0x4c>)
   8bed6:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8beda:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8bede:	62e3      	str	r3, [r4, #44]	; 0x2c
   8bee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bee8:	f000 bbdc 	b.w	8c6a4 <__retarget_lock_init_recursive>
   8beec:	0008da05 	.word	0x0008da05
   8bef0:	0008da29 	.word	0x0008da29
   8bef4:	0008da69 	.word	0x0008da69
   8bef8:	0008da89 	.word	0x0008da89

0008befc <_cleanup_r>:
   8befc:	4901      	ldr	r1, [pc, #4]	; (8bf04 <_cleanup_r+0x8>)
   8befe:	f000 bba3 	b.w	8c648 <_fwalk_reent>
   8bf02:	bf00      	nop
   8bf04:	0008decd 	.word	0x0008decd

0008bf08 <__sinit>:
   8bf08:	b510      	push	{r4, lr}
   8bf0a:	4604      	mov	r4, r0
   8bf0c:	4813      	ldr	r0, [pc, #76]	; (8bf5c <__sinit+0x54>)
   8bf0e:	f000 fbcd 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8bf12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8bf14:	b9ea      	cbnz	r2, 8bf52 <__sinit+0x4a>
   8bf16:	2003      	movs	r0, #3
   8bf18:	4911      	ldr	r1, [pc, #68]	; (8bf60 <__sinit+0x58>)
   8bf1a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8bf1e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8bf22:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8bf26:	63e1      	str	r1, [r4, #60]	; 0x3c
   8bf28:	6860      	ldr	r0, [r4, #4]
   8bf2a:	2104      	movs	r1, #4
   8bf2c:	f7ff ffbe 	bl	8beac <std>
   8bf30:	68a0      	ldr	r0, [r4, #8]
   8bf32:	2201      	movs	r2, #1
   8bf34:	2109      	movs	r1, #9
   8bf36:	f7ff ffb9 	bl	8beac <std>
   8bf3a:	68e0      	ldr	r0, [r4, #12]
   8bf3c:	2202      	movs	r2, #2
   8bf3e:	2112      	movs	r1, #18
   8bf40:	f7ff ffb4 	bl	8beac <std>
   8bf44:	2301      	movs	r3, #1
   8bf46:	4805      	ldr	r0, [pc, #20]	; (8bf5c <__sinit+0x54>)
   8bf48:	63a3      	str	r3, [r4, #56]	; 0x38
   8bf4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bf4e:	f000 bbaf 	b.w	8c6b0 <__retarget_lock_release_recursive>
   8bf52:	4802      	ldr	r0, [pc, #8]	; (8bf5c <__sinit+0x54>)
   8bf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bf58:	f000 bbaa 	b.w	8c6b0 <__retarget_lock_release_recursive>
   8bf5c:	20002448 	.word	0x20002448
   8bf60:	0008befd 	.word	0x0008befd

0008bf64 <__sfp_lock_acquire>:
   8bf64:	4801      	ldr	r0, [pc, #4]	; (8bf6c <__sfp_lock_acquire+0x8>)
   8bf66:	f000 bba1 	b.w	8c6ac <__retarget_lock_acquire_recursive>
   8bf6a:	bf00      	nop
   8bf6c:	2000245c 	.word	0x2000245c

0008bf70 <__sfp_lock_release>:
   8bf70:	4801      	ldr	r0, [pc, #4]	; (8bf78 <__sfp_lock_release+0x8>)
   8bf72:	f000 bb9d 	b.w	8c6b0 <__retarget_lock_release_recursive>
   8bf76:	bf00      	nop
   8bf78:	2000245c 	.word	0x2000245c

0008bf7c <__libc_fini_array>:
   8bf7c:	b538      	push	{r3, r4, r5, lr}
   8bf7e:	4b08      	ldr	r3, [pc, #32]	; (8bfa0 <__libc_fini_array+0x24>)
   8bf80:	4d08      	ldr	r5, [pc, #32]	; (8bfa4 <__libc_fini_array+0x28>)
   8bf82:	1b5b      	subs	r3, r3, r5
   8bf84:	109c      	asrs	r4, r3, #2
   8bf86:	d007      	beq.n	8bf98 <__libc_fini_array+0x1c>
   8bf88:	3b04      	subs	r3, #4
   8bf8a:	441d      	add	r5, r3
   8bf8c:	3c01      	subs	r4, #1
   8bf8e:	f855 3904 	ldr.w	r3, [r5], #-4
   8bf92:	4798      	blx	r3
   8bf94:	2c00      	cmp	r4, #0
   8bf96:	d1f9      	bne.n	8bf8c <__libc_fini_array+0x10>
   8bf98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8bf9c:	f002 bfba 	b.w	8ef14 <_fini>
   8bfa0:	0008ef24 	.word	0x0008ef24
   8bfa4:	0008ef20 	.word	0x0008ef20

0008bfa8 <__fputwc>:
   8bfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8bfac:	b083      	sub	sp, #12
   8bfae:	4607      	mov	r7, r0
   8bfb0:	4688      	mov	r8, r1
   8bfb2:	4614      	mov	r4, r2
   8bfb4:	f000 fb6c 	bl	8c690 <__locale_mb_cur_max>
   8bfb8:	2801      	cmp	r0, #1
   8bfba:	d103      	bne.n	8bfc4 <__fputwc+0x1c>
   8bfbc:	f108 33ff 	add.w	r3, r8, #4294967295
   8bfc0:	2bfe      	cmp	r3, #254	; 0xfe
   8bfc2:	d933      	bls.n	8c02c <__fputwc+0x84>
   8bfc4:	4642      	mov	r2, r8
   8bfc6:	4638      	mov	r0, r7
   8bfc8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8bfcc:	a901      	add	r1, sp, #4
   8bfce:	f001 fe95 	bl	8dcfc <_wcrtomb_r>
   8bfd2:	1c42      	adds	r2, r0, #1
   8bfd4:	4606      	mov	r6, r0
   8bfd6:	d02f      	beq.n	8c038 <__fputwc+0x90>
   8bfd8:	b318      	cbz	r0, 8c022 <__fputwc+0x7a>
   8bfda:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8bfde:	2500      	movs	r5, #0
   8bfe0:	f10d 0904 	add.w	r9, sp, #4
   8bfe4:	e008      	b.n	8bff8 <__fputwc+0x50>
   8bfe6:	6823      	ldr	r3, [r4, #0]
   8bfe8:	1c5a      	adds	r2, r3, #1
   8bfea:	6022      	str	r2, [r4, #0]
   8bfec:	7019      	strb	r1, [r3, #0]
   8bfee:	3501      	adds	r5, #1
   8bff0:	42b5      	cmp	r5, r6
   8bff2:	d216      	bcs.n	8c022 <__fputwc+0x7a>
   8bff4:	f815 1009 	ldrb.w	r1, [r5, r9]
   8bff8:	68a3      	ldr	r3, [r4, #8]
   8bffa:	3b01      	subs	r3, #1
   8bffc:	2b00      	cmp	r3, #0
   8bffe:	60a3      	str	r3, [r4, #8]
   8c000:	daf1      	bge.n	8bfe6 <__fputwc+0x3e>
   8c002:	69a2      	ldr	r2, [r4, #24]
   8c004:	4293      	cmp	r3, r2
   8c006:	db01      	blt.n	8c00c <__fputwc+0x64>
   8c008:	290a      	cmp	r1, #10
   8c00a:	d1ec      	bne.n	8bfe6 <__fputwc+0x3e>
   8c00c:	4622      	mov	r2, r4
   8c00e:	4638      	mov	r0, r7
   8c010:	f001 fe1c 	bl	8dc4c <__swbuf_r>
   8c014:	1c43      	adds	r3, r0, #1
   8c016:	d1ea      	bne.n	8bfee <__fputwc+0x46>
   8c018:	4606      	mov	r6, r0
   8c01a:	4630      	mov	r0, r6
   8c01c:	b003      	add	sp, #12
   8c01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8c022:	4646      	mov	r6, r8
   8c024:	4630      	mov	r0, r6
   8c026:	b003      	add	sp, #12
   8c028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8c02c:	fa5f f188 	uxtb.w	r1, r8
   8c030:	4606      	mov	r6, r0
   8c032:	f88d 1004 	strb.w	r1, [sp, #4]
   8c036:	e7d2      	b.n	8bfde <__fputwc+0x36>
   8c038:	4630      	mov	r0, r6
   8c03a:	89a3      	ldrh	r3, [r4, #12]
   8c03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c040:	81a3      	strh	r3, [r4, #12]
   8c042:	b003      	add	sp, #12
   8c044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008c048 <_fputwc_r>:
   8c048:	b530      	push	{r4, r5, lr}
   8c04a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8c04c:	4614      	mov	r4, r2
   8c04e:	f013 0f01 	tst.w	r3, #1
   8c052:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8c056:	4605      	mov	r5, r0
   8c058:	b083      	sub	sp, #12
   8c05a:	b29a      	uxth	r2, r3
   8c05c:	d101      	bne.n	8c062 <_fputwc_r+0x1a>
   8c05e:	0598      	lsls	r0, r3, #22
   8c060:	d51c      	bpl.n	8c09c <_fputwc_r+0x54>
   8c062:	0490      	lsls	r0, r2, #18
   8c064:	d406      	bmi.n	8c074 <_fputwc_r+0x2c>
   8c066:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8c068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8c06c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c070:	81a3      	strh	r3, [r4, #12]
   8c072:	6662      	str	r2, [r4, #100]	; 0x64
   8c074:	4628      	mov	r0, r5
   8c076:	4622      	mov	r2, r4
   8c078:	f7ff ff96 	bl	8bfa8 <__fputwc>
   8c07c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c07e:	4605      	mov	r5, r0
   8c080:	07da      	lsls	r2, r3, #31
   8c082:	d402      	bmi.n	8c08a <_fputwc_r+0x42>
   8c084:	89a3      	ldrh	r3, [r4, #12]
   8c086:	059b      	lsls	r3, r3, #22
   8c088:	d502      	bpl.n	8c090 <_fputwc_r+0x48>
   8c08a:	4628      	mov	r0, r5
   8c08c:	b003      	add	sp, #12
   8c08e:	bd30      	pop	{r4, r5, pc}
   8c090:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c092:	f000 fb0d 	bl	8c6b0 <__retarget_lock_release_recursive>
   8c096:	4628      	mov	r0, r5
   8c098:	b003      	add	sp, #12
   8c09a:	bd30      	pop	{r4, r5, pc}
   8c09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c09e:	9101      	str	r1, [sp, #4]
   8c0a0:	f000 fb04 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0a8:	9901      	ldr	r1, [sp, #4]
   8c0aa:	b29a      	uxth	r2, r3
   8c0ac:	e7d9      	b.n	8c062 <_fputwc_r+0x1a>
   8c0ae:	bf00      	nop

0008c0b0 <_malloc_trim_r>:
   8c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c0b2:	460c      	mov	r4, r1
   8c0b4:	4f23      	ldr	r7, [pc, #140]	; (8c144 <_malloc_trim_r+0x94>)
   8c0b6:	4606      	mov	r6, r0
   8c0b8:	f000 fee2 	bl	8ce80 <__malloc_lock>
   8c0bc:	68bb      	ldr	r3, [r7, #8]
   8c0be:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8c0c2:	685d      	ldr	r5, [r3, #4]
   8c0c4:	310f      	adds	r1, #15
   8c0c6:	f025 0503 	bic.w	r5, r5, #3
   8c0ca:	194b      	adds	r3, r1, r5
   8c0cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8c0d0:	f023 030f 	bic.w	r3, r3, #15
   8c0d4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8c0d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8c0dc:	db07      	blt.n	8c0ee <_malloc_trim_r+0x3e>
   8c0de:	2100      	movs	r1, #0
   8c0e0:	4630      	mov	r0, r6
   8c0e2:	f001 fc7d 	bl	8d9e0 <_sbrk_r>
   8c0e6:	68bb      	ldr	r3, [r7, #8]
   8c0e8:	442b      	add	r3, r5
   8c0ea:	4298      	cmp	r0, r3
   8c0ec:	d004      	beq.n	8c0f8 <_malloc_trim_r+0x48>
   8c0ee:	4630      	mov	r0, r6
   8c0f0:	f000 fecc 	bl	8ce8c <__malloc_unlock>
   8c0f4:	2000      	movs	r0, #0
   8c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c0f8:	4630      	mov	r0, r6
   8c0fa:	4261      	negs	r1, r4
   8c0fc:	f001 fc70 	bl	8d9e0 <_sbrk_r>
   8c100:	3001      	adds	r0, #1
   8c102:	d00d      	beq.n	8c120 <_malloc_trim_r+0x70>
   8c104:	4a10      	ldr	r2, [pc, #64]	; (8c148 <_malloc_trim_r+0x98>)
   8c106:	68b9      	ldr	r1, [r7, #8]
   8c108:	6813      	ldr	r3, [r2, #0]
   8c10a:	1b2d      	subs	r5, r5, r4
   8c10c:	f045 0501 	orr.w	r5, r5, #1
   8c110:	4630      	mov	r0, r6
   8c112:	1b1b      	subs	r3, r3, r4
   8c114:	604d      	str	r5, [r1, #4]
   8c116:	6013      	str	r3, [r2, #0]
   8c118:	f000 feb8 	bl	8ce8c <__malloc_unlock>
   8c11c:	2001      	movs	r0, #1
   8c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c120:	2100      	movs	r1, #0
   8c122:	4630      	mov	r0, r6
   8c124:	f001 fc5c 	bl	8d9e0 <_sbrk_r>
   8c128:	68ba      	ldr	r2, [r7, #8]
   8c12a:	1a83      	subs	r3, r0, r2
   8c12c:	2b0f      	cmp	r3, #15
   8c12e:	ddde      	ble.n	8c0ee <_malloc_trim_r+0x3e>
   8c130:	4906      	ldr	r1, [pc, #24]	; (8c14c <_malloc_trim_r+0x9c>)
   8c132:	f043 0301 	orr.w	r3, r3, #1
   8c136:	680c      	ldr	r4, [r1, #0]
   8c138:	4903      	ldr	r1, [pc, #12]	; (8c148 <_malloc_trim_r+0x98>)
   8c13a:	1b00      	subs	r0, r0, r4
   8c13c:	6053      	str	r3, [r2, #4]
   8c13e:	6008      	str	r0, [r1, #0]
   8c140:	e7d5      	b.n	8c0ee <_malloc_trim_r+0x3e>
   8c142:	bf00      	nop
   8c144:	20000aa0 	.word	0x20000aa0
   8c148:	20001ef0 	.word	0x20001ef0
   8c14c:	20000ea8 	.word	0x20000ea8

0008c150 <_free_r>:
   8c150:	2900      	cmp	r1, #0
   8c152:	d05f      	beq.n	8c214 <_free_r+0xc4>
   8c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c156:	460c      	mov	r4, r1
   8c158:	4606      	mov	r6, r0
   8c15a:	f000 fe91 	bl	8ce80 <__malloc_lock>
   8c15e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c162:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8c358 <_free_r+0x208>
   8c166:	f1a4 0008 	sub.w	r0, r4, #8
   8c16a:	f023 0101 	bic.w	r1, r3, #1
   8c16e:	1842      	adds	r2, r0, r1
   8c170:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8c174:	6855      	ldr	r5, [r2, #4]
   8c176:	4297      	cmp	r7, r2
   8c178:	f025 0503 	bic.w	r5, r5, #3
   8c17c:	f000 8089 	beq.w	8c292 <_free_r+0x142>
   8c180:	07df      	lsls	r7, r3, #31
   8c182:	6055      	str	r5, [r2, #4]
   8c184:	d434      	bmi.n	8c1f0 <_free_r+0xa0>
   8c186:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8c18a:	f10c 0408 	add.w	r4, ip, #8
   8c18e:	1bc0      	subs	r0, r0, r7
   8c190:	6883      	ldr	r3, [r0, #8]
   8c192:	4439      	add	r1, r7
   8c194:	42a3      	cmp	r3, r4
   8c196:	d06a      	beq.n	8c26e <_free_r+0x11e>
   8c198:	1957      	adds	r7, r2, r5
   8c19a:	687f      	ldr	r7, [r7, #4]
   8c19c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8c1a0:	f8c3 e00c 	str.w	lr, [r3, #12]
   8c1a4:	f8ce 3008 	str.w	r3, [lr, #8]
   8c1a8:	07fb      	lsls	r3, r7, #31
   8c1aa:	f140 8097 	bpl.w	8c2dc <_free_r+0x18c>
   8c1ae:	f041 0301 	orr.w	r3, r1, #1
   8c1b2:	6043      	str	r3, [r0, #4]
   8c1b4:	6011      	str	r1, [r2, #0]
   8c1b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8c1ba:	d234      	bcs.n	8c226 <_free_r+0xd6>
   8c1bc:	2201      	movs	r2, #1
   8c1be:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8c1c2:	08cb      	lsrs	r3, r1, #3
   8c1c4:	0949      	lsrs	r1, r1, #5
   8c1c6:	4413      	add	r3, r2
   8c1c8:	fa02 f101 	lsl.w	r1, r2, r1
   8c1cc:	4321      	orrs	r1, r4
   8c1ce:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8c1d2:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8c1d6:	3a08      	subs	r2, #8
   8c1d8:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8c1dc:	f8cc 1004 	str.w	r1, [ip, #4]
   8c1e0:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8c1e4:	60e0      	str	r0, [r4, #12]
   8c1e6:	4630      	mov	r0, r6
   8c1e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8c1ec:	f000 be4e 	b.w	8ce8c <__malloc_unlock>
   8c1f0:	1953      	adds	r3, r2, r5
   8c1f2:	685b      	ldr	r3, [r3, #4]
   8c1f4:	07df      	lsls	r7, r3, #31
   8c1f6:	d40e      	bmi.n	8c216 <_free_r+0xc6>
   8c1f8:	4429      	add	r1, r5
   8c1fa:	f10c 0408 	add.w	r4, ip, #8
   8c1fe:	6893      	ldr	r3, [r2, #8]
   8c200:	42a3      	cmp	r3, r4
   8c202:	d073      	beq.n	8c2ec <_free_r+0x19c>
   8c204:	68d4      	ldr	r4, [r2, #12]
   8c206:	f041 0201 	orr.w	r2, r1, #1
   8c20a:	60dc      	str	r4, [r3, #12]
   8c20c:	60a3      	str	r3, [r4, #8]
   8c20e:	6042      	str	r2, [r0, #4]
   8c210:	5041      	str	r1, [r0, r1]
   8c212:	e7d0      	b.n	8c1b6 <_free_r+0x66>
   8c214:	4770      	bx	lr
   8c216:	f041 0301 	orr.w	r3, r1, #1
   8c21a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8c21e:	f844 3c04 	str.w	r3, [r4, #-4]
   8c222:	6011      	str	r1, [r2, #0]
   8c224:	d3ca      	bcc.n	8c1bc <_free_r+0x6c>
   8c226:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8c22a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8c22e:	d24a      	bcs.n	8c2c6 <_free_r+0x176>
   8c230:	098b      	lsrs	r3, r1, #6
   8c232:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8c236:	00ed      	lsls	r5, r5, #3
   8c238:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8c23c:	f85c 3005 	ldr.w	r3, [ip, r5]
   8c240:	eb0c 0405 	add.w	r4, ip, r5
   8c244:	3c08      	subs	r4, #8
   8c246:	429c      	cmp	r4, r3
   8c248:	d059      	beq.n	8c2fe <_free_r+0x1ae>
   8c24a:	685a      	ldr	r2, [r3, #4]
   8c24c:	f022 0203 	bic.w	r2, r2, #3
   8c250:	428a      	cmp	r2, r1
   8c252:	d902      	bls.n	8c25a <_free_r+0x10a>
   8c254:	689b      	ldr	r3, [r3, #8]
   8c256:	429c      	cmp	r4, r3
   8c258:	d1f7      	bne.n	8c24a <_free_r+0xfa>
   8c25a:	68dc      	ldr	r4, [r3, #12]
   8c25c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8c260:	60a0      	str	r0, [r4, #8]
   8c262:	60d8      	str	r0, [r3, #12]
   8c264:	4630      	mov	r0, r6
   8c266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8c26a:	f000 be0f 	b.w	8ce8c <__malloc_unlock>
   8c26e:	1953      	adds	r3, r2, r5
   8c270:	685b      	ldr	r3, [r3, #4]
   8c272:	07db      	lsls	r3, r3, #31
   8c274:	d466      	bmi.n	8c344 <_free_r+0x1f4>
   8c276:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8c27a:	4429      	add	r1, r5
   8c27c:	f041 0401 	orr.w	r4, r1, #1
   8c280:	60d3      	str	r3, [r2, #12]
   8c282:	609a      	str	r2, [r3, #8]
   8c284:	6044      	str	r4, [r0, #4]
   8c286:	5041      	str	r1, [r0, r1]
   8c288:	4630      	mov	r0, r6
   8c28a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8c28e:	f000 bdfd 	b.w	8ce8c <__malloc_unlock>
   8c292:	07db      	lsls	r3, r3, #31
   8c294:	4429      	add	r1, r5
   8c296:	d407      	bmi.n	8c2a8 <_free_r+0x158>
   8c298:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8c29c:	1b00      	subs	r0, r0, r4
   8c29e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8c2a2:	4421      	add	r1, r4
   8c2a4:	60d3      	str	r3, [r2, #12]
   8c2a6:	609a      	str	r2, [r3, #8]
   8c2a8:	4b29      	ldr	r3, [pc, #164]	; (8c350 <_free_r+0x200>)
   8c2aa:	f041 0201 	orr.w	r2, r1, #1
   8c2ae:	681b      	ldr	r3, [r3, #0]
   8c2b0:	6042      	str	r2, [r0, #4]
   8c2b2:	428b      	cmp	r3, r1
   8c2b4:	f8cc 0008 	str.w	r0, [ip, #8]
   8c2b8:	d895      	bhi.n	8c1e6 <_free_r+0x96>
   8c2ba:	4b26      	ldr	r3, [pc, #152]	; (8c354 <_free_r+0x204>)
   8c2bc:	4630      	mov	r0, r6
   8c2be:	6819      	ldr	r1, [r3, #0]
   8c2c0:	f7ff fef6 	bl	8c0b0 <_malloc_trim_r>
   8c2c4:	e78f      	b.n	8c1e6 <_free_r+0x96>
   8c2c6:	2b14      	cmp	r3, #20
   8c2c8:	d90a      	bls.n	8c2e0 <_free_r+0x190>
   8c2ca:	2b54      	cmp	r3, #84	; 0x54
   8c2cc:	d821      	bhi.n	8c312 <_free_r+0x1c2>
   8c2ce:	0b0b      	lsrs	r3, r1, #12
   8c2d0:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8c2d4:	00ed      	lsls	r5, r5, #3
   8c2d6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8c2da:	e7af      	b.n	8c23c <_free_r+0xec>
   8c2dc:	4429      	add	r1, r5
   8c2de:	e78e      	b.n	8c1fe <_free_r+0xae>
   8c2e0:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8c2e4:	00ed      	lsls	r5, r5, #3
   8c2e6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8c2ea:	e7a7      	b.n	8c23c <_free_r+0xec>
   8c2ec:	f041 0301 	orr.w	r3, r1, #1
   8c2f0:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8c2f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8c2f8:	6043      	str	r3, [r0, #4]
   8c2fa:	5041      	str	r1, [r0, r1]
   8c2fc:	e773      	b.n	8c1e6 <_free_r+0x96>
   8c2fe:	2501      	movs	r5, #1
   8c300:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8c304:	1092      	asrs	r2, r2, #2
   8c306:	fa05 f202 	lsl.w	r2, r5, r2
   8c30a:	430a      	orrs	r2, r1
   8c30c:	f8cc 2004 	str.w	r2, [ip, #4]
   8c310:	e7a4      	b.n	8c25c <_free_r+0x10c>
   8c312:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c316:	d806      	bhi.n	8c326 <_free_r+0x1d6>
   8c318:	0bcb      	lsrs	r3, r1, #15
   8c31a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8c31e:	00ed      	lsls	r5, r5, #3
   8c320:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8c324:	e78a      	b.n	8c23c <_free_r+0xec>
   8c326:	f240 5254 	movw	r2, #1364	; 0x554
   8c32a:	4293      	cmp	r3, r2
   8c32c:	d806      	bhi.n	8c33c <_free_r+0x1ec>
   8c32e:	0c8b      	lsrs	r3, r1, #18
   8c330:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8c334:	00ed      	lsls	r5, r5, #3
   8c336:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8c33a:	e77f      	b.n	8c23c <_free_r+0xec>
   8c33c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8c340:	227e      	movs	r2, #126	; 0x7e
   8c342:	e77b      	b.n	8c23c <_free_r+0xec>
   8c344:	f041 0301 	orr.w	r3, r1, #1
   8c348:	6043      	str	r3, [r0, #4]
   8c34a:	6011      	str	r1, [r2, #0]
   8c34c:	e74b      	b.n	8c1e6 <_free_r+0x96>
   8c34e:	bf00      	nop
   8c350:	20000eac 	.word	0x20000eac
   8c354:	20001f20 	.word	0x20001f20
   8c358:	20000aa0 	.word	0x20000aa0

0008c35c <__sfvwrite_r>:
   8c35c:	6893      	ldr	r3, [r2, #8]
   8c35e:	2b00      	cmp	r3, #0
   8c360:	f000 80bd 	beq.w	8c4de <__sfvwrite_r+0x182>
   8c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c368:	4690      	mov	r8, r2
   8c36a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8c36e:	460c      	mov	r4, r1
   8c370:	0711      	lsls	r1, r2, #28
   8c372:	4681      	mov	r9, r0
   8c374:	b083      	sub	sp, #12
   8c376:	b293      	uxth	r3, r2
   8c378:	d527      	bpl.n	8c3ca <__sfvwrite_r+0x6e>
   8c37a:	6922      	ldr	r2, [r4, #16]
   8c37c:	b32a      	cbz	r2, 8c3ca <__sfvwrite_r+0x6e>
   8c37e:	f013 0702 	ands.w	r7, r3, #2
   8c382:	f8d8 5000 	ldr.w	r5, [r8]
   8c386:	d02f      	beq.n	8c3e8 <__sfvwrite_r+0x8c>
   8c388:	f04f 0b00 	mov.w	fp, #0
   8c38c:	465f      	mov	r7, fp
   8c38e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8c644 <__sfvwrite_r+0x2e8>
   8c392:	2f00      	cmp	r7, #0
   8c394:	f000 8089 	beq.w	8c4aa <__sfvwrite_r+0x14e>
   8c398:	4557      	cmp	r7, sl
   8c39a:	463b      	mov	r3, r7
   8c39c:	465a      	mov	r2, fp
   8c39e:	bf28      	it	cs
   8c3a0:	4653      	movcs	r3, sl
   8c3a2:	4648      	mov	r0, r9
   8c3a4:	69e1      	ldr	r1, [r4, #28]
   8c3a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8c3a8:	47b0      	blx	r6
   8c3aa:	2800      	cmp	r0, #0
   8c3ac:	f340 808d 	ble.w	8c4ca <__sfvwrite_r+0x16e>
   8c3b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8c3b4:	4483      	add	fp, r0
   8c3b6:	1a1b      	subs	r3, r3, r0
   8c3b8:	1a3f      	subs	r7, r7, r0
   8c3ba:	f8c8 3008 	str.w	r3, [r8, #8]
   8c3be:	2b00      	cmp	r3, #0
   8c3c0:	d1e7      	bne.n	8c392 <__sfvwrite_r+0x36>
   8c3c2:	2000      	movs	r0, #0
   8c3c4:	b003      	add	sp, #12
   8c3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c3ca:	4621      	mov	r1, r4
   8c3cc:	4648      	mov	r0, r9
   8c3ce:	f7fe fc39 	bl	8ac44 <__swsetup_r>
   8c3d2:	2800      	cmp	r0, #0
   8c3d4:	f040 8132 	bne.w	8c63c <__sfvwrite_r+0x2e0>
   8c3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c3dc:	f8d8 5000 	ldr.w	r5, [r8]
   8c3e0:	b293      	uxth	r3, r2
   8c3e2:	f013 0702 	ands.w	r7, r3, #2
   8c3e6:	d1cf      	bne.n	8c388 <__sfvwrite_r+0x2c>
   8c3e8:	f013 0a01 	ands.w	sl, r3, #1
   8c3ec:	d179      	bne.n	8c4e2 <__sfvwrite_r+0x186>
   8c3ee:	4656      	mov	r6, sl
   8c3f0:	2e00      	cmp	r6, #0
   8c3f2:	d056      	beq.n	8c4a2 <__sfvwrite_r+0x146>
   8c3f4:	059a      	lsls	r2, r3, #22
   8c3f6:	68a7      	ldr	r7, [r4, #8]
   8c3f8:	f140 80bd 	bpl.w	8c576 <__sfvwrite_r+0x21a>
   8c3fc:	42b7      	cmp	r7, r6
   8c3fe:	46bb      	mov	fp, r7
   8c400:	f200 80d2 	bhi.w	8c5a8 <__sfvwrite_r+0x24c>
   8c404:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8c408:	f000 80d0 	beq.w	8c5ac <__sfvwrite_r+0x250>
   8c40c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8c410:	6822      	ldr	r2, [r4, #0]
   8c412:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8c416:	eba2 0b01 	sub.w	fp, r2, r1
   8c41a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8c41e:	f10b 0001 	add.w	r0, fp, #1
   8c422:	107f      	asrs	r7, r7, #1
   8c424:	4430      	add	r0, r6
   8c426:	42b8      	cmp	r0, r7
   8c428:	463a      	mov	r2, r7
   8c42a:	bf84      	itt	hi
   8c42c:	4607      	movhi	r7, r0
   8c42e:	463a      	movhi	r2, r7
   8c430:	055b      	lsls	r3, r3, #21
   8c432:	f140 80e7 	bpl.w	8c604 <__sfvwrite_r+0x2a8>
   8c436:	4611      	mov	r1, r2
   8c438:	4648      	mov	r0, r9
   8c43a:	f000 f9b3 	bl	8c7a4 <_malloc_r>
   8c43e:	2800      	cmp	r0, #0
   8c440:	f000 80f6 	beq.w	8c630 <__sfvwrite_r+0x2d4>
   8c444:	465a      	mov	r2, fp
   8c446:	6921      	ldr	r1, [r4, #16]
   8c448:	9000      	str	r0, [sp, #0]
   8c44a:	f7fb fe55 	bl	880f8 <memcpy>
   8c44e:	89a2      	ldrh	r2, [r4, #12]
   8c450:	9b00      	ldr	r3, [sp, #0]
   8c452:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c45a:	81a2      	strh	r2, [r4, #12]
   8c45c:	eba7 020b 	sub.w	r2, r7, fp
   8c460:	eb03 000b 	add.w	r0, r3, fp
   8c464:	6167      	str	r7, [r4, #20]
   8c466:	46b3      	mov	fp, r6
   8c468:	4637      	mov	r7, r6
   8c46a:	6123      	str	r3, [r4, #16]
   8c46c:	6020      	str	r0, [r4, #0]
   8c46e:	60a2      	str	r2, [r4, #8]
   8c470:	465a      	mov	r2, fp
   8c472:	4651      	mov	r1, sl
   8c474:	f000 fc9a 	bl	8cdac <memmove>
   8c478:	68a2      	ldr	r2, [r4, #8]
   8c47a:	6823      	ldr	r3, [r4, #0]
   8c47c:	1bd2      	subs	r2, r2, r7
   8c47e:	4637      	mov	r7, r6
   8c480:	2600      	movs	r6, #0
   8c482:	445b      	add	r3, fp
   8c484:	60a2      	str	r2, [r4, #8]
   8c486:	6023      	str	r3, [r4, #0]
   8c488:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8c48c:	44ba      	add	sl, r7
   8c48e:	1bd7      	subs	r7, r2, r7
   8c490:	f8c8 7008 	str.w	r7, [r8, #8]
   8c494:	2f00      	cmp	r7, #0
   8c496:	d094      	beq.n	8c3c2 <__sfvwrite_r+0x66>
   8c498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c49c:	b29b      	uxth	r3, r3
   8c49e:	2e00      	cmp	r6, #0
   8c4a0:	d1a8      	bne.n	8c3f4 <__sfvwrite_r+0x98>
   8c4a2:	e9d5 a600 	ldrd	sl, r6, [r5]
   8c4a6:	3508      	adds	r5, #8
   8c4a8:	e7a2      	b.n	8c3f0 <__sfvwrite_r+0x94>
   8c4aa:	e9d5 b700 	ldrd	fp, r7, [r5]
   8c4ae:	3508      	adds	r5, #8
   8c4b0:	e76f      	b.n	8c392 <__sfvwrite_r+0x36>
   8c4b2:	4629      	mov	r1, r5
   8c4b4:	465a      	mov	r2, fp
   8c4b6:	f000 fc79 	bl	8cdac <memmove>
   8c4ba:	6823      	ldr	r3, [r4, #0]
   8c4bc:	4621      	mov	r1, r4
   8c4be:	445b      	add	r3, fp
   8c4c0:	4648      	mov	r0, r9
   8c4c2:	6023      	str	r3, [r4, #0]
   8c4c4:	f7ff fcc4 	bl	8be50 <_fflush_r>
   8c4c8:	b358      	cbz	r0, 8c522 <__sfvwrite_r+0x1c6>
   8c4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c4ce:	f04f 30ff 	mov.w	r0, #4294967295
   8c4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c4d6:	81a3      	strh	r3, [r4, #12]
   8c4d8:	b003      	add	sp, #12
   8c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c4de:	2000      	movs	r0, #0
   8c4e0:	4770      	bx	lr
   8c4e2:	463e      	mov	r6, r7
   8c4e4:	46aa      	mov	sl, r5
   8c4e6:	4638      	mov	r0, r7
   8c4e8:	463d      	mov	r5, r7
   8c4ea:	9700      	str	r7, [sp, #0]
   8c4ec:	b36e      	cbz	r6, 8c54a <__sfvwrite_r+0x1ee>
   8c4ee:	2800      	cmp	r0, #0
   8c4f0:	d035      	beq.n	8c55e <__sfvwrite_r+0x202>
   8c4f2:	9a00      	ldr	r2, [sp, #0]
   8c4f4:	6820      	ldr	r0, [r4, #0]
   8c4f6:	6921      	ldr	r1, [r4, #16]
   8c4f8:	42b2      	cmp	r2, r6
   8c4fa:	bf28      	it	cs
   8c4fc:	4632      	movcs	r2, r6
   8c4fe:	4288      	cmp	r0, r1
   8c500:	6963      	ldr	r3, [r4, #20]
   8c502:	d904      	bls.n	8c50e <__sfvwrite_r+0x1b2>
   8c504:	68a1      	ldr	r1, [r4, #8]
   8c506:	eb03 0b01 	add.w	fp, r3, r1
   8c50a:	455a      	cmp	r2, fp
   8c50c:	dcd1      	bgt.n	8c4b2 <__sfvwrite_r+0x156>
   8c50e:	4293      	cmp	r3, r2
   8c510:	dc6b      	bgt.n	8c5ea <__sfvwrite_r+0x28e>
   8c512:	462a      	mov	r2, r5
   8c514:	4648      	mov	r0, r9
   8c516:	69e1      	ldr	r1, [r4, #28]
   8c518:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8c51a:	47b8      	blx	r7
   8c51c:	f1b0 0b00 	subs.w	fp, r0, #0
   8c520:	ddd3      	ble.n	8c4ca <__sfvwrite_r+0x16e>
   8c522:	9b00      	ldr	r3, [sp, #0]
   8c524:	ebb3 030b 	subs.w	r3, r3, fp
   8c528:	9300      	str	r3, [sp, #0]
   8c52a:	d057      	beq.n	8c5dc <__sfvwrite_r+0x280>
   8c52c:	2001      	movs	r0, #1
   8c52e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8c532:	445d      	add	r5, fp
   8c534:	eba3 030b 	sub.w	r3, r3, fp
   8c538:	eba6 060b 	sub.w	r6, r6, fp
   8c53c:	f8c8 3008 	str.w	r3, [r8, #8]
   8c540:	2b00      	cmp	r3, #0
   8c542:	f43f af3e 	beq.w	8c3c2 <__sfvwrite_r+0x66>
   8c546:	2e00      	cmp	r6, #0
   8c548:	d1d1      	bne.n	8c4ee <__sfvwrite_r+0x192>
   8c54a:	f10a 0308 	add.w	r3, sl, #8
   8c54e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8c552:	469a      	mov	sl, r3
   8c554:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8c558:	3308      	adds	r3, #8
   8c55a:	2e00      	cmp	r6, #0
   8c55c:	d0f7      	beq.n	8c54e <__sfvwrite_r+0x1f2>
   8c55e:	4632      	mov	r2, r6
   8c560:	210a      	movs	r1, #10
   8c562:	4628      	mov	r0, r5
   8c564:	f000 fbe2 	bl	8cd2c <memchr>
   8c568:	2800      	cmp	r0, #0
   8c56a:	d05e      	beq.n	8c62a <__sfvwrite_r+0x2ce>
   8c56c:	3001      	adds	r0, #1
   8c56e:	1b43      	subs	r3, r0, r5
   8c570:	461a      	mov	r2, r3
   8c572:	9300      	str	r3, [sp, #0]
   8c574:	e7be      	b.n	8c4f4 <__sfvwrite_r+0x198>
   8c576:	6820      	ldr	r0, [r4, #0]
   8c578:	6923      	ldr	r3, [r4, #16]
   8c57a:	4298      	cmp	r0, r3
   8c57c:	d818      	bhi.n	8c5b0 <__sfvwrite_r+0x254>
   8c57e:	6962      	ldr	r2, [r4, #20]
   8c580:	42b2      	cmp	r2, r6
   8c582:	d815      	bhi.n	8c5b0 <__sfvwrite_r+0x254>
   8c584:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8c588:	42b3      	cmp	r3, r6
   8c58a:	bf28      	it	cs
   8c58c:	4633      	movcs	r3, r6
   8c58e:	fb93 f3f2 	sdiv	r3, r3, r2
   8c592:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8c594:	fb02 f303 	mul.w	r3, r2, r3
   8c598:	4648      	mov	r0, r9
   8c59a:	4652      	mov	r2, sl
   8c59c:	69e1      	ldr	r1, [r4, #28]
   8c59e:	47b8      	blx	r7
   8c5a0:	1e07      	subs	r7, r0, #0
   8c5a2:	dd92      	ble.n	8c4ca <__sfvwrite_r+0x16e>
   8c5a4:	1bf6      	subs	r6, r6, r7
   8c5a6:	e76f      	b.n	8c488 <__sfvwrite_r+0x12c>
   8c5a8:	4637      	mov	r7, r6
   8c5aa:	46b3      	mov	fp, r6
   8c5ac:	6820      	ldr	r0, [r4, #0]
   8c5ae:	e75f      	b.n	8c470 <__sfvwrite_r+0x114>
   8c5b0:	42b7      	cmp	r7, r6
   8c5b2:	bf28      	it	cs
   8c5b4:	4637      	movcs	r7, r6
   8c5b6:	4651      	mov	r1, sl
   8c5b8:	463a      	mov	r2, r7
   8c5ba:	f000 fbf7 	bl	8cdac <memmove>
   8c5be:	68a3      	ldr	r3, [r4, #8]
   8c5c0:	6822      	ldr	r2, [r4, #0]
   8c5c2:	1bdb      	subs	r3, r3, r7
   8c5c4:	443a      	add	r2, r7
   8c5c6:	60a3      	str	r3, [r4, #8]
   8c5c8:	6022      	str	r2, [r4, #0]
   8c5ca:	2b00      	cmp	r3, #0
   8c5cc:	d1ea      	bne.n	8c5a4 <__sfvwrite_r+0x248>
   8c5ce:	4621      	mov	r1, r4
   8c5d0:	4648      	mov	r0, r9
   8c5d2:	f7ff fc3d 	bl	8be50 <_fflush_r>
   8c5d6:	2800      	cmp	r0, #0
   8c5d8:	d0e4      	beq.n	8c5a4 <__sfvwrite_r+0x248>
   8c5da:	e776      	b.n	8c4ca <__sfvwrite_r+0x16e>
   8c5dc:	4621      	mov	r1, r4
   8c5de:	4648      	mov	r0, r9
   8c5e0:	f7ff fc36 	bl	8be50 <_fflush_r>
   8c5e4:	2800      	cmp	r0, #0
   8c5e6:	d0a2      	beq.n	8c52e <__sfvwrite_r+0x1d2>
   8c5e8:	e76f      	b.n	8c4ca <__sfvwrite_r+0x16e>
   8c5ea:	4629      	mov	r1, r5
   8c5ec:	4693      	mov	fp, r2
   8c5ee:	9201      	str	r2, [sp, #4]
   8c5f0:	f000 fbdc 	bl	8cdac <memmove>
   8c5f4:	68a1      	ldr	r1, [r4, #8]
   8c5f6:	6823      	ldr	r3, [r4, #0]
   8c5f8:	9a01      	ldr	r2, [sp, #4]
   8c5fa:	1a89      	subs	r1, r1, r2
   8c5fc:	441a      	add	r2, r3
   8c5fe:	60a1      	str	r1, [r4, #8]
   8c600:	6022      	str	r2, [r4, #0]
   8c602:	e78e      	b.n	8c522 <__sfvwrite_r+0x1c6>
   8c604:	4648      	mov	r0, r9
   8c606:	f000 ffc3 	bl	8d590 <_realloc_r>
   8c60a:	4603      	mov	r3, r0
   8c60c:	2800      	cmp	r0, #0
   8c60e:	f47f af25 	bne.w	8c45c <__sfvwrite_r+0x100>
   8c612:	4648      	mov	r0, r9
   8c614:	6921      	ldr	r1, [r4, #16]
   8c616:	f7ff fd9b 	bl	8c150 <_free_r>
   8c61a:	220c      	movs	r2, #12
   8c61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c620:	f8c9 2000 	str.w	r2, [r9]
   8c624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8c628:	e751      	b.n	8c4ce <__sfvwrite_r+0x172>
   8c62a:	1c72      	adds	r2, r6, #1
   8c62c:	9200      	str	r2, [sp, #0]
   8c62e:	e761      	b.n	8c4f4 <__sfvwrite_r+0x198>
   8c630:	220c      	movs	r2, #12
   8c632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c636:	f8c9 2000 	str.w	r2, [r9]
   8c63a:	e748      	b.n	8c4ce <__sfvwrite_r+0x172>
   8c63c:	f04f 30ff 	mov.w	r0, #4294967295
   8c640:	e6c0      	b.n	8c3c4 <__sfvwrite_r+0x68>
   8c642:	bf00      	nop
   8c644:	7ffffc00 	.word	0x7ffffc00

0008c648 <_fwalk_reent>:
   8c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8c64c:	4607      	mov	r7, r0
   8c64e:	4688      	mov	r8, r1
   8c650:	f04f 0900 	mov.w	r9, #0
   8c654:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8c658:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8c65c:	3d01      	subs	r5, #1
   8c65e:	d410      	bmi.n	8c682 <_fwalk_reent+0x3a>
   8c660:	89a3      	ldrh	r3, [r4, #12]
   8c662:	3d01      	subs	r5, #1
   8c664:	2b01      	cmp	r3, #1
   8c666:	d908      	bls.n	8c67a <_fwalk_reent+0x32>
   8c668:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8c66c:	3301      	adds	r3, #1
   8c66e:	d004      	beq.n	8c67a <_fwalk_reent+0x32>
   8c670:	4621      	mov	r1, r4
   8c672:	4638      	mov	r0, r7
   8c674:	47c0      	blx	r8
   8c676:	ea49 0900 	orr.w	r9, r9, r0
   8c67a:	1c6b      	adds	r3, r5, #1
   8c67c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8c680:	d1ee      	bne.n	8c660 <_fwalk_reent+0x18>
   8c682:	6836      	ldr	r6, [r6, #0]
   8c684:	2e00      	cmp	r6, #0
   8c686:	d1e7      	bne.n	8c658 <_fwalk_reent+0x10>
   8c688:	4648      	mov	r0, r9
   8c68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c68e:	bf00      	nop

0008c690 <__locale_mb_cur_max>:
   8c690:	4b01      	ldr	r3, [pc, #4]	; (8c698 <__locale_mb_cur_max+0x8>)
   8c692:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8c696:	4770      	bx	lr
   8c698:	20000934 	.word	0x20000934

0008c69c <_localeconv_r>:
   8c69c:	4800      	ldr	r0, [pc, #0]	; (8c6a0 <_localeconv_r+0x4>)
   8c69e:	4770      	bx	lr
   8c6a0:	20000a24 	.word	0x20000a24

0008c6a4 <__retarget_lock_init_recursive>:
   8c6a4:	4770      	bx	lr
   8c6a6:	bf00      	nop

0008c6a8 <__retarget_lock_close_recursive>:
   8c6a8:	4770      	bx	lr
   8c6aa:	bf00      	nop

0008c6ac <__retarget_lock_acquire_recursive>:
   8c6ac:	4770      	bx	lr
   8c6ae:	bf00      	nop

0008c6b0 <__retarget_lock_release_recursive>:
   8c6b0:	4770      	bx	lr
   8c6b2:	bf00      	nop

0008c6b4 <__swhatbuf_r>:
   8c6b4:	b570      	push	{r4, r5, r6, lr}
   8c6b6:	460c      	mov	r4, r1
   8c6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c6bc:	4615      	mov	r5, r2
   8c6be:	2900      	cmp	r1, #0
   8c6c0:	461e      	mov	r6, r3
   8c6c2:	b096      	sub	sp, #88	; 0x58
   8c6c4:	db14      	blt.n	8c6f0 <__swhatbuf_r+0x3c>
   8c6c6:	466a      	mov	r2, sp
   8c6c8:	f001 fc7a 	bl	8dfc0 <_fstat_r>
   8c6cc:	2800      	cmp	r0, #0
   8c6ce:	db0f      	blt.n	8c6f0 <__swhatbuf_r+0x3c>
   8c6d0:	9a01      	ldr	r2, [sp, #4]
   8c6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c6d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8c6da:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8c6de:	fab2 f282 	clz	r2, r2
   8c6e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8c6e6:	0952      	lsrs	r2, r2, #5
   8c6e8:	6032      	str	r2, [r6, #0]
   8c6ea:	602b      	str	r3, [r5, #0]
   8c6ec:	b016      	add	sp, #88	; 0x58
   8c6ee:	bd70      	pop	{r4, r5, r6, pc}
   8c6f0:	2300      	movs	r3, #0
   8c6f2:	89a1      	ldrh	r1, [r4, #12]
   8c6f4:	6033      	str	r3, [r6, #0]
   8c6f6:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8c6fa:	d004      	beq.n	8c706 <__swhatbuf_r+0x52>
   8c6fc:	2240      	movs	r2, #64	; 0x40
   8c6fe:	4618      	mov	r0, r3
   8c700:	602a      	str	r2, [r5, #0]
   8c702:	b016      	add	sp, #88	; 0x58
   8c704:	bd70      	pop	{r4, r5, r6, pc}
   8c706:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c70a:	602b      	str	r3, [r5, #0]
   8c70c:	b016      	add	sp, #88	; 0x58
   8c70e:	bd70      	pop	{r4, r5, r6, pc}

0008c710 <__smakebuf_r>:
   8c710:	b570      	push	{r4, r5, r6, lr}
   8c712:	898b      	ldrh	r3, [r1, #12]
   8c714:	460c      	mov	r4, r1
   8c716:	079d      	lsls	r5, r3, #30
   8c718:	b082      	sub	sp, #8
   8c71a:	d507      	bpl.n	8c72c <__smakebuf_r+0x1c>
   8c71c:	2201      	movs	r2, #1
   8c71e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8c722:	614a      	str	r2, [r1, #20]
   8c724:	600b      	str	r3, [r1, #0]
   8c726:	610b      	str	r3, [r1, #16]
   8c728:	b002      	add	sp, #8
   8c72a:	bd70      	pop	{r4, r5, r6, pc}
   8c72c:	ab01      	add	r3, sp, #4
   8c72e:	466a      	mov	r2, sp
   8c730:	4606      	mov	r6, r0
   8c732:	f7ff ffbf 	bl	8c6b4 <__swhatbuf_r>
   8c736:	9900      	ldr	r1, [sp, #0]
   8c738:	4605      	mov	r5, r0
   8c73a:	4630      	mov	r0, r6
   8c73c:	f000 f832 	bl	8c7a4 <_malloc_r>
   8c740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c744:	b170      	cbz	r0, 8c764 <__smakebuf_r+0x54>
   8c746:	4916      	ldr	r1, [pc, #88]	; (8c7a0 <__smakebuf_r+0x90>)
   8c748:	9a00      	ldr	r2, [sp, #0]
   8c74a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8c74c:	9901      	ldr	r1, [sp, #4]
   8c74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8c752:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8c756:	81a3      	strh	r3, [r4, #12]
   8c758:	6020      	str	r0, [r4, #0]
   8c75a:	b989      	cbnz	r1, 8c780 <__smakebuf_r+0x70>
   8c75c:	432b      	orrs	r3, r5
   8c75e:	81a3      	strh	r3, [r4, #12]
   8c760:	b002      	add	sp, #8
   8c762:	bd70      	pop	{r4, r5, r6, pc}
   8c764:	059a      	lsls	r2, r3, #22
   8c766:	d4df      	bmi.n	8c728 <__smakebuf_r+0x18>
   8c768:	2101      	movs	r1, #1
   8c76a:	f023 0303 	bic.w	r3, r3, #3
   8c76e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8c772:	f043 0302 	orr.w	r3, r3, #2
   8c776:	81a3      	strh	r3, [r4, #12]
   8c778:	6161      	str	r1, [r4, #20]
   8c77a:	6022      	str	r2, [r4, #0]
   8c77c:	6122      	str	r2, [r4, #16]
   8c77e:	e7d3      	b.n	8c728 <__smakebuf_r+0x18>
   8c780:	4630      	mov	r0, r6
   8c782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c786:	f001 fc31 	bl	8dfec <_isatty_r>
   8c78a:	b910      	cbnz	r0, 8c792 <__smakebuf_r+0x82>
   8c78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c790:	e7e4      	b.n	8c75c <__smakebuf_r+0x4c>
   8c792:	89a2      	ldrh	r2, [r4, #12]
   8c794:	f022 0203 	bic.w	r2, r2, #3
   8c798:	f042 0201 	orr.w	r2, r2, #1
   8c79c:	b213      	sxth	r3, r2
   8c79e:	e7dd      	b.n	8c75c <__smakebuf_r+0x4c>
   8c7a0:	0008befd 	.word	0x0008befd

0008c7a4 <_malloc_r>:
   8c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c7a8:	f101 050b 	add.w	r5, r1, #11
   8c7ac:	2d16      	cmp	r5, #22
   8c7ae:	4606      	mov	r6, r0
   8c7b0:	b083      	sub	sp, #12
   8c7b2:	d824      	bhi.n	8c7fe <_malloc_r+0x5a>
   8c7b4:	2910      	cmp	r1, #16
   8c7b6:	f200 80b6 	bhi.w	8c926 <_malloc_r+0x182>
   8c7ba:	f000 fb61 	bl	8ce80 <__malloc_lock>
   8c7be:	2510      	movs	r5, #16
   8c7c0:	2002      	movs	r0, #2
   8c7c2:	2318      	movs	r3, #24
   8c7c4:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8ccb0 <_malloc_r+0x50c>
   8c7c8:	4443      	add	r3, r8
   8c7ca:	685c      	ldr	r4, [r3, #4]
   8c7cc:	f1a3 0208 	sub.w	r2, r3, #8
   8c7d0:	4294      	cmp	r4, r2
   8c7d2:	f000 80b4 	beq.w	8c93e <_malloc_r+0x19a>
   8c7d6:	6863      	ldr	r3, [r4, #4]
   8c7d8:	68e1      	ldr	r1, [r4, #12]
   8c7da:	f023 0303 	bic.w	r3, r3, #3
   8c7de:	4423      	add	r3, r4
   8c7e0:	685a      	ldr	r2, [r3, #4]
   8c7e2:	68a5      	ldr	r5, [r4, #8]
   8c7e4:	f042 0201 	orr.w	r2, r2, #1
   8c7e8:	60e9      	str	r1, [r5, #12]
   8c7ea:	4630      	mov	r0, r6
   8c7ec:	608d      	str	r5, [r1, #8]
   8c7ee:	3408      	adds	r4, #8
   8c7f0:	605a      	str	r2, [r3, #4]
   8c7f2:	f000 fb4b 	bl	8ce8c <__malloc_unlock>
   8c7f6:	4620      	mov	r0, r4
   8c7f8:	b003      	add	sp, #12
   8c7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c7fe:	f035 0507 	bics.w	r5, r5, #7
   8c802:	f100 8090 	bmi.w	8c926 <_malloc_r+0x182>
   8c806:	42a9      	cmp	r1, r5
   8c808:	f200 808d 	bhi.w	8c926 <_malloc_r+0x182>
   8c80c:	f000 fb38 	bl	8ce80 <__malloc_lock>
   8c810:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8c814:	f0c0 8185 	bcc.w	8cb22 <_malloc_r+0x37e>
   8c818:	0a6b      	lsrs	r3, r5, #9
   8c81a:	f000 808b 	beq.w	8c934 <_malloc_r+0x190>
   8c81e:	2b04      	cmp	r3, #4
   8c820:	f200 815b 	bhi.w	8cada <_malloc_r+0x336>
   8c824:	09ab      	lsrs	r3, r5, #6
   8c826:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8c82a:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8c82e:	00c1      	lsls	r1, r0, #3
   8c830:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8ccb0 <_malloc_r+0x50c>
   8c834:	4441      	add	r1, r8
   8c836:	684c      	ldr	r4, [r1, #4]
   8c838:	3908      	subs	r1, #8
   8c83a:	42a1      	cmp	r1, r4
   8c83c:	d106      	bne.n	8c84c <_malloc_r+0xa8>
   8c83e:	e00c      	b.n	8c85a <_malloc_r+0xb6>
   8c840:	2a00      	cmp	r2, #0
   8c842:	f280 8122 	bge.w	8ca8a <_malloc_r+0x2e6>
   8c846:	68e4      	ldr	r4, [r4, #12]
   8c848:	42a1      	cmp	r1, r4
   8c84a:	d006      	beq.n	8c85a <_malloc_r+0xb6>
   8c84c:	6863      	ldr	r3, [r4, #4]
   8c84e:	f023 0303 	bic.w	r3, r3, #3
   8c852:	1b5a      	subs	r2, r3, r5
   8c854:	2a0f      	cmp	r2, #15
   8c856:	ddf3      	ble.n	8c840 <_malloc_r+0x9c>
   8c858:	4638      	mov	r0, r7
   8c85a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c85e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8ccb4 <_malloc_r+0x510>
   8c862:	4564      	cmp	r4, ip
   8c864:	d077      	beq.n	8c956 <_malloc_r+0x1b2>
   8c866:	6862      	ldr	r2, [r4, #4]
   8c868:	f022 0203 	bic.w	r2, r2, #3
   8c86c:	1b53      	subs	r3, r2, r5
   8c86e:	2b0f      	cmp	r3, #15
   8c870:	f300 8165 	bgt.w	8cb3e <_malloc_r+0x39a>
   8c874:	2b00      	cmp	r3, #0
   8c876:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8c87a:	f280 8156 	bge.w	8cb2a <_malloc_r+0x386>
   8c87e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8c882:	f080 8106 	bcs.w	8ca92 <_malloc_r+0x2ee>
   8c886:	2101      	movs	r1, #1
   8c888:	08d3      	lsrs	r3, r2, #3
   8c88a:	0952      	lsrs	r2, r2, #5
   8c88c:	440b      	add	r3, r1
   8c88e:	fa01 f202 	lsl.w	r2, r1, r2
   8c892:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8c896:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8c89a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8c89e:	430a      	orrs	r2, r1
   8c8a0:	f1ae 0108 	sub.w	r1, lr, #8
   8c8a4:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8c8a8:	f8c8 2004 	str.w	r2, [r8, #4]
   8c8ac:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8c8b0:	60fc      	str	r4, [r7, #12]
   8c8b2:	2101      	movs	r1, #1
   8c8b4:	1083      	asrs	r3, r0, #2
   8c8b6:	4099      	lsls	r1, r3
   8c8b8:	4291      	cmp	r1, r2
   8c8ba:	d853      	bhi.n	8c964 <_malloc_r+0x1c0>
   8c8bc:	4211      	tst	r1, r2
   8c8be:	d106      	bne.n	8c8ce <_malloc_r+0x12a>
   8c8c0:	f020 0003 	bic.w	r0, r0, #3
   8c8c4:	0049      	lsls	r1, r1, #1
   8c8c6:	4211      	tst	r1, r2
   8c8c8:	f100 0004 	add.w	r0, r0, #4
   8c8cc:	d0fa      	beq.n	8c8c4 <_malloc_r+0x120>
   8c8ce:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8c8d2:	464c      	mov	r4, r9
   8c8d4:	4686      	mov	lr, r0
   8c8d6:	68e7      	ldr	r7, [r4, #12]
   8c8d8:	42bc      	cmp	r4, r7
   8c8da:	d107      	bne.n	8c8ec <_malloc_r+0x148>
   8c8dc:	e109      	b.n	8caf2 <_malloc_r+0x34e>
   8c8de:	2b00      	cmp	r3, #0
   8c8e0:	f280 8110 	bge.w	8cb04 <_malloc_r+0x360>
   8c8e4:	68ff      	ldr	r7, [r7, #12]
   8c8e6:	42bc      	cmp	r4, r7
   8c8e8:	f000 8103 	beq.w	8caf2 <_malloc_r+0x34e>
   8c8ec:	687a      	ldr	r2, [r7, #4]
   8c8ee:	f022 0203 	bic.w	r2, r2, #3
   8c8f2:	1b53      	subs	r3, r2, r5
   8c8f4:	2b0f      	cmp	r3, #15
   8c8f6:	ddf2      	ble.n	8c8de <_malloc_r+0x13a>
   8c8f8:	f045 0e01 	orr.w	lr, r5, #1
   8c8fc:	4630      	mov	r0, r6
   8c8fe:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8c902:	443d      	add	r5, r7
   8c904:	f043 0601 	orr.w	r6, r3, #1
   8c908:	f8c7 e004 	str.w	lr, [r7, #4]
   8c90c:	60e1      	str	r1, [r4, #12]
   8c90e:	608c      	str	r4, [r1, #8]
   8c910:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c914:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c918:	606e      	str	r6, [r5, #4]
   8c91a:	50bb      	str	r3, [r7, r2]
   8c91c:	f000 fab6 	bl	8ce8c <__malloc_unlock>
   8c920:	f107 0408 	add.w	r4, r7, #8
   8c924:	e002      	b.n	8c92c <_malloc_r+0x188>
   8c926:	230c      	movs	r3, #12
   8c928:	2400      	movs	r4, #0
   8c92a:	6033      	str	r3, [r6, #0]
   8c92c:	4620      	mov	r0, r4
   8c92e:	b003      	add	sp, #12
   8c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c934:	f44f 7100 	mov.w	r1, #512	; 0x200
   8c938:	2040      	movs	r0, #64	; 0x40
   8c93a:	273f      	movs	r7, #63	; 0x3f
   8c93c:	e778      	b.n	8c830 <_malloc_r+0x8c>
   8c93e:	68dc      	ldr	r4, [r3, #12]
   8c940:	42a3      	cmp	r3, r4
   8c942:	bf08      	it	eq
   8c944:	3002      	addeq	r0, #2
   8c946:	f47f af46 	bne.w	8c7d6 <_malloc_r+0x32>
   8c94a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c94e:	f8df c364 	ldr.w	ip, [pc, #868]	; 8ccb4 <_malloc_r+0x510>
   8c952:	4564      	cmp	r4, ip
   8c954:	d187      	bne.n	8c866 <_malloc_r+0xc2>
   8c956:	2101      	movs	r1, #1
   8c958:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c95c:	1083      	asrs	r3, r0, #2
   8c95e:	4099      	lsls	r1, r3
   8c960:	4291      	cmp	r1, r2
   8c962:	d9ab      	bls.n	8c8bc <_malloc_r+0x118>
   8c964:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c968:	6867      	ldr	r7, [r4, #4]
   8c96a:	f027 0703 	bic.w	r7, r7, #3
   8c96e:	42bd      	cmp	r5, r7
   8c970:	d802      	bhi.n	8c978 <_malloc_r+0x1d4>
   8c972:	1b7b      	subs	r3, r7, r5
   8c974:	2b0f      	cmp	r3, #15
   8c976:	dc77      	bgt.n	8ca68 <_malloc_r+0x2c4>
   8c978:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8ccb8 <_malloc_r+0x514>
   8c97c:	4bc8      	ldr	r3, [pc, #800]	; (8cca0 <_malloc_r+0x4fc>)
   8c97e:	f8d9 2000 	ldr.w	r2, [r9]
   8c982:	681b      	ldr	r3, [r3, #0]
   8c984:	3201      	adds	r2, #1
   8c986:	442b      	add	r3, r5
   8c988:	eb04 0a07 	add.w	sl, r4, r7
   8c98c:	f000 8124 	beq.w	8cbd8 <_malloc_r+0x434>
   8c990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8c994:	330f      	adds	r3, #15
   8c996:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8c99a:	f02b 0b0f 	bic.w	fp, fp, #15
   8c99e:	4659      	mov	r1, fp
   8c9a0:	4630      	mov	r0, r6
   8c9a2:	f001 f81d 	bl	8d9e0 <_sbrk_r>
   8c9a6:	1c41      	adds	r1, r0, #1
   8c9a8:	4602      	mov	r2, r0
   8c9aa:	f000 80e1 	beq.w	8cb70 <_malloc_r+0x3cc>
   8c9ae:	4582      	cmp	sl, r0
   8c9b0:	f200 80dc 	bhi.w	8cb6c <_malloc_r+0x3c8>
   8c9b4:	4bbb      	ldr	r3, [pc, #748]	; (8cca4 <_malloc_r+0x500>)
   8c9b6:	6819      	ldr	r1, [r3, #0]
   8c9b8:	4459      	add	r1, fp
   8c9ba:	4608      	mov	r0, r1
   8c9bc:	6019      	str	r1, [r3, #0]
   8c9be:	f000 8141 	beq.w	8cc44 <_malloc_r+0x4a0>
   8c9c2:	f8d9 1000 	ldr.w	r1, [r9]
   8c9c6:	9301      	str	r3, [sp, #4]
   8c9c8:	3101      	adds	r1, #1
   8c9ca:	bf1b      	ittet	ne
   8c9cc:	eba2 0a0a 	subne.w	sl, r2, sl
   8c9d0:	4450      	addne	r0, sl
   8c9d2:	f8c9 2000 	streq.w	r2, [r9]
   8c9d6:	6018      	strne	r0, [r3, #0]
   8c9d8:	f012 0a07 	ands.w	sl, r2, #7
   8c9dc:	f000 810a 	beq.w	8cbf4 <_malloc_r+0x450>
   8c9e0:	f1ca 0108 	rsb	r1, sl, #8
   8c9e4:	440a      	add	r2, r1
   8c9e6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8c9ea:	4493      	add	fp, r2
   8c9ec:	3108      	adds	r1, #8
   8c9ee:	eba1 010b 	sub.w	r1, r1, fp
   8c9f2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c9f6:	4649      	mov	r1, r9
   8c9f8:	4630      	mov	r0, r6
   8c9fa:	9200      	str	r2, [sp, #0]
   8c9fc:	f000 fff0 	bl	8d9e0 <_sbrk_r>
   8ca00:	1c42      	adds	r2, r0, #1
   8ca02:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ca06:	f000 8143 	beq.w	8cc90 <_malloc_r+0x4ec>
   8ca0a:	1a80      	subs	r0, r0, r2
   8ca0c:	eb00 0b09 	add.w	fp, r0, r9
   8ca10:	6819      	ldr	r1, [r3, #0]
   8ca12:	f04b 0001 	orr.w	r0, fp, #1
   8ca16:	4449      	add	r1, r9
   8ca18:	4544      	cmp	r4, r8
   8ca1a:	f8c8 2008 	str.w	r2, [r8, #8]
   8ca1e:	6019      	str	r1, [r3, #0]
   8ca20:	6050      	str	r0, [r2, #4]
   8ca22:	f000 811c 	beq.w	8cc5e <_malloc_r+0x4ba>
   8ca26:	2f0f      	cmp	r7, #15
   8ca28:	f240 811b 	bls.w	8cc62 <_malloc_r+0x4be>
   8ca2c:	f04f 0c05 	mov.w	ip, #5
   8ca30:	6860      	ldr	r0, [r4, #4]
   8ca32:	3f0c      	subs	r7, #12
   8ca34:	f027 0707 	bic.w	r7, r7, #7
   8ca38:	f000 0001 	and.w	r0, r0, #1
   8ca3c:	4338      	orrs	r0, r7
   8ca3e:	eb04 0e07 	add.w	lr, r4, r7
   8ca42:	2f0f      	cmp	r7, #15
   8ca44:	6060      	str	r0, [r4, #4]
   8ca46:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8ca4a:	f200 8137 	bhi.w	8ccbc <_malloc_r+0x518>
   8ca4e:	4614      	mov	r4, r2
   8ca50:	6850      	ldr	r0, [r2, #4]
   8ca52:	4b95      	ldr	r3, [pc, #596]	; (8cca8 <_malloc_r+0x504>)
   8ca54:	681a      	ldr	r2, [r3, #0]
   8ca56:	428a      	cmp	r2, r1
   8ca58:	bf38      	it	cc
   8ca5a:	6019      	strcc	r1, [r3, #0]
   8ca5c:	4b93      	ldr	r3, [pc, #588]	; (8ccac <_malloc_r+0x508>)
   8ca5e:	681a      	ldr	r2, [r3, #0]
   8ca60:	428a      	cmp	r2, r1
   8ca62:	bf38      	it	cc
   8ca64:	6019      	strcc	r1, [r3, #0]
   8ca66:	e086      	b.n	8cb76 <_malloc_r+0x3d2>
   8ca68:	f045 0201 	orr.w	r2, r5, #1
   8ca6c:	f043 0301 	orr.w	r3, r3, #1
   8ca70:	4425      	add	r5, r4
   8ca72:	6062      	str	r2, [r4, #4]
   8ca74:	4630      	mov	r0, r6
   8ca76:	f8c8 5008 	str.w	r5, [r8, #8]
   8ca7a:	3408      	adds	r4, #8
   8ca7c:	606b      	str	r3, [r5, #4]
   8ca7e:	f000 fa05 	bl	8ce8c <__malloc_unlock>
   8ca82:	4620      	mov	r0, r4
   8ca84:	b003      	add	sp, #12
   8ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ca8a:	4423      	add	r3, r4
   8ca8c:	685a      	ldr	r2, [r3, #4]
   8ca8e:	68e1      	ldr	r1, [r4, #12]
   8ca90:	e6a7      	b.n	8c7e2 <_malloc_r+0x3e>
   8ca92:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ca96:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ca9a:	d361      	bcc.n	8cb60 <_malloc_r+0x3bc>
   8ca9c:	2b14      	cmp	r3, #20
   8ca9e:	f200 80ba 	bhi.w	8cc16 <_malloc_r+0x472>
   8caa2:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8caa6:	00c9      	lsls	r1, r1, #3
   8caa8:	335b      	adds	r3, #91	; 0x5b
   8caaa:	eb08 0701 	add.w	r7, r8, r1
   8caae:	f858 1001 	ldr.w	r1, [r8, r1]
   8cab2:	3f08      	subs	r7, #8
   8cab4:	428f      	cmp	r7, r1
   8cab6:	f000 8092 	beq.w	8cbde <_malloc_r+0x43a>
   8caba:	684b      	ldr	r3, [r1, #4]
   8cabc:	f023 0303 	bic.w	r3, r3, #3
   8cac0:	4293      	cmp	r3, r2
   8cac2:	d902      	bls.n	8caca <_malloc_r+0x326>
   8cac4:	6889      	ldr	r1, [r1, #8]
   8cac6:	428f      	cmp	r7, r1
   8cac8:	d1f7      	bne.n	8caba <_malloc_r+0x316>
   8caca:	68cf      	ldr	r7, [r1, #12]
   8cacc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8cad0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8cad4:	60bc      	str	r4, [r7, #8]
   8cad6:	60cc      	str	r4, [r1, #12]
   8cad8:	e6eb      	b.n	8c8b2 <_malloc_r+0x10e>
   8cada:	2b14      	cmp	r3, #20
   8cadc:	d959      	bls.n	8cb92 <_malloc_r+0x3ee>
   8cade:	2b54      	cmp	r3, #84	; 0x54
   8cae0:	f200 80a1 	bhi.w	8cc26 <_malloc_r+0x482>
   8cae4:	0b2b      	lsrs	r3, r5, #12
   8cae6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8caea:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8caee:	00c1      	lsls	r1, r0, #3
   8caf0:	e69e      	b.n	8c830 <_malloc_r+0x8c>
   8caf2:	f10e 0e01 	add.w	lr, lr, #1
   8caf6:	f01e 0f03 	tst.w	lr, #3
   8cafa:	f104 0408 	add.w	r4, r4, #8
   8cafe:	f47f aeea 	bne.w	8c8d6 <_malloc_r+0x132>
   8cb02:	e051      	b.n	8cba8 <_malloc_r+0x404>
   8cb04:	463c      	mov	r4, r7
   8cb06:	443a      	add	r2, r7
   8cb08:	6853      	ldr	r3, [r2, #4]
   8cb0a:	68f9      	ldr	r1, [r7, #12]
   8cb0c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8cb10:	f043 0301 	orr.w	r3, r3, #1
   8cb14:	6053      	str	r3, [r2, #4]
   8cb16:	4630      	mov	r0, r6
   8cb18:	60e9      	str	r1, [r5, #12]
   8cb1a:	608d      	str	r5, [r1, #8]
   8cb1c:	f000 f9b6 	bl	8ce8c <__malloc_unlock>
   8cb20:	e704      	b.n	8c92c <_malloc_r+0x188>
   8cb22:	08e8      	lsrs	r0, r5, #3
   8cb24:	f105 0308 	add.w	r3, r5, #8
   8cb28:	e64c      	b.n	8c7c4 <_malloc_r+0x20>
   8cb2a:	4422      	add	r2, r4
   8cb2c:	6853      	ldr	r3, [r2, #4]
   8cb2e:	4630      	mov	r0, r6
   8cb30:	f043 0301 	orr.w	r3, r3, #1
   8cb34:	6053      	str	r3, [r2, #4]
   8cb36:	3408      	adds	r4, #8
   8cb38:	f000 f9a8 	bl	8ce8c <__malloc_unlock>
   8cb3c:	e6f6      	b.n	8c92c <_malloc_r+0x188>
   8cb3e:	f045 0701 	orr.w	r7, r5, #1
   8cb42:	f043 0101 	orr.w	r1, r3, #1
   8cb46:	4425      	add	r5, r4
   8cb48:	6067      	str	r7, [r4, #4]
   8cb4a:	4630      	mov	r0, r6
   8cb4c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8cb50:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8cb54:	6069      	str	r1, [r5, #4]
   8cb56:	50a3      	str	r3, [r4, r2]
   8cb58:	f000 f998 	bl	8ce8c <__malloc_unlock>
   8cb5c:	3408      	adds	r4, #8
   8cb5e:	e6e5      	b.n	8c92c <_malloc_r+0x188>
   8cb60:	0993      	lsrs	r3, r2, #6
   8cb62:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8cb66:	00c9      	lsls	r1, r1, #3
   8cb68:	3338      	adds	r3, #56	; 0x38
   8cb6a:	e79e      	b.n	8caaa <_malloc_r+0x306>
   8cb6c:	4544      	cmp	r4, r8
   8cb6e:	d064      	beq.n	8cc3a <_malloc_r+0x496>
   8cb70:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8cb74:	6860      	ldr	r0, [r4, #4]
   8cb76:	f020 0b03 	bic.w	fp, r0, #3
   8cb7a:	455d      	cmp	r5, fp
   8cb7c:	ebab 0305 	sub.w	r3, fp, r5
   8cb80:	d802      	bhi.n	8cb88 <_malloc_r+0x3e4>
   8cb82:	2b0f      	cmp	r3, #15
   8cb84:	f73f af70 	bgt.w	8ca68 <_malloc_r+0x2c4>
   8cb88:	4630      	mov	r0, r6
   8cb8a:	f000 f97f 	bl	8ce8c <__malloc_unlock>
   8cb8e:	2400      	movs	r4, #0
   8cb90:	e6cc      	b.n	8c92c <_malloc_r+0x188>
   8cb92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8cb96:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8cb9a:	00c1      	lsls	r1, r0, #3
   8cb9c:	e648      	b.n	8c830 <_malloc_r+0x8c>
   8cb9e:	f859 3908 	ldr.w	r3, [r9], #-8
   8cba2:	454b      	cmp	r3, r9
   8cba4:	f040 80a9 	bne.w	8ccfa <_malloc_r+0x556>
   8cba8:	f010 0f03 	tst.w	r0, #3
   8cbac:	f100 30ff 	add.w	r0, r0, #4294967295
   8cbb0:	d1f5      	bne.n	8cb9e <_malloc_r+0x3fa>
   8cbb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8cbb6:	ea23 0301 	bic.w	r3, r3, r1
   8cbba:	f8c8 3004 	str.w	r3, [r8, #4]
   8cbbe:	0049      	lsls	r1, r1, #1
   8cbc0:	4299      	cmp	r1, r3
   8cbc2:	f63f aecf 	bhi.w	8c964 <_malloc_r+0x1c0>
   8cbc6:	b919      	cbnz	r1, 8cbd0 <_malloc_r+0x42c>
   8cbc8:	e6cc      	b.n	8c964 <_malloc_r+0x1c0>
   8cbca:	0049      	lsls	r1, r1, #1
   8cbcc:	f10e 0e04 	add.w	lr, lr, #4
   8cbd0:	4219      	tst	r1, r3
   8cbd2:	d0fa      	beq.n	8cbca <_malloc_r+0x426>
   8cbd4:	4670      	mov	r0, lr
   8cbd6:	e67a      	b.n	8c8ce <_malloc_r+0x12a>
   8cbd8:	f103 0b10 	add.w	fp, r3, #16
   8cbdc:	e6df      	b.n	8c99e <_malloc_r+0x1fa>
   8cbde:	f04f 0e01 	mov.w	lr, #1
   8cbe2:	109a      	asrs	r2, r3, #2
   8cbe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8cbe8:	fa0e f202 	lsl.w	r2, lr, r2
   8cbec:	431a      	orrs	r2, r3
   8cbee:	f8c8 2004 	str.w	r2, [r8, #4]
   8cbf2:	e76d      	b.n	8cad0 <_malloc_r+0x32c>
   8cbf4:	eb02 010b 	add.w	r1, r2, fp
   8cbf8:	4249      	negs	r1, r1
   8cbfa:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8cbfe:	4649      	mov	r1, r9
   8cc00:	4630      	mov	r0, r6
   8cc02:	9200      	str	r2, [sp, #0]
   8cc04:	f000 feec 	bl	8d9e0 <_sbrk_r>
   8cc08:	1c43      	adds	r3, r0, #1
   8cc0a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8cc0e:	f47f aefc 	bne.w	8ca0a <_malloc_r+0x266>
   8cc12:	46d1      	mov	r9, sl
   8cc14:	e6fc      	b.n	8ca10 <_malloc_r+0x26c>
   8cc16:	2b54      	cmp	r3, #84	; 0x54
   8cc18:	d826      	bhi.n	8cc68 <_malloc_r+0x4c4>
   8cc1a:	0b13      	lsrs	r3, r2, #12
   8cc1c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8cc20:	00c9      	lsls	r1, r1, #3
   8cc22:	336e      	adds	r3, #110	; 0x6e
   8cc24:	e741      	b.n	8caaa <_malloc_r+0x306>
   8cc26:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8cc2a:	d826      	bhi.n	8cc7a <_malloc_r+0x4d6>
   8cc2c:	0beb      	lsrs	r3, r5, #15
   8cc2e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8cc32:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8cc36:	00c1      	lsls	r1, r0, #3
   8cc38:	e5fa      	b.n	8c830 <_malloc_r+0x8c>
   8cc3a:	4b1a      	ldr	r3, [pc, #104]	; (8cca4 <_malloc_r+0x500>)
   8cc3c:	6818      	ldr	r0, [r3, #0]
   8cc3e:	4458      	add	r0, fp
   8cc40:	6018      	str	r0, [r3, #0]
   8cc42:	e6be      	b.n	8c9c2 <_malloc_r+0x21e>
   8cc44:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8cc48:	f1bc 0f00 	cmp.w	ip, #0
   8cc4c:	f47f aeb9 	bne.w	8c9c2 <_malloc_r+0x21e>
   8cc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8cc54:	44bb      	add	fp, r7
   8cc56:	f04b 0001 	orr.w	r0, fp, #1
   8cc5a:	6060      	str	r0, [r4, #4]
   8cc5c:	e6f9      	b.n	8ca52 <_malloc_r+0x2ae>
   8cc5e:	4614      	mov	r4, r2
   8cc60:	e6f7      	b.n	8ca52 <_malloc_r+0x2ae>
   8cc62:	2301      	movs	r3, #1
   8cc64:	6053      	str	r3, [r2, #4]
   8cc66:	e78f      	b.n	8cb88 <_malloc_r+0x3e4>
   8cc68:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8cc6c:	d832      	bhi.n	8ccd4 <_malloc_r+0x530>
   8cc6e:	0bd3      	lsrs	r3, r2, #15
   8cc70:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8cc74:	00c9      	lsls	r1, r1, #3
   8cc76:	3377      	adds	r3, #119	; 0x77
   8cc78:	e717      	b.n	8caaa <_malloc_r+0x306>
   8cc7a:	f240 5254 	movw	r2, #1364	; 0x554
   8cc7e:	4293      	cmp	r3, r2
   8cc80:	d832      	bhi.n	8cce8 <_malloc_r+0x544>
   8cc82:	0cab      	lsrs	r3, r5, #18
   8cc84:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8cc88:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8cc8c:	00c1      	lsls	r1, r0, #3
   8cc8e:	e5cf      	b.n	8c830 <_malloc_r+0x8c>
   8cc90:	f1aa 0a08 	sub.w	sl, sl, #8
   8cc94:	44d3      	add	fp, sl
   8cc96:	f04f 0900 	mov.w	r9, #0
   8cc9a:	ebab 0b02 	sub.w	fp, fp, r2
   8cc9e:	e6b7      	b.n	8ca10 <_malloc_r+0x26c>
   8cca0:	20001f20 	.word	0x20001f20
   8cca4:	20001ef0 	.word	0x20001ef0
   8cca8:	20001f18 	.word	0x20001f18
   8ccac:	20001f1c 	.word	0x20001f1c
   8ccb0:	20000aa0 	.word	0x20000aa0
   8ccb4:	20000aa8 	.word	0x20000aa8
   8ccb8:	20000ea8 	.word	0x20000ea8
   8ccbc:	f104 0108 	add.w	r1, r4, #8
   8ccc0:	4630      	mov	r0, r6
   8ccc2:	9300      	str	r3, [sp, #0]
   8ccc4:	f7ff fa44 	bl	8c150 <_free_r>
   8ccc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8cccc:	9b00      	ldr	r3, [sp, #0]
   8ccce:	6860      	ldr	r0, [r4, #4]
   8ccd0:	6819      	ldr	r1, [r3, #0]
   8ccd2:	e6be      	b.n	8ca52 <_malloc_r+0x2ae>
   8ccd4:	f240 5154 	movw	r1, #1364	; 0x554
   8ccd8:	428b      	cmp	r3, r1
   8ccda:	d80a      	bhi.n	8ccf2 <_malloc_r+0x54e>
   8ccdc:	0c93      	lsrs	r3, r2, #18
   8ccde:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8cce2:	00c9      	lsls	r1, r1, #3
   8cce4:	337c      	adds	r3, #124	; 0x7c
   8cce6:	e6e0      	b.n	8caaa <_malloc_r+0x306>
   8cce8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ccec:	207f      	movs	r0, #127	; 0x7f
   8ccee:	277e      	movs	r7, #126	; 0x7e
   8ccf0:	e59e      	b.n	8c830 <_malloc_r+0x8c>
   8ccf2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ccf6:	237e      	movs	r3, #126	; 0x7e
   8ccf8:	e6d7      	b.n	8caaa <_malloc_r+0x306>
   8ccfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ccfe:	e75e      	b.n	8cbbe <_malloc_r+0x41a>

0008cd00 <__ascii_mbtowc>:
   8cd00:	b082      	sub	sp, #8
   8cd02:	b149      	cbz	r1, 8cd18 <__ascii_mbtowc+0x18>
   8cd04:	b15a      	cbz	r2, 8cd1e <__ascii_mbtowc+0x1e>
   8cd06:	b16b      	cbz	r3, 8cd24 <__ascii_mbtowc+0x24>
   8cd08:	7813      	ldrb	r3, [r2, #0]
   8cd0a:	600b      	str	r3, [r1, #0]
   8cd0c:	7812      	ldrb	r2, [r2, #0]
   8cd0e:	1e10      	subs	r0, r2, #0
   8cd10:	bf18      	it	ne
   8cd12:	2001      	movne	r0, #1
   8cd14:	b002      	add	sp, #8
   8cd16:	4770      	bx	lr
   8cd18:	a901      	add	r1, sp, #4
   8cd1a:	2a00      	cmp	r2, #0
   8cd1c:	d1f3      	bne.n	8cd06 <__ascii_mbtowc+0x6>
   8cd1e:	4610      	mov	r0, r2
   8cd20:	b002      	add	sp, #8
   8cd22:	4770      	bx	lr
   8cd24:	f06f 0001 	mvn.w	r0, #1
   8cd28:	e7f4      	b.n	8cd14 <__ascii_mbtowc+0x14>
   8cd2a:	bf00      	nop

0008cd2c <memchr>:
   8cd2c:	b470      	push	{r4, r5, r6}
   8cd2e:	0784      	lsls	r4, r0, #30
   8cd30:	b2cd      	uxtb	r5, r1
   8cd32:	d012      	beq.n	8cd5a <memchr+0x2e>
   8cd34:	4603      	mov	r3, r0
   8cd36:	1e54      	subs	r4, r2, #1
   8cd38:	b92a      	cbnz	r2, 8cd46 <memchr+0x1a>
   8cd3a:	e00b      	b.n	8cd54 <memchr+0x28>
   8cd3c:	079a      	lsls	r2, r3, #30
   8cd3e:	4618      	mov	r0, r3
   8cd40:	d00c      	beq.n	8cd5c <memchr+0x30>
   8cd42:	3c01      	subs	r4, #1
   8cd44:	d306      	bcc.n	8cd54 <memchr+0x28>
   8cd46:	4618      	mov	r0, r3
   8cd48:	f813 2b01 	ldrb.w	r2, [r3], #1
   8cd4c:	42aa      	cmp	r2, r5
   8cd4e:	d1f5      	bne.n	8cd3c <memchr+0x10>
   8cd50:	bc70      	pop	{r4, r5, r6}
   8cd52:	4770      	bx	lr
   8cd54:	2000      	movs	r0, #0
   8cd56:	bc70      	pop	{r4, r5, r6}
   8cd58:	4770      	bx	lr
   8cd5a:	4614      	mov	r4, r2
   8cd5c:	2c03      	cmp	r4, #3
   8cd5e:	d80d      	bhi.n	8cd7c <memchr+0x50>
   8cd60:	2c00      	cmp	r4, #0
   8cd62:	d0f7      	beq.n	8cd54 <memchr+0x28>
   8cd64:	4602      	mov	r2, r0
   8cd66:	1903      	adds	r3, r0, r4
   8cd68:	e001      	b.n	8cd6e <memchr+0x42>
   8cd6a:	429a      	cmp	r2, r3
   8cd6c:	d0f2      	beq.n	8cd54 <memchr+0x28>
   8cd6e:	4610      	mov	r0, r2
   8cd70:	f812 1b01 	ldrb.w	r1, [r2], #1
   8cd74:	42a9      	cmp	r1, r5
   8cd76:	d1f8      	bne.n	8cd6a <memchr+0x3e>
   8cd78:	bc70      	pop	{r4, r5, r6}
   8cd7a:	4770      	bx	lr
   8cd7c:	4606      	mov	r6, r0
   8cd7e:	020a      	lsls	r2, r1, #8
   8cd80:	b292      	uxth	r2, r2
   8cd82:	432a      	orrs	r2, r5
   8cd84:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8cd88:	6833      	ldr	r3, [r6, #0]
   8cd8a:	4630      	mov	r0, r6
   8cd8c:	4053      	eors	r3, r2
   8cd8e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8cd92:	ea21 0303 	bic.w	r3, r1, r3
   8cd96:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8cd9a:	f106 0604 	add.w	r6, r6, #4
   8cd9e:	d1e1      	bne.n	8cd64 <memchr+0x38>
   8cda0:	3c04      	subs	r4, #4
   8cda2:	2c03      	cmp	r4, #3
   8cda4:	4630      	mov	r0, r6
   8cda6:	d8ef      	bhi.n	8cd88 <memchr+0x5c>
   8cda8:	e7da      	b.n	8cd60 <memchr+0x34>
   8cdaa:	bf00      	nop

0008cdac <memmove>:
   8cdac:	4288      	cmp	r0, r1
   8cdae:	b4f0      	push	{r4, r5, r6, r7}
   8cdb0:	d90d      	bls.n	8cdce <memmove+0x22>
   8cdb2:	188b      	adds	r3, r1, r2
   8cdb4:	4283      	cmp	r3, r0
   8cdb6:	d90a      	bls.n	8cdce <memmove+0x22>
   8cdb8:	1884      	adds	r4, r0, r2
   8cdba:	b132      	cbz	r2, 8cdca <memmove+0x1e>
   8cdbc:	4622      	mov	r2, r4
   8cdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8cdc2:	4299      	cmp	r1, r3
   8cdc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8cdc8:	d1f9      	bne.n	8cdbe <memmove+0x12>
   8cdca:	bcf0      	pop	{r4, r5, r6, r7}
   8cdcc:	4770      	bx	lr
   8cdce:	2a0f      	cmp	r2, #15
   8cdd0:	d80e      	bhi.n	8cdf0 <memmove+0x44>
   8cdd2:	4603      	mov	r3, r0
   8cdd4:	1e54      	subs	r4, r2, #1
   8cdd6:	2a00      	cmp	r2, #0
   8cdd8:	d0f7      	beq.n	8cdca <memmove+0x1e>
   8cdda:	3401      	adds	r4, #1
   8cddc:	440c      	add	r4, r1
   8cdde:	3b01      	subs	r3, #1
   8cde0:	f811 2b01 	ldrb.w	r2, [r1], #1
   8cde4:	42a1      	cmp	r1, r4
   8cde6:	f803 2f01 	strb.w	r2, [r3, #1]!
   8cdea:	d1f9      	bne.n	8cde0 <memmove+0x34>
   8cdec:	bcf0      	pop	{r4, r5, r6, r7}
   8cdee:	4770      	bx	lr
   8cdf0:	ea40 0301 	orr.w	r3, r0, r1
   8cdf4:	079b      	lsls	r3, r3, #30
   8cdf6:	d13e      	bne.n	8ce76 <memmove+0xca>
   8cdf8:	f1a2 0310 	sub.w	r3, r2, #16
   8cdfc:	f023 040f 	bic.w	r4, r3, #15
   8ce00:	f101 0720 	add.w	r7, r1, #32
   8ce04:	4427      	add	r7, r4
   8ce06:	091b      	lsrs	r3, r3, #4
   8ce08:	f101 0410 	add.w	r4, r1, #16
   8ce0c:	f100 0510 	add.w	r5, r0, #16
   8ce10:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8ce14:	3410      	adds	r4, #16
   8ce16:	f845 6c10 	str.w	r6, [r5, #-16]
   8ce1a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8ce1e:	3510      	adds	r5, #16
   8ce20:	f845 6c1c 	str.w	r6, [r5, #-28]
   8ce24:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8ce28:	f845 6c18 	str.w	r6, [r5, #-24]
   8ce2c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8ce30:	42bc      	cmp	r4, r7
   8ce32:	f845 6c14 	str.w	r6, [r5, #-20]
   8ce36:	d1eb      	bne.n	8ce10 <memmove+0x64>
   8ce38:	3301      	adds	r3, #1
   8ce3a:	f012 0f0c 	tst.w	r2, #12
   8ce3e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8ce42:	f002 040f 	and.w	r4, r2, #15
   8ce46:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8ce4a:	d017      	beq.n	8ce7c <memmove+0xd0>
   8ce4c:	460e      	mov	r6, r1
   8ce4e:	3c04      	subs	r4, #4
   8ce50:	f024 0c03 	bic.w	ip, r4, #3
   8ce54:	08a5      	lsrs	r5, r4, #2
   8ce56:	449c      	add	ip, r3
   8ce58:	1f1c      	subs	r4, r3, #4
   8ce5a:	f856 7b04 	ldr.w	r7, [r6], #4
   8ce5e:	f844 7f04 	str.w	r7, [r4, #4]!
   8ce62:	4564      	cmp	r4, ip
   8ce64:	d1f9      	bne.n	8ce5a <memmove+0xae>
   8ce66:	1c6c      	adds	r4, r5, #1
   8ce68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8ce6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8ce70:	f002 0203 	and.w	r2, r2, #3
   8ce74:	e7ae      	b.n	8cdd4 <memmove+0x28>
   8ce76:	4603      	mov	r3, r0
   8ce78:	1e54      	subs	r4, r2, #1
   8ce7a:	e7ae      	b.n	8cdda <memmove+0x2e>
   8ce7c:	4622      	mov	r2, r4
   8ce7e:	e7a9      	b.n	8cdd4 <memmove+0x28>

0008ce80 <__malloc_lock>:
   8ce80:	4801      	ldr	r0, [pc, #4]	; (8ce88 <__malloc_lock+0x8>)
   8ce82:	f7ff bc13 	b.w	8c6ac <__retarget_lock_acquire_recursive>
   8ce86:	bf00      	nop
   8ce88:	2000244c 	.word	0x2000244c

0008ce8c <__malloc_unlock>:
   8ce8c:	4801      	ldr	r0, [pc, #4]	; (8ce94 <__malloc_unlock+0x8>)
   8ce8e:	f7ff bc0f 	b.w	8c6b0 <__retarget_lock_release_recursive>
   8ce92:	bf00      	nop
   8ce94:	2000244c 	.word	0x2000244c

0008ce98 <_Balloc>:
   8ce98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8ce9a:	b570      	push	{r4, r5, r6, lr}
   8ce9c:	4605      	mov	r5, r0
   8ce9e:	460c      	mov	r4, r1
   8cea0:	b14b      	cbz	r3, 8ceb6 <_Balloc+0x1e>
   8cea2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8cea6:	b180      	cbz	r0, 8ceca <_Balloc+0x32>
   8cea8:	6802      	ldr	r2, [r0, #0]
   8ceaa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8ceae:	2300      	movs	r3, #0
   8ceb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8ceb4:	bd70      	pop	{r4, r5, r6, pc}
   8ceb6:	2221      	movs	r2, #33	; 0x21
   8ceb8:	2104      	movs	r1, #4
   8ceba:	f000 ffc5 	bl	8de48 <_calloc_r>
   8cebe:	4603      	mov	r3, r0
   8cec0:	64e8      	str	r0, [r5, #76]	; 0x4c
   8cec2:	2800      	cmp	r0, #0
   8cec4:	d1ed      	bne.n	8cea2 <_Balloc+0xa>
   8cec6:	2000      	movs	r0, #0
   8cec8:	bd70      	pop	{r4, r5, r6, pc}
   8ceca:	2101      	movs	r1, #1
   8cecc:	fa01 f604 	lsl.w	r6, r1, r4
   8ced0:	1d72      	adds	r2, r6, #5
   8ced2:	4628      	mov	r0, r5
   8ced4:	0092      	lsls	r2, r2, #2
   8ced6:	f000 ffb7 	bl	8de48 <_calloc_r>
   8ceda:	2800      	cmp	r0, #0
   8cedc:	d0f3      	beq.n	8cec6 <_Balloc+0x2e>
   8cede:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8cee2:	e7e4      	b.n	8ceae <_Balloc+0x16>

0008cee4 <_Bfree>:
   8cee4:	b131      	cbz	r1, 8cef4 <_Bfree+0x10>
   8cee6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8cee8:	684a      	ldr	r2, [r1, #4]
   8ceea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8ceee:	6008      	str	r0, [r1, #0]
   8cef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8cef4:	4770      	bx	lr
   8cef6:	bf00      	nop

0008cef8 <__multadd>:
   8cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cefc:	4680      	mov	r8, r0
   8cefe:	461c      	mov	r4, r3
   8cf00:	2000      	movs	r0, #0
   8cf02:	460f      	mov	r7, r1
   8cf04:	690e      	ldr	r6, [r1, #16]
   8cf06:	3114      	adds	r1, #20
   8cf08:	680d      	ldr	r5, [r1, #0]
   8cf0a:	3001      	adds	r0, #1
   8cf0c:	b2ab      	uxth	r3, r5
   8cf0e:	fb02 4303 	mla	r3, r2, r3, r4
   8cf12:	0c2c      	lsrs	r4, r5, #16
   8cf14:	0c1d      	lsrs	r5, r3, #16
   8cf16:	fb02 5404 	mla	r4, r2, r4, r5
   8cf1a:	b29b      	uxth	r3, r3
   8cf1c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8cf20:	4286      	cmp	r6, r0
   8cf22:	f841 3b04 	str.w	r3, [r1], #4
   8cf26:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8cf2a:	dced      	bgt.n	8cf08 <__multadd+0x10>
   8cf2c:	b13c      	cbz	r4, 8cf3e <__multadd+0x46>
   8cf2e:	68bb      	ldr	r3, [r7, #8]
   8cf30:	42b3      	cmp	r3, r6
   8cf32:	dd07      	ble.n	8cf44 <__multadd+0x4c>
   8cf34:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8cf38:	3601      	adds	r6, #1
   8cf3a:	615c      	str	r4, [r3, #20]
   8cf3c:	613e      	str	r6, [r7, #16]
   8cf3e:	4638      	mov	r0, r7
   8cf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cf44:	6879      	ldr	r1, [r7, #4]
   8cf46:	4640      	mov	r0, r8
   8cf48:	3101      	adds	r1, #1
   8cf4a:	f7ff ffa5 	bl	8ce98 <_Balloc>
   8cf4e:	4605      	mov	r5, r0
   8cf50:	b1b0      	cbz	r0, 8cf80 <__multadd+0x88>
   8cf52:	693a      	ldr	r2, [r7, #16]
   8cf54:	f107 010c 	add.w	r1, r7, #12
   8cf58:	3202      	adds	r2, #2
   8cf5a:	0092      	lsls	r2, r2, #2
   8cf5c:	300c      	adds	r0, #12
   8cf5e:	f7fb f8cb 	bl	880f8 <memcpy>
   8cf62:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8cf66:	687a      	ldr	r2, [r7, #4]
   8cf68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8cf6c:	6039      	str	r1, [r7, #0]
   8cf6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8cf72:	462f      	mov	r7, r5
   8cf74:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8cf78:	3601      	adds	r6, #1
   8cf7a:	615c      	str	r4, [r3, #20]
   8cf7c:	613e      	str	r6, [r7, #16]
   8cf7e:	e7de      	b.n	8cf3e <__multadd+0x46>
   8cf80:	4602      	mov	r2, r0
   8cf82:	21b5      	movs	r1, #181	; 0xb5
   8cf84:	4b01      	ldr	r3, [pc, #4]	; (8cf8c <__multadd+0x94>)
   8cf86:	4802      	ldr	r0, [pc, #8]	; (8cf90 <__multadd+0x98>)
   8cf88:	f000 ff40 	bl	8de0c <__assert_func>
   8cf8c:	0008eba0 	.word	0x0008eba0
   8cf90:	0008ec40 	.word	0x0008ec40

0008cf94 <__hi0bits>:
   8cf94:	0c02      	lsrs	r2, r0, #16
   8cf96:	0412      	lsls	r2, r2, #16
   8cf98:	4603      	mov	r3, r0
   8cf9a:	b9ca      	cbnz	r2, 8cfd0 <__hi0bits+0x3c>
   8cf9c:	0403      	lsls	r3, r0, #16
   8cf9e:	2010      	movs	r0, #16
   8cfa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8cfa4:	bf04      	itt	eq
   8cfa6:	021b      	lsleq	r3, r3, #8
   8cfa8:	3008      	addeq	r0, #8
   8cfaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8cfae:	bf04      	itt	eq
   8cfb0:	011b      	lsleq	r3, r3, #4
   8cfb2:	3004      	addeq	r0, #4
   8cfb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8cfb8:	bf04      	itt	eq
   8cfba:	009b      	lsleq	r3, r3, #2
   8cfbc:	3002      	addeq	r0, #2
   8cfbe:	2b00      	cmp	r3, #0
   8cfc0:	db05      	blt.n	8cfce <__hi0bits+0x3a>
   8cfc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8cfc6:	f100 0001 	add.w	r0, r0, #1
   8cfca:	bf08      	it	eq
   8cfcc:	2020      	moveq	r0, #32
   8cfce:	4770      	bx	lr
   8cfd0:	2000      	movs	r0, #0
   8cfd2:	e7e5      	b.n	8cfa0 <__hi0bits+0xc>

0008cfd4 <__lo0bits>:
   8cfd4:	6803      	ldr	r3, [r0, #0]
   8cfd6:	4601      	mov	r1, r0
   8cfd8:	f013 0207 	ands.w	r2, r3, #7
   8cfdc:	d007      	beq.n	8cfee <__lo0bits+0x1a>
   8cfde:	07da      	lsls	r2, r3, #31
   8cfe0:	d420      	bmi.n	8d024 <__lo0bits+0x50>
   8cfe2:	0798      	lsls	r0, r3, #30
   8cfe4:	d522      	bpl.n	8d02c <__lo0bits+0x58>
   8cfe6:	085b      	lsrs	r3, r3, #1
   8cfe8:	2001      	movs	r0, #1
   8cfea:	600b      	str	r3, [r1, #0]
   8cfec:	4770      	bx	lr
   8cfee:	b298      	uxth	r0, r3
   8cff0:	b1a8      	cbz	r0, 8d01e <__lo0bits+0x4a>
   8cff2:	4610      	mov	r0, r2
   8cff4:	f013 0fff 	tst.w	r3, #255	; 0xff
   8cff8:	bf04      	itt	eq
   8cffa:	0a1b      	lsreq	r3, r3, #8
   8cffc:	3008      	addeq	r0, #8
   8cffe:	071a      	lsls	r2, r3, #28
   8d000:	bf04      	itt	eq
   8d002:	091b      	lsreq	r3, r3, #4
   8d004:	3004      	addeq	r0, #4
   8d006:	079a      	lsls	r2, r3, #30
   8d008:	bf04      	itt	eq
   8d00a:	089b      	lsreq	r3, r3, #2
   8d00c:	3002      	addeq	r0, #2
   8d00e:	07da      	lsls	r2, r3, #31
   8d010:	d403      	bmi.n	8d01a <__lo0bits+0x46>
   8d012:	085b      	lsrs	r3, r3, #1
   8d014:	f100 0001 	add.w	r0, r0, #1
   8d018:	d006      	beq.n	8d028 <__lo0bits+0x54>
   8d01a:	600b      	str	r3, [r1, #0]
   8d01c:	4770      	bx	lr
   8d01e:	2010      	movs	r0, #16
   8d020:	0c1b      	lsrs	r3, r3, #16
   8d022:	e7e7      	b.n	8cff4 <__lo0bits+0x20>
   8d024:	2000      	movs	r0, #0
   8d026:	4770      	bx	lr
   8d028:	2020      	movs	r0, #32
   8d02a:	4770      	bx	lr
   8d02c:	089b      	lsrs	r3, r3, #2
   8d02e:	2002      	movs	r0, #2
   8d030:	600b      	str	r3, [r1, #0]
   8d032:	4770      	bx	lr

0008d034 <__i2b>:
   8d034:	b510      	push	{r4, lr}
   8d036:	460c      	mov	r4, r1
   8d038:	2101      	movs	r1, #1
   8d03a:	f7ff ff2d 	bl	8ce98 <_Balloc>
   8d03e:	4602      	mov	r2, r0
   8d040:	b118      	cbz	r0, 8d04a <__i2b+0x16>
   8d042:	2301      	movs	r3, #1
   8d044:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8d048:	bd10      	pop	{r4, pc}
   8d04a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8d04e:	4b02      	ldr	r3, [pc, #8]	; (8d058 <__i2b+0x24>)
   8d050:	4802      	ldr	r0, [pc, #8]	; (8d05c <__i2b+0x28>)
   8d052:	f000 fedb 	bl	8de0c <__assert_func>
   8d056:	bf00      	nop
   8d058:	0008eba0 	.word	0x0008eba0
   8d05c:	0008ec40 	.word	0x0008ec40

0008d060 <__multiply>:
   8d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d064:	690d      	ldr	r5, [r1, #16]
   8d066:	6917      	ldr	r7, [r2, #16]
   8d068:	460e      	mov	r6, r1
   8d06a:	42bd      	cmp	r5, r7
   8d06c:	4614      	mov	r4, r2
   8d06e:	b085      	sub	sp, #20
   8d070:	db05      	blt.n	8d07e <__multiply+0x1e>
   8d072:	463a      	mov	r2, r7
   8d074:	4623      	mov	r3, r4
   8d076:	462f      	mov	r7, r5
   8d078:	460c      	mov	r4, r1
   8d07a:	4615      	mov	r5, r2
   8d07c:	461e      	mov	r6, r3
   8d07e:	68a3      	ldr	r3, [r4, #8]
   8d080:	6861      	ldr	r1, [r4, #4]
   8d082:	eb07 0805 	add.w	r8, r7, r5
   8d086:	4543      	cmp	r3, r8
   8d088:	bfb8      	it	lt
   8d08a:	3101      	addlt	r1, #1
   8d08c:	f7ff ff04 	bl	8ce98 <_Balloc>
   8d090:	9001      	str	r0, [sp, #4]
   8d092:	2800      	cmp	r0, #0
   8d094:	f000 8088 	beq.w	8d1a8 <__multiply+0x148>
   8d098:	9b01      	ldr	r3, [sp, #4]
   8d09a:	f103 0914 	add.w	r9, r3, #20
   8d09e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8d0a2:	45d1      	cmp	r9, sl
   8d0a4:	d205      	bcs.n	8d0b2 <__multiply+0x52>
   8d0a6:	464b      	mov	r3, r9
   8d0a8:	2200      	movs	r2, #0
   8d0aa:	f843 2b04 	str.w	r2, [r3], #4
   8d0ae:	459a      	cmp	sl, r3
   8d0b0:	d8fb      	bhi.n	8d0aa <__multiply+0x4a>
   8d0b2:	f106 0e14 	add.w	lr, r6, #20
   8d0b6:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8d0ba:	f104 0314 	add.w	r3, r4, #20
   8d0be:	45de      	cmp	lr, fp
   8d0c0:	461a      	mov	r2, r3
   8d0c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8d0c6:	d23e      	bcs.n	8d146 <__multiply+0xe6>
   8d0c8:	1b3b      	subs	r3, r7, r4
   8d0ca:	3b15      	subs	r3, #21
   8d0cc:	f023 0303 	bic.w	r3, r3, #3
   8d0d0:	3304      	adds	r3, #4
   8d0d2:	3415      	adds	r4, #21
   8d0d4:	42a7      	cmp	r7, r4
   8d0d6:	bf38      	it	cc
   8d0d8:	2304      	movcc	r3, #4
   8d0da:	e9cd a802 	strd	sl, r8, [sp, #8]
   8d0de:	4698      	mov	r8, r3
   8d0e0:	4692      	mov	sl, r2
   8d0e2:	e003      	b.n	8d0ec <__multiply+0x8c>
   8d0e4:	45f3      	cmp	fp, lr
   8d0e6:	f109 0904 	add.w	r9, r9, #4
   8d0ea:	d92a      	bls.n	8d142 <__multiply+0xe2>
   8d0ec:	f85e 0b04 	ldr.w	r0, [lr], #4
   8d0f0:	b286      	uxth	r6, r0
   8d0f2:	2e00      	cmp	r6, #0
   8d0f4:	d138      	bne.n	8d168 <__multiply+0x108>
   8d0f6:	0c00      	lsrs	r0, r0, #16
   8d0f8:	d0f4      	beq.n	8d0e4 <__multiply+0x84>
   8d0fa:	f8d9 3000 	ldr.w	r3, [r9]
   8d0fe:	4654      	mov	r4, sl
   8d100:	461e      	mov	r6, r3
   8d102:	464d      	mov	r5, r9
   8d104:	f04f 0c00 	mov.w	ip, #0
   8d108:	8822      	ldrh	r2, [r4, #0]
   8d10a:	0c36      	lsrs	r6, r6, #16
   8d10c:	fb00 6602 	mla	r6, r0, r2, r6
   8d110:	b29b      	uxth	r3, r3
   8d112:	44b4      	add	ip, r6
   8d114:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8d118:	f845 3b04 	str.w	r3, [r5], #4
   8d11c:	f854 3b04 	ldr.w	r3, [r4], #4
   8d120:	682e      	ldr	r6, [r5, #0]
   8d122:	0c1b      	lsrs	r3, r3, #16
   8d124:	b2b2      	uxth	r2, r6
   8d126:	fb00 2303 	mla	r3, r0, r3, r2
   8d12a:	42a7      	cmp	r7, r4
   8d12c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8d130:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8d134:	d8e8      	bhi.n	8d108 <__multiply+0xa8>
   8d136:	45f3      	cmp	fp, lr
   8d138:	f849 3008 	str.w	r3, [r9, r8]
   8d13c:	f109 0904 	add.w	r9, r9, #4
   8d140:	d8d4      	bhi.n	8d0ec <__multiply+0x8c>
   8d142:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8d146:	f1b8 0f00 	cmp.w	r8, #0
   8d14a:	dc03      	bgt.n	8d154 <__multiply+0xf4>
   8d14c:	e006      	b.n	8d15c <__multiply+0xfc>
   8d14e:	f1b8 0801 	subs.w	r8, r8, #1
   8d152:	d003      	beq.n	8d15c <__multiply+0xfc>
   8d154:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8d158:	2b00      	cmp	r3, #0
   8d15a:	d0f8      	beq.n	8d14e <__multiply+0xee>
   8d15c:	9801      	ldr	r0, [sp, #4]
   8d15e:	f8c0 8010 	str.w	r8, [r0, #16]
   8d162:	b005      	add	sp, #20
   8d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d168:	4655      	mov	r5, sl
   8d16a:	464c      	mov	r4, r9
   8d16c:	2300      	movs	r3, #0
   8d16e:	f855 1b04 	ldr.w	r1, [r5], #4
   8d172:	6820      	ldr	r0, [r4, #0]
   8d174:	b28a      	uxth	r2, r1
   8d176:	fa1f fc80 	uxth.w	ip, r0
   8d17a:	fb06 c202 	mla	r2, r6, r2, ip
   8d17e:	0c09      	lsrs	r1, r1, #16
   8d180:	0c00      	lsrs	r0, r0, #16
   8d182:	fb06 0101 	mla	r1, r6, r1, r0
   8d186:	4413      	add	r3, r2
   8d188:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8d18c:	b29b      	uxth	r3, r3
   8d18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8d192:	42af      	cmp	r7, r5
   8d194:	f844 3b04 	str.w	r3, [r4], #4
   8d198:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8d19c:	d8e7      	bhi.n	8d16e <__multiply+0x10e>
   8d19e:	f849 3008 	str.w	r3, [r9, r8]
   8d1a2:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8d1a6:	e7a6      	b.n	8d0f6 <__multiply+0x96>
   8d1a8:	4602      	mov	r2, r0
   8d1aa:	f240 115d 	movw	r1, #349	; 0x15d
   8d1ae:	4b02      	ldr	r3, [pc, #8]	; (8d1b8 <__multiply+0x158>)
   8d1b0:	4802      	ldr	r0, [pc, #8]	; (8d1bc <__multiply+0x15c>)
   8d1b2:	f000 fe2b 	bl	8de0c <__assert_func>
   8d1b6:	bf00      	nop
   8d1b8:	0008eba0 	.word	0x0008eba0
   8d1bc:	0008ec40 	.word	0x0008ec40

0008d1c0 <__pow5mult>:
   8d1c0:	f012 0303 	ands.w	r3, r2, #3
   8d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8d1c8:	4614      	mov	r4, r2
   8d1ca:	4607      	mov	r7, r0
   8d1cc:	d12e      	bne.n	8d22c <__pow5mult+0x6c>
   8d1ce:	460e      	mov	r6, r1
   8d1d0:	10a4      	asrs	r4, r4, #2
   8d1d2:	d01c      	beq.n	8d20e <__pow5mult+0x4e>
   8d1d4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8d1d6:	b395      	cbz	r5, 8d23e <__pow5mult+0x7e>
   8d1d8:	07e3      	lsls	r3, r4, #31
   8d1da:	f04f 0800 	mov.w	r8, #0
   8d1de:	d406      	bmi.n	8d1ee <__pow5mult+0x2e>
   8d1e0:	1064      	asrs	r4, r4, #1
   8d1e2:	d014      	beq.n	8d20e <__pow5mult+0x4e>
   8d1e4:	6828      	ldr	r0, [r5, #0]
   8d1e6:	b1a8      	cbz	r0, 8d214 <__pow5mult+0x54>
   8d1e8:	4605      	mov	r5, r0
   8d1ea:	07e3      	lsls	r3, r4, #31
   8d1ec:	d5f8      	bpl.n	8d1e0 <__pow5mult+0x20>
   8d1ee:	462a      	mov	r2, r5
   8d1f0:	4631      	mov	r1, r6
   8d1f2:	4638      	mov	r0, r7
   8d1f4:	f7ff ff34 	bl	8d060 <__multiply>
   8d1f8:	b1b6      	cbz	r6, 8d228 <__pow5mult+0x68>
   8d1fa:	6871      	ldr	r1, [r6, #4]
   8d1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8d1fe:	1064      	asrs	r4, r4, #1
   8d200:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8d204:	6032      	str	r2, [r6, #0]
   8d206:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8d20a:	4606      	mov	r6, r0
   8d20c:	d1ea      	bne.n	8d1e4 <__pow5mult+0x24>
   8d20e:	4630      	mov	r0, r6
   8d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8d214:	462a      	mov	r2, r5
   8d216:	4629      	mov	r1, r5
   8d218:	4638      	mov	r0, r7
   8d21a:	f7ff ff21 	bl	8d060 <__multiply>
   8d21e:	6028      	str	r0, [r5, #0]
   8d220:	4605      	mov	r5, r0
   8d222:	f8c0 8000 	str.w	r8, [r0]
   8d226:	e7e0      	b.n	8d1ea <__pow5mult+0x2a>
   8d228:	4606      	mov	r6, r0
   8d22a:	e7d9      	b.n	8d1e0 <__pow5mult+0x20>
   8d22c:	4a09      	ldr	r2, [pc, #36]	; (8d254 <__pow5mult+0x94>)
   8d22e:	3b01      	subs	r3, #1
   8d230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8d234:	2300      	movs	r3, #0
   8d236:	f7ff fe5f 	bl	8cef8 <__multadd>
   8d23a:	4606      	mov	r6, r0
   8d23c:	e7c8      	b.n	8d1d0 <__pow5mult+0x10>
   8d23e:	f240 2171 	movw	r1, #625	; 0x271
   8d242:	4638      	mov	r0, r7
   8d244:	f7ff fef6 	bl	8d034 <__i2b>
   8d248:	2300      	movs	r3, #0
   8d24a:	64b8      	str	r0, [r7, #72]	; 0x48
   8d24c:	4605      	mov	r5, r0
   8d24e:	6003      	str	r3, [r0, #0]
   8d250:	e7c2      	b.n	8d1d8 <__pow5mult+0x18>
   8d252:	bf00      	nop
   8d254:	0008edb0 	.word	0x0008edb0

0008d258 <__lshift>:
   8d258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d25c:	690f      	ldr	r7, [r1, #16]
   8d25e:	688b      	ldr	r3, [r1, #8]
   8d260:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8d264:	1c7e      	adds	r6, r7, #1
   8d266:	429e      	cmp	r6, r3
   8d268:	460d      	mov	r5, r1
   8d26a:	4691      	mov	r9, r2
   8d26c:	4680      	mov	r8, r0
   8d26e:	6849      	ldr	r1, [r1, #4]
   8d270:	ea4f 1462 	mov.w	r4, r2, asr #5
   8d274:	dd04      	ble.n	8d280 <__lshift+0x28>
   8d276:	005b      	lsls	r3, r3, #1
   8d278:	429e      	cmp	r6, r3
   8d27a:	f101 0101 	add.w	r1, r1, #1
   8d27e:	dcfa      	bgt.n	8d276 <__lshift+0x1e>
   8d280:	4640      	mov	r0, r8
   8d282:	f7ff fe09 	bl	8ce98 <_Balloc>
   8d286:	2800      	cmp	r0, #0
   8d288:	d04f      	beq.n	8d32a <__lshift+0xd2>
   8d28a:	2c00      	cmp	r4, #0
   8d28c:	f100 0114 	add.w	r1, r0, #20
   8d290:	dd0d      	ble.n	8d2ae <__lshift+0x56>
   8d292:	460b      	mov	r3, r1
   8d294:	2200      	movs	r2, #0
   8d296:	3405      	adds	r4, #5
   8d298:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8d29c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8d2a0:	f843 2b04 	str.w	r2, [r3], #4
   8d2a4:	42a3      	cmp	r3, r4
   8d2a6:	d1fb      	bne.n	8d2a0 <__lshift+0x48>
   8d2a8:	f1ac 0314 	sub.w	r3, ip, #20
   8d2ac:	4419      	add	r1, r3
   8d2ae:	692c      	ldr	r4, [r5, #16]
   8d2b0:	f105 0314 	add.w	r3, r5, #20
   8d2b4:	f019 091f 	ands.w	r9, r9, #31
   8d2b8:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8d2bc:	d02d      	beq.n	8d31a <__lshift+0xc2>
   8d2be:	468e      	mov	lr, r1
   8d2c0:	f04f 0a00 	mov.w	sl, #0
   8d2c4:	f1c9 0220 	rsb	r2, r9, #32
   8d2c8:	681c      	ldr	r4, [r3, #0]
   8d2ca:	fa04 f409 	lsl.w	r4, r4, r9
   8d2ce:	ea44 040a 	orr.w	r4, r4, sl
   8d2d2:	f84e 4b04 	str.w	r4, [lr], #4
   8d2d6:	f853 4b04 	ldr.w	r4, [r3], #4
   8d2da:	459c      	cmp	ip, r3
   8d2dc:	fa24 fa02 	lsr.w	sl, r4, r2
   8d2e0:	d8f2      	bhi.n	8d2c8 <__lshift+0x70>
   8d2e2:	ebac 0305 	sub.w	r3, ip, r5
   8d2e6:	3b15      	subs	r3, #21
   8d2e8:	f023 0303 	bic.w	r3, r3, #3
   8d2ec:	3304      	adds	r3, #4
   8d2ee:	f105 0215 	add.w	r2, r5, #21
   8d2f2:	4594      	cmp	ip, r2
   8d2f4:	bf38      	it	cc
   8d2f6:	2304      	movcc	r3, #4
   8d2f8:	f1ba 0f00 	cmp.w	sl, #0
   8d2fc:	bf18      	it	ne
   8d2fe:	4637      	movne	r7, r6
   8d300:	f841 a003 	str.w	sl, [r1, r3]
   8d304:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8d308:	686a      	ldr	r2, [r5, #4]
   8d30a:	6107      	str	r7, [r0, #16]
   8d30c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8d310:	6029      	str	r1, [r5, #0]
   8d312:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d31a:	3904      	subs	r1, #4
   8d31c:	f853 2b04 	ldr.w	r2, [r3], #4
   8d320:	459c      	cmp	ip, r3
   8d322:	f841 2f04 	str.w	r2, [r1, #4]!
   8d326:	d8f9      	bhi.n	8d31c <__lshift+0xc4>
   8d328:	e7ec      	b.n	8d304 <__lshift+0xac>
   8d32a:	4602      	mov	r2, r0
   8d32c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8d330:	4b01      	ldr	r3, [pc, #4]	; (8d338 <__lshift+0xe0>)
   8d332:	4802      	ldr	r0, [pc, #8]	; (8d33c <__lshift+0xe4>)
   8d334:	f000 fd6a 	bl	8de0c <__assert_func>
   8d338:	0008eba0 	.word	0x0008eba0
   8d33c:	0008ec40 	.word	0x0008ec40

0008d340 <__mcmp>:
   8d340:	b430      	push	{r4, r5}
   8d342:	690b      	ldr	r3, [r1, #16]
   8d344:	4605      	mov	r5, r0
   8d346:	6900      	ldr	r0, [r0, #16]
   8d348:	1ac0      	subs	r0, r0, r3
   8d34a:	d111      	bne.n	8d370 <__mcmp+0x30>
   8d34c:	3514      	adds	r5, #20
   8d34e:	3114      	adds	r1, #20
   8d350:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8d354:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8d358:	e001      	b.n	8d35e <__mcmp+0x1e>
   8d35a:	429d      	cmp	r5, r3
   8d35c:	d208      	bcs.n	8d370 <__mcmp+0x30>
   8d35e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8d362:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8d366:	428c      	cmp	r4, r1
   8d368:	d0f7      	beq.n	8d35a <__mcmp+0x1a>
   8d36a:	d203      	bcs.n	8d374 <__mcmp+0x34>
   8d36c:	f04f 30ff 	mov.w	r0, #4294967295
   8d370:	bc30      	pop	{r4, r5}
   8d372:	4770      	bx	lr
   8d374:	2001      	movs	r0, #1
   8d376:	bc30      	pop	{r4, r5}
   8d378:	4770      	bx	lr
   8d37a:	bf00      	nop

0008d37c <__mdiff>:
   8d37c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d380:	690b      	ldr	r3, [r1, #16]
   8d382:	460c      	mov	r4, r1
   8d384:	6911      	ldr	r1, [r2, #16]
   8d386:	4690      	mov	r8, r2
   8d388:	eba3 0b01 	sub.w	fp, r3, r1
   8d38c:	f1bb 0f00 	cmp.w	fp, #0
   8d390:	d17c      	bne.n	8d48c <__mdiff+0x110>
   8d392:	f104 0614 	add.w	r6, r4, #20
   8d396:	3214      	adds	r2, #20
   8d398:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8d39c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8d3a0:	e001      	b.n	8d3a6 <__mdiff+0x2a>
   8d3a2:	429e      	cmp	r6, r3
   8d3a4:	d276      	bcs.n	8d494 <__mdiff+0x118>
   8d3a6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8d3aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8d3ae:	428d      	cmp	r5, r1
   8d3b0:	d0f7      	beq.n	8d3a2 <__mdiff+0x26>
   8d3b2:	d365      	bcc.n	8d480 <__mdiff+0x104>
   8d3b4:	6861      	ldr	r1, [r4, #4]
   8d3b6:	f7ff fd6f 	bl	8ce98 <_Balloc>
   8d3ba:	2800      	cmp	r0, #0
   8d3bc:	d074      	beq.n	8d4a8 <__mdiff+0x12c>
   8d3be:	f100 0614 	add.w	r6, r0, #20
   8d3c2:	46b4      	mov	ip, r6
   8d3c4:	2300      	movs	r3, #0
   8d3c6:	6927      	ldr	r7, [r4, #16]
   8d3c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8d3cc:	f104 0a14 	add.w	sl, r4, #20
   8d3d0:	f108 0514 	add.w	r5, r8, #20
   8d3d4:	f8c0 b00c 	str.w	fp, [r0, #12]
   8d3d8:	3410      	adds	r4, #16
   8d3da:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8d3de:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8d3e2:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8d3e6:	f855 bb04 	ldr.w	fp, [r5], #4
   8d3ea:	b291      	uxth	r1, r2
   8d3ec:	440b      	add	r3, r1
   8d3ee:	fa1f f18b 	uxth.w	r1, fp
   8d3f2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8d3f6:	1a59      	subs	r1, r3, r1
   8d3f8:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8d3fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8d400:	b289      	uxth	r1, r1
   8d402:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8d406:	45a9      	cmp	r9, r5
   8d408:	f84c 1b04 	str.w	r1, [ip], #4
   8d40c:	ea4f 4323 	mov.w	r3, r3, asr #16
   8d410:	d8e7      	bhi.n	8d3e2 <__mdiff+0x66>
   8d412:	eba9 0208 	sub.w	r2, r9, r8
   8d416:	3a15      	subs	r2, #21
   8d418:	f108 0815 	add.w	r8, r8, #21
   8d41c:	45c1      	cmp	r9, r8
   8d41e:	f022 0403 	bic.w	r4, r2, #3
   8d422:	f104 0404 	add.w	r4, r4, #4
   8d426:	bf38      	it	cc
   8d428:	2404      	movcc	r4, #4
   8d42a:	f022 0203 	bic.w	r2, r2, #3
   8d42e:	bf38      	it	cc
   8d430:	2200      	movcc	r2, #0
   8d432:	44a2      	add	sl, r4
   8d434:	45d6      	cmp	lr, sl
   8d436:	4434      	add	r4, r6
   8d438:	4416      	add	r6, r2
   8d43a:	d918      	bls.n	8d46e <__mdiff+0xf2>
   8d43c:	4625      	mov	r5, r4
   8d43e:	4652      	mov	r2, sl
   8d440:	f852 6b04 	ldr.w	r6, [r2], #4
   8d444:	b2b1      	uxth	r1, r6
   8d446:	4419      	add	r1, r3
   8d448:	140b      	asrs	r3, r1, #16
   8d44a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8d44e:	b289      	uxth	r1, r1
   8d450:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8d454:	4596      	cmp	lr, r2
   8d456:	f845 1b04 	str.w	r1, [r5], #4
   8d45a:	ea4f 4323 	mov.w	r3, r3, asr #16
   8d45e:	d8ef      	bhi.n	8d440 <__mdiff+0xc4>
   8d460:	f10e 36ff 	add.w	r6, lr, #4294967295
   8d464:	eba6 060a 	sub.w	r6, r6, sl
   8d468:	f026 0603 	bic.w	r6, r6, #3
   8d46c:	4426      	add	r6, r4
   8d46e:	b921      	cbnz	r1, 8d47a <__mdiff+0xfe>
   8d470:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8d474:	3f01      	subs	r7, #1
   8d476:	2b00      	cmp	r3, #0
   8d478:	d0fa      	beq.n	8d470 <__mdiff+0xf4>
   8d47a:	6107      	str	r7, [r0, #16]
   8d47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d480:	4623      	mov	r3, r4
   8d482:	f04f 0b01 	mov.w	fp, #1
   8d486:	4644      	mov	r4, r8
   8d488:	4698      	mov	r8, r3
   8d48a:	e793      	b.n	8d3b4 <__mdiff+0x38>
   8d48c:	dbf8      	blt.n	8d480 <__mdiff+0x104>
   8d48e:	f04f 0b00 	mov.w	fp, #0
   8d492:	e78f      	b.n	8d3b4 <__mdiff+0x38>
   8d494:	2100      	movs	r1, #0
   8d496:	f7ff fcff 	bl	8ce98 <_Balloc>
   8d49a:	b160      	cbz	r0, 8d4b6 <__mdiff+0x13a>
   8d49c:	2201      	movs	r2, #1
   8d49e:	2300      	movs	r3, #0
   8d4a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8d4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d4a8:	4602      	mov	r2, r0
   8d4aa:	f44f 7110 	mov.w	r1, #576	; 0x240
   8d4ae:	4b05      	ldr	r3, [pc, #20]	; (8d4c4 <__mdiff+0x148>)
   8d4b0:	4805      	ldr	r0, [pc, #20]	; (8d4c8 <__mdiff+0x14c>)
   8d4b2:	f000 fcab 	bl	8de0c <__assert_func>
   8d4b6:	4602      	mov	r2, r0
   8d4b8:	f240 2132 	movw	r1, #562	; 0x232
   8d4bc:	4b01      	ldr	r3, [pc, #4]	; (8d4c4 <__mdiff+0x148>)
   8d4be:	4802      	ldr	r0, [pc, #8]	; (8d4c8 <__mdiff+0x14c>)
   8d4c0:	f000 fca4 	bl	8de0c <__assert_func>
   8d4c4:	0008eba0 	.word	0x0008eba0
   8d4c8:	0008ec40 	.word	0x0008ec40

0008d4cc <__d2b>:
   8d4cc:	b570      	push	{r4, r5, r6, lr}
   8d4ce:	2101      	movs	r1, #1
   8d4d0:	b082      	sub	sp, #8
   8d4d2:	4616      	mov	r6, r2
   8d4d4:	461d      	mov	r5, r3
   8d4d6:	f7ff fcdf 	bl	8ce98 <_Balloc>
   8d4da:	4604      	mov	r4, r0
   8d4dc:	2800      	cmp	r0, #0
   8d4de:	d04c      	beq.n	8d57a <__d2b+0xae>
   8d4e0:	462b      	mov	r3, r5
   8d4e2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8d4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8d4ea:	b10d      	cbz	r5, 8d4f0 <__d2b+0x24>
   8d4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d4f0:	2e00      	cmp	r6, #0
   8d4f2:	9301      	str	r3, [sp, #4]
   8d4f4:	d022      	beq.n	8d53c <__d2b+0x70>
   8d4f6:	4668      	mov	r0, sp
   8d4f8:	9600      	str	r6, [sp, #0]
   8d4fa:	f7ff fd6b 	bl	8cfd4 <__lo0bits>
   8d4fe:	2800      	cmp	r0, #0
   8d500:	d037      	beq.n	8d572 <__d2b+0xa6>
   8d502:	9b01      	ldr	r3, [sp, #4]
   8d504:	9900      	ldr	r1, [sp, #0]
   8d506:	f1c0 0220 	rsb	r2, r0, #32
   8d50a:	fa03 f202 	lsl.w	r2, r3, r2
   8d50e:	430a      	orrs	r2, r1
   8d510:	40c3      	lsrs	r3, r0
   8d512:	9301      	str	r3, [sp, #4]
   8d514:	6162      	str	r2, [r4, #20]
   8d516:	2b00      	cmp	r3, #0
   8d518:	bf14      	ite	ne
   8d51a:	2102      	movne	r1, #2
   8d51c:	2101      	moveq	r1, #1
   8d51e:	61a3      	str	r3, [r4, #24]
   8d520:	6121      	str	r1, [r4, #16]
   8d522:	b1b5      	cbz	r5, 8d552 <__d2b+0x86>
   8d524:	9a06      	ldr	r2, [sp, #24]
   8d526:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8d52a:	4403      	add	r3, r0
   8d52c:	6013      	str	r3, [r2, #0]
   8d52e:	9b07      	ldr	r3, [sp, #28]
   8d530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8d534:	6018      	str	r0, [r3, #0]
   8d536:	4620      	mov	r0, r4
   8d538:	b002      	add	sp, #8
   8d53a:	bd70      	pop	{r4, r5, r6, pc}
   8d53c:	a801      	add	r0, sp, #4
   8d53e:	f7ff fd49 	bl	8cfd4 <__lo0bits>
   8d542:	2301      	movs	r3, #1
   8d544:	9a01      	ldr	r2, [sp, #4]
   8d546:	4619      	mov	r1, r3
   8d548:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8d54c:	3020      	adds	r0, #32
   8d54e:	2d00      	cmp	r5, #0
   8d550:	d1e8      	bne.n	8d524 <__d2b+0x58>
   8d552:	9a06      	ldr	r2, [sp, #24]
   8d554:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8d558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8d55c:	6010      	str	r0, [r2, #0]
   8d55e:	6918      	ldr	r0, [r3, #16]
   8d560:	f7ff fd18 	bl	8cf94 <__hi0bits>
   8d564:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8d568:	4620      	mov	r0, r4
   8d56a:	9b07      	ldr	r3, [sp, #28]
   8d56c:	6019      	str	r1, [r3, #0]
   8d56e:	b002      	add	sp, #8
   8d570:	bd70      	pop	{r4, r5, r6, pc}
   8d572:	e9dd 2300 	ldrd	r2, r3, [sp]
   8d576:	6162      	str	r2, [r4, #20]
   8d578:	e7cd      	b.n	8d516 <__d2b+0x4a>
   8d57a:	4602      	mov	r2, r0
   8d57c:	f240 310a 	movw	r1, #778	; 0x30a
   8d580:	4b01      	ldr	r3, [pc, #4]	; (8d588 <__d2b+0xbc>)
   8d582:	4802      	ldr	r0, [pc, #8]	; (8d58c <__d2b+0xc0>)
   8d584:	f000 fc42 	bl	8de0c <__assert_func>
   8d588:	0008eba0 	.word	0x0008eba0
   8d58c:	0008ec40 	.word	0x0008ec40

0008d590 <_realloc_r>:
   8d590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d594:	4616      	mov	r6, r2
   8d596:	2900      	cmp	r1, #0
   8d598:	f000 80bd 	beq.w	8d716 <_realloc_r+0x186>
   8d59c:	f106 050b 	add.w	r5, r6, #11
   8d5a0:	460c      	mov	r4, r1
   8d5a2:	4680      	mov	r8, r0
   8d5a4:	f7ff fc6c 	bl	8ce80 <__malloc_lock>
   8d5a8:	2d16      	cmp	r5, #22
   8d5aa:	d85f      	bhi.n	8d66c <_realloc_r+0xdc>
   8d5ac:	2510      	movs	r5, #16
   8d5ae:	462a      	mov	r2, r5
   8d5b0:	42ae      	cmp	r6, r5
   8d5b2:	d860      	bhi.n	8d676 <_realloc_r+0xe6>
   8d5b4:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8d5b8:	f1a4 0908 	sub.w	r9, r4, #8
   8d5bc:	f021 0703 	bic.w	r7, r1, #3
   8d5c0:	4297      	cmp	r7, r2
   8d5c2:	f280 8086 	bge.w	8d6d2 <_realloc_r+0x142>
   8d5c6:	4bc9      	ldr	r3, [pc, #804]	; (8d8ec <_realloc_r+0x35c>)
   8d5c8:	eb09 0007 	add.w	r0, r9, r7
   8d5cc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8d5d0:	4584      	cmp	ip, r0
   8d5d2:	f000 80b9 	beq.w	8d748 <_realloc_r+0x1b8>
   8d5d6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8d5da:	f02c 0301 	bic.w	r3, ip, #1
   8d5de:	4403      	add	r3, r0
   8d5e0:	685b      	ldr	r3, [r3, #4]
   8d5e2:	07db      	lsls	r3, r3, #31
   8d5e4:	f100 808c 	bmi.w	8d700 <_realloc_r+0x170>
   8d5e8:	f02c 0c03 	bic.w	ip, ip, #3
   8d5ec:	eb07 030c 	add.w	r3, r7, ip
   8d5f0:	4293      	cmp	r3, r2
   8d5f2:	f280 8115 	bge.w	8d820 <_realloc_r+0x290>
   8d5f6:	07cb      	lsls	r3, r1, #31
   8d5f8:	d40f      	bmi.n	8d61a <_realloc_r+0x8a>
   8d5fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8d5fe:	eba9 0a03 	sub.w	sl, r9, r3
   8d602:	f8da 3004 	ldr.w	r3, [sl, #4]
   8d606:	f023 0103 	bic.w	r1, r3, #3
   8d60a:	448c      	add	ip, r1
   8d60c:	44bc      	add	ip, r7
   8d60e:	4594      	cmp	ip, r2
   8d610:	da38      	bge.n	8d684 <_realloc_r+0xf4>
   8d612:	187b      	adds	r3, r7, r1
   8d614:	4293      	cmp	r3, r2
   8d616:	f280 810f 	bge.w	8d838 <_realloc_r+0x2a8>
   8d61a:	4631      	mov	r1, r6
   8d61c:	4640      	mov	r0, r8
   8d61e:	f7ff f8c1 	bl	8c7a4 <_malloc_r>
   8d622:	4606      	mov	r6, r0
   8d624:	b1e0      	cbz	r0, 8d660 <_realloc_r+0xd0>
   8d626:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8d62a:	f1a0 0208 	sub.w	r2, r0, #8
   8d62e:	f023 0301 	bic.w	r3, r3, #1
   8d632:	444b      	add	r3, r9
   8d634:	4293      	cmp	r3, r2
   8d636:	f000 80f9 	beq.w	8d82c <_realloc_r+0x29c>
   8d63a:	1f3a      	subs	r2, r7, #4
   8d63c:	2a24      	cmp	r2, #36	; 0x24
   8d63e:	f200 811c 	bhi.w	8d87a <_realloc_r+0x2ea>
   8d642:	2a13      	cmp	r2, #19
   8d644:	f200 80cd 	bhi.w	8d7e2 <_realloc_r+0x252>
   8d648:	4603      	mov	r3, r0
   8d64a:	4622      	mov	r2, r4
   8d64c:	6811      	ldr	r1, [r2, #0]
   8d64e:	6019      	str	r1, [r3, #0]
   8d650:	6851      	ldr	r1, [r2, #4]
   8d652:	6059      	str	r1, [r3, #4]
   8d654:	6892      	ldr	r2, [r2, #8]
   8d656:	609a      	str	r2, [r3, #8]
   8d658:	4621      	mov	r1, r4
   8d65a:	4640      	mov	r0, r8
   8d65c:	f7fe fd78 	bl	8c150 <_free_r>
   8d660:	4640      	mov	r0, r8
   8d662:	f7ff fc13 	bl	8ce8c <__malloc_unlock>
   8d666:	4630      	mov	r0, r6
   8d668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d66c:	f025 0507 	bic.w	r5, r5, #7
   8d670:	2d00      	cmp	r5, #0
   8d672:	462a      	mov	r2, r5
   8d674:	da9c      	bge.n	8d5b0 <_realloc_r+0x20>
   8d676:	230c      	movs	r3, #12
   8d678:	2600      	movs	r6, #0
   8d67a:	f8c8 3000 	str.w	r3, [r8]
   8d67e:	4630      	mov	r0, r6
   8d680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d684:	4656      	mov	r6, sl
   8d686:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8d68a:	60cb      	str	r3, [r1, #12]
   8d68c:	6099      	str	r1, [r3, #8]
   8d68e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8d692:	f8da 300c 	ldr.w	r3, [sl, #12]
   8d696:	1f3a      	subs	r2, r7, #4
   8d698:	2a24      	cmp	r2, #36	; 0x24
   8d69a:	60cb      	str	r3, [r1, #12]
   8d69c:	6099      	str	r1, [r3, #8]
   8d69e:	f200 8107 	bhi.w	8d8b0 <_realloc_r+0x320>
   8d6a2:	2a13      	cmp	r2, #19
   8d6a4:	f240 8102 	bls.w	8d8ac <_realloc_r+0x31c>
   8d6a8:	6823      	ldr	r3, [r4, #0]
   8d6aa:	2a1b      	cmp	r2, #27
   8d6ac:	f8ca 3008 	str.w	r3, [sl, #8]
   8d6b0:	6863      	ldr	r3, [r4, #4]
   8d6b2:	f8ca 300c 	str.w	r3, [sl, #12]
   8d6b6:	f200 811b 	bhi.w	8d8f0 <_realloc_r+0x360>
   8d6ba:	3408      	adds	r4, #8
   8d6bc:	f10a 0310 	add.w	r3, sl, #16
   8d6c0:	6822      	ldr	r2, [r4, #0]
   8d6c2:	4667      	mov	r7, ip
   8d6c4:	601a      	str	r2, [r3, #0]
   8d6c6:	6862      	ldr	r2, [r4, #4]
   8d6c8:	46d1      	mov	r9, sl
   8d6ca:	605a      	str	r2, [r3, #4]
   8d6cc:	68a2      	ldr	r2, [r4, #8]
   8d6ce:	4634      	mov	r4, r6
   8d6d0:	609a      	str	r2, [r3, #8]
   8d6d2:	1b7b      	subs	r3, r7, r5
   8d6d4:	2b0f      	cmp	r3, #15
   8d6d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8d6da:	d821      	bhi.n	8d720 <_realloc_r+0x190>
   8d6dc:	f002 0201 	and.w	r2, r2, #1
   8d6e0:	433a      	orrs	r2, r7
   8d6e2:	eb09 0107 	add.w	r1, r9, r7
   8d6e6:	f8c9 2004 	str.w	r2, [r9, #4]
   8d6ea:	684b      	ldr	r3, [r1, #4]
   8d6ec:	f043 0301 	orr.w	r3, r3, #1
   8d6f0:	604b      	str	r3, [r1, #4]
   8d6f2:	4626      	mov	r6, r4
   8d6f4:	4640      	mov	r0, r8
   8d6f6:	f7ff fbc9 	bl	8ce8c <__malloc_unlock>
   8d6fa:	4630      	mov	r0, r6
   8d6fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d700:	07c9      	lsls	r1, r1, #31
   8d702:	d48a      	bmi.n	8d61a <_realloc_r+0x8a>
   8d704:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8d708:	eba9 0a03 	sub.w	sl, r9, r3
   8d70c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d710:	f021 0103 	bic.w	r1, r1, #3
   8d714:	e77d      	b.n	8d612 <_realloc_r+0x82>
   8d716:	4611      	mov	r1, r2
   8d718:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d71c:	f7ff b842 	b.w	8c7a4 <_malloc_r>
   8d720:	f002 0201 	and.w	r2, r2, #1
   8d724:	eb09 0105 	add.w	r1, r9, r5
   8d728:	f043 0301 	orr.w	r3, r3, #1
   8d72c:	432a      	orrs	r2, r5
   8d72e:	f8c9 2004 	str.w	r2, [r9, #4]
   8d732:	444f      	add	r7, r9
   8d734:	604b      	str	r3, [r1, #4]
   8d736:	687b      	ldr	r3, [r7, #4]
   8d738:	4640      	mov	r0, r8
   8d73a:	f043 0301 	orr.w	r3, r3, #1
   8d73e:	3108      	adds	r1, #8
   8d740:	607b      	str	r3, [r7, #4]
   8d742:	f7fe fd05 	bl	8c150 <_free_r>
   8d746:	e7d4      	b.n	8d6f2 <_realloc_r+0x162>
   8d748:	f8dc b004 	ldr.w	fp, [ip, #4]
   8d74c:	f105 0010 	add.w	r0, r5, #16
   8d750:	f02b 0b03 	bic.w	fp, fp, #3
   8d754:	eb07 0c0b 	add.w	ip, r7, fp
   8d758:	4584      	cmp	ip, r0
   8d75a:	da4d      	bge.n	8d7f8 <_realloc_r+0x268>
   8d75c:	07c9      	lsls	r1, r1, #31
   8d75e:	f53f af5c 	bmi.w	8d61a <_realloc_r+0x8a>
   8d762:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8d766:	eba9 0a01 	sub.w	sl, r9, r1
   8d76a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d76e:	f021 0103 	bic.w	r1, r1, #3
   8d772:	448b      	add	fp, r1
   8d774:	44bb      	add	fp, r7
   8d776:	4558      	cmp	r0, fp
   8d778:	f73f af4b 	bgt.w	8d612 <_realloc_r+0x82>
   8d77c:	4656      	mov	r6, sl
   8d77e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d782:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d786:	1f3a      	subs	r2, r7, #4
   8d788:	2a24      	cmp	r2, #36	; 0x24
   8d78a:	60c1      	str	r1, [r0, #12]
   8d78c:	6088      	str	r0, [r1, #8]
   8d78e:	f200 80bd 	bhi.w	8d90c <_realloc_r+0x37c>
   8d792:	2a13      	cmp	r2, #19
   8d794:	f240 80b8 	bls.w	8d908 <_realloc_r+0x378>
   8d798:	6821      	ldr	r1, [r4, #0]
   8d79a:	2a1b      	cmp	r2, #27
   8d79c:	f8ca 1008 	str.w	r1, [sl, #8]
   8d7a0:	6861      	ldr	r1, [r4, #4]
   8d7a2:	f8ca 100c 	str.w	r1, [sl, #12]
   8d7a6:	f200 80c1 	bhi.w	8d92c <_realloc_r+0x39c>
   8d7aa:	3408      	adds	r4, #8
   8d7ac:	f10a 0210 	add.w	r2, sl, #16
   8d7b0:	6821      	ldr	r1, [r4, #0]
   8d7b2:	6011      	str	r1, [r2, #0]
   8d7b4:	6861      	ldr	r1, [r4, #4]
   8d7b6:	6051      	str	r1, [r2, #4]
   8d7b8:	68a1      	ldr	r1, [r4, #8]
   8d7ba:	6091      	str	r1, [r2, #8]
   8d7bc:	ebab 0205 	sub.w	r2, fp, r5
   8d7c0:	eb0a 0105 	add.w	r1, sl, r5
   8d7c4:	f042 0201 	orr.w	r2, r2, #1
   8d7c8:	6099      	str	r1, [r3, #8]
   8d7ca:	604a      	str	r2, [r1, #4]
   8d7cc:	f8da 3004 	ldr.w	r3, [sl, #4]
   8d7d0:	4640      	mov	r0, r8
   8d7d2:	f003 0301 	and.w	r3, r3, #1
   8d7d6:	431d      	orrs	r5, r3
   8d7d8:	f8ca 5004 	str.w	r5, [sl, #4]
   8d7dc:	f7ff fb56 	bl	8ce8c <__malloc_unlock>
   8d7e0:	e74d      	b.n	8d67e <_realloc_r+0xee>
   8d7e2:	6823      	ldr	r3, [r4, #0]
   8d7e4:	2a1b      	cmp	r2, #27
   8d7e6:	6003      	str	r3, [r0, #0]
   8d7e8:	6863      	ldr	r3, [r4, #4]
   8d7ea:	6043      	str	r3, [r0, #4]
   8d7ec:	d849      	bhi.n	8d882 <_realloc_r+0x2f2>
   8d7ee:	f104 0208 	add.w	r2, r4, #8
   8d7f2:	f100 0308 	add.w	r3, r0, #8
   8d7f6:	e729      	b.n	8d64c <_realloc_r+0xbc>
   8d7f8:	ebac 0205 	sub.w	r2, ip, r5
   8d7fc:	eb09 0105 	add.w	r1, r9, r5
   8d800:	f042 0201 	orr.w	r2, r2, #1
   8d804:	6099      	str	r1, [r3, #8]
   8d806:	604a      	str	r2, [r1, #4]
   8d808:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8d80c:	4640      	mov	r0, r8
   8d80e:	f003 0301 	and.w	r3, r3, #1
   8d812:	431d      	orrs	r5, r3
   8d814:	f844 5c04 	str.w	r5, [r4, #-4]
   8d818:	f7ff fb38 	bl	8ce8c <__malloc_unlock>
   8d81c:	4626      	mov	r6, r4
   8d81e:	e72e      	b.n	8d67e <_realloc_r+0xee>
   8d820:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8d824:	461f      	mov	r7, r3
   8d826:	60ca      	str	r2, [r1, #12]
   8d828:	6091      	str	r1, [r2, #8]
   8d82a:	e752      	b.n	8d6d2 <_realloc_r+0x142>
   8d82c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8d830:	f023 0303 	bic.w	r3, r3, #3
   8d834:	441f      	add	r7, r3
   8d836:	e74c      	b.n	8d6d2 <_realloc_r+0x142>
   8d838:	4656      	mov	r6, sl
   8d83a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d83e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d842:	1f3a      	subs	r2, r7, #4
   8d844:	2a24      	cmp	r2, #36	; 0x24
   8d846:	60c1      	str	r1, [r0, #12]
   8d848:	6088      	str	r0, [r1, #8]
   8d84a:	d827      	bhi.n	8d89c <_realloc_r+0x30c>
   8d84c:	2a13      	cmp	r2, #19
   8d84e:	d923      	bls.n	8d898 <_realloc_r+0x308>
   8d850:	6821      	ldr	r1, [r4, #0]
   8d852:	2a1b      	cmp	r2, #27
   8d854:	f8ca 1008 	str.w	r1, [sl, #8]
   8d858:	6861      	ldr	r1, [r4, #4]
   8d85a:	f8ca 100c 	str.w	r1, [sl, #12]
   8d85e:	d82f      	bhi.n	8d8c0 <_realloc_r+0x330>
   8d860:	3408      	adds	r4, #8
   8d862:	f10a 0210 	add.w	r2, sl, #16
   8d866:	6821      	ldr	r1, [r4, #0]
   8d868:	461f      	mov	r7, r3
   8d86a:	6011      	str	r1, [r2, #0]
   8d86c:	6863      	ldr	r3, [r4, #4]
   8d86e:	46d1      	mov	r9, sl
   8d870:	6053      	str	r3, [r2, #4]
   8d872:	68a3      	ldr	r3, [r4, #8]
   8d874:	4634      	mov	r4, r6
   8d876:	6093      	str	r3, [r2, #8]
   8d878:	e72b      	b.n	8d6d2 <_realloc_r+0x142>
   8d87a:	4621      	mov	r1, r4
   8d87c:	f7ff fa96 	bl	8cdac <memmove>
   8d880:	e6ea      	b.n	8d658 <_realloc_r+0xc8>
   8d882:	68a3      	ldr	r3, [r4, #8]
   8d884:	2a24      	cmp	r2, #36	; 0x24
   8d886:	6083      	str	r3, [r0, #8]
   8d888:	68e3      	ldr	r3, [r4, #12]
   8d88a:	60c3      	str	r3, [r0, #12]
   8d88c:	d024      	beq.n	8d8d8 <_realloc_r+0x348>
   8d88e:	f104 0210 	add.w	r2, r4, #16
   8d892:	f100 0310 	add.w	r3, r0, #16
   8d896:	e6d9      	b.n	8d64c <_realloc_r+0xbc>
   8d898:	4632      	mov	r2, r6
   8d89a:	e7e4      	b.n	8d866 <_realloc_r+0x2d6>
   8d89c:	4621      	mov	r1, r4
   8d89e:	4630      	mov	r0, r6
   8d8a0:	461f      	mov	r7, r3
   8d8a2:	46d1      	mov	r9, sl
   8d8a4:	f7ff fa82 	bl	8cdac <memmove>
   8d8a8:	4634      	mov	r4, r6
   8d8aa:	e712      	b.n	8d6d2 <_realloc_r+0x142>
   8d8ac:	4633      	mov	r3, r6
   8d8ae:	e707      	b.n	8d6c0 <_realloc_r+0x130>
   8d8b0:	4621      	mov	r1, r4
   8d8b2:	4630      	mov	r0, r6
   8d8b4:	4667      	mov	r7, ip
   8d8b6:	46d1      	mov	r9, sl
   8d8b8:	f7ff fa78 	bl	8cdac <memmove>
   8d8bc:	4634      	mov	r4, r6
   8d8be:	e708      	b.n	8d6d2 <_realloc_r+0x142>
   8d8c0:	68a1      	ldr	r1, [r4, #8]
   8d8c2:	2a24      	cmp	r2, #36	; 0x24
   8d8c4:	f8ca 1010 	str.w	r1, [sl, #16]
   8d8c8:	68e1      	ldr	r1, [r4, #12]
   8d8ca:	f8ca 1014 	str.w	r1, [sl, #20]
   8d8ce:	d023      	beq.n	8d918 <_realloc_r+0x388>
   8d8d0:	3410      	adds	r4, #16
   8d8d2:	f10a 0218 	add.w	r2, sl, #24
   8d8d6:	e7c6      	b.n	8d866 <_realloc_r+0x2d6>
   8d8d8:	6923      	ldr	r3, [r4, #16]
   8d8da:	f104 0218 	add.w	r2, r4, #24
   8d8de:	6103      	str	r3, [r0, #16]
   8d8e0:	6961      	ldr	r1, [r4, #20]
   8d8e2:	f100 0318 	add.w	r3, r0, #24
   8d8e6:	6141      	str	r1, [r0, #20]
   8d8e8:	e6b0      	b.n	8d64c <_realloc_r+0xbc>
   8d8ea:	bf00      	nop
   8d8ec:	20000aa0 	.word	0x20000aa0
   8d8f0:	68a3      	ldr	r3, [r4, #8]
   8d8f2:	2a24      	cmp	r2, #36	; 0x24
   8d8f4:	f8ca 3010 	str.w	r3, [sl, #16]
   8d8f8:	68e3      	ldr	r3, [r4, #12]
   8d8fa:	f8ca 3014 	str.w	r3, [sl, #20]
   8d8fe:	d021      	beq.n	8d944 <_realloc_r+0x3b4>
   8d900:	3410      	adds	r4, #16
   8d902:	f10a 0318 	add.w	r3, sl, #24
   8d906:	e6db      	b.n	8d6c0 <_realloc_r+0x130>
   8d908:	4632      	mov	r2, r6
   8d90a:	e751      	b.n	8d7b0 <_realloc_r+0x220>
   8d90c:	4621      	mov	r1, r4
   8d90e:	4630      	mov	r0, r6
   8d910:	f7ff fa4c 	bl	8cdac <memmove>
   8d914:	4b15      	ldr	r3, [pc, #84]	; (8d96c <_realloc_r+0x3dc>)
   8d916:	e751      	b.n	8d7bc <_realloc_r+0x22c>
   8d918:	6921      	ldr	r1, [r4, #16]
   8d91a:	f10a 0220 	add.w	r2, sl, #32
   8d91e:	f8ca 1018 	str.w	r1, [sl, #24]
   8d922:	6961      	ldr	r1, [r4, #20]
   8d924:	3418      	adds	r4, #24
   8d926:	f8ca 101c 	str.w	r1, [sl, #28]
   8d92a:	e79c      	b.n	8d866 <_realloc_r+0x2d6>
   8d92c:	68a1      	ldr	r1, [r4, #8]
   8d92e:	2a24      	cmp	r2, #36	; 0x24
   8d930:	f8ca 1010 	str.w	r1, [sl, #16]
   8d934:	68e1      	ldr	r1, [r4, #12]
   8d936:	f8ca 1014 	str.w	r1, [sl, #20]
   8d93a:	d00d      	beq.n	8d958 <_realloc_r+0x3c8>
   8d93c:	3410      	adds	r4, #16
   8d93e:	f10a 0218 	add.w	r2, sl, #24
   8d942:	e735      	b.n	8d7b0 <_realloc_r+0x220>
   8d944:	6922      	ldr	r2, [r4, #16]
   8d946:	f10a 0320 	add.w	r3, sl, #32
   8d94a:	f8ca 2018 	str.w	r2, [sl, #24]
   8d94e:	6962      	ldr	r2, [r4, #20]
   8d950:	3418      	adds	r4, #24
   8d952:	f8ca 201c 	str.w	r2, [sl, #28]
   8d956:	e6b3      	b.n	8d6c0 <_realloc_r+0x130>
   8d958:	6921      	ldr	r1, [r4, #16]
   8d95a:	f10a 0220 	add.w	r2, sl, #32
   8d95e:	f8ca 1018 	str.w	r1, [sl, #24]
   8d962:	6961      	ldr	r1, [r4, #20]
   8d964:	3418      	adds	r4, #24
   8d966:	f8ca 101c 	str.w	r1, [sl, #28]
   8d96a:	e721      	b.n	8d7b0 <_realloc_r+0x220>
   8d96c:	20000aa0 	.word	0x20000aa0

0008d970 <frexp>:
   8d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d972:	4617      	mov	r7, r2
   8d974:	2200      	movs	r2, #0
   8d976:	f8df c060 	ldr.w	ip, [pc, #96]	; 8d9d8 <frexp+0x68>
   8d97a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d97e:	4563      	cmp	r3, ip
   8d980:	4604      	mov	r4, r0
   8d982:	460d      	mov	r5, r1
   8d984:	603a      	str	r2, [r7, #0]
   8d986:	dc22      	bgt.n	8d9ce <frexp+0x5e>
   8d988:	4684      	mov	ip, r0
   8d98a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8d98e:	d01e      	beq.n	8d9ce <frexp+0x5e>
   8d990:	f8df c048 	ldr.w	ip, [pc, #72]	; 8d9dc <frexp+0x6c>
   8d994:	460e      	mov	r6, r1
   8d996:	ea01 0c0c 	and.w	ip, r1, ip
   8d99a:	f1bc 0f00 	cmp.w	ip, #0
   8d99e:	d109      	bne.n	8d9b4 <frexp+0x44>
   8d9a0:	2200      	movs	r2, #0
   8d9a2:	4b0c      	ldr	r3, [pc, #48]	; (8d9d4 <frexp+0x64>)
   8d9a4:	f000 fd70 	bl	8e488 <__aeabi_dmul>
   8d9a8:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8d9ac:	4604      	mov	r4, r0
   8d9ae:	460e      	mov	r6, r1
   8d9b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d9b4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8d9b8:	151b      	asrs	r3, r3, #20
   8d9ba:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8d9be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8d9c2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8d9c6:	4413      	add	r3, r2
   8d9c8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8d9cc:	603b      	str	r3, [r7, #0]
   8d9ce:	4620      	mov	r0, r4
   8d9d0:	4629      	mov	r1, r5
   8d9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9d4:	43500000 	.word	0x43500000
   8d9d8:	7fefffff 	.word	0x7fefffff
   8d9dc:	7ff00000 	.word	0x7ff00000

0008d9e0 <_sbrk_r>:
   8d9e0:	2200      	movs	r2, #0
   8d9e2:	b538      	push	{r3, r4, r5, lr}
   8d9e4:	4d06      	ldr	r5, [pc, #24]	; (8da00 <_sbrk_r+0x20>)
   8d9e6:	4604      	mov	r4, r0
   8d9e8:	4608      	mov	r0, r1
   8d9ea:	602a      	str	r2, [r5, #0]
   8d9ec:	f7f6 f82c 	bl	83a48 <_sbrk>
   8d9f0:	1c43      	adds	r3, r0, #1
   8d9f2:	d000      	beq.n	8d9f6 <_sbrk_r+0x16>
   8d9f4:	bd38      	pop	{r3, r4, r5, pc}
   8d9f6:	682b      	ldr	r3, [r5, #0]
   8d9f8:	2b00      	cmp	r3, #0
   8d9fa:	d0fb      	beq.n	8d9f4 <_sbrk_r+0x14>
   8d9fc:	6023      	str	r3, [r4, #0]
   8d9fe:	bd38      	pop	{r3, r4, r5, pc}
   8da00:	20002460 	.word	0x20002460

0008da04 <__sread>:
   8da04:	b510      	push	{r4, lr}
   8da06:	460c      	mov	r4, r1
   8da08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8da0c:	f000 fb16 	bl	8e03c <_read_r>
   8da10:	2800      	cmp	r0, #0
   8da12:	db03      	blt.n	8da1c <__sread+0x18>
   8da14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8da16:	4403      	add	r3, r0
   8da18:	6523      	str	r3, [r4, #80]	; 0x50
   8da1a:	bd10      	pop	{r4, pc}
   8da1c:	89a3      	ldrh	r3, [r4, #12]
   8da1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8da22:	81a3      	strh	r3, [r4, #12]
   8da24:	bd10      	pop	{r4, pc}
   8da26:	bf00      	nop

0008da28 <__swrite>:
   8da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8da2c:	460c      	mov	r4, r1
   8da2e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8da32:	461f      	mov	r7, r3
   8da34:	05cb      	lsls	r3, r1, #23
   8da36:	4616      	mov	r6, r2
   8da38:	4605      	mov	r5, r0
   8da3a:	d40b      	bmi.n	8da54 <__swrite+0x2c>
   8da3c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8da40:	81a1      	strh	r1, [r4, #12]
   8da42:	463b      	mov	r3, r7
   8da44:	4632      	mov	r2, r6
   8da46:	4628      	mov	r0, r5
   8da48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8da4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8da50:	f000 b980 	b.w	8dd54 <_write_r>
   8da54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8da58:	2302      	movs	r3, #2
   8da5a:	2200      	movs	r2, #0
   8da5c:	f000 fad8 	bl	8e010 <_lseek_r>
   8da60:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8da64:	e7ea      	b.n	8da3c <__swrite+0x14>
   8da66:	bf00      	nop

0008da68 <__sseek>:
   8da68:	b510      	push	{r4, lr}
   8da6a:	460c      	mov	r4, r1
   8da6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8da70:	f000 face 	bl	8e010 <_lseek_r>
   8da74:	89a3      	ldrh	r3, [r4, #12]
   8da76:	1c42      	adds	r2, r0, #1
   8da78:	bf0e      	itee	eq
   8da7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8da7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8da82:	6520      	strne	r0, [r4, #80]	; 0x50
   8da84:	81a3      	strh	r3, [r4, #12]
   8da86:	bd10      	pop	{r4, pc}

0008da88 <__sclose>:
   8da88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8da8c:	f000 ba0c 	b.w	8dea8 <_close_r>

0008da90 <strlen>:
   8da90:	f020 0103 	bic.w	r1, r0, #3
   8da94:	f010 0003 	ands.w	r0, r0, #3
   8da98:	f1c0 0000 	rsb	r0, r0, #0
   8da9c:	f851 3b04 	ldr.w	r3, [r1], #4
   8daa0:	f100 0c04 	add.w	ip, r0, #4
   8daa4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8daa8:	f06f 0200 	mvn.w	r2, #0
   8daac:	bf1c      	itt	ne
   8daae:	fa22 f20c 	lsrne.w	r2, r2, ip
   8dab2:	4313      	orrne	r3, r2
   8dab4:	f04f 0c01 	mov.w	ip, #1
   8dab8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8dabc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8dac0:	eba3 020c 	sub.w	r2, r3, ip
   8dac4:	ea22 0203 	bic.w	r2, r2, r3
   8dac8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8dacc:	bf04      	itt	eq
   8dace:	f851 3b04 	ldreq.w	r3, [r1], #4
   8dad2:	3004      	addeq	r0, #4
   8dad4:	d0f4      	beq.n	8dac0 <strlen+0x30>
   8dad6:	f1c2 0100 	rsb	r1, r2, #0
   8dada:	ea02 0201 	and.w	r2, r2, r1
   8dade:	fab2 f282 	clz	r2, r2
   8dae2:	f1c2 021f 	rsb	r2, r2, #31
   8dae6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8daea:	4770      	bx	lr

0008daec <strncpy>:
   8daec:	b470      	push	{r4, r5, r6}
   8daee:	ea40 0401 	orr.w	r4, r0, r1
   8daf2:	07a3      	lsls	r3, r4, #30
   8daf4:	d122      	bne.n	8db3c <strncpy+0x50>
   8daf6:	2a03      	cmp	r2, #3
   8daf8:	d920      	bls.n	8db3c <strncpy+0x50>
   8dafa:	460b      	mov	r3, r1
   8dafc:	4604      	mov	r4, r0
   8dafe:	4619      	mov	r1, r3
   8db00:	f853 6b04 	ldr.w	r6, [r3], #4
   8db04:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8db08:	ea25 0506 	bic.w	r5, r5, r6
   8db0c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8db10:	d115      	bne.n	8db3e <strncpy+0x52>
   8db12:	3a04      	subs	r2, #4
   8db14:	2a03      	cmp	r2, #3
   8db16:	4619      	mov	r1, r3
   8db18:	f844 6b04 	str.w	r6, [r4], #4
   8db1c:	d8ef      	bhi.n	8dafe <strncpy+0x12>
   8db1e:	1e4d      	subs	r5, r1, #1
   8db20:	b152      	cbz	r2, 8db38 <strncpy+0x4c>
   8db22:	4623      	mov	r3, r4
   8db24:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8db28:	1e56      	subs	r6, r2, #1
   8db2a:	f803 1b01 	strb.w	r1, [r3], #1
   8db2e:	b141      	cbz	r1, 8db42 <strncpy+0x56>
   8db30:	4632      	mov	r2, r6
   8db32:	461c      	mov	r4, r3
   8db34:	2a00      	cmp	r2, #0
   8db36:	d1f4      	bne.n	8db22 <strncpy+0x36>
   8db38:	bc70      	pop	{r4, r5, r6}
   8db3a:	4770      	bx	lr
   8db3c:	4604      	mov	r4, r0
   8db3e:	1e4d      	subs	r5, r1, #1
   8db40:	e7ee      	b.n	8db20 <strncpy+0x34>
   8db42:	4422      	add	r2, r4
   8db44:	2e00      	cmp	r6, #0
   8db46:	d0f7      	beq.n	8db38 <strncpy+0x4c>
   8db48:	f803 1b01 	strb.w	r1, [r3], #1
   8db4c:	4293      	cmp	r3, r2
   8db4e:	d1fb      	bne.n	8db48 <strncpy+0x5c>
   8db50:	bc70      	pop	{r4, r5, r6}
   8db52:	4770      	bx	lr

0008db54 <__ssprint_r>:
   8db54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8db58:	6893      	ldr	r3, [r2, #8]
   8db5a:	4691      	mov	r9, r2
   8db5c:	b083      	sub	sp, #12
   8db5e:	2b00      	cmp	r3, #0
   8db60:	d06d      	beq.n	8dc3e <__ssprint_r+0xea>
   8db62:	6817      	ldr	r7, [r2, #0]
   8db64:	4680      	mov	r8, r0
   8db66:	460c      	mov	r4, r1
   8db68:	6808      	ldr	r0, [r1, #0]
   8db6a:	688d      	ldr	r5, [r1, #8]
   8db6c:	3708      	adds	r7, #8
   8db6e:	e043      	b.n	8dbf8 <__ssprint_r+0xa4>
   8db70:	89a3      	ldrh	r3, [r4, #12]
   8db72:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8db76:	d02e      	beq.n	8dbd6 <__ssprint_r+0x82>
   8db78:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8db7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8db80:	eba0 0a01 	sub.w	sl, r0, r1
   8db84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8db88:	eb0a 0006 	add.w	r0, sl, r6
   8db8c:	106d      	asrs	r5, r5, #1
   8db8e:	3001      	adds	r0, #1
   8db90:	42a8      	cmp	r0, r5
   8db92:	462a      	mov	r2, r5
   8db94:	bf84      	itt	hi
   8db96:	4605      	movhi	r5, r0
   8db98:	462a      	movhi	r2, r5
   8db9a:	055b      	lsls	r3, r3, #21
   8db9c:	d536      	bpl.n	8dc0c <__ssprint_r+0xb8>
   8db9e:	4611      	mov	r1, r2
   8dba0:	4640      	mov	r0, r8
   8dba2:	f7fe fdff 	bl	8c7a4 <_malloc_r>
   8dba6:	2800      	cmp	r0, #0
   8dba8:	d03a      	beq.n	8dc20 <__ssprint_r+0xcc>
   8dbaa:	4652      	mov	r2, sl
   8dbac:	6921      	ldr	r1, [r4, #16]
   8dbae:	9001      	str	r0, [sp, #4]
   8dbb0:	f7fa faa2 	bl	880f8 <memcpy>
   8dbb4:	89a2      	ldrh	r2, [r4, #12]
   8dbb6:	9b01      	ldr	r3, [sp, #4]
   8dbb8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8dbbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8dbc0:	81a2      	strh	r2, [r4, #12]
   8dbc2:	eba5 020a 	sub.w	r2, r5, sl
   8dbc6:	eb03 000a 	add.w	r0, r3, sl
   8dbca:	6165      	str	r5, [r4, #20]
   8dbcc:	46b2      	mov	sl, r6
   8dbce:	4635      	mov	r5, r6
   8dbd0:	6123      	str	r3, [r4, #16]
   8dbd2:	6020      	str	r0, [r4, #0]
   8dbd4:	60a2      	str	r2, [r4, #8]
   8dbd6:	4659      	mov	r1, fp
   8dbd8:	4652      	mov	r2, sl
   8dbda:	f7ff f8e7 	bl	8cdac <memmove>
   8dbde:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8dbe2:	68a1      	ldr	r1, [r4, #8]
   8dbe4:	6820      	ldr	r0, [r4, #0]
   8dbe6:	1b4d      	subs	r5, r1, r5
   8dbe8:	4450      	add	r0, sl
   8dbea:	1b9e      	subs	r6, r3, r6
   8dbec:	60a5      	str	r5, [r4, #8]
   8dbee:	6020      	str	r0, [r4, #0]
   8dbf0:	f8c9 6008 	str.w	r6, [r9, #8]
   8dbf4:	b31e      	cbz	r6, 8dc3e <__ssprint_r+0xea>
   8dbf6:	3708      	adds	r7, #8
   8dbf8:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8dbfc:	2e00      	cmp	r6, #0
   8dbfe:	d0fa      	beq.n	8dbf6 <__ssprint_r+0xa2>
   8dc00:	42b5      	cmp	r5, r6
   8dc02:	46aa      	mov	sl, r5
   8dc04:	d9b4      	bls.n	8db70 <__ssprint_r+0x1c>
   8dc06:	4635      	mov	r5, r6
   8dc08:	46b2      	mov	sl, r6
   8dc0a:	e7e4      	b.n	8dbd6 <__ssprint_r+0x82>
   8dc0c:	4640      	mov	r0, r8
   8dc0e:	f7ff fcbf 	bl	8d590 <_realloc_r>
   8dc12:	4603      	mov	r3, r0
   8dc14:	2800      	cmp	r0, #0
   8dc16:	d1d4      	bne.n	8dbc2 <__ssprint_r+0x6e>
   8dc18:	4640      	mov	r0, r8
   8dc1a:	6921      	ldr	r1, [r4, #16]
   8dc1c:	f7fe fa98 	bl	8c150 <_free_r>
   8dc20:	230c      	movs	r3, #12
   8dc22:	2200      	movs	r2, #0
   8dc24:	f04f 30ff 	mov.w	r0, #4294967295
   8dc28:	f8c8 3000 	str.w	r3, [r8]
   8dc2c:	89a3      	ldrh	r3, [r4, #12]
   8dc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8dc32:	81a3      	strh	r3, [r4, #12]
   8dc34:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8dc38:	b003      	add	sp, #12
   8dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8dc3e:	2000      	movs	r0, #0
   8dc40:	f8c9 0004 	str.w	r0, [r9, #4]
   8dc44:	b003      	add	sp, #12
   8dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8dc4a:	bf00      	nop

0008dc4c <__swbuf_r>:
   8dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dc4e:	460d      	mov	r5, r1
   8dc50:	4614      	mov	r4, r2
   8dc52:	4606      	mov	r6, r0
   8dc54:	b110      	cbz	r0, 8dc5c <__swbuf_r+0x10>
   8dc56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8dc58:	2b00      	cmp	r3, #0
   8dc5a:	d043      	beq.n	8dce4 <__swbuf_r+0x98>
   8dc5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8dc60:	69a3      	ldr	r3, [r4, #24]
   8dc62:	0717      	lsls	r7, r2, #28
   8dc64:	60a3      	str	r3, [r4, #8]
   8dc66:	b290      	uxth	r0, r2
   8dc68:	d51b      	bpl.n	8dca2 <__swbuf_r+0x56>
   8dc6a:	6923      	ldr	r3, [r4, #16]
   8dc6c:	b1cb      	cbz	r3, 8dca2 <__swbuf_r+0x56>
   8dc6e:	b2ed      	uxtb	r5, r5
   8dc70:	0481      	lsls	r1, r0, #18
   8dc72:	462f      	mov	r7, r5
   8dc74:	d522      	bpl.n	8dcbc <__swbuf_r+0x70>
   8dc76:	6822      	ldr	r2, [r4, #0]
   8dc78:	6961      	ldr	r1, [r4, #20]
   8dc7a:	1ad3      	subs	r3, r2, r3
   8dc7c:	4299      	cmp	r1, r3
   8dc7e:	dd29      	ble.n	8dcd4 <__swbuf_r+0x88>
   8dc80:	3301      	adds	r3, #1
   8dc82:	68a1      	ldr	r1, [r4, #8]
   8dc84:	1c50      	adds	r0, r2, #1
   8dc86:	3901      	subs	r1, #1
   8dc88:	60a1      	str	r1, [r4, #8]
   8dc8a:	6020      	str	r0, [r4, #0]
   8dc8c:	7015      	strb	r5, [r2, #0]
   8dc8e:	6962      	ldr	r2, [r4, #20]
   8dc90:	429a      	cmp	r2, r3
   8dc92:	d02a      	beq.n	8dcea <__swbuf_r+0x9e>
   8dc94:	89a3      	ldrh	r3, [r4, #12]
   8dc96:	07db      	lsls	r3, r3, #31
   8dc98:	d501      	bpl.n	8dc9e <__swbuf_r+0x52>
   8dc9a:	2d0a      	cmp	r5, #10
   8dc9c:	d025      	beq.n	8dcea <__swbuf_r+0x9e>
   8dc9e:	4638      	mov	r0, r7
   8dca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8dca2:	4621      	mov	r1, r4
   8dca4:	4630      	mov	r0, r6
   8dca6:	f7fc ffcd 	bl	8ac44 <__swsetup_r>
   8dcaa:	bb20      	cbnz	r0, 8dcf6 <__swbuf_r+0xaa>
   8dcac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8dcb0:	b2ed      	uxtb	r5, r5
   8dcb2:	b290      	uxth	r0, r2
   8dcb4:	0481      	lsls	r1, r0, #18
   8dcb6:	462f      	mov	r7, r5
   8dcb8:	6923      	ldr	r3, [r4, #16]
   8dcba:	d4dc      	bmi.n	8dc76 <__swbuf_r+0x2a>
   8dcbc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8dcbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8dcc2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8dcc6:	81a2      	strh	r2, [r4, #12]
   8dcc8:	6822      	ldr	r2, [r4, #0]
   8dcca:	6661      	str	r1, [r4, #100]	; 0x64
   8dccc:	6961      	ldr	r1, [r4, #20]
   8dcce:	1ad3      	subs	r3, r2, r3
   8dcd0:	4299      	cmp	r1, r3
   8dcd2:	dcd5      	bgt.n	8dc80 <__swbuf_r+0x34>
   8dcd4:	4621      	mov	r1, r4
   8dcd6:	4630      	mov	r0, r6
   8dcd8:	f7fe f8ba 	bl	8be50 <_fflush_r>
   8dcdc:	b958      	cbnz	r0, 8dcf6 <__swbuf_r+0xaa>
   8dcde:	2301      	movs	r3, #1
   8dce0:	6822      	ldr	r2, [r4, #0]
   8dce2:	e7ce      	b.n	8dc82 <__swbuf_r+0x36>
   8dce4:	f7fe f910 	bl	8bf08 <__sinit>
   8dce8:	e7b8      	b.n	8dc5c <__swbuf_r+0x10>
   8dcea:	4621      	mov	r1, r4
   8dcec:	4630      	mov	r0, r6
   8dcee:	f7fe f8af 	bl	8be50 <_fflush_r>
   8dcf2:	2800      	cmp	r0, #0
   8dcf4:	d0d3      	beq.n	8dc9e <__swbuf_r+0x52>
   8dcf6:	f04f 37ff 	mov.w	r7, #4294967295
   8dcfa:	e7d0      	b.n	8dc9e <__swbuf_r+0x52>

0008dcfc <_wcrtomb_r>:
   8dcfc:	b570      	push	{r4, r5, r6, lr}
   8dcfe:	4606      	mov	r6, r0
   8dd00:	461d      	mov	r5, r3
   8dd02:	b084      	sub	sp, #16
   8dd04:	b139      	cbz	r1, 8dd16 <_wcrtomb_r+0x1a>
   8dd06:	4c0b      	ldr	r4, [pc, #44]	; (8dd34 <_wcrtomb_r+0x38>)
   8dd08:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8dd0c:	47a0      	blx	r4
   8dd0e:	1c43      	adds	r3, r0, #1
   8dd10:	d00a      	beq.n	8dd28 <_wcrtomb_r+0x2c>
   8dd12:	b004      	add	sp, #16
   8dd14:	bd70      	pop	{r4, r5, r6, pc}
   8dd16:	460c      	mov	r4, r1
   8dd18:	4906      	ldr	r1, [pc, #24]	; (8dd34 <_wcrtomb_r+0x38>)
   8dd1a:	4622      	mov	r2, r4
   8dd1c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8dd20:	a901      	add	r1, sp, #4
   8dd22:	47a0      	blx	r4
   8dd24:	1c43      	adds	r3, r0, #1
   8dd26:	d1f4      	bne.n	8dd12 <_wcrtomb_r+0x16>
   8dd28:	2200      	movs	r2, #0
   8dd2a:	238a      	movs	r3, #138	; 0x8a
   8dd2c:	602a      	str	r2, [r5, #0]
   8dd2e:	6033      	str	r3, [r6, #0]
   8dd30:	b004      	add	sp, #16
   8dd32:	bd70      	pop	{r4, r5, r6, pc}
   8dd34:	20000934 	.word	0x20000934

0008dd38 <__ascii_wctomb>:
   8dd38:	4603      	mov	r3, r0
   8dd3a:	b149      	cbz	r1, 8dd50 <__ascii_wctomb+0x18>
   8dd3c:	2aff      	cmp	r2, #255	; 0xff
   8dd3e:	d802      	bhi.n	8dd46 <__ascii_wctomb+0xe>
   8dd40:	2001      	movs	r0, #1
   8dd42:	700a      	strb	r2, [r1, #0]
   8dd44:	4770      	bx	lr
   8dd46:	228a      	movs	r2, #138	; 0x8a
   8dd48:	f04f 30ff 	mov.w	r0, #4294967295
   8dd4c:	601a      	str	r2, [r3, #0]
   8dd4e:	4770      	bx	lr
   8dd50:	4608      	mov	r0, r1
   8dd52:	4770      	bx	lr

0008dd54 <_write_r>:
   8dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dd56:	460f      	mov	r7, r1
   8dd58:	2600      	movs	r6, #0
   8dd5a:	4d08      	ldr	r5, [pc, #32]	; (8dd7c <_write_r+0x28>)
   8dd5c:	4611      	mov	r1, r2
   8dd5e:	4604      	mov	r4, r0
   8dd60:	461a      	mov	r2, r3
   8dd62:	4638      	mov	r0, r7
   8dd64:	602e      	str	r6, [r5, #0]
   8dd66:	f7f9 ffdd 	bl	87d24 <_write>
   8dd6a:	1c43      	adds	r3, r0, #1
   8dd6c:	d000      	beq.n	8dd70 <_write_r+0x1c>
   8dd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8dd70:	682b      	ldr	r3, [r5, #0]
   8dd72:	2b00      	cmp	r3, #0
   8dd74:	d0fb      	beq.n	8dd6e <_write_r+0x1a>
   8dd76:	6023      	str	r3, [r4, #0]
   8dd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8dd7a:	bf00      	nop
   8dd7c:	20002460 	.word	0x20002460

0008dd80 <__register_exitproc>:
   8dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8dd84:	f8df a080 	ldr.w	sl, [pc, #128]	; 8de08 <__register_exitproc+0x88>
   8dd88:	4606      	mov	r6, r0
   8dd8a:	f8da 0000 	ldr.w	r0, [sl]
   8dd8e:	4698      	mov	r8, r3
   8dd90:	460f      	mov	r7, r1
   8dd92:	4691      	mov	r9, r2
   8dd94:	f7fe fc8a 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8dd98:	4b1a      	ldr	r3, [pc, #104]	; (8de04 <__register_exitproc+0x84>)
   8dd9a:	681b      	ldr	r3, [r3, #0]
   8dd9c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8dda0:	b324      	cbz	r4, 8ddec <__register_exitproc+0x6c>
   8dda2:	6865      	ldr	r5, [r4, #4]
   8dda4:	2d1f      	cmp	r5, #31
   8dda6:	dc26      	bgt.n	8ddf6 <__register_exitproc+0x76>
   8dda8:	b95e      	cbnz	r6, 8ddc2 <__register_exitproc+0x42>
   8ddaa:	1c6b      	adds	r3, r5, #1
   8ddac:	3502      	adds	r5, #2
   8ddae:	f8da 0000 	ldr.w	r0, [sl]
   8ddb2:	6063      	str	r3, [r4, #4]
   8ddb4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8ddb8:	f7fe fc7a 	bl	8c6b0 <__retarget_lock_release_recursive>
   8ddbc:	2000      	movs	r0, #0
   8ddbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ddc2:	2301      	movs	r3, #1
   8ddc4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8ddc8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8ddcc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8ddd0:	40ab      	lsls	r3, r5
   8ddd2:	431a      	orrs	r2, r3
   8ddd4:	2e02      	cmp	r6, #2
   8ddd6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8ddda:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8ddde:	d1e4      	bne.n	8ddaa <__register_exitproc+0x2a>
   8dde0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8dde4:	4313      	orrs	r3, r2
   8dde6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8ddea:	e7de      	b.n	8ddaa <__register_exitproc+0x2a>
   8ddec:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8ddf0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8ddf4:	e7d5      	b.n	8dda2 <__register_exitproc+0x22>
   8ddf6:	f8da 0000 	ldr.w	r0, [sl]
   8ddfa:	f7fe fc59 	bl	8c6b0 <__retarget_lock_release_recursive>
   8ddfe:	f04f 30ff 	mov.w	r0, #4294967295
   8de02:	e7dc      	b.n	8ddbe <__register_exitproc+0x3e>
   8de04:	0008eb08 	.word	0x0008eb08
   8de08:	20000930 	.word	0x20000930

0008de0c <__assert_func>:
   8de0c:	4614      	mov	r4, r2
   8de0e:	b500      	push	{lr}
   8de10:	4d09      	ldr	r5, [pc, #36]	; (8de38 <__assert_func+0x2c>)
   8de12:	461a      	mov	r2, r3
   8de14:	4603      	mov	r3, r0
   8de16:	6828      	ldr	r0, [r5, #0]
   8de18:	b085      	sub	sp, #20
   8de1a:	68c0      	ldr	r0, [r0, #12]
   8de1c:	b144      	cbz	r4, 8de30 <__assert_func+0x24>
   8de1e:	4d07      	ldr	r5, [pc, #28]	; (8de3c <__assert_func+0x30>)
   8de20:	9100      	str	r1, [sp, #0]
   8de22:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8de26:	4906      	ldr	r1, [pc, #24]	; (8de40 <__assert_func+0x34>)
   8de28:	f000 f8b6 	bl	8df98 <fiprintf>
   8de2c:	f000 f91c 	bl	8e068 <abort>
   8de30:	4d04      	ldr	r5, [pc, #16]	; (8de44 <__assert_func+0x38>)
   8de32:	462c      	mov	r4, r5
   8de34:	e7f4      	b.n	8de20 <__assert_func+0x14>
   8de36:	bf00      	nop
   8de38:	20000504 	.word	0x20000504
   8de3c:	0008edbc 	.word	0x0008edbc
   8de40:	0008edcc 	.word	0x0008edcc
   8de44:	0008edc8 	.word	0x0008edc8

0008de48 <_calloc_r>:
   8de48:	b510      	push	{r4, lr}
   8de4a:	fb02 f101 	mul.w	r1, r2, r1
   8de4e:	f7fe fca9 	bl	8c7a4 <_malloc_r>
   8de52:	4604      	mov	r4, r0
   8de54:	b168      	cbz	r0, 8de72 <_calloc_r+0x2a>
   8de56:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8de5a:	f022 0203 	bic.w	r2, r2, #3
   8de5e:	3a04      	subs	r2, #4
   8de60:	2a24      	cmp	r2, #36	; 0x24
   8de62:	d818      	bhi.n	8de96 <_calloc_r+0x4e>
   8de64:	2a13      	cmp	r2, #19
   8de66:	d806      	bhi.n	8de76 <_calloc_r+0x2e>
   8de68:	4602      	mov	r2, r0
   8de6a:	2300      	movs	r3, #0
   8de6c:	e9c2 3300 	strd	r3, r3, [r2]
   8de70:	6093      	str	r3, [r2, #8]
   8de72:	4620      	mov	r0, r4
   8de74:	bd10      	pop	{r4, pc}
   8de76:	2300      	movs	r3, #0
   8de78:	2a1b      	cmp	r2, #27
   8de7a:	e9c0 3300 	strd	r3, r3, [r0]
   8de7e:	d90f      	bls.n	8dea0 <_calloc_r+0x58>
   8de80:	2a24      	cmp	r2, #36	; 0x24
   8de82:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8de86:	bf0a      	itet	eq
   8de88:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8de8c:	f100 0210 	addne.w	r2, r0, #16
   8de90:	f100 0218 	addeq.w	r2, r0, #24
   8de94:	e7e9      	b.n	8de6a <_calloc_r+0x22>
   8de96:	2100      	movs	r1, #0
   8de98:	f7fa f9a4 	bl	881e4 <memset>
   8de9c:	4620      	mov	r0, r4
   8de9e:	bd10      	pop	{r4, pc}
   8dea0:	f100 0208 	add.w	r2, r0, #8
   8dea4:	e7e1      	b.n	8de6a <_calloc_r+0x22>
   8dea6:	bf00      	nop

0008dea8 <_close_r>:
   8dea8:	2200      	movs	r2, #0
   8deaa:	b538      	push	{r3, r4, r5, lr}
   8deac:	4d06      	ldr	r5, [pc, #24]	; (8dec8 <_close_r+0x20>)
   8deae:	4604      	mov	r4, r0
   8deb0:	4608      	mov	r0, r1
   8deb2:	602a      	str	r2, [r5, #0]
   8deb4:	f7f5 fdf4 	bl	83aa0 <_close>
   8deb8:	1c43      	adds	r3, r0, #1
   8deba:	d000      	beq.n	8debe <_close_r+0x16>
   8debc:	bd38      	pop	{r3, r4, r5, pc}
   8debe:	682b      	ldr	r3, [r5, #0]
   8dec0:	2b00      	cmp	r3, #0
   8dec2:	d0fb      	beq.n	8debc <_close_r+0x14>
   8dec4:	6023      	str	r3, [r4, #0]
   8dec6:	bd38      	pop	{r3, r4, r5, pc}
   8dec8:	20002460 	.word	0x20002460

0008decc <_fclose_r>:
   8decc:	b570      	push	{r4, r5, r6, lr}
   8dece:	2900      	cmp	r1, #0
   8ded0:	d04b      	beq.n	8df6a <_fclose_r+0x9e>
   8ded2:	460c      	mov	r4, r1
   8ded4:	4605      	mov	r5, r0
   8ded6:	b110      	cbz	r0, 8dede <_fclose_r+0x12>
   8ded8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8deda:	2b00      	cmp	r3, #0
   8dedc:	d048      	beq.n	8df70 <_fclose_r+0xa4>
   8dede:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8dee0:	07d8      	lsls	r0, r3, #31
   8dee2:	d534      	bpl.n	8df4e <_fclose_r+0x82>
   8dee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8dee8:	2b00      	cmp	r3, #0
   8deea:	d03e      	beq.n	8df6a <_fclose_r+0x9e>
   8deec:	4621      	mov	r1, r4
   8deee:	4628      	mov	r0, r5
   8def0:	f7fd ff16 	bl	8bd20 <__sflush_r>
   8def4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8def6:	4606      	mov	r6, r0
   8def8:	b133      	cbz	r3, 8df08 <_fclose_r+0x3c>
   8defa:	4628      	mov	r0, r5
   8defc:	69e1      	ldr	r1, [r4, #28]
   8defe:	4798      	blx	r3
   8df00:	2800      	cmp	r0, #0
   8df02:	bfb8      	it	lt
   8df04:	f04f 36ff 	movlt.w	r6, #4294967295
   8df08:	89a3      	ldrh	r3, [r4, #12]
   8df0a:	061a      	lsls	r2, r3, #24
   8df0c:	d43b      	bmi.n	8df86 <_fclose_r+0xba>
   8df0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8df10:	b141      	cbz	r1, 8df24 <_fclose_r+0x58>
   8df12:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8df16:	4299      	cmp	r1, r3
   8df18:	d002      	beq.n	8df20 <_fclose_r+0x54>
   8df1a:	4628      	mov	r0, r5
   8df1c:	f7fe f918 	bl	8c150 <_free_r>
   8df20:	2300      	movs	r3, #0
   8df22:	6323      	str	r3, [r4, #48]	; 0x30
   8df24:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8df26:	b121      	cbz	r1, 8df32 <_fclose_r+0x66>
   8df28:	4628      	mov	r0, r5
   8df2a:	f7fe f911 	bl	8c150 <_free_r>
   8df2e:	2300      	movs	r3, #0
   8df30:	6463      	str	r3, [r4, #68]	; 0x44
   8df32:	f7fe f817 	bl	8bf64 <__sfp_lock_acquire>
   8df36:	2200      	movs	r2, #0
   8df38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8df3a:	81a2      	strh	r2, [r4, #12]
   8df3c:	07db      	lsls	r3, r3, #31
   8df3e:	d527      	bpl.n	8df90 <_fclose_r+0xc4>
   8df40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8df42:	f7fe fbb1 	bl	8c6a8 <__retarget_lock_close_recursive>
   8df46:	f7fe f813 	bl	8bf70 <__sfp_lock_release>
   8df4a:	4630      	mov	r0, r6
   8df4c:	bd70      	pop	{r4, r5, r6, pc}
   8df4e:	89a3      	ldrh	r3, [r4, #12]
   8df50:	0599      	lsls	r1, r3, #22
   8df52:	d4cb      	bmi.n	8deec <_fclose_r+0x20>
   8df54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8df56:	f7fe fba9 	bl	8c6ac <__retarget_lock_acquire_recursive>
   8df5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8df5e:	2b00      	cmp	r3, #0
   8df60:	d1c4      	bne.n	8deec <_fclose_r+0x20>
   8df62:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8df64:	f016 0601 	ands.w	r6, r6, #1
   8df68:	d008      	beq.n	8df7c <_fclose_r+0xb0>
   8df6a:	2600      	movs	r6, #0
   8df6c:	4630      	mov	r0, r6
   8df6e:	bd70      	pop	{r4, r5, r6, pc}
   8df70:	f7fd ffca 	bl	8bf08 <__sinit>
   8df74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8df76:	07d8      	lsls	r0, r3, #31
   8df78:	d4b4      	bmi.n	8dee4 <_fclose_r+0x18>
   8df7a:	e7e8      	b.n	8df4e <_fclose_r+0x82>
   8df7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8df7e:	f7fe fb97 	bl	8c6b0 <__retarget_lock_release_recursive>
   8df82:	4630      	mov	r0, r6
   8df84:	bd70      	pop	{r4, r5, r6, pc}
   8df86:	4628      	mov	r0, r5
   8df88:	6921      	ldr	r1, [r4, #16]
   8df8a:	f7fe f8e1 	bl	8c150 <_free_r>
   8df8e:	e7be      	b.n	8df0e <_fclose_r+0x42>
   8df90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8df92:	f7fe fb8d 	bl	8c6b0 <__retarget_lock_release_recursive>
   8df96:	e7d3      	b.n	8df40 <_fclose_r+0x74>

0008df98 <fiprintf>:
   8df98:	b40e      	push	{r1, r2, r3}
   8df9a:	b510      	push	{r4, lr}
   8df9c:	b083      	sub	sp, #12
   8df9e:	ab05      	add	r3, sp, #20
   8dfa0:	4c06      	ldr	r4, [pc, #24]	; (8dfbc <fiprintf+0x24>)
   8dfa2:	f853 2b04 	ldr.w	r2, [r3], #4
   8dfa6:	4601      	mov	r1, r0
   8dfa8:	6820      	ldr	r0, [r4, #0]
   8dfaa:	9301      	str	r3, [sp, #4]
   8dfac:	f7fb ff70 	bl	89e90 <_vfiprintf_r>
   8dfb0:	b003      	add	sp, #12
   8dfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8dfb6:	b003      	add	sp, #12
   8dfb8:	4770      	bx	lr
   8dfba:	bf00      	nop
   8dfbc:	20000504 	.word	0x20000504

0008dfc0 <_fstat_r>:
   8dfc0:	b570      	push	{r4, r5, r6, lr}
   8dfc2:	460c      	mov	r4, r1
   8dfc4:	4603      	mov	r3, r0
   8dfc6:	2600      	movs	r6, #0
   8dfc8:	4d07      	ldr	r5, [pc, #28]	; (8dfe8 <_fstat_r+0x28>)
   8dfca:	4620      	mov	r0, r4
   8dfcc:	4611      	mov	r1, r2
   8dfce:	461c      	mov	r4, r3
   8dfd0:	602e      	str	r6, [r5, #0]
   8dfd2:	f7f5 fd70 	bl	83ab6 <_fstat>
   8dfd6:	1c43      	adds	r3, r0, #1
   8dfd8:	d000      	beq.n	8dfdc <_fstat_r+0x1c>
   8dfda:	bd70      	pop	{r4, r5, r6, pc}
   8dfdc:	682b      	ldr	r3, [r5, #0]
   8dfde:	2b00      	cmp	r3, #0
   8dfe0:	d0fb      	beq.n	8dfda <_fstat_r+0x1a>
   8dfe2:	6023      	str	r3, [r4, #0]
   8dfe4:	bd70      	pop	{r4, r5, r6, pc}
   8dfe6:	bf00      	nop
   8dfe8:	20002460 	.word	0x20002460

0008dfec <_isatty_r>:
   8dfec:	2200      	movs	r2, #0
   8dfee:	b538      	push	{r3, r4, r5, lr}
   8dff0:	4d06      	ldr	r5, [pc, #24]	; (8e00c <_isatty_r+0x20>)
   8dff2:	4604      	mov	r4, r0
   8dff4:	4608      	mov	r0, r1
   8dff6:	602a      	str	r2, [r5, #0]
   8dff8:	f7f5 fd6c 	bl	83ad4 <_isatty>
   8dffc:	1c43      	adds	r3, r0, #1
   8dffe:	d000      	beq.n	8e002 <_isatty_r+0x16>
   8e000:	bd38      	pop	{r3, r4, r5, pc}
   8e002:	682b      	ldr	r3, [r5, #0]
   8e004:	2b00      	cmp	r3, #0
   8e006:	d0fb      	beq.n	8e000 <_isatty_r+0x14>
   8e008:	6023      	str	r3, [r4, #0]
   8e00a:	bd38      	pop	{r3, r4, r5, pc}
   8e00c:	20002460 	.word	0x20002460

0008e010 <_lseek_r>:
   8e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8e012:	460f      	mov	r7, r1
   8e014:	2600      	movs	r6, #0
   8e016:	4d08      	ldr	r5, [pc, #32]	; (8e038 <_lseek_r+0x28>)
   8e018:	4611      	mov	r1, r2
   8e01a:	4604      	mov	r4, r0
   8e01c:	461a      	mov	r2, r3
   8e01e:	4638      	mov	r0, r7
   8e020:	602e      	str	r6, [r5, #0]
   8e022:	f7f5 fd61 	bl	83ae8 <_lseek>
   8e026:	1c43      	adds	r3, r0, #1
   8e028:	d000      	beq.n	8e02c <_lseek_r+0x1c>
   8e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8e02c:	682b      	ldr	r3, [r5, #0]
   8e02e:	2b00      	cmp	r3, #0
   8e030:	d0fb      	beq.n	8e02a <_lseek_r+0x1a>
   8e032:	6023      	str	r3, [r4, #0]
   8e034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8e036:	bf00      	nop
   8e038:	20002460 	.word	0x20002460

0008e03c <_read_r>:
   8e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8e03e:	460f      	mov	r7, r1
   8e040:	2600      	movs	r6, #0
   8e042:	4d08      	ldr	r5, [pc, #32]	; (8e064 <_read_r+0x28>)
   8e044:	4611      	mov	r1, r2
   8e046:	4604      	mov	r4, r0
   8e048:	461a      	mov	r2, r3
   8e04a:	4638      	mov	r0, r7
   8e04c:	602e      	str	r6, [r5, #0]
   8e04e:	f7f5 f92b 	bl	832a8 <_read>
   8e052:	1c43      	adds	r3, r0, #1
   8e054:	d000      	beq.n	8e058 <_read_r+0x1c>
   8e056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8e058:	682b      	ldr	r3, [r5, #0]
   8e05a:	2b00      	cmp	r3, #0
   8e05c:	d0fb      	beq.n	8e056 <_read_r+0x1a>
   8e05e:	6023      	str	r3, [r4, #0]
   8e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8e062:	bf00      	nop
   8e064:	20002460 	.word	0x20002460

0008e068 <abort>:
   8e068:	2006      	movs	r0, #6
   8e06a:	b508      	push	{r3, lr}
   8e06c:	f000 f830 	bl	8e0d0 <raise>
   8e070:	2001      	movs	r0, #1
   8e072:	f7f5 fd45 	bl	83b00 <_exit>
   8e076:	bf00      	nop

0008e078 <_raise_r>:
   8e078:	291f      	cmp	r1, #31
   8e07a:	b538      	push	{r3, r4, r5, lr}
   8e07c:	4605      	mov	r5, r0
   8e07e:	d821      	bhi.n	8e0c4 <_raise_r+0x4c>
   8e080:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8e084:	460c      	mov	r4, r1
   8e086:	b16a      	cbz	r2, 8e0a4 <_raise_r+0x2c>
   8e088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8e08c:	b153      	cbz	r3, 8e0a4 <_raise_r+0x2c>
   8e08e:	2b01      	cmp	r3, #1
   8e090:	d016      	beq.n	8e0c0 <_raise_r+0x48>
   8e092:	1c59      	adds	r1, r3, #1
   8e094:	d010      	beq.n	8e0b8 <_raise_r+0x40>
   8e096:	2500      	movs	r5, #0
   8e098:	4620      	mov	r0, r4
   8e09a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8e09e:	4798      	blx	r3
   8e0a0:	4628      	mov	r0, r5
   8e0a2:	bd38      	pop	{r3, r4, r5, pc}
   8e0a4:	4628      	mov	r0, r5
   8e0a6:	f000 f831 	bl	8e10c <_getpid_r>
   8e0aa:	4622      	mov	r2, r4
   8e0ac:	4601      	mov	r1, r0
   8e0ae:	4628      	mov	r0, r5
   8e0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8e0b4:	f000 b814 	b.w	8e0e0 <_kill_r>
   8e0b8:	2316      	movs	r3, #22
   8e0ba:	2001      	movs	r0, #1
   8e0bc:	602b      	str	r3, [r5, #0]
   8e0be:	bd38      	pop	{r3, r4, r5, pc}
   8e0c0:	2000      	movs	r0, #0
   8e0c2:	bd38      	pop	{r3, r4, r5, pc}
   8e0c4:	2316      	movs	r3, #22
   8e0c6:	f04f 30ff 	mov.w	r0, #4294967295
   8e0ca:	602b      	str	r3, [r5, #0]
   8e0cc:	bd38      	pop	{r3, r4, r5, pc}
   8e0ce:	bf00      	nop

0008e0d0 <raise>:
   8e0d0:	4b02      	ldr	r3, [pc, #8]	; (8e0dc <raise+0xc>)
   8e0d2:	4601      	mov	r1, r0
   8e0d4:	6818      	ldr	r0, [r3, #0]
   8e0d6:	f7ff bfcf 	b.w	8e078 <_raise_r>
   8e0da:	bf00      	nop
   8e0dc:	20000504 	.word	0x20000504

0008e0e0 <_kill_r>:
   8e0e0:	b570      	push	{r4, r5, r6, lr}
   8e0e2:	460c      	mov	r4, r1
   8e0e4:	4603      	mov	r3, r0
   8e0e6:	2600      	movs	r6, #0
   8e0e8:	4d07      	ldr	r5, [pc, #28]	; (8e108 <_kill_r+0x28>)
   8e0ea:	4620      	mov	r0, r4
   8e0ec:	4611      	mov	r1, r2
   8e0ee:	461c      	mov	r4, r3
   8e0f0:	602e      	str	r6, [r5, #0]
   8e0f2:	f7f5 fd13 	bl	83b1c <_kill>
   8e0f6:	1c43      	adds	r3, r0, #1
   8e0f8:	d000      	beq.n	8e0fc <_kill_r+0x1c>
   8e0fa:	bd70      	pop	{r4, r5, r6, pc}
   8e0fc:	682b      	ldr	r3, [r5, #0]
   8e0fe:	2b00      	cmp	r3, #0
   8e100:	d0fb      	beq.n	8e0fa <_kill_r+0x1a>
   8e102:	6023      	str	r3, [r4, #0]
   8e104:	bd70      	pop	{r4, r5, r6, pc}
   8e106:	bf00      	nop
   8e108:	20002460 	.word	0x20002460

0008e10c <_getpid_r>:
   8e10c:	f7f5 bd10 	b.w	83b30 <_getpid>

0008e110 <__aeabi_drsub>:
   8e110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8e114:	e002      	b.n	8e11c <__adddf3>
   8e116:	bf00      	nop

0008e118 <__aeabi_dsub>:
   8e118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008e11c <__adddf3>:
   8e11c:	b530      	push	{r4, r5, lr}
   8e11e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8e122:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8e126:	ea94 0f05 	teq	r4, r5
   8e12a:	bf08      	it	eq
   8e12c:	ea90 0f02 	teqeq	r0, r2
   8e130:	bf1f      	itttt	ne
   8e132:	ea54 0c00 	orrsne.w	ip, r4, r0
   8e136:	ea55 0c02 	orrsne.w	ip, r5, r2
   8e13a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8e13e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8e142:	f000 80e2 	beq.w	8e30a <__adddf3+0x1ee>
   8e146:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8e14a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8e14e:	bfb8      	it	lt
   8e150:	426d      	neglt	r5, r5
   8e152:	dd0c      	ble.n	8e16e <__adddf3+0x52>
   8e154:	442c      	add	r4, r5
   8e156:	ea80 0202 	eor.w	r2, r0, r2
   8e15a:	ea81 0303 	eor.w	r3, r1, r3
   8e15e:	ea82 0000 	eor.w	r0, r2, r0
   8e162:	ea83 0101 	eor.w	r1, r3, r1
   8e166:	ea80 0202 	eor.w	r2, r0, r2
   8e16a:	ea81 0303 	eor.w	r3, r1, r3
   8e16e:	2d36      	cmp	r5, #54	; 0x36
   8e170:	bf88      	it	hi
   8e172:	bd30      	pophi	{r4, r5, pc}
   8e174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8e178:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8e17c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8e180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8e184:	d002      	beq.n	8e18c <__adddf3+0x70>
   8e186:	4240      	negs	r0, r0
   8e188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8e18c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8e190:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8e194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8e198:	d002      	beq.n	8e1a0 <__adddf3+0x84>
   8e19a:	4252      	negs	r2, r2
   8e19c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8e1a0:	ea94 0f05 	teq	r4, r5
   8e1a4:	f000 80a7 	beq.w	8e2f6 <__adddf3+0x1da>
   8e1a8:	f1a4 0401 	sub.w	r4, r4, #1
   8e1ac:	f1d5 0e20 	rsbs	lr, r5, #32
   8e1b0:	db0d      	blt.n	8e1ce <__adddf3+0xb2>
   8e1b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8e1b6:	fa22 f205 	lsr.w	r2, r2, r5
   8e1ba:	1880      	adds	r0, r0, r2
   8e1bc:	f141 0100 	adc.w	r1, r1, #0
   8e1c0:	fa03 f20e 	lsl.w	r2, r3, lr
   8e1c4:	1880      	adds	r0, r0, r2
   8e1c6:	fa43 f305 	asr.w	r3, r3, r5
   8e1ca:	4159      	adcs	r1, r3
   8e1cc:	e00e      	b.n	8e1ec <__adddf3+0xd0>
   8e1ce:	f1a5 0520 	sub.w	r5, r5, #32
   8e1d2:	f10e 0e20 	add.w	lr, lr, #32
   8e1d6:	2a01      	cmp	r2, #1
   8e1d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8e1dc:	bf28      	it	cs
   8e1de:	f04c 0c02 	orrcs.w	ip, ip, #2
   8e1e2:	fa43 f305 	asr.w	r3, r3, r5
   8e1e6:	18c0      	adds	r0, r0, r3
   8e1e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8e1ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8e1f0:	d507      	bpl.n	8e202 <__adddf3+0xe6>
   8e1f2:	f04f 0e00 	mov.w	lr, #0
   8e1f6:	f1dc 0c00 	rsbs	ip, ip, #0
   8e1fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   8e1fe:	eb6e 0101 	sbc.w	r1, lr, r1
   8e202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8e206:	d31b      	bcc.n	8e240 <__adddf3+0x124>
   8e208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8e20c:	d30c      	bcc.n	8e228 <__adddf3+0x10c>
   8e20e:	0849      	lsrs	r1, r1, #1
   8e210:	ea5f 0030 	movs.w	r0, r0, rrx
   8e214:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8e218:	f104 0401 	add.w	r4, r4, #1
   8e21c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8e220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8e224:	f080 809a 	bcs.w	8e35c <__adddf3+0x240>
   8e228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8e22c:	bf08      	it	eq
   8e22e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8e232:	f150 0000 	adcs.w	r0, r0, #0
   8e236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e23a:	ea41 0105 	orr.w	r1, r1, r5
   8e23e:	bd30      	pop	{r4, r5, pc}
   8e240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8e244:	4140      	adcs	r0, r0
   8e246:	eb41 0101 	adc.w	r1, r1, r1
   8e24a:	3c01      	subs	r4, #1
   8e24c:	bf28      	it	cs
   8e24e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8e252:	d2e9      	bcs.n	8e228 <__adddf3+0x10c>
   8e254:	f091 0f00 	teq	r1, #0
   8e258:	bf04      	itt	eq
   8e25a:	4601      	moveq	r1, r0
   8e25c:	2000      	moveq	r0, #0
   8e25e:	fab1 f381 	clz	r3, r1
   8e262:	bf08      	it	eq
   8e264:	3320      	addeq	r3, #32
   8e266:	f1a3 030b 	sub.w	r3, r3, #11
   8e26a:	f1b3 0220 	subs.w	r2, r3, #32
   8e26e:	da0c      	bge.n	8e28a <__adddf3+0x16e>
   8e270:	320c      	adds	r2, #12
   8e272:	dd08      	ble.n	8e286 <__adddf3+0x16a>
   8e274:	f102 0c14 	add.w	ip, r2, #20
   8e278:	f1c2 020c 	rsb	r2, r2, #12
   8e27c:	fa01 f00c 	lsl.w	r0, r1, ip
   8e280:	fa21 f102 	lsr.w	r1, r1, r2
   8e284:	e00c      	b.n	8e2a0 <__adddf3+0x184>
   8e286:	f102 0214 	add.w	r2, r2, #20
   8e28a:	bfd8      	it	le
   8e28c:	f1c2 0c20 	rsble	ip, r2, #32
   8e290:	fa01 f102 	lsl.w	r1, r1, r2
   8e294:	fa20 fc0c 	lsr.w	ip, r0, ip
   8e298:	bfdc      	itt	le
   8e29a:	ea41 010c 	orrle.w	r1, r1, ip
   8e29e:	4090      	lslle	r0, r2
   8e2a0:	1ae4      	subs	r4, r4, r3
   8e2a2:	bfa2      	ittt	ge
   8e2a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8e2a8:	4329      	orrge	r1, r5
   8e2aa:	bd30      	popge	{r4, r5, pc}
   8e2ac:	ea6f 0404 	mvn.w	r4, r4
   8e2b0:	3c1f      	subs	r4, #31
   8e2b2:	da1c      	bge.n	8e2ee <__adddf3+0x1d2>
   8e2b4:	340c      	adds	r4, #12
   8e2b6:	dc0e      	bgt.n	8e2d6 <__adddf3+0x1ba>
   8e2b8:	f104 0414 	add.w	r4, r4, #20
   8e2bc:	f1c4 0220 	rsb	r2, r4, #32
   8e2c0:	fa20 f004 	lsr.w	r0, r0, r4
   8e2c4:	fa01 f302 	lsl.w	r3, r1, r2
   8e2c8:	ea40 0003 	orr.w	r0, r0, r3
   8e2cc:	fa21 f304 	lsr.w	r3, r1, r4
   8e2d0:	ea45 0103 	orr.w	r1, r5, r3
   8e2d4:	bd30      	pop	{r4, r5, pc}
   8e2d6:	f1c4 040c 	rsb	r4, r4, #12
   8e2da:	f1c4 0220 	rsb	r2, r4, #32
   8e2de:	fa20 f002 	lsr.w	r0, r0, r2
   8e2e2:	fa01 f304 	lsl.w	r3, r1, r4
   8e2e6:	ea40 0003 	orr.w	r0, r0, r3
   8e2ea:	4629      	mov	r1, r5
   8e2ec:	bd30      	pop	{r4, r5, pc}
   8e2ee:	fa21 f004 	lsr.w	r0, r1, r4
   8e2f2:	4629      	mov	r1, r5
   8e2f4:	bd30      	pop	{r4, r5, pc}
   8e2f6:	f094 0f00 	teq	r4, #0
   8e2fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8e2fe:	bf06      	itte	eq
   8e300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8e304:	3401      	addeq	r4, #1
   8e306:	3d01      	subne	r5, #1
   8e308:	e74e      	b.n	8e1a8 <__adddf3+0x8c>
   8e30a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8e30e:	bf18      	it	ne
   8e310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8e314:	d029      	beq.n	8e36a <__adddf3+0x24e>
   8e316:	ea94 0f05 	teq	r4, r5
   8e31a:	bf08      	it	eq
   8e31c:	ea90 0f02 	teqeq	r0, r2
   8e320:	d005      	beq.n	8e32e <__adddf3+0x212>
   8e322:	ea54 0c00 	orrs.w	ip, r4, r0
   8e326:	bf04      	itt	eq
   8e328:	4619      	moveq	r1, r3
   8e32a:	4610      	moveq	r0, r2
   8e32c:	bd30      	pop	{r4, r5, pc}
   8e32e:	ea91 0f03 	teq	r1, r3
   8e332:	bf1e      	ittt	ne
   8e334:	2100      	movne	r1, #0
   8e336:	2000      	movne	r0, #0
   8e338:	bd30      	popne	{r4, r5, pc}
   8e33a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8e33e:	d105      	bne.n	8e34c <__adddf3+0x230>
   8e340:	0040      	lsls	r0, r0, #1
   8e342:	4149      	adcs	r1, r1
   8e344:	bf28      	it	cs
   8e346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8e34a:	bd30      	pop	{r4, r5, pc}
   8e34c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8e350:	bf3c      	itt	cc
   8e352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8e356:	bd30      	popcc	{r4, r5, pc}
   8e358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8e35c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8e360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8e364:	f04f 0000 	mov.w	r0, #0
   8e368:	bd30      	pop	{r4, r5, pc}
   8e36a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8e36e:	bf1a      	itte	ne
   8e370:	4619      	movne	r1, r3
   8e372:	4610      	movne	r0, r2
   8e374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8e378:	bf1c      	itt	ne
   8e37a:	460b      	movne	r3, r1
   8e37c:	4602      	movne	r2, r0
   8e37e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8e382:	bf06      	itte	eq
   8e384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8e388:	ea91 0f03 	teqeq	r1, r3
   8e38c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8e390:	bd30      	pop	{r4, r5, pc}
   8e392:	bf00      	nop

0008e394 <__aeabi_ui2d>:
   8e394:	f090 0f00 	teq	r0, #0
   8e398:	bf04      	itt	eq
   8e39a:	2100      	moveq	r1, #0
   8e39c:	4770      	bxeq	lr
   8e39e:	b530      	push	{r4, r5, lr}
   8e3a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8e3a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8e3a8:	f04f 0500 	mov.w	r5, #0
   8e3ac:	f04f 0100 	mov.w	r1, #0
   8e3b0:	e750      	b.n	8e254 <__adddf3+0x138>
   8e3b2:	bf00      	nop

0008e3b4 <__aeabi_i2d>:
   8e3b4:	f090 0f00 	teq	r0, #0
   8e3b8:	bf04      	itt	eq
   8e3ba:	2100      	moveq	r1, #0
   8e3bc:	4770      	bxeq	lr
   8e3be:	b530      	push	{r4, r5, lr}
   8e3c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8e3c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8e3c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8e3cc:	bf48      	it	mi
   8e3ce:	4240      	negmi	r0, r0
   8e3d0:	f04f 0100 	mov.w	r1, #0
   8e3d4:	e73e      	b.n	8e254 <__adddf3+0x138>
   8e3d6:	bf00      	nop

0008e3d8 <__aeabi_f2d>:
   8e3d8:	0042      	lsls	r2, r0, #1
   8e3da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8e3de:	ea4f 0131 	mov.w	r1, r1, rrx
   8e3e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8e3e6:	bf1f      	itttt	ne
   8e3e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8e3ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8e3f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8e3f4:	4770      	bxne	lr
   8e3f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8e3fa:	bf08      	it	eq
   8e3fc:	4770      	bxeq	lr
   8e3fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8e402:	bf04      	itt	eq
   8e404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8e408:	4770      	bxeq	lr
   8e40a:	b530      	push	{r4, r5, lr}
   8e40c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8e410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8e414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8e418:	e71c      	b.n	8e254 <__adddf3+0x138>
   8e41a:	bf00      	nop

0008e41c <__aeabi_ul2d>:
   8e41c:	ea50 0201 	orrs.w	r2, r0, r1
   8e420:	bf08      	it	eq
   8e422:	4770      	bxeq	lr
   8e424:	b530      	push	{r4, r5, lr}
   8e426:	f04f 0500 	mov.w	r5, #0
   8e42a:	e00a      	b.n	8e442 <__aeabi_l2d+0x16>

0008e42c <__aeabi_l2d>:
   8e42c:	ea50 0201 	orrs.w	r2, r0, r1
   8e430:	bf08      	it	eq
   8e432:	4770      	bxeq	lr
   8e434:	b530      	push	{r4, r5, lr}
   8e436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8e43a:	d502      	bpl.n	8e442 <__aeabi_l2d+0x16>
   8e43c:	4240      	negs	r0, r0
   8e43e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8e442:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8e446:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8e44a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8e44e:	f43f aed8 	beq.w	8e202 <__adddf3+0xe6>
   8e452:	f04f 0203 	mov.w	r2, #3
   8e456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8e45a:	bf18      	it	ne
   8e45c:	3203      	addne	r2, #3
   8e45e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8e462:	bf18      	it	ne
   8e464:	3203      	addne	r2, #3
   8e466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8e46a:	f1c2 0320 	rsb	r3, r2, #32
   8e46e:	fa00 fc03 	lsl.w	ip, r0, r3
   8e472:	fa20 f002 	lsr.w	r0, r0, r2
   8e476:	fa01 fe03 	lsl.w	lr, r1, r3
   8e47a:	ea40 000e 	orr.w	r0, r0, lr
   8e47e:	fa21 f102 	lsr.w	r1, r1, r2
   8e482:	4414      	add	r4, r2
   8e484:	e6bd      	b.n	8e202 <__adddf3+0xe6>
   8e486:	bf00      	nop

0008e488 <__aeabi_dmul>:
   8e488:	b570      	push	{r4, r5, r6, lr}
   8e48a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8e48e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8e492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8e496:	bf1d      	ittte	ne
   8e498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8e49c:	ea94 0f0c 	teqne	r4, ip
   8e4a0:	ea95 0f0c 	teqne	r5, ip
   8e4a4:	f000 f8de 	bleq	8e664 <__aeabi_dmul+0x1dc>
   8e4a8:	442c      	add	r4, r5
   8e4aa:	ea81 0603 	eor.w	r6, r1, r3
   8e4ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8e4b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8e4b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8e4ba:	bf18      	it	ne
   8e4bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8e4c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e4c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8e4c8:	d038      	beq.n	8e53c <__aeabi_dmul+0xb4>
   8e4ca:	fba0 ce02 	umull	ip, lr, r0, r2
   8e4ce:	f04f 0500 	mov.w	r5, #0
   8e4d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8e4d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8e4da:	fbe0 e503 	umlal	lr, r5, r0, r3
   8e4de:	f04f 0600 	mov.w	r6, #0
   8e4e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8e4e6:	f09c 0f00 	teq	ip, #0
   8e4ea:	bf18      	it	ne
   8e4ec:	f04e 0e01 	orrne.w	lr, lr, #1
   8e4f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8e4f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8e4f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8e4fc:	d204      	bcs.n	8e508 <__aeabi_dmul+0x80>
   8e4fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8e502:	416d      	adcs	r5, r5
   8e504:	eb46 0606 	adc.w	r6, r6, r6
   8e508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8e50c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8e510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8e514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8e518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8e51c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8e520:	bf88      	it	hi
   8e522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8e526:	d81e      	bhi.n	8e566 <__aeabi_dmul+0xde>
   8e528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8e52c:	bf08      	it	eq
   8e52e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8e532:	f150 0000 	adcs.w	r0, r0, #0
   8e536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e53a:	bd70      	pop	{r4, r5, r6, pc}
   8e53c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8e540:	ea46 0101 	orr.w	r1, r6, r1
   8e544:	ea40 0002 	orr.w	r0, r0, r2
   8e548:	ea81 0103 	eor.w	r1, r1, r3
   8e54c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8e550:	bfc2      	ittt	gt
   8e552:	ebd4 050c 	rsbsgt	r5, r4, ip
   8e556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8e55a:	bd70      	popgt	{r4, r5, r6, pc}
   8e55c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e560:	f04f 0e00 	mov.w	lr, #0
   8e564:	3c01      	subs	r4, #1
   8e566:	f300 80ab 	bgt.w	8e6c0 <__aeabi_dmul+0x238>
   8e56a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8e56e:	bfde      	ittt	le
   8e570:	2000      	movle	r0, #0
   8e572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8e576:	bd70      	pople	{r4, r5, r6, pc}
   8e578:	f1c4 0400 	rsb	r4, r4, #0
   8e57c:	3c20      	subs	r4, #32
   8e57e:	da35      	bge.n	8e5ec <__aeabi_dmul+0x164>
   8e580:	340c      	adds	r4, #12
   8e582:	dc1b      	bgt.n	8e5bc <__aeabi_dmul+0x134>
   8e584:	f104 0414 	add.w	r4, r4, #20
   8e588:	f1c4 0520 	rsb	r5, r4, #32
   8e58c:	fa00 f305 	lsl.w	r3, r0, r5
   8e590:	fa20 f004 	lsr.w	r0, r0, r4
   8e594:	fa01 f205 	lsl.w	r2, r1, r5
   8e598:	ea40 0002 	orr.w	r0, r0, r2
   8e59c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8e5a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8e5a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8e5a8:	fa21 f604 	lsr.w	r6, r1, r4
   8e5ac:	eb42 0106 	adc.w	r1, r2, r6
   8e5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8e5b4:	bf08      	it	eq
   8e5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8e5ba:	bd70      	pop	{r4, r5, r6, pc}
   8e5bc:	f1c4 040c 	rsb	r4, r4, #12
   8e5c0:	f1c4 0520 	rsb	r5, r4, #32
   8e5c4:	fa00 f304 	lsl.w	r3, r0, r4
   8e5c8:	fa20 f005 	lsr.w	r0, r0, r5
   8e5cc:	fa01 f204 	lsl.w	r2, r1, r4
   8e5d0:	ea40 0002 	orr.w	r0, r0, r2
   8e5d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e5d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8e5dc:	f141 0100 	adc.w	r1, r1, #0
   8e5e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8e5e4:	bf08      	it	eq
   8e5e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8e5ea:	bd70      	pop	{r4, r5, r6, pc}
   8e5ec:	f1c4 0520 	rsb	r5, r4, #32
   8e5f0:	fa00 f205 	lsl.w	r2, r0, r5
   8e5f4:	ea4e 0e02 	orr.w	lr, lr, r2
   8e5f8:	fa20 f304 	lsr.w	r3, r0, r4
   8e5fc:	fa01 f205 	lsl.w	r2, r1, r5
   8e600:	ea43 0302 	orr.w	r3, r3, r2
   8e604:	fa21 f004 	lsr.w	r0, r1, r4
   8e608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e60c:	fa21 f204 	lsr.w	r2, r1, r4
   8e610:	ea20 0002 	bic.w	r0, r0, r2
   8e614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8e618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8e61c:	bf08      	it	eq
   8e61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8e622:	bd70      	pop	{r4, r5, r6, pc}
   8e624:	f094 0f00 	teq	r4, #0
   8e628:	d10f      	bne.n	8e64a <__aeabi_dmul+0x1c2>
   8e62a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8e62e:	0040      	lsls	r0, r0, #1
   8e630:	eb41 0101 	adc.w	r1, r1, r1
   8e634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e638:	bf08      	it	eq
   8e63a:	3c01      	subeq	r4, #1
   8e63c:	d0f7      	beq.n	8e62e <__aeabi_dmul+0x1a6>
   8e63e:	ea41 0106 	orr.w	r1, r1, r6
   8e642:	f095 0f00 	teq	r5, #0
   8e646:	bf18      	it	ne
   8e648:	4770      	bxne	lr
   8e64a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8e64e:	0052      	lsls	r2, r2, #1
   8e650:	eb43 0303 	adc.w	r3, r3, r3
   8e654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8e658:	bf08      	it	eq
   8e65a:	3d01      	subeq	r5, #1
   8e65c:	d0f7      	beq.n	8e64e <__aeabi_dmul+0x1c6>
   8e65e:	ea43 0306 	orr.w	r3, r3, r6
   8e662:	4770      	bx	lr
   8e664:	ea94 0f0c 	teq	r4, ip
   8e668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e66c:	bf18      	it	ne
   8e66e:	ea95 0f0c 	teqne	r5, ip
   8e672:	d00c      	beq.n	8e68e <__aeabi_dmul+0x206>
   8e674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e678:	bf18      	it	ne
   8e67a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e67e:	d1d1      	bne.n	8e624 <__aeabi_dmul+0x19c>
   8e680:	ea81 0103 	eor.w	r1, r1, r3
   8e684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e688:	f04f 0000 	mov.w	r0, #0
   8e68c:	bd70      	pop	{r4, r5, r6, pc}
   8e68e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e692:	bf06      	itte	eq
   8e694:	4610      	moveq	r0, r2
   8e696:	4619      	moveq	r1, r3
   8e698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e69c:	d019      	beq.n	8e6d2 <__aeabi_dmul+0x24a>
   8e69e:	ea94 0f0c 	teq	r4, ip
   8e6a2:	d102      	bne.n	8e6aa <__aeabi_dmul+0x222>
   8e6a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8e6a8:	d113      	bne.n	8e6d2 <__aeabi_dmul+0x24a>
   8e6aa:	ea95 0f0c 	teq	r5, ip
   8e6ae:	d105      	bne.n	8e6bc <__aeabi_dmul+0x234>
   8e6b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8e6b4:	bf1c      	itt	ne
   8e6b6:	4610      	movne	r0, r2
   8e6b8:	4619      	movne	r1, r3
   8e6ba:	d10a      	bne.n	8e6d2 <__aeabi_dmul+0x24a>
   8e6bc:	ea81 0103 	eor.w	r1, r1, r3
   8e6c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e6c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e6c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8e6cc:	f04f 0000 	mov.w	r0, #0
   8e6d0:	bd70      	pop	{r4, r5, r6, pc}
   8e6d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e6d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8e6da:	bd70      	pop	{r4, r5, r6, pc}

0008e6dc <__aeabi_ddiv>:
   8e6dc:	b570      	push	{r4, r5, r6, lr}
   8e6de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8e6e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8e6e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8e6ea:	bf1d      	ittte	ne
   8e6ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8e6f0:	ea94 0f0c 	teqne	r4, ip
   8e6f4:	ea95 0f0c 	teqne	r5, ip
   8e6f8:	f000 f8a7 	bleq	8e84a <__aeabi_ddiv+0x16e>
   8e6fc:	eba4 0405 	sub.w	r4, r4, r5
   8e700:	ea81 0e03 	eor.w	lr, r1, r3
   8e704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e708:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8e70c:	f000 8088 	beq.w	8e820 <__aeabi_ddiv+0x144>
   8e710:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8e714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8e718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8e71c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8e720:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8e724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8e728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8e72c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8e730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8e734:	429d      	cmp	r5, r3
   8e736:	bf08      	it	eq
   8e738:	4296      	cmpeq	r6, r2
   8e73a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8e73e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8e742:	d202      	bcs.n	8e74a <__aeabi_ddiv+0x6e>
   8e744:	085b      	lsrs	r3, r3, #1
   8e746:	ea4f 0232 	mov.w	r2, r2, rrx
   8e74a:	1ab6      	subs	r6, r6, r2
   8e74c:	eb65 0503 	sbc.w	r5, r5, r3
   8e750:	085b      	lsrs	r3, r3, #1
   8e752:	ea4f 0232 	mov.w	r2, r2, rrx
   8e756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8e75a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8e75e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e762:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e766:	bf22      	ittt	cs
   8e768:	1ab6      	subcs	r6, r6, r2
   8e76a:	4675      	movcs	r5, lr
   8e76c:	ea40 000c 	orrcs.w	r0, r0, ip
   8e770:	085b      	lsrs	r3, r3, #1
   8e772:	ea4f 0232 	mov.w	r2, r2, rrx
   8e776:	ebb6 0e02 	subs.w	lr, r6, r2
   8e77a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e77e:	bf22      	ittt	cs
   8e780:	1ab6      	subcs	r6, r6, r2
   8e782:	4675      	movcs	r5, lr
   8e784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8e788:	085b      	lsrs	r3, r3, #1
   8e78a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e78e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e792:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e796:	bf22      	ittt	cs
   8e798:	1ab6      	subcs	r6, r6, r2
   8e79a:	4675      	movcs	r5, lr
   8e79c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8e7a0:	085b      	lsrs	r3, r3, #1
   8e7a2:	ea4f 0232 	mov.w	r2, r2, rrx
   8e7a6:	ebb6 0e02 	subs.w	lr, r6, r2
   8e7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e7ae:	bf22      	ittt	cs
   8e7b0:	1ab6      	subcs	r6, r6, r2
   8e7b2:	4675      	movcs	r5, lr
   8e7b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8e7b8:	ea55 0e06 	orrs.w	lr, r5, r6
   8e7bc:	d018      	beq.n	8e7f0 <__aeabi_ddiv+0x114>
   8e7be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8e7c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8e7c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8e7ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8e7ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8e7d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8e7d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8e7da:	d1c0      	bne.n	8e75e <__aeabi_ddiv+0x82>
   8e7dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e7e0:	d10b      	bne.n	8e7fa <__aeabi_ddiv+0x11e>
   8e7e2:	ea41 0100 	orr.w	r1, r1, r0
   8e7e6:	f04f 0000 	mov.w	r0, #0
   8e7ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8e7ee:	e7b6      	b.n	8e75e <__aeabi_ddiv+0x82>
   8e7f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e7f4:	bf04      	itt	eq
   8e7f6:	4301      	orreq	r1, r0
   8e7f8:	2000      	moveq	r0, #0
   8e7fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8e7fe:	bf88      	it	hi
   8e800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8e804:	f63f aeaf 	bhi.w	8e566 <__aeabi_dmul+0xde>
   8e808:	ebb5 0c03 	subs.w	ip, r5, r3
   8e80c:	bf04      	itt	eq
   8e80e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8e812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8e816:	f150 0000 	adcs.w	r0, r0, #0
   8e81a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e81e:	bd70      	pop	{r4, r5, r6, pc}
   8e820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8e824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8e828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8e82c:	bfc2      	ittt	gt
   8e82e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8e832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8e836:	bd70      	popgt	{r4, r5, r6, pc}
   8e838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e83c:	f04f 0e00 	mov.w	lr, #0
   8e840:	3c01      	subs	r4, #1
   8e842:	e690      	b.n	8e566 <__aeabi_dmul+0xde>
   8e844:	ea45 0e06 	orr.w	lr, r5, r6
   8e848:	e68d      	b.n	8e566 <__aeabi_dmul+0xde>
   8e84a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e84e:	ea94 0f0c 	teq	r4, ip
   8e852:	bf08      	it	eq
   8e854:	ea95 0f0c 	teqeq	r5, ip
   8e858:	f43f af3b 	beq.w	8e6d2 <__aeabi_dmul+0x24a>
   8e85c:	ea94 0f0c 	teq	r4, ip
   8e860:	d10a      	bne.n	8e878 <__aeabi_ddiv+0x19c>
   8e862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8e866:	f47f af34 	bne.w	8e6d2 <__aeabi_dmul+0x24a>
   8e86a:	ea95 0f0c 	teq	r5, ip
   8e86e:	f47f af25 	bne.w	8e6bc <__aeabi_dmul+0x234>
   8e872:	4610      	mov	r0, r2
   8e874:	4619      	mov	r1, r3
   8e876:	e72c      	b.n	8e6d2 <__aeabi_dmul+0x24a>
   8e878:	ea95 0f0c 	teq	r5, ip
   8e87c:	d106      	bne.n	8e88c <__aeabi_ddiv+0x1b0>
   8e87e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e882:	f43f aefd 	beq.w	8e680 <__aeabi_dmul+0x1f8>
   8e886:	4610      	mov	r0, r2
   8e888:	4619      	mov	r1, r3
   8e88a:	e722      	b.n	8e6d2 <__aeabi_dmul+0x24a>
   8e88c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e890:	bf18      	it	ne
   8e892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e896:	f47f aec5 	bne.w	8e624 <__aeabi_dmul+0x19c>
   8e89a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8e89e:	f47f af0d 	bne.w	8e6bc <__aeabi_dmul+0x234>
   8e8a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8e8a6:	f47f aeeb 	bne.w	8e680 <__aeabi_dmul+0x1f8>
   8e8aa:	e712      	b.n	8e6d2 <__aeabi_dmul+0x24a>

0008e8ac <__gedf2>:
   8e8ac:	f04f 3cff 	mov.w	ip, #4294967295
   8e8b0:	e006      	b.n	8e8c0 <__cmpdf2+0x4>
   8e8b2:	bf00      	nop

0008e8b4 <__ledf2>:
   8e8b4:	f04f 0c01 	mov.w	ip, #1
   8e8b8:	e002      	b.n	8e8c0 <__cmpdf2+0x4>
   8e8ba:	bf00      	nop

0008e8bc <__cmpdf2>:
   8e8bc:	f04f 0c01 	mov.w	ip, #1
   8e8c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8e8c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e8c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e8cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e8d0:	bf18      	it	ne
   8e8d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8e8d6:	d01b      	beq.n	8e910 <__cmpdf2+0x54>
   8e8d8:	b001      	add	sp, #4
   8e8da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8e8de:	bf0c      	ite	eq
   8e8e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8e8e4:	ea91 0f03 	teqne	r1, r3
   8e8e8:	bf02      	ittt	eq
   8e8ea:	ea90 0f02 	teqeq	r0, r2
   8e8ee:	2000      	moveq	r0, #0
   8e8f0:	4770      	bxeq	lr
   8e8f2:	f110 0f00 	cmn.w	r0, #0
   8e8f6:	ea91 0f03 	teq	r1, r3
   8e8fa:	bf58      	it	pl
   8e8fc:	4299      	cmppl	r1, r3
   8e8fe:	bf08      	it	eq
   8e900:	4290      	cmpeq	r0, r2
   8e902:	bf2c      	ite	cs
   8e904:	17d8      	asrcs	r0, r3, #31
   8e906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8e90a:	f040 0001 	orr.w	r0, r0, #1
   8e90e:	4770      	bx	lr
   8e910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e918:	d102      	bne.n	8e920 <__cmpdf2+0x64>
   8e91a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e91e:	d107      	bne.n	8e930 <__cmpdf2+0x74>
   8e920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e928:	d1d6      	bne.n	8e8d8 <__cmpdf2+0x1c>
   8e92a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e92e:	d0d3      	beq.n	8e8d8 <__cmpdf2+0x1c>
   8e930:	f85d 0b04 	ldr.w	r0, [sp], #4
   8e934:	4770      	bx	lr
   8e936:	bf00      	nop

0008e938 <__aeabi_cdrcmple>:
   8e938:	4684      	mov	ip, r0
   8e93a:	4610      	mov	r0, r2
   8e93c:	4662      	mov	r2, ip
   8e93e:	468c      	mov	ip, r1
   8e940:	4619      	mov	r1, r3
   8e942:	4663      	mov	r3, ip
   8e944:	e000      	b.n	8e948 <__aeabi_cdcmpeq>
   8e946:	bf00      	nop

0008e948 <__aeabi_cdcmpeq>:
   8e948:	b501      	push	{r0, lr}
   8e94a:	f7ff ffb7 	bl	8e8bc <__cmpdf2>
   8e94e:	2800      	cmp	r0, #0
   8e950:	bf48      	it	mi
   8e952:	f110 0f00 	cmnmi.w	r0, #0
   8e956:	bd01      	pop	{r0, pc}

0008e958 <__aeabi_dcmpeq>:
   8e958:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e95c:	f7ff fff4 	bl	8e948 <__aeabi_cdcmpeq>
   8e960:	bf0c      	ite	eq
   8e962:	2001      	moveq	r0, #1
   8e964:	2000      	movne	r0, #0
   8e966:	f85d fb08 	ldr.w	pc, [sp], #8
   8e96a:	bf00      	nop

0008e96c <__aeabi_dcmplt>:
   8e96c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e970:	f7ff ffea 	bl	8e948 <__aeabi_cdcmpeq>
   8e974:	bf34      	ite	cc
   8e976:	2001      	movcc	r0, #1
   8e978:	2000      	movcs	r0, #0
   8e97a:	f85d fb08 	ldr.w	pc, [sp], #8
   8e97e:	bf00      	nop

0008e980 <__aeabi_dcmple>:
   8e980:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e984:	f7ff ffe0 	bl	8e948 <__aeabi_cdcmpeq>
   8e988:	bf94      	ite	ls
   8e98a:	2001      	movls	r0, #1
   8e98c:	2000      	movhi	r0, #0
   8e98e:	f85d fb08 	ldr.w	pc, [sp], #8
   8e992:	bf00      	nop

0008e994 <__aeabi_dcmpge>:
   8e994:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e998:	f7ff ffce 	bl	8e938 <__aeabi_cdrcmple>
   8e99c:	bf94      	ite	ls
   8e99e:	2001      	movls	r0, #1
   8e9a0:	2000      	movhi	r0, #0
   8e9a2:	f85d fb08 	ldr.w	pc, [sp], #8
   8e9a6:	bf00      	nop

0008e9a8 <__aeabi_dcmpgt>:
   8e9a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e9ac:	f7ff ffc4 	bl	8e938 <__aeabi_cdrcmple>
   8e9b0:	bf34      	ite	cc
   8e9b2:	2001      	movcc	r0, #1
   8e9b4:	2000      	movcs	r0, #0
   8e9b6:	f85d fb08 	ldr.w	pc, [sp], #8
   8e9ba:	bf00      	nop

0008e9bc <__aeabi_dcmpun>:
   8e9bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e9c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e9c4:	d102      	bne.n	8e9cc <__aeabi_dcmpun+0x10>
   8e9c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e9ca:	d10a      	bne.n	8e9e2 <__aeabi_dcmpun+0x26>
   8e9cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e9d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e9d4:	d102      	bne.n	8e9dc <__aeabi_dcmpun+0x20>
   8e9d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e9da:	d102      	bne.n	8e9e2 <__aeabi_dcmpun+0x26>
   8e9dc:	f04f 0000 	mov.w	r0, #0
   8e9e0:	4770      	bx	lr
   8e9e2:	f04f 0001 	mov.w	r0, #1
   8e9e6:	4770      	bx	lr

0008e9e8 <__aeabi_d2iz>:
   8e9e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e9ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8e9f0:	d215      	bcs.n	8ea1e <__aeabi_d2iz+0x36>
   8e9f2:	d511      	bpl.n	8ea18 <__aeabi_d2iz+0x30>
   8e9f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8e9f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8e9fc:	d912      	bls.n	8ea24 <__aeabi_d2iz+0x3c>
   8e9fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ea02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ea06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ea0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ea0e:	fa23 f002 	lsr.w	r0, r3, r2
   8ea12:	bf18      	it	ne
   8ea14:	4240      	negne	r0, r0
   8ea16:	4770      	bx	lr
   8ea18:	f04f 0000 	mov.w	r0, #0
   8ea1c:	4770      	bx	lr
   8ea1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8ea22:	d105      	bne.n	8ea30 <__aeabi_d2iz+0x48>
   8ea24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8ea28:	bf08      	it	eq
   8ea2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8ea2e:	4770      	bx	lr
   8ea30:	f04f 0000 	mov.w	r0, #0
   8ea34:	4770      	bx	lr
   8ea36:	bf00      	nop
   8ea38:	78383025 	.word	0x78383025
   8ea3c:	00000000 	.word	0x00000000
   8ea40:	62616e45 	.word	0x62616e45
   8ea44:	676e696c 	.word	0x676e696c
   8ea48:	41535520 	.word	0x41535520
   8ea4c:	0a305452 	.word	0x0a305452
   8ea50:	00000000 	.word	0x00000000
   8ea54:	3a525245 	.word	0x3a525245
   8ea58:	766e4920 	.word	0x766e4920
   8ea5c:	64696c61 	.word	0x64696c61
   8ea60:	41535520 	.word	0x41535520
   8ea64:	43205452 	.word	0x43205452
   8ea68:	69666e6f 	.word	0x69666e6f
   8ea6c:	61727567 	.word	0x61727567
   8ea70:	6e6f6974 	.word	0x6e6f6974
   8ea74:	63617020 	.word	0x63617020
   8ea78:	3f74656b 	.word	0x3f74656b
   8ea7c:	0000000a 	.word	0x0000000a

0008ea80 <LED_DESCRIPTOR>:
   8ea80:	0000001d 00000001 0000001f 00000001     ................
   8ea90:	74697845 20676e69 68746977 61747320     Exiting with sta
   8eaa0:	20737574 0a2e6425 00000000              tus %d......

0008eaac <BOS_DESC>:
   8eaac:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8eabc:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
   8eacc:	00000000 00000000 00000000 aaaaaa00     ................
   8eadc:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8eaec:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8eafc:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008eb08 <_global_impure_ptr>:
   8eb08:	20000508 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8eb18:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8eb28:	66656463 00000000 33323130 37363534     cdef....01234567
   8eb38:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8eb48:	0000296c 00000030                       l)..0...

0008eb50 <blanks.7335>:
   8eb50:	20202020 20202020 20202020 20202020                     

0008eb60 <zeroes.7336>:
   8eb60:	30303030 30303030 30303030 30303030     0000000000000000

0008eb70 <blanks.7328>:
   8eb70:	20202020 20202020 20202020 20202020                     

0008eb80 <zeroes.7329>:
   8eb80:	30303030 30303030 30303030 30303030     0000000000000000
   8eb90:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8eba0:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ebb0:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ebc0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ebd0:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8ebe0:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8ebf0:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8ec00:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8ec10:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8ec20:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8ec30:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8ec40:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8ec50:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8ec60:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8ec70:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8ec80:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8ec90:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8eca0:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8ecb0:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008ecc0 <__mprec_bigtens>:
   8ecc0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8ecd0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8ece0:	7f73bf3c 75154fdd                       <.s..O.u

0008ece8 <__mprec_tens>:
   8ece8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8ecf8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8ed08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8ed18:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ed28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ed38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ed48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ed58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ed68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ed78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8ed88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ed98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8eda8:	79d99db4 44ea7843                       ...yCx.D

0008edb0 <p05.6122>:
   8edb0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8edc0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8edd0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8ede0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8edf0:	2520656e 25732564 00000a73              ne %d%s%s...

0008edfc <_ctype_>:
   8edfc:	20202000 20202020 28282020 20282828     .         ((((( 
   8ee0c:	20202020 20202020 20202020 20202020                     
   8ee1c:	10108820 10101010 10101010 10101010      ...............
   8ee2c:	04040410 04040404 10040404 10101010     ................
   8ee3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ee4c:	01010101 01010101 01010101 10101010     ................
   8ee5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ee6c:	02020202 02020202 02020202 10101010     ................
   8ee7c:	00000020 00000000 00000000 00000000      ...............
   8ee8c:	00000000 00000000 00000000 00000000     ................
   8ee9c:	00000000 00000000 00000000 00000000     ................
   8eeac:	00000000 00000000 00000000 00000000     ................
   8eebc:	00000000 00000000 00000000 00000000     ................
   8eecc:	00000000 00000000 00000000 00000000     ................
   8eedc:	00000000 00000000 00000000 00000000     ................
   8eeec:	00000000 00000000 00000000 00000000     ................
   8eefc:	00000000                                ....

0008ef00 <_init>:
   8ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ef02:	bf00      	nop
   8ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ef06:	bc08      	pop	{r3}
   8ef08:	469e      	mov	lr, r3
   8ef0a:	4770      	bx	lr

0008ef0c <__init_array_start>:
   8ef0c:	0008ad15 	.word	0x0008ad15

0008ef10 <__frame_dummy_init_array_entry>:
   8ef10:	000800e1                                ....

0008ef14 <_fini>:
   8ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ef16:	bf00      	nop
   8ef18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ef1a:	bc08      	pop	{r3}
   8ef1c:	469e      	mov	lr, r3
   8ef1e:	4770      	bx	lr

0008ef20 <__do_global_dtors_aux_fini_array_entry>:
   8ef20:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000288 	.word	0x20000288
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482072     ChipWhisperer Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 000800ae 00000002     ................
20000310:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000320:	00000000 00880000 00070004 0044002a     ............*.D.
20000330:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000340:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000350:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
20000360:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
20000370:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
20000380:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
20000390:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200003a0:	00390045 0000007d 00000000              E.9.}.......

200003ac <udi_api_cdc_comm>:
200003ac:	00084f21 00085175 000851d1 0008529f     !O..uQ...Q...R..
200003bc:	00000000                                ....

200003c0 <udi_api_cdc_data>:
200003c0:	00085081 00085195 00085291 0008529f     .P...Q...R...R..
200003d0:	000852ad                                .R..

200003d4 <udc_device_desc>:
200003d4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003e4:	00000103                                ....

200003e8 <udc_device_qual>:
200003e8:	0200060a 40000000 00000001              .......@....

200003f4 <udc_desc_fs>:
200003f4:	00620209 80000103 000409fa ffff0200     ..b.............
20000404:	050700ff 00400281 02050700 00004002     ......@......@..
20000414:	02010b08 00010202 00010409 01020201     ................
20000424:	00240500 24040110 24050202 05020106     ..$....$...$....
20000434:	02030124 03830507 09100040 02000204     $.......@.......
20000444:	0000000a 02850507 07000040 40020605     ........@......@
20000454:	00000000                                ....

20000458 <udc_desc_hs>:
20000458:	00620209 80000103 000409fa ffff0200     ..b.............
20000468:	050700ff 02000281 02050700 00020002     ................
20000478:	02010b08 00010202 00010409 01020201     ................
20000488:	00240500 24040110 24050202 05020106     ..$....$...$....
20000498:	02030124 03830507 09100040 02000204     $.......@.......
200004a8:	0000000a 02850507 07000200 00020605     ................
200004b8:	00000002                                ....

200004bc <udi_apis>:
200004bc:	200004f0 200003ac 200003c0              ... ... ... 

200004c8 <udc_config_lsfs>:
200004c8:	200003f4 200004bc                       ... ... 

200004d0 <udc_config_hs>:
200004d0:	20000458 200004bc                       X.. ... 

200004d8 <udc_config>:
200004d8:	200003d4 200004c8 200003d4 200003e8     ... ... ... ... 
200004e8:	200004d0 00000000                       ... ....

200004f0 <udi_api_vendor>:
200004f0:	00085a7d 00085abd 00085ad9 00085b2d     }Z...Z...Z..-[..
20000500:	00000000                                ....

20000504 <_impure_ptr>:
20000504:	20000508                                ... 

20000508 <impure_data>:
20000508:	00000000 200007f4 2000085c 200008c4     ....... \.. ... 
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000001 00000000     ................
200005b8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000 00000000 00000000     ................
20000878:	00000000 00000000 00000000 00000000     ................
20000888:	00000000 00000000 00000000 00000000     ................
20000898:	00000000 00000000 00000000 00000000     ................
200008a8:	00000000 00000000 00000000 00000000     ................
200008b8:	00000000 00000000 00000000 00000000     ................
200008c8:	00000000 00000000 00000000 00000000     ................
200008d8:	00000000 00000000 00000000 00000000     ................
200008e8:	00000000 00000000 00000000 00000000     ................
200008f8:	00000000 00000000 00000000 00000000     ................
20000908:	00000000 00000000 00000000 00000000     ................
20000918:	00000000 00000000 00000000 00000000     ................
20000928:	00000000 00000000                       ........

20000930 <__atexit_recursive_mutex>:
20000930:	2000243c                                <$. 

20000934 <__global_locale>:
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	00000043 00000000 00000000 00000000     C...............
20000964:	00000000 00000000 00000000 00000000     ................
20000974:	00000043 00000000 00000000 00000000     C...............
20000984:	00000000 00000000 00000000 00000000     ................
20000994:	00000043 00000000 00000000 00000000     C...............
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000043 00000000 00000000 00000000     C...............
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000043 00000000 00000000 00000000     C...............
200009e4:	00000000 00000000 00000000 00000000     ................
200009f4:	00000043 00000000 00000000 00000000     C...............
20000a04:	00000000 00000000 00000000 00000000     ................
20000a14:	0008dd39 0008cd01 00000000 0008edfc     9...............
20000a24:	0008ec3c 0008edc8 0008edc8 0008edc8     <...............
20000a34:	0008edc8 0008edc8 0008edc8 0008edc8     ................
20000a44:	0008edc8 0008edc8 ffffffff ffffffff     ................
20000a54:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
20000a64:	00000000 00000000 00000000 00000000     ................
20000a74:	00000000 00000000 53410000 00494943     ..........ASCII.
20000a84:	00000000 00000000 00000000 00000000     ................
20000a94:	00000000 00000000 00000000              ............

20000aa0 <__malloc_av_>:
20000aa0:	00000000 00000000 20000aa0 20000aa0     ........... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08 20000e10 20000e10     ... ... ... ... 
20000e20:	20000e18 20000e18 20000e20 20000e20     ... ...  ..  .. 
20000e30:	20000e28 20000e28 20000e30 20000e30     (.. (.. 0.. 0.. 
20000e40:	20000e38 20000e38 20000e40 20000e40     8.. 8.. @.. @.. 
20000e50:	20000e48 20000e48 20000e50 20000e50     H.. H.. P.. P.. 
20000e60:	20000e58 20000e58 20000e60 20000e60     X.. X.. `.. `.. 
20000e70:	20000e68 20000e68 20000e70 20000e70     h.. h.. p.. p.. 
20000e80:	20000e78 20000e78 20000e80 20000e80     x.. x.. ... ... 
20000e90:	20000e88 20000e88 20000e90 20000e90     ... ... ... ... 
20000ea0:	20000e98 20000e98                       ... ... 

20000ea8 <__malloc_sbrk_base>:
20000ea8:	ffffffff                                ....

20000eac <__malloc_trim_threshold>:
20000eac:	00020000                                ....
